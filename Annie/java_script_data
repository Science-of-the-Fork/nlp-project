,repo_name,url,language,readme_content
0,twbs/bootstrap,https://github.com/twbs/bootstrap/blob/main/README.md,JavaScript,"        Bootstrap  Sleek, intuitive, and powerful front-end framework for faster and easier web development.    Explore Bootstrap docs »      Report bug  ·  Request feature  ·  Themes  ·  BlogBootstrap 5Our default branch is for development of our Bootstrap 5 release. Head to the v4-dev branch to view the readme, documentation, and source code for Bootstrap 4.Table of contentsQuick startStatusWhat's includedBugs and feature requestsDocumentationContributingCommunityVersioningCreatorsThanksCopyright and licenseQuick startSeveral quick start options are available:Download the latest releaseClone the repo: git clone https://github.com/twbs/bootstrap.gitInstall with npm: npm install bootstrap@v5.3.1Install with yarn: yarn add bootstrap@v5.3.1Install with Composer: composer require twbs/bootstrap:5.3.1Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sassRead the Getting started page for information on the framework contents, templates, examples, and more.StatusWhat's includedWithin the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations.  Download contentsbootstrap/├── css/│   ├── bootstrap-grid.css│   ├── bootstrap-grid.css.map│   ├── bootstrap-grid.min.css│   ├── bootstrap-grid.min.css.map│   ├── bootstrap-grid.rtl.css│   ├── bootstrap-grid.rtl.css.map│   ├── bootstrap-grid.rtl.min.css│   ├── bootstrap-grid.rtl.min.css.map│   ├── bootstrap-reboot.css│   ├── bootstrap-reboot.css.map│   ├── bootstrap-reboot.min.css│   ├── bootstrap-reboot.min.css.map│   ├── bootstrap-reboot.rtl.css│   ├── bootstrap-reboot.rtl.css.map│   ├── bootstrap-reboot.rtl.min.css│   ├── bootstrap-reboot.rtl.min.css.map│   ├── bootstrap-utilities.css│   ├── bootstrap-utilities.css.map│   ├── bootstrap-utilities.min.css│   ├── bootstrap-utilities.min.css.map│   ├── bootstrap-utilities.rtl.css│   ├── bootstrap-utilities.rtl.css.map│   ├── bootstrap-utilities.rtl.min.css│   ├── bootstrap-utilities.rtl.min.css.map│   ├── bootstrap.css│   ├── bootstrap.css.map│   ├── bootstrap.min.css│   ├── bootstrap.min.css.map│   ├── bootstrap.rtl.css│   ├── bootstrap.rtl.css.map│   ├── bootstrap.rtl.min.css│   └── bootstrap.rtl.min.css.map└── js/    ├── bootstrap.bundle.js    ├── bootstrap.bundle.js.map    ├── bootstrap.bundle.min.js    ├── bootstrap.bundle.min.js.map    ├── bootstrap.esm.js    ├── bootstrap.esm.js.map    ├── bootstrap.esm.min.js    ├── bootstrap.esm.min.js.map    ├── bootstrap.js    ├── bootstrap.js.map    ├── bootstrap.min.js    └── bootstrap.min.js.mapWe provide compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). Source maps (bootstrap.*.map) are available for use with certain browsers' developer tools. Bundled JS files (bootstrap.bundle.js and minified bootstrap.bundle.min.js) include Popper.Bugs and feature requestsHave a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.DocumentationBootstrap's documentation, included in this repo in the root directory, is built with Hugo and publicly hosted on GitHub Pages at https://getbootstrap.com/. The docs may also be run locally.Documentation search is powered by Algolia's DocSearch.Running documentation locallyRun npm install to install the Node.js dependencies, including Hugo (the site builder).Run npm run test (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.From the root /bootstrap directory, run npm run docs-serve in the command line.Open http://localhost:9001/ in your browser, and voilà.Learn more about using Hugo by reading its documentation.Documentation for previous releasesYou can find all our previous releases docs on https://getbootstrap.com/docs/versions/.Previous releases and their documentation are also available for download.ContributingPlease read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.CommunityGet updates on Bootstrap's development and chat with the project maintainers and community members.Follow @getbootstrap on Twitter.Read and subscribe to The Official Bootstrap Blog.Ask and explore our GitHub Discussions.Chat with fellow Bootstrappers in IRC. On the irc.libera.chat server, in the #bootstrap channel.Implementation help may be found at Stack Overflow (tagged bootstrap-5).Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.VersioningFor transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines. Sometimes we screw up, but we adhere to those rules whenever possible.See the Releases section of our GitHub project for changelogs for each release version of Bootstrap. Release announcement posts on the official Bootstrap blog contain summaries of the most noteworthy changes made in each release.CreatorsMark Ottohttps://twitter.com/mdohttps://github.com/mdoJacob Thorntonhttps://twitter.com/fathttps://github.com/fatThanks  Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!  Thanks to Netlify for providing us with Deploy Previews!SponsorsSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]BackersThank you to all our backers! 🙏 [Become a backer]Copyright and licenseCode and documentation copyright 2011–2023 the Bootstrap Authors. Code released under the MIT License. Docs released under Creative Commons."
1,nightscout/cgm-remote-monitor,https://github.com/nightscout/cgm-remote-monitor/blob/master/README.md,JavaScript,"Nightscout Web Monitor (a.k.a. cgm-remote-monitor) This acts as a web-based CGM (Continuous Glucose Monitor) to allowmultiple caregivers to remotely view a patient's glucose data inreal time.  The server reads a MongoDB which is intended to be datafrom a physical CGM, where it sends new SGV (sensor glucose values) asthe data becomes available.  The data is then displayed graphicallyand blood glucose values are predicted 0.5 hours ahead using anautoregressive second order model.  Alarms are generated for high andlow values, which can be cleared by any watcher of the data.Looking for documentation?End user?Nightscout documentation is currently split to two locations. This page lists all the configuration options inNightscout and is useful for users who've already gone through the installation process. IF you're lookingfor the documentation that looks like it's written for non-programmers, that's located at nightscout.github.io.Older documentation is available at nightscout.info.Developer?See CONTRIBUTING.md#WeAreNotWaiting and this is why.Table of ContentsInstallSupported configurations:Recommended minimum browser versions for using Nightscout:Windows installation software requirements:Installation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Installation notes for Microsoft Azure, Windows:DevelopmentUsageUpdating my version?Configure my uploader to matchNightscout APIExample QueriesEnvironmentRequiredFeaturesAlarmsCorePredefined values for your browser settings (optional)Predefined values for your server settings (optional)ViewsPluginsDefault Pluginsdelta (BG Delta)direction (BG Direction)upbat (Uploader Battery)timeago (Time Ago)devicestatus (Device Status)errorcodes (CGM Error Codes)ar2 (AR2 Forecasting)simplealarms (Simple BG Alarms)profile (Treatment Profile)Advanced Plugins:careportal (Careportal)boluscalc (Bolus Wizard)food (Custom Foods)rawbg (Raw BG)iob (Insulin-on-Board)cob (Carbs-on-Board)bwp (Bolus Wizard Preview)cage (Cannula Age)sage (Sensor Age)iage (Insulin Age)bage (Battery Age)treatmentnotify (Treatment Notifications)basal (Basal Profile)bolus (Bolus Rendering)bridge (Share2Nightscout bridge)mmconnect (MiniMed Connect bridge)pump (Pump Monitoring)openaps (OpenAPS)loop (Loop)override (Override Mode)xdripjs (xDrip-js)alexa (Amazon Alexa)googlehome (Google Home/DialogFLow)speech (Speech)cors (CORS)Extended SettingsPushoverIFTTT MakerTreatment ProfileSetting environment variablesVagrant installMore questions?Browser testing suite provided byLicenseInstallSupported configurations:If you plan to use Nightscout, we recommend using Heroku as this is free and easy to use.We used to recommend hostig at Azure, but the resource needs of Nightscout have grown over the years and Azure won't comfortably run Nightscoutanymore in the free tier. If you're hosting in Azure and looking to update your site, we recommend youswitch from Azure to Herokuas you're likely to hit issues in the process of updating the site.Nightscout Setup with Heroku (recommended)While you can install Nightscout on a virtual server or a Raspberry Pi, we do not recommend this unless you have at least someexperience hosting Node applications and development using the toolchain in use with Nightscout. Heroku automates all of thehosting for you and even many of the dvelopers run their production sites in Heroku due to convenience.If you're a hosting provider and want to provide our users additional free hosting options,you're welcome to issue a documentation pull request with instructions on how to setup Nightscout on your system.Recommended minimum browser versions for using Nightscout:Older versions of the browsers might work, but are untested.Android 4iOS 6Chrome 35Edge 17Firefox 61Opera 12.1Safari 6 (macOS 10.7)Internet Explorer: not supportedSome features may not work with devices/browsers on the older end of these requirements.Windows installation software requirements:Node.js Latest Node 12 LTS. Node versions that do not have the latest security patches will not work. Use Install instructions for Node or use bin/setup.sh)MongoDB 3.x or later. MongoDB 2.4 is only supported for Raspberry Pi.As a non-root user clone this repo then install dependencies into the root of the project:$ npm installInstallation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Your site redirects insecure connections to https by default. If you use a reverse proxy like nginx or Apache to handle the connection security for you, make sure it sets the X-Forwarded-Proto header. Otherwise nightscout will be unable to know if it was called through a secure connection and will try to redirect you to the https version. If you're unable to set this Header, you can change the INSECURE_USE_HTTP setting in nightscout to true in order to allow insecure connections without being redirected.In case you use a proxy. Do not use an external network interfaces for hosting Nightscout. Make sure the unsecure port is not available from a remote network connectionHTTP Strict Transport Security (HSTS) headers are enabled by default, use settings SECURE_HSTS_HEADER and SECURE_HSTS_HEADER_*See Predefined values for your server settings for more detailsInstallation notes for Microsoft Azure, Windows:If deploying the software to Microsoft Azure, you must set ** in the app settings for WEBSITE_NODE_DEFAULT_VERSION and SCM_COMMAND_IDLE_TIMEOUT before you deploy the latest Nightscout or the site deployment will likely fail. Other hosting environments do not require this setting. Additionally, if using the Azure free hosting tier, the installation might fail due to resource constraints imposed by Azure on the free hosting. Please set the following settings to the environment in Azure:WEBSITE_NODE_DEFAULT_VERSION=10.15.2SCM_COMMAND_IDLE_TIMEOUT=300See install MongoDB, Node.js, and Nightscouton a single Windows system. if you want to host your Nightscout outside of the cloud. Although the instructions are intended for Windows Server the procedure is compatible with client versions of Windows such as Windows 7 and Windows 10.If you deploy to Windows and want to develop or test you need to install Cygwin (use setup-x86_64.exe and make sure to install build-essential package. Test your configuration by executing make and check if all tests are ok.DevelopmentWant to help with development, or just see how Nightscout works? Great! See CONTRIBUTING.md for development-related documentation.UsageThe data being uploaded from the server to the client is from a MongoDB server such as [MongoDB Atlas][https://www.mongodb.com].Updating my version?The easiest way to update your version of cgm-remote-monitor to the latest version is to use the update tool. A step-by-step guide is available [here][http://www.nightscout.info/wiki/welcome/how-to-update-to-latest-cgm-remote-monitor-aka-cookie].To downgrade to an older version, follow [this guide][http://www.nightscout.info/wiki/welcome/how-to-deploy-an-older-version-of-nightscout].Configure my uploader to matchUse the autoconfigure tool to sync an uploader to your config.Nightscout APIThe Nightscout API enables direct access to your data without the need for Mongo access.You can find CGM data in /api/v1/entries, Care Portal Treatments in /api/v1/treatments, and Treatment Profiles in /api/v1/profile.The server status and settings are available from /api/v1/status.json.By default the /entries and /treatments APIs limit results to the the most recent 10 values from the last 2 days.You can get many more results, by using the count, date, dateString, and created_at parameters, depending on the type of data you're looking for.Once you've installed Nightscout, you can access API documentation by loading /api-docs/ URL in your instance.Example Queries(replace http://localhost:1337 with your own URL)100's: http://localhost:1337/api/v1/entries.json?find[sgv]=100Count of 100's in a month: http://localhost:1337/api/v1/count/entries/where?find[dateString][$gte]=2016-09&find[dateString][$lte]=2016-10&find[sgv]=100BGs between 2 days: http://localhost:1337/api/v1/entries/sgv.json?find[dateString][$gte]=2015-08-28&find[dateString][$lte]=2015-08-30Juice Box corrections in a year: http://localhost:1337/api/v1/treatments.json?count=1000&find[carbs]=15&find[eventType]=Carb+Correction&find[created_at][$gte]=2015Boluses over 2U: http://localhost:1337/api/v1/treatments.json?find[insulin][$gte]=2The API is Swagger enabled, so you can generate client code to make working with the API easy.To learn more about the Nightscout API, visit https://YOUR-SITE.com/api-docs/ or review swagger.yaml.EnvironmentVARIABLE (default) - descriptionRequiredMONGODB_URI - The connection string for your Mongo database. Something like mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout.API_SECRET - A secret passphrase that must be at least 12 characters long.MONGODB_COLLECTION (entries) - The Mongo collection where CGM entries are stored.DISPLAY_UNITS (mg/dl) - Options are mg/dl or mmol/L (or just mmol).  Setting to mmol/L puts the entire server into mmol/L mode by default, no further settings needed.FeaturesENABLE - Used to enable optional features, expects a space delimited list, such as: careportal rawbg iob, see plugins belowDISABLE - Used to disable default features, expects a space delimited list, such as: direction upbat, see plugins belowBASE_URL - Used for building links to your site's API, i.e. Pushover callbacks, usually the URL of your Nightscout site.AUTH_DEFAULT_ROLES (readable) - possible values readable, denied, or any valid rolename.  When readable, anyone can view Nightscout without a token.Setting it to denied will require a token from every visit, using status-only will enable api-secret based login.IMPORT_CONFIG - Used to import settings and extended settings from a url such as a gist.  Structure of file should be something like: {\""settings\"": {\""theme\"": \""colors\""}, \""extendedSettings\"": {\""upbat\"": {\""enableAlerts\"": true}}}TREATMENTS_AUTH (on) - possible values on or off. Deprecated, if set to off the careportal role will be added to AUTH_DEFAULT_ROLESAlarmsThese alarm setting affect all delivery methods (browser, Pushover, IFTTT, etc.). Values and settings entered here will be the defaults for new browser views, but will be overridden if different choices are made in the settings UI.ALARM_TYPES (simple if any BG_* ENV's are set, otherwise predict) - currently 2 alarm types are supported, and can be used independently or combined.  The simple alarm type only compares the current BG to BG_ thresholds above, the predict alarm type uses highly tuned formula that forecasts where the BG is going based on it's trend.  predict DOES NOT currently use any of the BG_* ENV'sBG_HIGH (260) - the high BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)BG_TARGET_TOP (180) - the top of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_TARGET_BOTTOM (80) - the bottom of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_LOW (55) - the low BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)ALARM_URGENT_HIGH (on) - possible values on or offALARM_URGENT_HIGH_MINS (30 60 90 120) - Number of minutes to snooze urgent high alarms, space separated for options in browser, first used for pushoverALARM_HIGH (on) - possible values on or offALARM_HIGH_MINS (30 60 90 120) - Number of minutes to snooze high alarms, space separated for options in browser, first used for pushoverALARM_LOW (on) - possible values on or offALARM_LOW_MINS (15 30 45 60) - Number of minutes to snooze low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_LOW (on) - possible values on or offALARM_URGENT_LOW_MINS (15 30 45) - Number of minutes to snooze urgent low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_MINS (30 60 90 120) - Number of minutes to snooze urgent alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverALARM_WARN_MINS (30 60 90 120) - Number of minutes to snooze warning alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverCoreMONGO_TREATMENTS_COLLECTION (treatments) -The collection used to store treatments entered in the Care Portal, see the ENABLE env var aboveMONGO_DEVICESTATUS_COLLECTION(devicestatus) - The collection used to store device status information such as uploader batteryMONGO_PROFILE_COLLECTION(profile) - The collection used to store your profilesMONGO_FOOD_COLLECTION(food) - The collection used to store your food databaseMONGO_ACTIVITY_COLLECTION(activity) - The collection used to store activity dataPORT (1337) - The port that the node.js application will listen on.HOSTNAME - The hostname that the node.js application will listen on, null by default for any hostname for IPv6 you may need to use ::.SSL_KEY - Path to your ssl key file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to your privkey.pem file (private key).SSL_CERT - Path to your ssl cert file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to fullchain.pem file (cert + ca).SSL_CA - Path to your ssl ca file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to chain.pem file (chain).HEARTBEAT (60)  - Number of seconds to wait in between database checksDEBUG_MINIFY (true)  - Debug option, setting to false will disable bundle minification to help tracking down error and speed up developmentDE_NORMALIZE_DATES(true) - The Nightscout REST API normalizes all entered dates to UTC zone. Some Nightscout clients have broken date deserialization logic and expect to received back dates in zoned formats. Setting this variable to true causes the REST API to serialize dates sent to Nightscout in zoned format back to zoned format when served to clients over REST.Predefined values for your browser settings (optional)TIME_FORMAT (12)- possible values 12 or 24DAY_START (7.0) - time for start of day (0.0 - 24.0) for features using day time / night time optionsDAY_END (21.0) - time for end of day (0.0 - 24.0) for features using day time / night time optionsNIGHT_MODE (off) - possible values on or offSHOW_RAWBG (never) - possible values always, never or noiseCUSTOM_TITLE (Nightscout) - Title for the main viewTHEME (colors) - possible values default, colors, or colorblindfriendlyALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmSHOW_PLUGINS - enabled plugins that should have their visualizations shown, defaults to all enabledSHOW_FORECAST (ar2) - plugin forecasts that should be shown by default, supports space delimited values such as \""ar2 openaps\""LANGUAGE (en) - language of Nightscout. If not available english is usedCurrently supported language codes are: bg (Български), cs (Čeština), de (Deutsch), dk (Dansk), el (Ελληνικά), en (English), es (Español), fi (Suomi), fr (Français), he (עברית), hr (Hrvatski), hu (magyar), it (Italiano), ko (한국어), nb (Norsk (Bokmål)), nl (Nederlands), pl (Polski), pt (Português (Brasil)), ro (Română), ru (Русский), sk (Slovenčina), sv (Svenska), tr (Turkish), zh_cn (中文（简体)), zh_tw (中文（繁體))SCALE_Y (log) - The type of scaling used for the Y axis of the charts system wide.The default log (logarithmic) option will let you see more detail towards the lower range, while still showing the full CGM range.The linear option has equidistant tick marks; the range used is dynamic so that space at the top of chart isn't wasted.The log-dynamic is similar to the default log options, but uses the same dynamic range and the linear scale.EDIT_MODE (on) - possible values on or off. Enables the icon allowing for editing of treatments in the main view.Predefined values for your server settings (optional)INSECURE_USE_HTTP (false) - Redirect unsafe http traffic to https. Possible values false, or true. Your site redirects to https by default. If you don't want that from Nightscout, but want to implement that with a Nginx or Apache proxy, set INSECURE_USE_HTTP to true. Note: This will allow (unsafe) http traffic to your Nightscout instance and is not recommended.SECURE_HSTS_HEADER (true) - Add HTTP Strict Transport Security (HSTS) header. Possible values false, or true.SECURE_HSTS_HEADER_INCLUDESUBDOMAINS (false) - includeSubdomains options for HSTS. Possible values false, or true.SECURE_HSTS_HEADER_PRELOAD (false) - ask for preload in browsers for HSTS. Possible values false, or true.SECURE_CSP (false) - Add Content Security Policy headers. Possible values false, or true.SECURE_CSP_REPORT_ONLY (false) - If set to true allows to experiment with policies by monitoring (but not enforcing) their effects. Possible values false, or true.ViewsNightscout allows to create custom, simplified views using a predefined set of elements. This option is available under [+] link in the main menu.List of available items:SGV - Sensor Glucose ValueSGV age - time since the last SGV readSGV delta - change of SGV in the last 5 minutesTrend arrow - icon of the SG trendTime - current timeLine break - invisible item that will move following items to the next line (by default all are showing on the same level)All visible items have Size property which allows to customize the view even more. Also, all items may appear multiple times on the view.Apart from adding items, it is possible to customize other aspects of the views, like selecting Color or Black background. The first one will indicate current BG threshold (green = in range; blue = below range; yellow = above range; red = urgent below/above).Show SGV age option will make SGV age item appear Always or only if the predefined threshold is reached: Only after threshold. Breaching SGV age threshold will also make Color background turn grey and strike through SGV.Clock view configurator will generate an URL (available under Open my clock view! link) that could be bookmarked.There are a few default views available from the main menu:Clock - Shows current BG, trend arrow, and time of day. Grey text on a black background.Color - Shows current BG and trend arrow. White text on a color background.Simple - Shows current BG. Grey text on a black background.If you launch one of these views in a fullscreen view in iOS, you can use a left-to-right swipe gesture to exit the view.Split ViewSome users will need easy access to multiple Nightscout views at the same time. We have a special view for this case, accessed on /split path on your Nightscout URL. The view supports any number of sites between 1 to 8 way split, where the content for the screen can be loaded from multiple Nightscout instances. Note you still need to host separate instances for each Nightscout being monitored including the one that hosts the split view page - these variables only add the ability to load multiple views into one browser page. To set the URLs from which the content is loaded, set:FRAME_URL_1 - URL where content is loaded, for the first view (increment the number up to 8 to get more views)FRAME_NAME_1 - Name for the first split view portion of the screen (increment the number to name more views)PluginsPlugins are used extend the way information is displayed, how notifications are sent, alarms are triggered, and more.The built-in/example plugins that are available by default are listed below.  The plugins may still need to be enabled by adding to the ENABLE environment variable.Default PluginsThese can be disabled by adding them to the DISABLE variable, for example DISABLE=\""direction upbat\""delta (BG Delta)Calculates and displays the change between the last 2 BG values.direction (BG Direction)Displays the trend direction.upbat (Uploader Battery)Displays the most recent battery status from the uploader phone. . Use these extended setting to adjust behavior:UPBAT_ENABLE_ALERTS (false) - Set to true to enable uploader battery alarms via Pushover and IFTTT.UPBAT_WARN (30) - Minimum battery percent to trigger warning.UPBAT_URGENT (20) - Minimum battery percent to trigger urgent alarm.timeago (Time Ago)Displays the time since last CGM entry. Use these extended setting to adjust behavior:TIMEAGO_ENABLE_ALERTS (false) - Set to true to enable stale data alarms via Pushover and IFTTT.ALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmdevicestatus (Device Status)Used by upbat and other plugins to display device status info.  Supports the DEVICESTATUS_ADVANCED=\""true\"" extended setting to send all device statuses to the client for retrospective use and to support other plugins.errorcodes (CGM Error Codes)Generates alarms for CGM codes 9 (hourglass) and 10 (???).Use extended settings to adjust what errorcodes trigger notifications and alarms:ERRORCODES_INFO (1 2 3 4 5 6 7 8) - By default the needs calibration (blood drop) and other codes below 9 generate an info level notification, set to a space separate list of number or off to disableERRORCODES_WARN (off) - By default there are no warning configured, set to a space separate list of numbers or off to disableERRORCODES_URGENT (9 10) - By default the hourglass and ??? generate an urgent alarm, set to a space separate list of numbers or off to disablear2 (AR2 Forecasting)Generates alarms based on forecasted values. See Forecasting using AR2 algorithmEnabled by default if no thresholds are set OR ALARM_TYPES includes predict.Use extended settings to adjust AR2 behavior:AR2_CONE_FACTOR (2) - to adjust size of cone, use 0 for a single line.simplealarms (Simple BG Alarms)Uses BG_HIGH, BG_TARGET_TOP, BG_TARGET_BOTTOM, BG_LOW thresholds to generate alarms.Enabled by default if 1 of these thresholds is set OR ALARM_TYPES includes simple.profile (Treatment Profile)Add link to Profile Editor and allow to enter treatment profile settings. Also uses the extended setting:PROFILE_HISTORY (off) - possible values on or off. Enable/disable NS ability to keep history of your profiles (still experimental)PROFILE_MULTIPLE (off) - possible values on or off. Enable/disable NS ability to handle and switch between multiple treatment profilesAdvanced Plugins:careportal (Careportal)An optional form to enter treatments.boluscalc (Bolus Wizard)food (Custom Foods)An option plugin to enable adding foods from database in Bolus Wizard and enable .rawbg (Raw BG)Calculates BG using sensor and calibration records from and displays an alternate BG values and noise levels. Defaults that can be adjusted with extended settingDISPLAY (unsmoothed) - Allows the user to control which algorithm is used to calculate the displayed raw BG values using the most recent calibration record.unfiltered - Raw BG is calculated by applying the calibration to the glucose record's unfiltered value.filtered - Raw BG is calculated by applying the calibration to the glucose record's filtered value. The glucose record's filtered values are generally produced by the CGM by a running average of the unfiltered values to produce a smoothed value when the sensor noise is high.unsmoothed - Raw BG is calculated by first finding the ratio of the calculated filtered value (the same value calculated by the filtered setting) to the reported glucose value. The displayed raw BG value is calculated by dividing the calculated unfiltered value (the same value calculated by the unfiltered setting) by the ratio.  The effect is to exagerate changes in trend direction so the trend changes are more noticeable to the user. This is the legacy raw BG calculation algorithm.iob (Insulin-on-Board)Adds the IOB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with insulin doses and the dia and sens fields from the treatment profile.cob (Carbs-on-Board)Adds the COB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with carb doses and the carbs_hr, carbratio, and sens fields from the treatment profile.bwp (Bolus Wizard Preview)This plugin in intended for the purpose of automatically snoozing alarms when the CGM indicates high blood sugar but there is also insulin on board (IOB) and secondly, alerting to user that it might be beneficial to measure the blood sugar using a glucometer and dosing insulin as calculated by the pump or instructed by trained medicare professionals. The values provided by the plugin are provided as a reference based on CGM data and insulin sensitivity you have configured, and are not intended to be used as a reference for bolus calculation. The plugin calculates the bolus amount when above your target, generates alarms when you should consider checking and bolusing, and snoozes alarms when there is enough IOB to cover a high BG. Uses the results of the iob plugin and sens, target_high, and target_low fields from the treatment profile. Defaults that can be adjusted with extended settingBWP_WARN (0.50) - If BWP is > BWP_WARN a warning alarm will be triggered.BWP_URGENT (1.00) - If BWP is > BWP_URGENT an urgent alarm will be triggered.BWP_SNOOZE_MINS (10) - minutes to snooze when there is enough IOB to cover a high BG.BWP_SNOOZE - (0.10) If BG is higher then the target_high and BWP < BWP_SNOOZE alarms will be snoozed for BWP_SNOOZE_MINS.cage (Cannula Age)Calculates the number of hours since the last Site Change treatment that was recorded.CAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming cannula change.CAGE_INFO (44) - If time since last Site Change matches CAGE_INFO, user will be warned of upcoming cannula changeCAGE_WARN (48) - If time since last Site Change matches CAGE_WARN, user will be alarmed to to change the cannulaCAGE_URGENT (72) - If time since last Site Change matches CAGE_URGENT, user will be issued a persistent warning of overdue change.CAGE_DISPLAY (hours) - Possible values are 'hours' or 'days'. If 'days' is selected and age of canula is greater than 24h number is displayed in days and hourssage (Sensor Age)Calculates the number of days and hours since the last Sensor Start and Sensor Change treatment that was recorded.SAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming sensor change.SAGE_INFO (144) - If time since last sensor event matches SAGE_INFO, user will be warned of upcoming sensor changeSAGE_WARN (164) - If time since last sensor event matches SAGE_WARN, user will be alarmed to to change/restart the sensorSAGE_URGENT (166) - If time since last sensor event matches SAGE_URGENT, user will be issued a persistent warning of overdue change.iage (Insulin Age)Calculates the number of days and hours since the last Insulin Change treatment that was recorded.IAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming insulin reservoir change.IAGE_INFO (44) - If time since last Insulin Change matches IAGE_INFO, user will be warned of upcoming insulin reservoir changeIAGE_WARN (48) - If time since last Insulin Change matches IAGE_WARN, user will be alarmed to to change the insulin reservoirIAGE_URGENT (72) - If time since last Insulin Change matches IAGE_URGENT, user will be issued a persistent warning of overdue change.bage (Battery Age)Calculates the number of days and hours since the last Pump Battery Change treatment that was recorded.BAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming pump battery change.BAGE_DISPLAY (days) - Set to hours to display time since last Pump Battery Change in hours only.BAGE_INFO (312) - If time since last Pump Battery Change matches BAGE_INFO hours, user will be warned of upcoming pump battery change (default of 312 hours is 13 days).BAGE_WARN (336) - If time since last Pump Battery Change matches BAGE_WARN hours, user will be alarmed to to change the pump battery (default of 336 hours is 14 days).BAGE_URGENT (360) - If time since last Pump Battery Change matches BAGE_URGENT hours, user will be issued a persistent warning of overdue change (default of 360 hours is 15 days).treatmentnotify (Treatment Notifications)Generates notifications when a treatment has been entered and snoozes alarms minutes after a treatment.TREATMENTNOTIFY_SNOOZE_MINS (10) - Number of minutes to snooze notifications after a treatment is enteredTREATMENTNOTIFY_INCLUDE_BOLUSES_OVER (0) - U value over which the bolus will trigger a notification and snooze alarmsbasal (Basal Profile)Adds the Basal pill visualization to display the basal rate for the current time.  Also enables the bwp plugin to calculate correction temp basal suggestions.  Uses the basal field from the treatment profile. Also uses the extended setting:BASAL_RENDER (none) - Possible values are none, default, or icicle (inverted)bolus (Bolus Rendering)Settings to configure Bolus renderingBOLUS_RENDER_OVER (0) - U value over which the bolus labels use the format defined in BOLUS_RENDER_FORMAT. This value can be an integer or a float, e.g. 0.3, 1.5, 2, etc.BOLUS_RENDER_FORMAT (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).BOLUS_RENDER_FORMAT_SMALL (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).bridge (Share2Nightscout bridge)Glucose reading directly from the Dexcom Share service, uses these extended settings:BRIDGE_USER_NAME - Your username for the Share service.BRIDGE_PASSWORD - Your password for the Share service.BRIDGE_INTERVAL (150000 2.5 minutes) - The time (in milliseconds) to wait between each update.BRIDGE_MAX_COUNT (1) - The number of records to attempt to fetch per update.BRIDGE_FIRST_FETCH_COUNT (3) - Changes max count during the very first update only.BRIDGE_MAX_FAILURES (3) - How many failures before giving up.BRIDGE_MINUTES (1400) - The time window to search for new data per update (the default value is one day in minutes).BRIDGE_SERVER (``) - The default blank value is used to fetch data from Dexcom servers in the US. Set to (EU) to fetch from European servers instead.mmconnect (MiniMed Connect bridge)Transfer real-time MiniMed Connect data from the Medtronic CareLink server into Nightscout (read more)MMCONNECT_USER_NAME - Your user name for CareLink Connect.MMCONNECT_PASSWORD - Your password for CareLink Connect.MMCONNECT_INTERVAL (60000 1 minute) - Number of milliseconds to wait between requests to the CareLink server.MMCONNECT_MAX_RETRY_DURATION (32) - Maximum number of total seconds to spend retrying failed requests before giving up.MMCONNECT_SGV_LIMIT (24) - Maximum number of recent sensor glucose values to send to Nightscout on each request.MMCONNECT_VERBOSE - Set this to \""true\"" to log CareLink request information to the console.MMCONNECT_STORE_RAW_DATA - Set this to \""true\"" to store raw data returned from CareLink as type: \""carelink_raw\"" database entries (useful for development).MMCONNECT_SERVER - Set this to EU if you're using the European Medtronic servicespump (Pump Monitoring)Generic Pump Monitoring for OpenAPS, MiniMed Connect, RileyLink, t:slim, with more on the wayRequires DEVICESTATUS_ADVANCED=\""true\"" to be setPUMP_ENABLE_ALERTS (false) - Set to true to enable notifications for Pump battery and reservoir.PUMP_WARN_ON_SUSPEND (false) - Set to true to get an alarm when the pump is suspended.PUMP_FIELDS (reservoir battery) - The fields to display by default.  Any of the following fields: reservoir, battery, clock, status, and devicePUMP_RETRO_FIELDS (reservoir battery clock) - The fields to display in retro mode. Any of the above fields.PUMP_WARN_CLOCK (30) - The number of minutes ago that needs to be exceed before an alert is triggered.PUMP_URGENT_CLOCK (60) - The number of minutes ago that needs to be exceed before an urgent alarm is triggered.PUMP_WARN_RES (10) - The number of units remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_RES (5) - The number of units remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_P (30) - The % of the pump battery remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_P (20) - The % of the pump battery remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_V (1.35) - The voltage (if percent isn't available) of the pump battery, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_V (1.30) - The  voltage (if percent isn't available) of the pump battery, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_QUIET_NIGHT (false) - Do not generate battery alarms at night.openaps (OpenAPS)Integrated OpenAPS loop monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setOPENAPS_ENABLE_ALERTS (false) - Set to true to enable notifications when OpenAPS isn't looping.  If OpenAPS is going to offline for a period of time, you can add an OpenAPS Offline event for the expected duration from Careportal to avoid getting alerts.OPENAPS_WARN (30) - The number of minutes since the last loop that needs to be exceed before an alert is triggeredOPENAPS_URGENT (60) - The number of minutes since the last loop that needs to be exceed before an urgent alarm is triggeredOPENAPS_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display by default.  Any of the following fields: status-symbol, status-label, iob, meal-assist, freq, and rssiOPENAPS_RETRO_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display in retro mode. Any of the above fields.OPENAPS_PRED_IOB_COLOR (#1e88e5) - The color to use for IOB prediction lines. Colors can be in #RRGGBB format, but other CSS color units may be used as well.OPENAPS_PRED_COB_COLOR (#FB8C00) - The color to use for COB prediction lines. Same format as above.OPENAPS_PRED_ACOB_COLOR (#FB8C00) - The color to use for ACOB prediction lines. Same format as above.OPENAPS_PRED_ZT_COLOR (#00d2d2) - The color to use for ZT prediction lines. Same format as above.OPENAPS_PRED_UAM_COLOR (#c9bd60) - The color to use for UAM prediction lines. Same format as above.OPENAPS_COLOR_PREDICTION_LINES (true) - Enables / disables the colored lines vs the classic purple color.Also see Pushover and IFTTT Maker.loop (Loop)iOS Loop app monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setLOOP_ENABLE_ALERTS (false) - Set to true to enable notifications when Loop isn't looping.LOOP_WARN (30) - The number of minutes since the last loop that needs to be exceeded before an alert is triggeredLOOP_URGENT (60) - The number of minutes since the last loop that needs to be exceeded before an urgent alarm is triggeredAdd loop to SHOW_FORECAST to show forecasted BG.For remote overrides, the following extended settings must be configured:LOOP_APNS_KEY - Apple Push Notifications service (APNs) Key, created in the Apple Developer website.LOOP_APNS_KEY_ID - The Key ID for the above key.LOOP_DEVELOPER_TEAM_ID - Your Apple developer team ID.LOOP_PUSH_SERVER_ENVIRONMENT - (optional) Set this to production if you are using a provisioning profile that specifies production aps-environment, such as when distributing builds via TestFlight.override (Override Mode)Additional monitoring for DIY automated insulin delivery systems to display real-time overrides such as Eating Soon or Exercise Mode:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setxdripjs (xDrip-js)Integrated xDrip-js monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setXDRIPJS_ENABLE_ALERTS (false) - Set to true to enable notifications when CGM state is not OK or battery voltages fall below threshold.XDRIPJS_STATE_NOTIFY_INTRVL (0.5) - Set to number of hours between CGM state notificationsXDRIPJS_WARN_BAT_V (300) - The voltage of either transmitter battery, a warning will be triggered when dropping below this threshold.alexa (Amazon Alexa)Integration with Amazon Alexa, detailed setup instructionsgooglehome (Google Home/DialogFLow)Integration with Google Home (via DialogFlow), detailed setup instructionsspeech (Speech)Speech synthesis plugin. When enabled, speaks out the blood glucose values, IOB and alarms. Note you have to set the LANGUAGE setting on the server to get all translated alarms.cors (CORS)Enabled CORS so other websites can make request to your Nightscout site, uses these extended settings:CORS_ALLOW_ORIGIN (*) - The list of sites that are allow to make requestsdbsize (Database Size)Show size of Nightscout Database, as a percentage of declared available space or in MiB.Many deployments of Nightscout use free tier of MongoDB Atlas on Heroku, which is limited in size. After some time, as volume of stored data grows, it may happen that this limit is reached and system is unable to store new data. This plugin provides pill that indicates size of Database and shows (when configured) alarms regarding reaching space limit.IMPORTANT: This plugin can only check how much space database already takes, but cannot infer max size available on server for it. To have correct alarms and realistic percentage, DBSIZE_MAX need to be properly set - according to your mongoDB hosting configuration.NOTE: This plugin rely on db.stats() for reporting logical size of database, which may be different than physical size of database on server. It may work for free tier of MongoDB on Atlas, since it calculate quota according to logical size too, but may fail for other hostings or self-hosted database with quota based on physical size.NOTE: MongoDB Atlas quota is for all databases in cluster, while each instance will get only size of its own database only. It is ok when you only have one database in cluster (most common scenario) but will not work for multiple parallel databases. In such case, spliting known quota equally beetween databases and setting DBSIZE_MAX to that fraction may help, but wont be precise.All sizes are expressed as integers, in Mebibytes 1 MiB == 1024 KiB == 1024*1024 BDBSIZE_MAX (496) - Maximal allowed size of database on your mongoDB server, in MiB. You need to adjust that value to match your database hosting limits - default value is for standard Heroku mongoDB free tier.DBSIZE_WARN_PERCENTAGE (60) - Threshold to show first warning about database size. When database reach this percentage of DBSIZE_MAX size - pill will show size in yellow.DBSIZE_URGENT_PERCENTAGE (75) - Threshold to show urgent warning about database size. When database reach this percentage of DBSIZE_MAX size, it is urgent to do backup and clean up old data. At this percentage info pill turns red.DBSIZE_ENABLE_ALERTS (false) - Set to true to enable notifications about database size.DBSIZE_IN_MIB (false) - Set to true to display size of database in MiB-s instead of default percentage.This plugin should be enabled by default, if needed can be diasabled by adding dbsize to the list of disabled plugins, for example: DISABLE=\""dbsize\"".Extended SettingsSome plugins support additional configuration using extra environment variables.  These are prefixed with the name of the plugin and a _.  For example setting MYPLUGIN_EXAMPLE_VALUE=1234 would make extendedSettings.exampleValue available to the MYPLUGIN plugin.Plugins only have access to their own extended settings, all the extended settings of client plugins will be sent to the browser.DEVICESTATUS_ADVANCED (true) - Defaults to true. Users who only have a single device uploading data to Nightscout can set this to false to reduce the data use of the site.DEVICESTATUS_DAYS (1) - Defaults to 1, can optionally be set to 2. Users can use this to show 48 hours of device status data for in retro mode, rather than the default 24 hours. Setting this value to 2 will roughly double the bandwidth usage of nightscout, so users with a data cap may not want to update this setting.PushoverIn addition to the normal web based alarms, there is also support for Pushover based alarms and notifications.To get started install the Pushover application on your iOS or Android device and create an account.Using that account login to Pushover, in the top left you’ll see your User Key, you’ll need this plus an application API Token/Key to complete this setup.You’ll need to Create a Pushover Application.  You only need to set the Application name, you can ignore all the other settings, but setting an Icon is a nice touch.  Maybe you'd like to use this one?Pushover is configured using the following Environment Variables:* `ENABLE` - `pushover` should be added to the list of plugin, for example: `ENABLE=\""pushover\""`.* `PUSHOVER_API_TOKEN` - Used to enable pushover notifications, this token is specific to the application you create from in [Pushover](https://pushover.net/), ***[additional pushover information](#pushover)*** below.* `PUSHOVER_USER_KEY` - Your Pushover user key, can be found in the top left of the [Pushover](https://pushover.net/) site, this can also be a pushover delivery group key to send to a group rather than just a single user.  This also supports a space delimited list of keys.  To disable `INFO` level pushes set this to `off`.* `PUSHOVER_ALARM_KEY` - An optional Pushover user/group key, will be used for system wide alarms (level > `WARN`).  If not defined this will fallback to `PUSHOVER_USER_KEY`.  A possible use for this is sending important messages and alarms to a CWD that you don't want to send all notification too.  This also support a space delimited list of keys.  To disable Alarm pushes set this to `off`.* `PUSHOVER_ANNOUNCEMENT_KEY` - An optional Pushover user/group key, will be used for system wide user generated announcements.  If not defined this will fallback to `PUSHOVER_USER_KEY` or `PUSHOVER_ALARM_KEY`.  This also support a space delimited list of keys. To disable Announcement pushes set this to `off`.* `BASE_URL` - Used for pushover callbacks, usually the URL of your Nightscout site, use https when possible.* `API_SECRET` - Used for signing the pushover callback request for acknowledgments.If you never want to get info level notifications (treatments) use `PUSHOVER_USER_KEY=\""off\""`If you never want to get an alarm via pushover use `PUSHOVER_ALARM_KEY=\""off\""`If you never want to get an announcement via pushover use `PUSHOVER_ANNOUNCEMENT_KEY=\""off\""`If only `PUSHOVER_USER_KEY` is set it will be used for all info notifications, alarms, and announcementsFor testing/development try [localtunnel](http://localtunnel.me/).IFTTT MakerIn addition to the normal web based alarms, and pushover, there is also integration for IFTTT Webhooks.With Maker you are able to integrate with all the other IFTTT Services.  For example you can send a tweet when there is an alarm, change the color of hue light, send an email, send and sms, and so much more.Setup IFTTT account: login or create an accountFollow the  Detailed IFTTT setup InstructionsConfigure Nightscout by setting these webpage environment variables:ENABLE - maker should be added to the list of plugins, for example: ENABLE=\""maker\"".MAKER_KEY - Set this to your secret key (see  [Detailed Instructions ) MAKER_KEY=\""abcMyExampleabc123defjt1DeNSiftttmak-XQb69p\"" This also supports a space delimited list of keys.MAKER_ANNOUNCEMENT_KEY - An optional Maker key, will be used for system wide user generated announcements.  If not defined this will fallback to MAKER_KEY.  A possible use for this is sending important messages and alarms to another device that you don't want to send all notification too.  This also support a space delimited list of keys.Plugins can create custom events, but all events sent to IFTTT webhooks will be prefixed with ns-.  The core events are:ns-event - This event is sent to the maker service for all alarms and notifications.  This is good catch all event for general logging.ns-allclear - This event is sent to the maker service when an alarm has been ack'd or when the server starts up without triggering any alarms.  For example, you could use this event to turn a light to green.ns-info - Plugins that generate notifications at the info level will cause this event to also be triggered.  It will be sent in addition to ns-event.ns-warning - Alarms at the warning level with cause this event to also be triggered.  It will be sent in addition to ns-event.ns-urgent - Alarms at the urgent level with cause this event to also be triggered.  It will be sent in addition to ns-event.see the full list of eventsTreatment ProfileSome of the plugins make use of a treatment profile that can be edited using the Profile Editor, see the link in the Settings drawer on your site.Treatment Profile Fields:timezone (Time Zone) - time zone local to the patient. Should be set.units (Profile Units) - blood glucose units used in the profile, either \""mg/dl\"" or \""mmol\""dia (Insulin duration) - value should be the duration of insulin action to use in calculating how much insulin is left active. Defaults to 3 hours.carbs_hr (Carbs per Hour) - The number of carbs that are processed per hour, for more information see #DIYPS.carbratio (Carb Ratio) - grams per unit of insulin.sens (Insulin sensitivity) How much one unit of insulin will normally lower blood glucose.basal The basal rate set on the pump.target_high - Upper target for correction boluses.target_low - Lower target for correction boluses.Some example profiles are here.Setting environment variablesEasy to emulate on the commandline:    echo 'MONGO_CONNECTION=mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout' >> my.env    echo 'MONGO_COLLECTION=entries' >> my.envFrom now on you can run using    $ (eval $(cat my.env | sed 's/^/export /') && PORT=1337 node server.js)Your hosting provider probably has a way to set these through their GUI.Vagrant installOptionally, use Vagrant with theincluded Vagrantfile and bin/setup.sh to install OS and node packages toa virtual machine.host$ vagrant uphost$ vagrant sshvm$ ./bin/setup.shThe setup script will install OS packages then run npm install.The Vagrant VM serves to your host machine only on 192.168.33.10, you can accessthe web interface on http://192.168.33.10:1337More questions?Feel free to post an issue, but read the wiki first.Browser testing suite provided byLicensecgm-remote-monitor - web app to broadcast cgm readingsCopyright (C) 2017 Nightscout contributors.  See the COPYRIGHT fileat the root directory of this distribution and athttps://github.com/nightscout/cgm-remote-monitor/blob/master/COPYRIGHTThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU Affero General Public License as publishedby the Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU Affero General Public License for more details.You should have received a copy of the GNU Affero General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>."
2,github/docs,https://github.com/github/docs/blob/main/README.md,JavaScript,"GitHub Docs This repository contains the documentation website code and Markdown source files for docs.github.com.GitHub's Docs team works on pre-production content in a private repo that regularly syncs with this public repo.Use the table of contents icon  on the top left corner of this document to navigate to a specific section quickly.ContributingSee the contributing guide for detailed instructions on how to get started with our project.We accept different types of contributions, including some that don't require you to write a single line of code.On the GitHub Docs site, you can click the make a contribution button at the bottom of the page to open a pull request for quick fixes like typos, updates, or link fixes.For more complex contributions, you can open an issue using the most appropriate issue template to describe the changes you'd like to see.If you're looking for a way to contribute, you can scan through our existing issues for something to work on. When ready, check out Getting Started with Contributing for detailed instructions.Join us in discussionsWe use GitHub Discussions to talk about all sorts of topics related to documentation and this site. For example: if you'd like help troubleshooting a PR, have a great new idea, or want to share something amazing you've learned in our docs, join us in the discussions.And that's it!If you're having trouble with your GitHub account, contact Support.That's how you can easily become a member of the GitHub Docs community. ✨READMEsIn addition to the README you're reading right now, this repo includes other READMEs that describe the purpose of each subdirectory in more detail:content/README.mdcontent/graphql/README.mdcontent/rest/README.mdcontributing/README.mddata/README.mddata/reusables/README.mddata/variables/README.mdsrc/README.mdLicenseThe GitHub product documentation in the assets, content, and data folders are licensed under a CC-BY license.All other code in this repository is licensed under the MIT license.When using the GitHub logos, be sure to follow the GitHub logo guidelines.Thanks 💜Thanks for all your contributions and efforts towards improving the GitHub documentation. We thank you for being part of our ✨ community ✨!"
3,facebook/react,https://github.com/facebook/react/blob/main/README.md,JavaScript,"React ·    React is a JavaScript library for building user interfaces.Declarative: React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.Component-Based: Build encapsulated components that manage their own state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.Learn Once, Write Anywhere: We don't make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using React Native.Learn how to use React in your project.InstallationReact has been designed for gradual adoption from the start, and you can use as little or as much React as you need:Use Online Playgrounds to get a taste of React.Add React to a Website as a <script> tag in one minute.Create a New React App if you're looking for a powerful JavaScript toolchain.You can use React as a <script> tag from a CDN, or as a react package on npm.DocumentationYou can find the React documentation on the website.Check out the Getting Started page for a quick overview.The documentation is divided into several sections:TutorialMain ConceptsAdvanced GuidesAPI ReferenceWhere to Get SupportContributing GuideYou can improve it by sending pull requests to this repository.ExamplesWe have several examples on the website. Here is the first one to get you started:import { createRoot } from 'react-dom/client';function HelloMessage({ name }) {  return <div>Hello {name}</div>;}const root = createRoot(document.getElementById('container'));root.render(<HelloMessage name=\""Taylor\"" />);This example will render \""Hello Taylor\"" into a container on the page.You'll notice that we used an HTML-like syntax; we call it JSX. JSX is not required to use React, but it makes code more readable, and writing it feels like writing HTML. If you're using React as a <script> tag, read this section on integrating JSX; otherwise, the recommended JavaScript toolchains handle it automatically.ContributingThe main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.Code of ConductFacebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the full text so that you can understand what actions will and will not be tolerated.Contributing GuideRead our contributing guide to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.Good First IssuesTo help you get your feet wet and get you familiar with our contribution process, we have a list of good first issues that contain bugs that have a relatively limited scope. This is a great place to get started.LicenseReact is MIT licensed."
4,mrdoob/three.js,https://github.com/mrdoob/three.js/blob/dev/README.md,JavaScript,"three.jsJavaScript 3D libraryThe aim of the project is to create an easy to use, lightweight, cross-browser, general purpose 3D library. The current builds only include a WebGL renderer but WebGPU (experimental), SVG and CSS3D renderers are also available as addons.Examples —Docs —Manual —Wiki —Migrating —Questions —Forum —DiscordUsageThis code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a WebGL renderer for the scene and camera, and it adds that viewport to the document.body element. Finally, it animates the cube within the scene for the camera.import * as THREE from 'three';// initconst camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );camera.position.z = 1;const scene = new THREE.Scene();const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );const material = new THREE.MeshNormalMaterial();const mesh = new THREE.Mesh( geometry, material );scene.add( mesh );const renderer = new THREE.WebGLRenderer( { antialias: true } );renderer.setSize( window.innerWidth, window.innerHeight );renderer.setAnimationLoop( animation );document.body.appendChild( renderer.domElement );// animationfunction animation( time ) {\tmesh.rotation.x = time / 2000;\tmesh.rotation.y = time / 1000;\trenderer.render( scene, camera );}If everything went well, you should see this.Cloning this repositoryCloning the repo with all its history results in a ~2 GB download. If you don't need the whole history you can use the depth parameter to significantly reduce download size.git clone --depth=1 https://github.com/mrdoob/three.js.gitChange logReleases"
5,academicpages/academicpages.github.io,https://github.com/academicpages/academicpages.github.io/blob/master/README.md,JavaScript,"A Github Pages template for academic websites. This was forked (then detached) by Stuart Geiger from the Minimal Mistakes Jekyll Theme, which is © 2016 Michael Rose and released under the MIT License. See LICENSE.md.I think I've got things running smoothly and fixed some major bugs, but feel free to file issues or make pull requests if you want to improve the generic template / theme.Note: if you are using this repo and now get a notification about a security vulnerability, delete the Gemfile.lock file.InstructionsRegister a GitHub account if you don't have one and confirm your e-mail (required!)Fork this repository by clicking the \""fork\"" button in the top right.Go to the repository's settings (rightmost item in the tabs that start with \""Code\"", should be below \""Unwatch\""). Rename the repository \""[your GitHub username].github.io\"", which will also be your website's URL.Set site-wide configuration and create content & metadata (see below -- also see this set of diffs showing what files were changed to set up an example site for a user with the username \""getorg-testacct\"")Upload any files (like PDFs, .zip files, etc.) to the files/ directory. They will appear at https://[your GitHub username].github.io/files/example.pdf.Check status by going to the repository settings, in the \""GitHub pages\"" section(Optional) Use the Jupyter notebooks or python scripts in the markdown_generator folder to generate markdown files for publications and talks from a TSV file.See more info at https://academicpages.github.io/To run locally (not on GitHub Pages, to serve on your own computer)Clone the repository and made updates as detailed aboveMake sure you have ruby-dev, bundler, and nodejs installed: sudo apt install ruby-dev ruby-bundler nodejsRun bundle clean to clean up the directory (no need to run --force)Run bundle install to install ruby dependencies. If you get errors, delete Gemfile.lock and try again.Run bundle exec jekyll liveserve to generate the HTML and serve it from localhost:4000 the local server will automatically rebuild and refresh the pages on change.Changelog -- bugfixes and enhancementsThere is one logistical issue with a ready-to-fork template theme like academic pages that makes it a little tricky to get bug fixes and updates to the core theme. If you fork this repository, customize it, then pull again, you'll probably get merge conflicts. If you want to save your various .yml configuration files and markdown files, you can delete the repository and fork it again. Or you can manually patch.To support this, all changes to the underlying code appear as a closed issue with the tag 'code change' -- get the list here. Each issue thread includes a comment linking to the single commit or a diff across multiple commits, so those with forked repositories can easily identify what they need to patch."
6,trekhleb/javascript-algorithms,https://github.com/trekhleb/javascript-algorithms/blob/master/README.ar-AR.md,JavaScript,"جافا سكريبت خوارزميات  وهياكل البياناتتحتوي هذا مقالة على أمثلة عديدة تستند إلى الخوارزميات الشائعة وهياكل البيانات في الجافا سكريبت.كل خوارزمية وهياكل البيانات لها برنامج README منفصل خاص بهامع التفسيرات والروابط ذات الصلة لمزيد من القراءة (بما في ذلك تلكإلى مقاطع فيديو YouTube).اقرأ هذا في لغات أخرى:简体中文,繁體中文,한국어,日本語,Polski,Français,Español,Português,Русский,Türk,Italiana,Tiếng Việt,Deutsch☝ ملاحضة هذا المشروع مخصص للاستخدام لأغراض التعلم والبحثفقط ، و ** ليست ** معدة للاستخدام في الإنتاجهياكل البياناتهياكل البيانات هي طريقة خاصة لتنظيم البيانات وتخزينها في جهاز الكمبيوتر بحيثيمكن الوصول إليها وتعديلها بكفاءة. بتعبير أدق ، هيكل البيانات هو مجموعة من البياناتالقيم والعلاقات فيما بينها والوظائف أو العمليات التي يمكن تطبيقها عليهاالبيانات.B - مبتدئ, A - المتقدمةB قائمة مرتبطةB قائمة مرتبطة بشكل مضاعفB طابور, QueueB كومةB جدول التجزئةB كومة -الحد الأقصى والحد الأدنى من إصدارات الكومةB طابور الأولويةA تريA شجرةA شجرة البحث الثنائيةA شجرة AVLA شجرة الأحمر والأسودA شجرة القطعة - مع أمثلة على استفسارات النطاق الأدنى / الأقصى / المجموعA شجرة فينويك (شجرة ثنائية مفهرسة)A Graph (كلاهما موجه وغير موجه)A مجموعة منفصلةA مرشح بلومالخوارزمياتالخوارزمية هي تحديد لا لبس فيه لكيفية حل فئة من المشاكل. أنهمجموعة من القواعد التي تحدد بدقة تسلسل العمليات.B - مبتدئ ، A - متقدمالخوارزميات حسب الموضوعرياضياتB معالجة البتB عامليB رقم فيبوناتشي - الإصدارات الكلاسيكية والمغلقةB اختبار البدائية (طريقة تقسيم المحاكمة)B الخوارزمية الإقليدية - احسب القاسم المشترك الأكبر (GCD)B أقل مضاعف مشترك (LCM)B منخل إراتوستينس - إيجاد جميع الأعداد الأولية حتى أي حد معينB هي قوة اثنين - تحقق مما إذا كان الرقم هو قوة اثنين (الخوارزميات الساذجة والبتية)B مثلث باسكالB عدد مركب - الأعداد المركبة والعمليات الأساسية معهمB راديان ودرجة - راديان لدرجة التحويل والعكسB تشغيل سريعB طريقة هورنر - تقييم متعدد الحدودA قسم صحيحA الجذر التربيعي - طريقة نيوتنA خوارزمية ليو هوي π - π حسابات تقريبية على أساس N-gonsA تحويل فورييه المنفصل - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهامجموعاتB المنتج الديكارتي - منتج من مجموعات متعددةB فيشر ييتس شافل - التقليب العشوائي لتسلسل محدودA مجموعة الطاقة - جميع المجموعات الفرعية للمجموعة (حلول البت والتتبع التراجعي)A التباديل (مع وبدون التكرار)A مجموعات (مع وبدون التكرار)A أطول نتيجة مشتركة (LCS)A أطول زيادة متتاليةA أقصر تسلسل فائق مشترك (SCS)A مشكلة حقيبة الظهر - \""0/1\"" و \""غير منضم\""A الحد الأقصى من Subarray -إصدارات \""القوة الغاشمة\"" و \""البرمجة الديناميكية\"" (كادان)A مجموع الجمع - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًاسلاسلB مسافة هامنج - عدد المواقف التي تختلف فيها الرموزA المسافة ليفنشتاين - الحد الأدنى لمسافة التحرير بين تسلسلينA خوارزمية كنوث - موريس - برات (خوارزمية KMP) - بحث السلسلة الفرعية (مطابقة النمط)A خوارزمية Z - بحث سلسلة فرعية (مطابقة النمط)A خوارزمية رابين كارب - بحث السلسلة الفرعيةA أطول سلسلة فرعية مشتركةA مطابقة التعبير العاديعمليات البحثB البحث الخطيB بحث سريع (أو حظر البحث) - ابحث في مصفوفة مرتبةB بحث ثنائي - البحث في مجموعة مرتبةB بحث الاستيفاء - البحث في مجموعة مرتبة موزعة بشكل موحدفرزB Bubble SortB Selection SortB Insertion SortB Heap SortB Merge SortB Quicksort - عمليات التنفيذ في المكان وغير في المكانB ShellsortB Counting SortB Radix Sortالقوائم المرتبطةB Straight TraversalB Reverse TraversalالأشجارB Depth-First Search (DFS)B Breadth-First Search (BFS)الرسوم البيانيةB Depth-First Search (DFS)B Breadth-First Search (BFS)B Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Dijkstra Algorithm -إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Bellman-Ford Algorithm - إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Detect Cycle - لكل من الرسوم البيانية الموجهة وغير الموجهة (الإصدارات القائمة على DFS و Disjoint Set)A Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Topological Sorting - طريقة البحث العمق الأول (DFS)A Articulation Points - خوارزمية تارجان (تعتمد على DFS)A Bridges - خوارزمية تعتمد على DFSA Eulerian Path and Eulerian Circuit - خوارزمية فلوري - قم بزيارة كل حافة مرة واحدة بالضبطA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA Strongly Connected Components - خوارزمية KosarajuA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصلية**التشفيرB Polynomial Hash - المتداول دالة التجزئة على أساس متعدد الحدودB Caesar Cipher - استبدال بسيط للشفراتالتعلم الاليB NanoNeuron - 7 وظائف JS بسيطة توضح كيف يمكن للآلات أن تتعلم بالفعل (الانتشار إلى الأمام / الخلف)غير مصنفB Tower of HanoiB Square Matrix Rotation - خوارزمية في المكانB Jump Game - التراجع ، البرمجة الديناميكية (من أعلى إلى أسفل + من أسفل إلى أعلى) والأمثلة الجشعةB Unique Paths - التراجع والبرمجة الديناميكية والأمثلة القائمة على مثلث باسكالB Rain Terraces - محاصرة مشكلة مياه الأمطار (البرمجة الديناميكية وإصدارات القوة الغاشمة)B Recursive Staircase - احسب عدد الطرق للوصول إلى القمة (4 حلول)A N-Queens ProblemA Knight's Tourالخوارزميات حسب النموذجالنموذج الحسابي هو طريقة أو نهج عام يكمن وراء تصميم الفصلمن الخوارزميات. إنه تجريد أعلى من مفهوم الخوارزمية ، تمامًا مثلالخوارزمية هي تجريد أعلى من برنامج الكمبيوتر.القوة الغاشمة - انظر في جميع الاحتمالات وحدد الحل الأفضلB Linear SearchB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Maximum SubarrayA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصليةA Discrete Fourier Transform - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهاجشع - اختر الخيار الأفضل في الوقت الحالي ، دون أي اعتبار للمستقبلB Jump GameA Unbound Knapsack ProblemA Dijkstra Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهفرق تسد - قسّم المشكلة إلى أجزاء أصغر ثم حل تلك الأجزاءB Binary SearchB Tower of HanoiB Pascal's TriangleB Euclidean Algorithm - حساب القاسم المشترك الأكبر (GCD)B Merge SortB QuicksortB Tree Depth-First Search (DFS)B Graph Depth-First Search (DFS)B Jump GameB Fast PoweringA Permutations (مع التكرار وبدونه)A Combinations (مع التكرار وبدونه)البرمجة الديناميكية - بناء حل باستخدام الحلول الفرعية التي تم العثور عليها مسبقًاB Fibonacci NumberB Jump GameB Unique PathsB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Levenshtein Distance - الحد الأدنى لمسافة التحرير بين تسلسلينA Longest Common Subsequence (LCS)A Longest Common SubstringA Longest Increasing SubsequenceA Shortest Common SupersequenceA 0/1 Knapsack ProblemA Integer PartitionA Maximum SubarrayA Bellman-Ford Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Regular Expression Matchingالتراجع - على غرار القوة الغاشمة ، حاول إنشاء جميع الحلول الممكنة ، ولكن في كل مرة تقوم فيها بإنشاء الحل التالي الذي تختبرهإذا استوفت جميع الشروط ، وعندها فقط استمر في إنشاء الحلول اللاحقة. خلاف ذلك ، تراجع ، واذهب إلىطريق مختلف لإيجاد حل. عادةً ما يتم استخدام اجتياز DFS لمساحة الدولة.B Jump GameB Unique PathsB Power Set - جميع المجموعات الفرعية للمجموعةA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA N-Queens ProblemA Knight's TourA Combination Sum - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًا** Branch & Bound ** - تذكر الحل الأقل تكلفة الموجود في كل مرحلة من مراحل التراجعالبحث ، واستخدام تكلفة الحل الأقل تكلفة الموجود حتى الآن بحد أدنى لتكلفةالحل الأقل تكلفة للمشكلة ، من أجل تجاهل الحلول الجزئية بتكاليف أكبر منتم العثور على حل بأقل تكلفة حتى الآن. اجتياز BFS عادةً بالاشتراك مع اجتياز DFS لمساحة الحالةيتم استخدام الشجرة.كيفية استخدام هذا المستودعتثبيت كل التبعياتnpm installقم بتشغيل ESLintقد ترغب في تشغيله للتحقق من جودة الكود.npm run lintقم بإجراء جميع الاختباراتnpm testقم بإجراء الاختبارات بالاسمnpm test -- 'LinkedList'ملعبيمكنك اللعب بهياكل البيانات والخوارزميات في ملف . /src/playground/playground.js والكتابةاختبارات لها في ./src/playground/__test__/playground.test.js.ثم قم ببساطة بتشغيل الأمر التالي لاختبار ما إذا كان كود الملعب الخاص بك يعمل كما هو متوقع:npm test -- 'playground'معلومات مفيدةالمراجع▶ هياكل البيانات والخوارزميات على موقع يوتيوبBig O Notationيتم استخدام Big O notation لتصنيف الخوارزميات وفقًا لكيفية نمو متطلبات وقت التشغيل أو المساحة مع نمو حجم الإدخال.قد تجد في الرسم البياني أدناه الأوامر الأكثر شيوعًا لنمو الخوارزميات المحددة في تBig O notation.مصدر: Big O Cheat Sheet.فيما يلي قائمة ببعض رموز Big O notation الأكثر استخدامًا ومقارنات أدائها مقابل أحجام مختلفة من بيانات الإدخال.Big O NotationComputations for 10 elementsComputations for 100 elementsComputations for 1000 elementsO(1)111O(log N)369O(N)101001000O(N log N)306009000O(N^2)100100001000000O(2^N)10241.26e+291.07e+301O(N!)36288009.3e+1574.02e+2567تعقيد عمليات بنية البياناتData StructureAccessSearchInsertionDeletionCommentsArray1nnnStacknn11Queuenn11Linked Listnn1nHash Table-nnnفي حالة وجود تكاليف دالة تجزئة مثالية ستكون O (1)Binary Search Treennnnفي حالة توازن تكاليف الشجرة ستكون O (log (n))B-Treelog(n)log(n)log(n)log(n)Red-Black Treelog(n)log(n)log(n)log(n)AVL Treelog(n)log(n)log(n)log(n)Bloom Filter-11-الإيجابيات الكاذبة ممكنة أثناء البحثتعقيد خوارزميات فرز الصفيفNameBestAverageWorstMemoryStableCommentsBubble sortnn2n21نعمInsertion sortnn2n21نعمSelection sortn2n2n21لاHeap sortn log(n)n log(n)n log(n)1لاMerge sortn log(n)n log(n)n log(n)nنعمQuick sortn log(n)n log(n)n2log(n)Noعادةً ما يتم إجراء الفرز السريع في مكانه مع مساحة مكدس O (log (n))Shell sortn log(n)depends on gap sequencen (log(n))21لاCounting sortn + rn + rn + rn + rYesr - أكبر رقم في المجموعةRadix sortn * kn * kn * kn + kYesك - طول أطول مفتاحمؤيدو المشروعيمكنك دعم هذا المشروع عبر ❤️️ GitHub أو ❤️️ Patreon.الناس الذين يدعمون هذا المشروع ∑ = 0ℹ️ A few more projects and articles about JavaScript and algorithms on trekhleb.dev"
7,angular/angular.js,https://github.com/angular/angular.js/blob/master/README.closure.md,JavaScript,"Using AngularJS with the Closure CompilerThe Closure Compiler project contains definitions for the AngularJS JavaScriptin its contrib/externs directory.The definitions contain externs for use with the Closure compiler (akaJSCompiler). Passing these files to the --externs parameter of a compilerpass allows using type annotations for AngularJS objects. For example,AngularJS's $scope objects can be annotated as:/** @type {angular.Scope} */var scope = $scope;This allows JSCompiler to type check accesses to scope, give warnings aboutmissing methods or incorrect arguments, and also prevents renaming of propertyaccesses with advanced compilation.The externs are incomplete and maintained on an as-needed basis, but strive tobe correct. Externs for individual modules should be added in separate files.See https://developers.google.com/closure/compiler/"
8,facebook/create-react-app,https://github.com/facebook/create-react-app/blob/main/README.md,JavaScript,"Create React App  Create React apps with no build configuration.Creating an App – How to create a new app.User Guide – How to develop apps bootstrapped with Create React App.Create React App works on macOS, Windows, and Linux.If something doesn’t work, please file an issue.If you have questions or need help, please ask in GitHub Discussions.Quick Overviewnpx create-react-app my-appcd my-appnpm startIf you've previously installed create-react-app globally via npm install -g create-react-app, we recommend you uninstall the package using npm uninstall -g create-react-app or yarn global remove create-react-app to ensure that npx always uses the latest version.(npx comes with npm 5.2+ and higher, see instructions for older npm versions)Then open http://localhost:3000/ to see your app.When you’re ready to deploy to production, create a minified bundle with npm run build.Get Started ImmediatelyYou don’t need to install or configure tools like webpack or Babel.They are preconfigured and hidden so that you can focus on the code.Create a project, and you’re good to go.Creating an AppYou’ll need to have Node 14.0.0 or later version on your local development machine (but it’s not required on the server). We recommend using the latest LTS version. You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.To create a new app, you may choose one of the following methods:npxnpx create-react-app my-app(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)npmnpm init react-app my-appnpm init <initializer> is available in npm 6+Yarnyarn create react-app my-appyarn create <starter-kit-package> is available in Yarn 0.25+It will create a directory called my-app inside the current folder.Inside that directory, it will generate the initial project structure and install the transitive dependencies:my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   ├── favicon.ico│   ├── index.html│   └── manifest.json└── src    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── serviceWorker.js    └── setupTests.jsNo configuration or complicated folder structures, only the files you need to build your app.Once the installation is done, you can open your project folder:cd my-appInside the newly created project, you can run some built-in commands:npm start or yarn startRuns the app in development mode.Open http://localhost:3000 to view it in the browser.The page will automatically reload if you make changes to the code.You will see the build errors and lint warnings in the console.npm test or yarn testRuns the test watcher in an interactive mode.By default, runs tests related to files changed since the last commit.Read more about testing.npm run build or yarn buildBuilds the app for production to the build folder.It correctly bundles React in production mode and optimizes the build for the best performance.The build is minified and the filenames include the hashes.Your app is ready to be deployed.User GuideYou can find detailed instructions on using Create React App and many tips in its documentation.How to Update to New Versions?Please refer to the User Guide for this and other information.PhilosophyOne Dependency: There is only one build dependency. It uses webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.No Configuration Required: You don't need to configure anything. A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.No Lock-In: You can “eject” to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.What’s Included?Your environment will have everything you need to build a modern single-page React app:React, JSX, ES6, TypeScript and Flow syntax support.Language extras beyond ES6 like the object spread operator.Autoprefixed CSS, so you don’t need -webkit- or other prefixes.A fast interactive unit test runner with built-in support for coverage reporting.A live development server that warns about common mistakes.A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria. (Note: Using the service worker is opt-in as of react-scripts@2.0.0 and higher)Hassle-free updates for the above tools with a single dependency.Check out this guide for an overview of how these tools fit together.The tradeoff is that these tools are preconfigured to work in a specific way. If your project needs more customization, you can \""eject\"" and customize it, but then you will need to maintain this configuration.Popular AlternativesCreate React App is a great fit for:Learning React in a comfortable and feature-rich development environment.Starting new single-page React applications.Creating examples with React for your libraries and components.Here are a few common cases where you might want to try something else:If you want to try React without hundreds of transitive build tool dependencies, consider using a single HTML file or an online sandbox instead.If you need to integrate React code with a server-side template framework like Rails, Django or Symfony, or if you’re not building a single-page app, consider using nwb, or Neutrino which are more flexible. For Rails specifically, you can use Rails Webpacker. For Symfony, try Symfony's webpack Encore.If you need to publish a React component, nwb can also do this, as well as Neutrino's react-components preset.If you want to do server rendering with React and Node.js, check out Next.js or Razzle. Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.If your website is mostly static (for example, a portfolio or a blog), consider using Gatsby or Next.js. Unlike Create React App, Gatsby pre-renders the website into HTML at build time. Next.js supports both server rendering and pre-rendering.Finally, if you need more customization, check out Neutrino and its React preset.All of the above tools can work with little to no configuration.If you prefer configuring the build yourself, follow this guide.React NativeLooking for something similar, but for React Native?Check out Expo CLI.ContributingWe'd love to have your helping hand on create-react-app! See CONTRIBUTING.md for more information on what we're looking for and how to get started.Supporting Create React AppCreate React App is a community maintained project and all contributors are volunteers. If you'd like to support the future development of Create React App then please consider donating to our Open Collective.CreditsThis project exists thanks to all the people who contribute.Thanks to Netlify for hosting our documentation.AcknowledgementsWe are grateful to the authors of existing related projects for their ideas and collaboration:@eanplatter@insin@mxstbrLicenseCreate React App is open source software licensed as MIT. The Create React App logo is licensed under a Creative Commons Attribution 4.0 International license."
9,nodejs/node,https://github.com/nodejs/node/blob/main/README.md,JavaScript,"Node.jsNode.js is an open-source, cross-platform JavaScript runtime environment.For information on using Node.js, see the Node.js website.The Node.js project uses an open governance model. TheOpenJS Foundation provides support for the project.Contributors are expected to act in a collaborative manner to movethe project forward. We encourage the constructive exchange of contraryopinions and compromise. The TSCreserves the right to limit or block contributors who repeatedly act in waysthat discourage, exhaust, or otherwise negatively affect other participants.This project has a Code of Conduct.Table of contentsSupportRelease typesDownloadCurrent and LTS releasesNightly releasesAPI documentationVerifying binariesBuilding Node.jsSecurityContributing to Node.jsCurrent project team membersTSC (Technical Steering Committee)CollaboratorsTriagersRelease keysLicenseSupportLooking for help? Check out theinstructions for getting support.Release typesCurrent: Under active development. Code for the Current release is in thebranch for its major version number (for example,v19.x). Node.js releases a newmajor version every 6 months, allowing for breaking changes. This happens inApril and October every year. Releases appearing each October have a supportlife of 8 months. Releases appearing each April convert to LTS (see below)each October.LTS: Releases that receive Long Term Support, with a focus on stabilityand security. Every even-numbered major version will become an LTS release.LTS releases receive 12 months of Active LTS support and a further 18 monthsof Maintenance. LTS release lines have alphabetically-ordered code names,beginning with v4 Argon. There are no breaking changes or feature additions,except in some special circumstances.Nightly: Code from the Current branch built every 24-hours when there arechanges. Use with caution.Current and LTS releases follow semantic versioning. Amember of the Release Team signs each Current and LTS release.For more information, see theRelease README.DownloadBinaries, installers, and source tarballs are available athttps://nodejs.org/en/download/.Current and LTS releaseshttps://nodejs.org/download/release/The latest directory is analias for the latest Current release. The latest-codename directory is analias for the latest release from an LTS line. For example, thelatest-hydrogendirectory contains the latest Hydrogen (Node.js 18) release.Nightly releaseshttps://nodejs.org/download/nightly/Each directory name and filename contains a date (in UTC) and the commitSHA at the HEAD of the release.API documentationDocumentation for the latest Current release is at https://nodejs.org/api/.Version-specific documentation is available in each release directory in thedocs subdirectory. Version-specific documentation is also athttps://nodejs.org/download/docs/.Verifying binariesDownload directories contain a SHASUMS256.txt file with SHA checksums for thefiles.To download SHASUMS256.txt using curl:curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txtTo check that a downloaded file matches the checksum, runit through sha256sum with a command such as:grep node-vx.y.z.tar.gz SHASUMS256.txt | sha256sum -c -For Current and LTS, the GPG detached signature of SHASUMS256.txt is inSHASUMS256.txt.sig. You can use it with gpg to verify the integrity ofSHASUMS256.txt. You will first need to importthe GPG keys of individuals authorized to create releases. Toimport the keys:gpg --keyserver hkps://keys.openpgp.org --recv-keys 4ED778F539E3634C779C87C6D7062848A1AB005CSee Release keys for a script to import active release keys.Next, download the SHASUMS256.txt.sig for the release:curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txt.sigThen use gpg --verify SHASUMS256.txt.sig SHASUMS256.txt to verifythe file's signature.Building Node.jsSee BUILDING.md for instructions on how to build Node.js fromsource and a list of supported platforms.SecurityFor information on reporting security vulnerabilities in Node.js, seeSECURITY.md.Contributing to Node.jsContributing to the projectWorking GroupsStrategic initiativesTechnical values and prioritizationCurrent project team membersFor information about the governance of the Node.js project, seeGOVERNANCE.md.TSC (Technical Steering Committee)TSC voting membersaduh95 -Antoine du Hamel <duhamelantoine1995@gmail.com> (he/him)anonrig -Yagiz Nizipli <yagiz@nizipli.com> (he/him)apapirovski -Anatoli Papirovski <apapirovski@mac.com> (he/him)benjamingr -Benjamin Gruenbaum <benjamingr@gmail.com>BridgeAR -Ruben Bridgewater <ruben@bridgewater.de> (he/him)cjihrig -Colin Ihrig <cjihrig@gmail.com> (he/him)danielleadams -Danielle Adams <adamzdanielle@gmail.com> (she/her)GeoffreyBooth -Geoffrey Booth <webadmin@geoffreybooth.com> (he/him)gireeshpunathil -Gireesh Punathil <gpunathi@in.ibm.com> (he/him)jasnell -James M Snell <jasnell@gmail.com> (he/him)joyeecheung -Joyee Cheung <joyeec9h3@gmail.com> (she/her)legendecas -Chengzhong Wu <legendecas@gmail.com> (he/him)mcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)MoLow -Moshe Atlow <moshe@atlow.co.il> (he/him)RafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)RaisinTen -Darshan Sen <raisinten@gmail.com> (he/him)richardlau -Richard Lau <rlau@redhat.com>ronag -Robert Nagy <ronagy@icloud.com>ruyadorno -Ruy Adorno <ruyadorno@google.com> (he/him)targos -Michaël Zasso <targos@protonmail.com> (he/him)tniessen -Tobias Nießen <tniessen@tnie.de> (he/him)Trott -Rich Trott <rtrott@gmail.com> (he/him)TSC regular membersBethGriggs -Beth Griggs <bethanyngriggs@gmail.com> (she/her)bnoordhuis -Ben Noordhuis <info@bnoordhuis.nl>ChALkeR -Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)codebytere -Shelley Vohr <shelley.vohr@gmail.com> (she/her)danbev -Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)fhinkel -Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)gabrielschulhof -Gabriel Schulhof <gabrielschulhof@gmail.com>mscdex -Brian White <mscdex@mscdex.net>MylesBorins -Myles Borins <myles.borins@gmail.com> (he/him)rvagg -Rod Vagg <r@va.gg>TimothyGu -Tiancheng \""Timothy\"" Gu <timothygu99@gmail.com> (he/him)TSC emeriti membersTSC emeriti membersaddaleax -Anna Henningsen <anna@addaleax.net> (she/her)chrisdickinson -Chris Dickinson <christopher.s.dickinson@gmail.com>evanlucas -Evan Lucas <evanlucas@me.com> (he/him)Fishrock123 -Jeremiah Senkpiel <fishrock123@rocketmail.com> (he/they)gibfahn -Gibson Fahnestock <gibfahn@gmail.com> (he/him)indutny -Fedor Indutny <fedor@indutny.com>isaacs -Isaac Z. Schlueter <i@izs.me>joshgav -Josh Gavant <josh.gavant@outlook.com>mmarchini -Mary Marchini <oss@mmarchini.me> (she/her)nebrius -Bryan Hughes <bryan@nebri.us>ofrobots -Ali Ijaz Sheikh <ofrobots@google.com> (he/him)orangemocha -Alexis Campailla <orangemocha@nodejs.org>piscisaureus -Bert Belder <bertbelder@gmail.com>sam-github -Sam Roberts <vieuxtech@gmail.com>shigeki -Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)thefourtheye -Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)trevnorris -Trevor Norris <trev.norris@gmail.com>Collaboratorsaddaleax -Anna Henningsen <anna@addaleax.net> (she/her)aduh95 -Antoine du Hamel <duhamelantoine1995@gmail.com> (he/him)anonrig -Yagiz Nizipli <yagiz@nizipli.com> (he/him)antsmartian -Anto Aravinth <anto.aravinth.cse@gmail.com> (he/him)apapirovski -Anatoli Papirovski <apapirovski@mac.com> (he/him)AshCripps -Ash Cripps <email@ashleycripps.co.uk>atlowChemi -Chemi Atlow <chemi@atlow.co.il> (he/him)Ayase-252 -Qingyu Deng <i@ayase-lab.com>bengl -Bryan English <bryan@bryanenglish.com> (he/him)benjamingr -Benjamin Gruenbaum <benjamingr@gmail.com>BethGriggs -Beth Griggs <bethanyngriggs@gmail.com> (she/her)bmeck -Bradley Farias <bradley.meck@gmail.com>bnb -Tierney Cyren <hello@bnb.im> (they/he)bnoordhuis -Ben Noordhuis <info@bnoordhuis.nl>BridgeAR -Ruben Bridgewater <ruben@bridgewater.de> (he/him)cclauss -Christian Clauss <cclauss@me.com> (he/him)ChALkeR -Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)cjihrig -Colin Ihrig <cjihrig@gmail.com> (he/him)codebytere -Shelley Vohr <shelley.vohr@gmail.com> (she/her)cola119 -Kohei Ueno <kohei.ueno119@gmail.com> (he/him)daeyeon -Daeyeon Jeong <daeyeon.dev@gmail.com> (he/him)danbev -Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)danielleadams -Danielle Adams <adamzdanielle@gmail.com> (she/her)debadree25 -Debadree Chatterjee <debadree333@gmail.com> (he/him)deokjinkim -Deokjin Kim <deokjin81.kim@gmail.com> (he/him)devnexen -David Carlier <devnexen@gmail.com>devsnek -Gus Caplan <me@gus.host> (they/them)edsadr -Adrian Estrada <edsadr@gmail.com> (he/him)erickwendel -Erick Wendel <erick.workspace@gmail.com> (he/him)fhinkel -Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)F3n67u -Feng Yu <F3n67u@outlook.com> (he/him)Flarna -Gerhard Stöbich <deb2001-github@yahoo.de>  (he/they)gabrielschulhof -Gabriel Schulhof <gabrielschulhof@gmail.com>gengjiawen -Jiawen Geng <technicalcute@gmail.com>GeoffreyBooth -Geoffrey Booth <webadmin@geoffreybooth.com> (he/him)gireeshpunathil -Gireesh Punathil <gpunathi@in.ibm.com> (he/him)guybedford -Guy Bedford <guybedford@gmail.com> (he/him)HarshithaKP -Harshitha K P <harshitha014@gmail.com> (she/her)himself65 -Zeyu \""Alex\"" Yang <himself65@outlook.com> (he/him)iansu -Ian Sutherland <ian@iansutherland.ca>JacksonTian -Jackson Tian <shyvo1987@gmail.com>JakobJingleheimer -Jacob Smith <jacob@frende.me> (he/him)jasnell -James M Snell <jasnell@gmail.com> (he/him)jkrems -Jan Krems <jan.krems@gmail.com> (he/him)joesepi -Joe Sepi <sepi@joesepi.com> (he/him)joyeecheung -Joyee Cheung <joyeec9h3@gmail.com> (she/her)juanarbol -Juan José Arboleda <soyjuanarbol@gmail.com> (he/him)JungMinu -Minwoo Jung <nodecorelab@gmail.com> (he/him)KhafraDev -Matthew Aitken <maitken033380023@gmail.com> (he/him)kuriyosh -Yoshiki Kurihara <yosyos0306@gmail.com> (he/him)kvakil -Keyhan Vakil <kvakil@sylph.kvakil.me>legendecas -Chengzhong Wu <legendecas@gmail.com> (he/him)Leko -Shingo Inoue <leko.noor@gmail.com> (he/him)linkgoron -Nitzan Uziely <linkgoron@gmail.com>LiviaMedeiros -LiviaMedeiros <livia@cirno.name>lpinca -Luigi Pinca <luigipinca@gmail.com> (he/him)lukekarrys -Luke Karrys <luke@lukekarrys.com> (he/him)Lxxyx -Zijian Liu <lxxyxzj@gmail.com> (he/him)marco-ippolito -Marco Ippolito <marcoippolito54@gmail.com> (he/him)marsonya -Akhil Marsonya <akhil.marsonya27@gmail.com> (he/him)mcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)meixg -Xuguang Mei <meixuguang@gmail.com> (he/him)Mesteery -Mestery <mestery@protonmail.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)miladfarca -Milad Fa <mfarazma@redhat.com> (he/him)mildsunrise -Alba Mendez <me@alba.sh> (she/her)MoLow -Moshe Atlow <moshe@atlow.co.il> (he/him)mscdex -Brian White <mscdex@mscdex.net>MylesBorins -Myles Borins <myles.borins@gmail.com> (he/him)ovflowd -Claudio Wunder <cwunder@gnome.org> (he/they)oyyd -Ouyang Yadong <oyydoibh@gmail.com> (he/him)panva -Filip Skokan <panva.ip@gmail.com> (he/him)Qard -Stephen Belanger <admin@stephenbelanger.com> (he/him)RafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)RaisinTen -Darshan Sen <raisinten@gmail.com> (he/him)rluvaton -Raz Luvaton <rluvaton@gmail.com> (he/him)richardlau -Richard Lau <rlau@redhat.com>rickyes -Ricky Zhou <0x19951125@gmail.com> (he/him)ronag -Robert Nagy <ronagy@icloud.com>ruyadorno -Ruy Adorno <ruyadorno@google.com> (he/him)rvagg -Rod Vagg <rod@vagg.org>ryzokuken -Ujjwal Sharma <ryzokuken@disroot.org> (he/him)santigimeno -Santiago Gimeno <santiago.gimeno@gmail.com>shisama -Masashi Hirano <shisama07@gmail.com> (he/him)ShogunPanda -Paolo Insogna <paolo@cowtech.it> (he/him)srl295 -Steven R Loomis <srl295@gmail.com>sxa -Stewart X Addison <sxa@redhat.com> (he/him)targos -Michaël Zasso <targos@protonmail.com> (he/him)theanarkh -theanarkh <theratliter@gmail.com> (he/him)TimothyGu -Tiancheng \""Timothy\"" Gu <timothygu99@gmail.com> (he/him)tniessen -Tobias Nießen <tniessen@tnie.de> (he/him)trivikr -Trivikram Kamat <trivikr.dev@gmail.com>Trott -Rich Trott <rtrott@gmail.com> (he/him)vdeturckheim -Vladimir de Turckheim <vlad2t@hotmail.com> (he/him)vmoroz -Vladimir Morozov <vmorozov@microsoft.com> (he/him)VoltrexKeyva -Mohammed Keyvanzadeh <mohammadkeyvanzade94@gmail.com> (he/him)watilde -Daijiro Wachi <daijiro.wachi@gmail.com> (he/him)XadillaX -Khaidi Chu <i@2333.moe> (he/him)yashLadha -Yash Ladha <yash@yashladha.in> (he/him)ZYSzys -Yongsheng Zhang <zyszys98@gmail.com> (he/him)EmeritiCollaborator emeritiak239 -Aleksei Koziatinskii <ak239spb@gmail.com>andrasq -Andras <andras@kinvey.com>AnnaMag -Anna M. Kedzierska <anna.m.kedzierska@gmail.com>AndreasMadsen -Andreas Madsen <amwebdk@gmail.com> (he/him)aqrln -Alexey Orlenko <eaglexrlnk@gmail.com> (he/him)bcoe -Ben Coe <bencoe@gmail.com> (he/him)bmeurer -Benedikt Meurer <benedikt.meurer@gmail.com>boneskull -Christopher Hiller <boneskull@boneskull.com> (he/him)brendanashworth -Brendan Ashworth <brendan.ashworth@me.com>bzoz -Bartosz Sosnowski <bartosz@janeasystems.com>calvinmetcalf -Calvin Metcalf <calvin.metcalf@gmail.com>chrisdickinson -Chris Dickinson <christopher.s.dickinson@gmail.com>claudiorodriguez -Claudio Rodriguez <cjrodr@yahoo.com>DavidCai1993 -David Cai <davidcai1993@yahoo.com> (he/him)davisjam -Jamie Davis <davisjam@vt.edu> (he/him)digitalinfinity -Hitesh Kanwathirtha <digitalinfinity@gmail.com> (he/him)dmabupt -Xu Meng <dmabupt@gmail.com> (he/him)dnlupdnlup <dnlup.dev@gmail.com>eljefedelrodeodeljefe -Robert Jefe Lindstaedt <robert.lindstaedt@gmail.com>estliberitas -Alexander Makarenko <estliberitas@gmail.com>eugeneo -Eugene Ostroukhov <eostroukhov@google.com>evanlucas -Evan Lucas <evanlucas@me.com> (he/him)firedfox -Daniel Wang <wangyang0123@gmail.com>Fishrock123 -Jeremiah Senkpiel <fishrock123@rocketmail.com> (he/they)gdams -George Adams <gadams@microsoft.com> (he/him)geek -Wyatt Preul <wpreul@gmail.com>gibfahn -Gibson Fahnestock <gibfahn@gmail.com> (he/him)glentiki -Glen Keane <glenkeane.94@gmail.com> (he/him)hashseed -Yang Guo <yangguo@chromium.org> (he/him)hiroppy -Yuta Hiroto <hello@hiroppy.me> (he/him)iarna -Rebecca Turner <me@re-becca.org>imran-iq -Imran Iqbal <imran@imraniqbal.org>imyller -Ilkka Myller <ilkka.myller@nodefield.com>indutny -Fedor Indutny <fedor@indutny.com>isaacs -Isaac Z. Schlueter <i@izs.me>italoacasas -Italo A. Casas <me@italoacasas.com> (he/him)jasongin -Jason Ginchereau <jasongin@microsoft.com>jbergstroem -Johan Bergström <bugs@bergstroem.nu>jdalton -John-David Dalton <john.david.dalton@gmail.com>jhamhader -Yuval Brik <yuval@brik.org.il>joaocgreis -João Reis <reis@janeasystems.com>joshgav -Josh Gavant <josh.gavant@outlook.com>julianduque -Julian Duque <julianduquej@gmail.com> (he/him)kfarnung -Kyle Farnung <kfarnung@microsoft.com> (he/him)kunalspathak -Kunal Pathak <kunal.pathak@microsoft.com>lance -Lance Ball <lball@redhat.com> (he/him)lucamaraschi -Luca Maraschi <luca.maraschi@gmail.com> (he/him)lundibundi -Denys Otrishko <shishugi@gmail.com> (he/him)lxe -Aleksey Smolenchuk <lxe@lxe.co>maclover7 -Jon Moss <me@jonathanmoss.me> (he/him)mafintosh -Mathias Buus <mathiasbuus@gmail.com> (he/him)matthewloring -Matthew Loring <mattloring@google.com>micnic -Nicu Micleușanu <micnic90@gmail.com> (he/him)mikeal -Mikeal Rogers <mikeal.rogers@gmail.com>misterdjules -Julien Gilli <jgilli@netflix.com>mmarchini -Mary Marchini <oss@mmarchini.me> (she/her)monsanto -Christopher Monsanto <chris@monsan.to>MoonBall -Chen Gang <gangc.cxy@foxmail.com>not-an-aardvark -Teddy Katz <teddy.katz@gmail.com> (he/him)ofrobots -Ali Ijaz Sheikh <ofrobots@google.com> (he/him)Olegas -Oleg Elifantiev <oleg@elifantiev.ru>orangemocha -Alexis Campailla <orangemocha@nodejs.org>othiym23 -Forrest L Norvell <ogd@aoaioxxysz.net> (they/them/themself)petkaantonov -Petka Antonov <petka_antonov@hotmail.com>phillipj -Phillip Johnsen <johphi@gmail.com>piscisaureus -Bert Belder <bertbelder@gmail.com>pmq20 -Minqi Pan <pmq2001@gmail.com>PoojaDurgad -Pooja D P <Pooja.D.P@ibm.com> (she/her)princejwesley -Prince John Wesley <princejohnwesley@gmail.com>psmarshall -Peter Marshall <petermarshall@chromium.org> (he/him)puzpuzpuz -Andrey Pechkurov <apechkurov@gmail.com> (he/him)refack -Refael Ackermann (רפאל פלחי) <refack@gmail.com> (he/him/הוא/אתה)rexagod -Pranshu Srivastava <rexagod@gmail.com> (he/him)rlidwka -Alex Kocharin <alex@kocharin.ru>rmg -Ryan Graham <r.m.graham@gmail.com>robertkowalski -Robert Kowalski <rok@kowalski.gd>romankl -Roman Klauke <romaaan.git@gmail.com>ronkorving -Ron Korving <ron@ronkorving.nl>RReverser -Ingvar Stepanyan <me@rreverser.com>rubys -Sam Ruby <rubys@intertwingly.net>saghul -Saúl Ibarra Corretgé <s@saghul.net>sam-github -Sam Roberts <vieuxtech@gmail.com>sebdeckers -Sebastiaan Deckers <sebdeckers83@gmail.com>seishun -Nikolai Vavilov <vvnicholas@gmail.com>shigeki -Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)silverwind -Roman Reiss <me@silverwind.io>starkwang -Weijia Wang <starkwang@126.com>stefanmb -Stefan Budeanu <stefan@budeanu.com>tellnes -Christian Tellnes <christian@tellnes.no>thefourtheye -Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)thlorenz -Thorsten Lorenz <thlorenz@gmx.de>trevnorris -Trevor Norris <trev.norris@gmail.com>tunniclm -Mike Tunnicliffe <m.j.tunnicliffe@gmail.com>vkurchatkin -Vladimir Kurchatkin <vladimir.kurchatkin@gmail.com>vsemozhetbyt -Vse Mozhet Byt <vsemozhetbyt@gmail.com> (he/him)watson -Thomas Watson <w@tson.dk>whitlockjc -Jeremy Whitlock <jwhitlock@apache.org>yhwang -Yihong Wang <yh.wang@ibm.com>yorkie -Yorkie Liu <yorkiefixer@gmail.com>yosuke-furukawa -Yosuke Furukawa <yosuke.furukawa@gmail.com>Collaborators follow the Collaborator Guide inmaintaining the Node.js project.TriagersatlowChemi -Chemi Atlow <chemi@atlow.co.il> (he/him)Ayase-252 -Qingyu Deng <i@ayase-lab.com>bmuenzenmeyer -Brian Muenzenmeyer <brian.muenzenmeyer@gmail.com> (he/him)daeyeon -Daeyeon Jeong <daeyeon.dev@gmail.com> (he/him)F3n67u -Feng Yu <F3n67u@outlook.com> (he/him)himadriganguly -Himadri Ganguly <himadri.tech@gmail.com> (he/him)iam-frankqiu -Frank Qiu <iam.frankqiu@gmail.com> (he/him)marsonya -Akhil Marsonya <akhil.marsonya27@gmail.com> (he/him)meixg -Xuguang Mei <meixuguang@gmail.com> (he/him)Mesteery -Mestery <mestery@protonmail.com> (he/him)preveen-stack -Preveen Padmanabhan <wide4head@gmail.com> (he/him)PoojaDurgad -Pooja Durgad <Pooja.D.P@ibm.com>RaisinTen -Darshan Sen <raisinten@gmail.com>VoltrexKeyva -Mohammed Keyvanzadeh <mohammadkeyvanzade94@gmail.com> (he/him)Triagers follow the Triage Guide whenresponding to new issues.Release keysPrimary GPG keys for Node.js Releasers (some Releasers sign with subkeys):Beth Griggs <bethanyngriggs@gmail.com>4ED778F539E3634C779C87C6D7062848A1AB005CBryan English <bryan@bryanenglish.com>141F07595B7B3FFE74309A937405533BE57C7D57Danielle Adams <adamzdanielle@gmail.com>74F12602B6F1C4E913FAA37AD3A89613643B6201Juan José Arboleda <soyjuanarbol@gmail.com>DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7Michaël Zasso <targos@protonmail.com>8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600Myles Borins <myles.borins@gmail.com>C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8RafaelGSS <rafael.nunu@hotmail.com>890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4Richard Lau <rlau@redhat.com>C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93CRuy Adorno <ruyadorno@hotmail.com>108F52B48DB57BB0CC439B2997B01419BD92F80ATo import the full set of trusted release keys (including subkeys possibly usedto sign releases):gpg --keyserver hkps://keys.openpgp.org --recv-keys 4ED778F539E3634C779C87C6D7062848A1AB005Cgpg --keyserver hkps://keys.openpgp.org --recv-keys 141F07595B7B3FFE74309A937405533BE57C7D57gpg --keyserver hkps://keys.openpgp.org --recv-keys 74F12602B6F1C4E913FAA37AD3A89613643B6201gpg --keyserver hkps://keys.openpgp.org --recv-keys DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7gpg --keyserver hkps://keys.openpgp.org --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600gpg --keyserver hkps://keys.openpgp.org --recv-keys C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8gpg --keyserver hkps://keys.openpgp.org --recv-keys 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4gpg --keyserver hkps://keys.openpgp.org --recv-keys C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93Cgpg --keyserver hkps://keys.openpgp.org --recv-keys 108F52B48DB57BB0CC439B2997B01419BD92F80ASee Verifying binaries for how to use these keys toverify a downloaded file.Other keys used to sign some previous releasesChris Dickinson <christopher.s.dickinson@gmail.com>9554F04D7259F04124DE6B476D5A82AC7E37093BColin Ihrig <cjihrig@gmail.com>94AE36675C464D64BAFA68DD7434390BDBE9B9C5Danielle Adams <adamzdanielle@gmail.com>1C050899334244A8AF75E53792EF661D867B9DFAEvan Lucas <evanlucas@me.com>B9AE9905FFD7803F25714661B63B535A4C206CA9Gibson Fahnestock <gibfahn@gmail.com>77984A986EBC2AA786BC0F66B01FBB92821C587AIsaac Z. Schlueter <i@izs.me>93C7E9E91B49E432C2F75674B0A78B0A6C481CF6Italo A. Casas <me@italoacasas.com>56730D5401028683275BD23C23EFEFE93C4CFFFEJames M Snell <jasnell@keybase.io>71DCFD284A79C3B38668286BC97EC7A07EDE3FC1Jeremiah Senkpiel <fishrock@keybase.io>FD3A5288F042B6850C66B31F09FE44734EB7990EJuan José Arboleda <soyjuanarbol@gmail.com>61FC681DFB92A079F1685E77973F295594EC4689Julien Gilli <jgilli@fastmail.fm>114F43EE0176B71C7BC219DD50A3051F888C628DRod Vagg <rod@vagg.org>DD8F2338BAE7501E3DD5AC78C273792F7D83545DRuben Bridgewater <ruben@bridgewater.de>A48C2BEE680E841632CD4E44F07496B3EB3C1762Shelley Vohr <shelley.vohr@gmail.com>B9E2F5981AA6E0CD28160D9FF13993A75599653CTimothy J Fontaine <tjfontaine@gmail.com>7937DFD2AB06298B2293C3187D33FF9D0246406DSecurity release stewardsWhen possible, the commitment to take slots in thesecurity release steward rotation is made by companies in orderto ensure individuals who act as security stewards have thesupport and recognition from their employer to be able toprioritize security releases. Security release stewards manage securityreleases on a rotation basis as outlined in thesecurity release process.Datadogbengl -Bryan English <bryan@bryanenglish.com> (he/him)NearFormRafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)NodeSourcejuanarbol -Juan José Arboleda <soyjuanarbol@gmail.com> (he/him)Platformaticmcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)Red Hat and IBMjoesepi -Joe Sepi <joesepi@ibm.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)LicenseNode.js is available under theMIT license. Node.js also includesexternal libraries that are available under a variety of licenses.  SeeLICENSE for the fulllicense text."
10,tastejs/todomvc,https://github.com/nodejs/node/blob/main/README.md,JavaScript,"Node.jsNode.js is an open-source, cross-platform JavaScript runtime environment.For information on using Node.js, see the Node.js website.The Node.js project uses an open governance model. TheOpenJS Foundation provides support for the project.Contributors are expected to act in a collaborative manner to movethe project forward. We encourage the constructive exchange of contraryopinions and compromise. The TSCreserves the right to limit or block contributors who repeatedly act in waysthat discourage, exhaust, or otherwise negatively affect other participants.This project has a Code of Conduct.Table of contentsSupportRelease typesDownloadCurrent and LTS releasesNightly releasesAPI documentationVerifying binariesBuilding Node.jsSecurityContributing to Node.jsCurrent project team membersTSC (Technical Steering Committee)CollaboratorsTriagersRelease keysLicenseSupportLooking for help? Check out theinstructions for getting support.Release typesCurrent: Under active development. Code for the Current release is in thebranch for its major version number (for example,v19.x). Node.js releases a newmajor version every 6 months, allowing for breaking changes. This happens inApril and October every year. Releases appearing each October have a supportlife of 8 months. Releases appearing each April convert to LTS (see below)each October.LTS: Releases that receive Long Term Support, with a focus on stabilityand security. Every even-numbered major version will become an LTS release.LTS releases receive 12 months of Active LTS support and a further 18 monthsof Maintenance. LTS release lines have alphabetically-ordered code names,beginning with v4 Argon. There are no breaking changes or feature additions,except in some special circumstances.Nightly: Code from the Current branch built every 24-hours when there arechanges. Use with caution.Current and LTS releases follow semantic versioning. Amember of the Release Team signs each Current and LTS release.For more information, see theRelease README.DownloadBinaries, installers, and source tarballs are available athttps://nodejs.org/en/download/.Current and LTS releaseshttps://nodejs.org/download/release/The latest directory is analias for the latest Current release. The latest-codename directory is analias for the latest release from an LTS line. For example, thelatest-hydrogendirectory contains the latest Hydrogen (Node.js 18) release.Nightly releaseshttps://nodejs.org/download/nightly/Each directory name and filename contains a date (in UTC) and the commitSHA at the HEAD of the release.API documentationDocumentation for the latest Current release is at https://nodejs.org/api/.Version-specific documentation is available in each release directory in thedocs subdirectory. Version-specific documentation is also athttps://nodejs.org/download/docs/.Verifying binariesDownload directories contain a SHASUMS256.txt file with SHA checksums for thefiles.To download SHASUMS256.txt using curl:curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txtTo check that a downloaded file matches the checksum, runit through sha256sum with a command such as:grep node-vx.y.z.tar.gz SHASUMS256.txt | sha256sum -c -For Current and LTS, the GPG detached signature of SHASUMS256.txt is inSHASUMS256.txt.sig. You can use it with gpg to verify the integrity ofSHASUMS256.txt. You will first need to importthe GPG keys of individuals authorized to create releases. Toimport the keys:gpg --keyserver hkps://keys.openpgp.org --recv-keys 4ED778F539E3634C779C87C6D7062848A1AB005CSee Release keys for a script to import active release keys.Next, download the SHASUMS256.txt.sig for the release:curl -O https://nodejs.org/dist/vx.y.z/SHASUMS256.txt.sigThen use gpg --verify SHASUMS256.txt.sig SHASUMS256.txt to verifythe file's signature.Building Node.jsSee BUILDING.md for instructions on how to build Node.js fromsource and a list of supported platforms.SecurityFor information on reporting security vulnerabilities in Node.js, seeSECURITY.md.Contributing to Node.jsContributing to the projectWorking GroupsStrategic initiativesTechnical values and prioritizationCurrent project team membersFor information about the governance of the Node.js project, seeGOVERNANCE.md.TSC (Technical Steering Committee)TSC voting membersaduh95 -Antoine du Hamel <duhamelantoine1995@gmail.com> (he/him)anonrig -Yagiz Nizipli <yagiz@nizipli.com> (he/him)apapirovski -Anatoli Papirovski <apapirovski@mac.com> (he/him)benjamingr -Benjamin Gruenbaum <benjamingr@gmail.com>BridgeAR -Ruben Bridgewater <ruben@bridgewater.de> (he/him)cjihrig -Colin Ihrig <cjihrig@gmail.com> (he/him)danielleadams -Danielle Adams <adamzdanielle@gmail.com> (she/her)GeoffreyBooth -Geoffrey Booth <webadmin@geoffreybooth.com> (he/him)gireeshpunathil -Gireesh Punathil <gpunathi@in.ibm.com> (he/him)jasnell -James M Snell <jasnell@gmail.com> (he/him)joyeecheung -Joyee Cheung <joyeec9h3@gmail.com> (she/her)legendecas -Chengzhong Wu <legendecas@gmail.com> (he/him)mcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)MoLow -Moshe Atlow <moshe@atlow.co.il> (he/him)RafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)RaisinTen -Darshan Sen <raisinten@gmail.com> (he/him)richardlau -Richard Lau <rlau@redhat.com>ronag -Robert Nagy <ronagy@icloud.com>ruyadorno -Ruy Adorno <ruyadorno@google.com> (he/him)targos -Michaël Zasso <targos@protonmail.com> (he/him)tniessen -Tobias Nießen <tniessen@tnie.de> (he/him)Trott -Rich Trott <rtrott@gmail.com> (he/him)TSC regular membersBethGriggs -Beth Griggs <bethanyngriggs@gmail.com> (she/her)bnoordhuis -Ben Noordhuis <info@bnoordhuis.nl>ChALkeR -Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)codebytere -Shelley Vohr <shelley.vohr@gmail.com> (she/her)danbev -Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)fhinkel -Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)gabrielschulhof -Gabriel Schulhof <gabrielschulhof@gmail.com>mscdex -Brian White <mscdex@mscdex.net>MylesBorins -Myles Borins <myles.borins@gmail.com> (he/him)rvagg -Rod Vagg <r@va.gg>TimothyGu -Tiancheng \""Timothy\"" Gu <timothygu99@gmail.com> (he/him)TSC emeriti membersTSC emeriti membersaddaleax -Anna Henningsen <anna@addaleax.net> (she/her)chrisdickinson -Chris Dickinson <christopher.s.dickinson@gmail.com>evanlucas -Evan Lucas <evanlucas@me.com> (he/him)Fishrock123 -Jeremiah Senkpiel <fishrock123@rocketmail.com> (he/they)gibfahn -Gibson Fahnestock <gibfahn@gmail.com> (he/him)indutny -Fedor Indutny <fedor@indutny.com>isaacs -Isaac Z. Schlueter <i@izs.me>joshgav -Josh Gavant <josh.gavant@outlook.com>mmarchini -Mary Marchini <oss@mmarchini.me> (she/her)nebrius -Bryan Hughes <bryan@nebri.us>ofrobots -Ali Ijaz Sheikh <ofrobots@google.com> (he/him)orangemocha -Alexis Campailla <orangemocha@nodejs.org>piscisaureus -Bert Belder <bertbelder@gmail.com>sam-github -Sam Roberts <vieuxtech@gmail.com>shigeki -Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)thefourtheye -Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)trevnorris -Trevor Norris <trev.norris@gmail.com>Collaboratorsaddaleax -Anna Henningsen <anna@addaleax.net> (she/her)aduh95 -Antoine du Hamel <duhamelantoine1995@gmail.com> (he/him)anonrig -Yagiz Nizipli <yagiz@nizipli.com> (he/him)antsmartian -Anto Aravinth <anto.aravinth.cse@gmail.com> (he/him)apapirovski -Anatoli Papirovski <apapirovski@mac.com> (he/him)AshCripps -Ash Cripps <email@ashleycripps.co.uk>atlowChemi -Chemi Atlow <chemi@atlow.co.il> (he/him)Ayase-252 -Qingyu Deng <i@ayase-lab.com>bengl -Bryan English <bryan@bryanenglish.com> (he/him)benjamingr -Benjamin Gruenbaum <benjamingr@gmail.com>BethGriggs -Beth Griggs <bethanyngriggs@gmail.com> (she/her)bmeck -Bradley Farias <bradley.meck@gmail.com>bnb -Tierney Cyren <hello@bnb.im> (they/he)bnoordhuis -Ben Noordhuis <info@bnoordhuis.nl>BridgeAR -Ruben Bridgewater <ruben@bridgewater.de> (he/him)cclauss -Christian Clauss <cclauss@me.com> (he/him)ChALkeR -Сковорода Никита Андреевич <chalkerx@gmail.com> (he/him)cjihrig -Colin Ihrig <cjihrig@gmail.com> (he/him)codebytere -Shelley Vohr <shelley.vohr@gmail.com> (she/her)cola119 -Kohei Ueno <kohei.ueno119@gmail.com> (he/him)daeyeon -Daeyeon Jeong <daeyeon.dev@gmail.com> (he/him)danbev -Daniel Bevenius <daniel.bevenius@gmail.com> (he/him)danielleadams -Danielle Adams <adamzdanielle@gmail.com> (she/her)debadree25 -Debadree Chatterjee <debadree333@gmail.com> (he/him)deokjinkim -Deokjin Kim <deokjin81.kim@gmail.com> (he/him)devnexen -David Carlier <devnexen@gmail.com>devsnek -Gus Caplan <me@gus.host> (they/them)edsadr -Adrian Estrada <edsadr@gmail.com> (he/him)erickwendel -Erick Wendel <erick.workspace@gmail.com> (he/him)fhinkel -Franziska Hinkelmann <franziska.hinkelmann@gmail.com> (she/her)F3n67u -Feng Yu <F3n67u@outlook.com> (he/him)Flarna -Gerhard Stöbich <deb2001-github@yahoo.de>  (he/they)gabrielschulhof -Gabriel Schulhof <gabrielschulhof@gmail.com>gengjiawen -Jiawen Geng <technicalcute@gmail.com>GeoffreyBooth -Geoffrey Booth <webadmin@geoffreybooth.com> (he/him)gireeshpunathil -Gireesh Punathil <gpunathi@in.ibm.com> (he/him)guybedford -Guy Bedford <guybedford@gmail.com> (he/him)HarshithaKP -Harshitha K P <harshitha014@gmail.com> (she/her)himself65 -Zeyu \""Alex\"" Yang <himself65@outlook.com> (he/him)iansu -Ian Sutherland <ian@iansutherland.ca>JacksonTian -Jackson Tian <shyvo1987@gmail.com>JakobJingleheimer -Jacob Smith <jacob@frende.me> (he/him)jasnell -James M Snell <jasnell@gmail.com> (he/him)jkrems -Jan Krems <jan.krems@gmail.com> (he/him)joesepi -Joe Sepi <sepi@joesepi.com> (he/him)joyeecheung -Joyee Cheung <joyeec9h3@gmail.com> (she/her)juanarbol -Juan José Arboleda <soyjuanarbol@gmail.com> (he/him)JungMinu -Minwoo Jung <nodecorelab@gmail.com> (he/him)KhafraDev -Matthew Aitken <maitken033380023@gmail.com> (he/him)kuriyosh -Yoshiki Kurihara <yosyos0306@gmail.com> (he/him)kvakil -Keyhan Vakil <kvakil@sylph.kvakil.me>legendecas -Chengzhong Wu <legendecas@gmail.com> (he/him)Leko -Shingo Inoue <leko.noor@gmail.com> (he/him)linkgoron -Nitzan Uziely <linkgoron@gmail.com>LiviaMedeiros -LiviaMedeiros <livia@cirno.name>lpinca -Luigi Pinca <luigipinca@gmail.com> (he/him)lukekarrys -Luke Karrys <luke@lukekarrys.com> (he/him)Lxxyx -Zijian Liu <lxxyxzj@gmail.com> (he/him)marco-ippolito -Marco Ippolito <marcoippolito54@gmail.com> (he/him)marsonya -Akhil Marsonya <akhil.marsonya27@gmail.com> (he/him)mcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)meixg -Xuguang Mei <meixuguang@gmail.com> (he/him)Mesteery -Mestery <mestery@protonmail.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)miladfarca -Milad Fa <mfarazma@redhat.com> (he/him)mildsunrise -Alba Mendez <me@alba.sh> (she/her)MoLow -Moshe Atlow <moshe@atlow.co.il> (he/him)mscdex -Brian White <mscdex@mscdex.net>MylesBorins -Myles Borins <myles.borins@gmail.com> (he/him)ovflowd -Claudio Wunder <cwunder@gnome.org> (he/they)oyyd -Ouyang Yadong <oyydoibh@gmail.com> (he/him)panva -Filip Skokan <panva.ip@gmail.com> (he/him)Qard -Stephen Belanger <admin@stephenbelanger.com> (he/him)RafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)RaisinTen -Darshan Sen <raisinten@gmail.com> (he/him)rluvaton -Raz Luvaton <rluvaton@gmail.com> (he/him)richardlau -Richard Lau <rlau@redhat.com>rickyes -Ricky Zhou <0x19951125@gmail.com> (he/him)ronag -Robert Nagy <ronagy@icloud.com>ruyadorno -Ruy Adorno <ruyadorno@google.com> (he/him)rvagg -Rod Vagg <rod@vagg.org>ryzokuken -Ujjwal Sharma <ryzokuken@disroot.org> (he/him)santigimeno -Santiago Gimeno <santiago.gimeno@gmail.com>shisama -Masashi Hirano <shisama07@gmail.com> (he/him)ShogunPanda -Paolo Insogna <paolo@cowtech.it> (he/him)srl295 -Steven R Loomis <srl295@gmail.com>sxa -Stewart X Addison <sxa@redhat.com> (he/him)targos -Michaël Zasso <targos@protonmail.com> (he/him)theanarkh -theanarkh <theratliter@gmail.com> (he/him)TimothyGu -Tiancheng \""Timothy\"" Gu <timothygu99@gmail.com> (he/him)tniessen -Tobias Nießen <tniessen@tnie.de> (he/him)trivikr -Trivikram Kamat <trivikr.dev@gmail.com>Trott -Rich Trott <rtrott@gmail.com> (he/him)vdeturckheim -Vladimir de Turckheim <vlad2t@hotmail.com> (he/him)vmoroz -Vladimir Morozov <vmorozov@microsoft.com> (he/him)VoltrexKeyva -Mohammed Keyvanzadeh <mohammadkeyvanzade94@gmail.com> (he/him)watilde -Daijiro Wachi <daijiro.wachi@gmail.com> (he/him)XadillaX -Khaidi Chu <i@2333.moe> (he/him)yashLadha -Yash Ladha <yash@yashladha.in> (he/him)ZYSzys -Yongsheng Zhang <zyszys98@gmail.com> (he/him)EmeritiCollaborator emeritiak239 -Aleksei Koziatinskii <ak239spb@gmail.com>andrasq -Andras <andras@kinvey.com>AnnaMag -Anna M. Kedzierska <anna.m.kedzierska@gmail.com>AndreasMadsen -Andreas Madsen <amwebdk@gmail.com> (he/him)aqrln -Alexey Orlenko <eaglexrlnk@gmail.com> (he/him)bcoe -Ben Coe <bencoe@gmail.com> (he/him)bmeurer -Benedikt Meurer <benedikt.meurer@gmail.com>boneskull -Christopher Hiller <boneskull@boneskull.com> (he/him)brendanashworth -Brendan Ashworth <brendan.ashworth@me.com>bzoz -Bartosz Sosnowski <bartosz@janeasystems.com>calvinmetcalf -Calvin Metcalf <calvin.metcalf@gmail.com>chrisdickinson -Chris Dickinson <christopher.s.dickinson@gmail.com>claudiorodriguez -Claudio Rodriguez <cjrodr@yahoo.com>DavidCai1993 -David Cai <davidcai1993@yahoo.com> (he/him)davisjam -Jamie Davis <davisjam@vt.edu> (he/him)digitalinfinity -Hitesh Kanwathirtha <digitalinfinity@gmail.com> (he/him)dmabupt -Xu Meng <dmabupt@gmail.com> (he/him)dnlupdnlup <dnlup.dev@gmail.com>eljefedelrodeodeljefe -Robert Jefe Lindstaedt <robert.lindstaedt@gmail.com>estliberitas -Alexander Makarenko <estliberitas@gmail.com>eugeneo -Eugene Ostroukhov <eostroukhov@google.com>evanlucas -Evan Lucas <evanlucas@me.com> (he/him)firedfox -Daniel Wang <wangyang0123@gmail.com>Fishrock123 -Jeremiah Senkpiel <fishrock123@rocketmail.com> (he/they)gdams -George Adams <gadams@microsoft.com> (he/him)geek -Wyatt Preul <wpreul@gmail.com>gibfahn -Gibson Fahnestock <gibfahn@gmail.com> (he/him)glentiki -Glen Keane <glenkeane.94@gmail.com> (he/him)hashseed -Yang Guo <yangguo@chromium.org> (he/him)hiroppy -Yuta Hiroto <hello@hiroppy.me> (he/him)iarna -Rebecca Turner <me@re-becca.org>imran-iq -Imran Iqbal <imran@imraniqbal.org>imyller -Ilkka Myller <ilkka.myller@nodefield.com>indutny -Fedor Indutny <fedor@indutny.com>isaacs -Isaac Z. Schlueter <i@izs.me>italoacasas -Italo A. Casas <me@italoacasas.com> (he/him)jasongin -Jason Ginchereau <jasongin@microsoft.com>jbergstroem -Johan Bergström <bugs@bergstroem.nu>jdalton -John-David Dalton <john.david.dalton@gmail.com>jhamhader -Yuval Brik <yuval@brik.org.il>joaocgreis -João Reis <reis@janeasystems.com>joshgav -Josh Gavant <josh.gavant@outlook.com>julianduque -Julian Duque <julianduquej@gmail.com> (he/him)kfarnung -Kyle Farnung <kfarnung@microsoft.com> (he/him)kunalspathak -Kunal Pathak <kunal.pathak@microsoft.com>lance -Lance Ball <lball@redhat.com> (he/him)lucamaraschi -Luca Maraschi <luca.maraschi@gmail.com> (he/him)lundibundi -Denys Otrishko <shishugi@gmail.com> (he/him)lxe -Aleksey Smolenchuk <lxe@lxe.co>maclover7 -Jon Moss <me@jonathanmoss.me> (he/him)mafintosh -Mathias Buus <mathiasbuus@gmail.com> (he/him)matthewloring -Matthew Loring <mattloring@google.com>micnic -Nicu Micleușanu <micnic90@gmail.com> (he/him)mikeal -Mikeal Rogers <mikeal.rogers@gmail.com>misterdjules -Julien Gilli <jgilli@netflix.com>mmarchini -Mary Marchini <oss@mmarchini.me> (she/her)monsanto -Christopher Monsanto <chris@monsan.to>MoonBall -Chen Gang <gangc.cxy@foxmail.com>not-an-aardvark -Teddy Katz <teddy.katz@gmail.com> (he/him)ofrobots -Ali Ijaz Sheikh <ofrobots@google.com> (he/him)Olegas -Oleg Elifantiev <oleg@elifantiev.ru>orangemocha -Alexis Campailla <orangemocha@nodejs.org>othiym23 -Forrest L Norvell <ogd@aoaioxxysz.net> (they/them/themself)petkaantonov -Petka Antonov <petka_antonov@hotmail.com>phillipj -Phillip Johnsen <johphi@gmail.com>piscisaureus -Bert Belder <bertbelder@gmail.com>pmq20 -Minqi Pan <pmq2001@gmail.com>PoojaDurgad -Pooja D P <Pooja.D.P@ibm.com> (she/her)princejwesley -Prince John Wesley <princejohnwesley@gmail.com>psmarshall -Peter Marshall <petermarshall@chromium.org> (he/him)puzpuzpuz -Andrey Pechkurov <apechkurov@gmail.com> (he/him)refack -Refael Ackermann (רפאל פלחי) <refack@gmail.com> (he/him/הוא/אתה)rexagod -Pranshu Srivastava <rexagod@gmail.com> (he/him)rlidwka -Alex Kocharin <alex@kocharin.ru>rmg -Ryan Graham <r.m.graham@gmail.com>robertkowalski -Robert Kowalski <rok@kowalski.gd>romankl -Roman Klauke <romaaan.git@gmail.com>ronkorving -Ron Korving <ron@ronkorving.nl>RReverser -Ingvar Stepanyan <me@rreverser.com>rubys -Sam Ruby <rubys@intertwingly.net>saghul -Saúl Ibarra Corretgé <s@saghul.net>sam-github -Sam Roberts <vieuxtech@gmail.com>sebdeckers -Sebastiaan Deckers <sebdeckers83@gmail.com>seishun -Nikolai Vavilov <vvnicholas@gmail.com>shigeki -Shigeki Ohtsu <ohtsu@ohtsu.org> (he/him)silverwind -Roman Reiss <me@silverwind.io>starkwang -Weijia Wang <starkwang@126.com>stefanmb -Stefan Budeanu <stefan@budeanu.com>tellnes -Christian Tellnes <christian@tellnes.no>thefourtheye -Sakthipriyan Vairamani <thechargingvolcano@gmail.com> (he/him)thlorenz -Thorsten Lorenz <thlorenz@gmx.de>trevnorris -Trevor Norris <trev.norris@gmail.com>tunniclm -Mike Tunnicliffe <m.j.tunnicliffe@gmail.com>vkurchatkin -Vladimir Kurchatkin <vladimir.kurchatkin@gmail.com>vsemozhetbyt -Vse Mozhet Byt <vsemozhetbyt@gmail.com> (he/him)watson -Thomas Watson <w@tson.dk>whitlockjc -Jeremy Whitlock <jwhitlock@apache.org>yhwang -Yihong Wang <yh.wang@ibm.com>yorkie -Yorkie Liu <yorkiefixer@gmail.com>yosuke-furukawa -Yosuke Furukawa <yosuke.furukawa@gmail.com>Collaborators follow the Collaborator Guide inmaintaining the Node.js project.TriagersatlowChemi -Chemi Atlow <chemi@atlow.co.il> (he/him)Ayase-252 -Qingyu Deng <i@ayase-lab.com>bmuenzenmeyer -Brian Muenzenmeyer <brian.muenzenmeyer@gmail.com> (he/him)daeyeon -Daeyeon Jeong <daeyeon.dev@gmail.com> (he/him)F3n67u -Feng Yu <F3n67u@outlook.com> (he/him)himadriganguly -Himadri Ganguly <himadri.tech@gmail.com> (he/him)iam-frankqiu -Frank Qiu <iam.frankqiu@gmail.com> (he/him)marsonya -Akhil Marsonya <akhil.marsonya27@gmail.com> (he/him)meixg -Xuguang Mei <meixuguang@gmail.com> (he/him)Mesteery -Mestery <mestery@protonmail.com> (he/him)preveen-stack -Preveen Padmanabhan <wide4head@gmail.com> (he/him)PoojaDurgad -Pooja Durgad <Pooja.D.P@ibm.com>RaisinTen -Darshan Sen <raisinten@gmail.com>VoltrexKeyva -Mohammed Keyvanzadeh <mohammadkeyvanzade94@gmail.com> (he/him)Triagers follow the Triage Guide whenresponding to new issues.Release keysPrimary GPG keys for Node.js Releasers (some Releasers sign with subkeys):Beth Griggs <bethanyngriggs@gmail.com>4ED778F539E3634C779C87C6D7062848A1AB005CBryan English <bryan@bryanenglish.com>141F07595B7B3FFE74309A937405533BE57C7D57Danielle Adams <adamzdanielle@gmail.com>74F12602B6F1C4E913FAA37AD3A89613643B6201Juan José Arboleda <soyjuanarbol@gmail.com>DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7Michaël Zasso <targos@protonmail.com>8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600Myles Borins <myles.borins@gmail.com>C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8RafaelGSS <rafael.nunu@hotmail.com>890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4Richard Lau <rlau@redhat.com>C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93CRuy Adorno <ruyadorno@hotmail.com>108F52B48DB57BB0CC439B2997B01419BD92F80ATo import the full set of trusted release keys (including subkeys possibly usedto sign releases):gpg --keyserver hkps://keys.openpgp.org --recv-keys 4ED778F539E3634C779C87C6D7062848A1AB005Cgpg --keyserver hkps://keys.openpgp.org --recv-keys 141F07595B7B3FFE74309A937405533BE57C7D57gpg --keyserver hkps://keys.openpgp.org --recv-keys 74F12602B6F1C4E913FAA37AD3A89613643B6201gpg --keyserver hkps://keys.openpgp.org --recv-keys DD792F5973C6DE52C432CBDAC77ABFA00DDBF2B7gpg --keyserver hkps://keys.openpgp.org --recv-keys 8FCCA13FEF1D0C2E91008E09770F7A9A5AE15600gpg --keyserver hkps://keys.openpgp.org --recv-keys C4F0DFFF4E8C1A8236409D08E73BC641CC11F4C8gpg --keyserver hkps://keys.openpgp.org --recv-keys 890C08DB8579162FEE0DF9DB8BEAB4DFCF555EF4gpg --keyserver hkps://keys.openpgp.org --recv-keys C82FA3AE1CBEDC6BE46B9360C43CEC45C17AB93Cgpg --keyserver hkps://keys.openpgp.org --recv-keys 108F52B48DB57BB0CC439B2997B01419BD92F80ASee Verifying binaries for how to use these keys toverify a downloaded file.Other keys used to sign some previous releasesChris Dickinson <christopher.s.dickinson@gmail.com>9554F04D7259F04124DE6B476D5A82AC7E37093BColin Ihrig <cjihrig@gmail.com>94AE36675C464D64BAFA68DD7434390BDBE9B9C5Danielle Adams <adamzdanielle@gmail.com>1C050899334244A8AF75E53792EF661D867B9DFAEvan Lucas <evanlucas@me.com>B9AE9905FFD7803F25714661B63B535A4C206CA9Gibson Fahnestock <gibfahn@gmail.com>77984A986EBC2AA786BC0F66B01FBB92821C587AIsaac Z. Schlueter <i@izs.me>93C7E9E91B49E432C2F75674B0A78B0A6C481CF6Italo A. Casas <me@italoacasas.com>56730D5401028683275BD23C23EFEFE93C4CFFFEJames M Snell <jasnell@keybase.io>71DCFD284A79C3B38668286BC97EC7A07EDE3FC1Jeremiah Senkpiel <fishrock@keybase.io>FD3A5288F042B6850C66B31F09FE44734EB7990EJuan José Arboleda <soyjuanarbol@gmail.com>61FC681DFB92A079F1685E77973F295594EC4689Julien Gilli <jgilli@fastmail.fm>114F43EE0176B71C7BC219DD50A3051F888C628DRod Vagg <rod@vagg.org>DD8F2338BAE7501E3DD5AC78C273792F7D83545DRuben Bridgewater <ruben@bridgewater.de>A48C2BEE680E841632CD4E44F07496B3EB3C1762Shelley Vohr <shelley.vohr@gmail.com>B9E2F5981AA6E0CD28160D9FF13993A75599653CTimothy J Fontaine <tjfontaine@gmail.com>7937DFD2AB06298B2293C3187D33FF9D0246406DSecurity release stewardsWhen possible, the commitment to take slots in thesecurity release steward rotation is made by companies in orderto ensure individuals who act as security stewards have thesupport and recognition from their employer to be able toprioritize security releases. Security release stewards manage securityreleases on a rotation basis as outlined in thesecurity release process.Datadogbengl -Bryan English <bryan@bryanenglish.com> (he/him)NearFormRafaelGSS -Rafael Gonzaga <rafael.nunu@hotmail.com> (he/him)NodeSourcejuanarbol -Juan José Arboleda <soyjuanarbol@gmail.com> (he/him)Platformaticmcollina -Matteo Collina <matteo.collina@gmail.com> (he/him)Red Hat and IBMjoesepi -Joe Sepi <joesepi@ibm.com> (he/him)mhdawson -Michael Dawson <midawson@redhat.com> (he/him)LicenseNode.js is available under theMIT license. Node.js also includesexternal libraries that are available under a variety of licenses.  SeeLICENSE for the fulllicense text."
11,actionsdemos/calculator,https://github.com/actionsdemos/calculator/blob/master/README.md,JavaScript,"Calculator.js: a node.js Demonstration ProjectAn example node.js project, including tests with mocha, that behaves likea pocket calculator.The project contains a simple node.js application that exposes REST APIsto perform arithmetic on integers, and provides a test suite with mochaand chai.  The mocha-junit-reporters package is included to provide XMLoutput that can be presented in a continuous integration tool likeAzure DevOps.To build, simply:Runs npm install to install dependencies.Runs npm test to run Mocha and execute the unit tests."
12,lyfe00011/whatsapp-bot-md,https://github.com/lyfe00011/whatsapp-bot-md/blob/master/README.md,JavaScript,"WhatsApp MD User BotA simple WhatsApp User bot.SetupDeploy on HerokuClick SCAN and scan the QR code through the \""WhatsApp Linked Devices\"" option in your WhatsApp app.You will get a session ID in WhatsApp, copy the ID only.If you don't have an account on Heroku, create an account now.If you don't have a GitHub account, sign up now.FORK this repository.Now DEPLOY.Deploy on KoyebCreate an account on Koyeb. Sign up now.Get DATABASE_URL. You'll need this while deploying.Get SESSION_ID. Open Linked Devices in WhatsApp and SCAN now.Get the Koyeb API key. Let's Go.DEPLOY now.Enter Environment Variables. Read More.Enter a name and click \""Create Service.\""Deploy on VPS or PC (Example here as in Ubuntu)Install with scriptwget -N -O levanter.sh http://bit.ly/43JqREw && chmod +x levanter.sh && ./levanter.shInstall without a scriptInstall git, ffmpeg, and curl:sudo apt -y update && sudo apt -y upgradesudo apt -y install git ffmpeg curlInstall nodejs:sudo apt -y remove nodejscurl -fsSl https://deb.nodesource.com/setup_lts.x | sudo bash - && sudo apt -y install nodejsInstall yarn:npm install -g yarnInstall pm2:sudo yarn global add pm2Clone the repository and install packages:git clone https://github.com/lyfe00011/whatsapp-bot-md botName cd botName  yarn install --network-concurrency 1Enter Environment Variables: Copy-paste the lines below (remove SESSION_ID if not needed):echo \""SESSION_ID = Session_Id_you_Got_After_Scan_Dont_Add_This_Line_If_You_Can_Scan_From_Terminal_ItselfPREFIX = .STICKER_PACKNAME = LyFEALWAYS_ONLINE = falseRMBG_KEY = nullLANGUAG = enWARN_LIMIT = 3FORCE_LOGOUT = falseBRAINSHOP = 159501,6pq8dPiYt7PdqHz3MAX_UPLOAD = 200REJECT_CALL = falseSUDO = 989876543210TZ = Asia/KolkataVPS = trueAUTO_STATUS_VIEW = trueSEND_READ = trueAJOIN = trueDISABLE_START_MESSAGE = falsePERSONAL_MESSAGE = null\"" > config.envRead MoreEdit the config.env using nano if needed. To save, press Ctrl + O, then press Enter, and to exit, press Ctrl + X.Start and stop the bot:To start the bot: pm2 start . --name botName --attach --timeTo stop the bot: pm2 stop botNameThanks ToYusuf Usta for WhatsAsena@adiwajshing for Baileys"
13,chartjs/Chart.js,https://github.com/chartjs/Chart.js/blob/master/README.md,JavaScript,"            Simple yet flexible JavaScript charting for designers & developers                    DocumentationAll the links point to the new version 4 of the lib.IntroductionGetting StartedGeneralConfigurationChartsAxesDevelopersPopular ExtensionsSamplesIn case you are looking for an older version of the docs, you will have to specify the specific version in the url like this: https://www.chartjs.org/docs/2.9.4/ContributingInstructions on building and testing Chart.js can be found in the documentation. Before submitting an issue or a pull request, please take a moment to look over the contributing guidelines first. For support, please post questions on Stack Overflow with the chart.js tag.LicenseChart.js is available under the MIT license."
14,axios/axios,https://github.com/axios/axios/blob/v1.x/README.md,JavaScript,"               Promise based HTTP client for the browser and node.js    Website •    DocumentationTable of ContentsFeaturesBrowser SupportInstallingPackage managerCDNExampleAxios APIRequest method aliasesConcurrency 👎Creating an instanceInstance methodsRequest ConfigResponse SchemaConfig DefaultsGlobal axios defaultsCustom instance defaultsConfig order of precedenceInterceptorsMultiple InterceptorsHandling ErrorsCancellationAbortControllerCancelToken 👎Using application/x-www-form-urlencoded formatURLSearchParamsQuery string🆕 Automatic serializationUsing multipart/form-data formatFormData🆕 Automatic serializationFiles PostingHTML Form Posting🆕 Progress capturing🆕 Rate limitingSemverPromisesTypeScriptResourcesCreditsLicenseFeaturesMake XMLHttpRequests from the browserMake http requests from node.jsSupports the Promise APIIntercept request and responseTransform request and response dataCancel requestsAutomatic transforms for JSON data🆕 Automatic data object serialization to multipart/form-data and x-www-form-urlencoded body encodingsClient side support for protecting against XSRFBrowser SupportLatest ✔Latest ✔Latest ✔Latest ✔Latest ✔11 ✔InstallingPackage managerUsing npm:$ npm install axiosUsing bower:$ bower install axiosUsing yarn:$ yarn add axiosUsing pnpm:$ pnpm add axiosOnce the package is installed, you can import the library using import or require approach:import axios, {isCancel, AxiosError} from 'axios';You can also use the default export, since the named export is just a re-export from the Axios factory:import axios from 'axios';console.log(axios.isCancel('something'));If you use require for importing, only default export is available:const axios = require('axios');console.log(axios.isCancel('something'));For cases where something went wrong when trying to import a module into a custom or legacy environment,you can try importing the module package directly:const axios = require('axios/dist/browser/axios.cjs'); // browser commonJS bundle (ES2017)// const axios = require('axios/dist/node/axios.cjs'); // node commonJS bundle (ES2017)CDNUsing jsDelivr CDN (ES5 UMD browser module):<script src=\""https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js\""></script>Using unpkg CDN:<script src=\""https://unpkg.com/axios@1.1.2/dist/axios.min.js\""></script>ExampleNote CommonJS usageIn order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require(), use the following approach:import axios from 'axios';//const axios = require('axios'); // legacy way// Make a request for a user with a given IDaxios.get('/user?ID=12345')  .then(function (response) {    // handle success    console.log(response);  })  .catch(function (error) {    // handle error    console.log(error);  })  .finally(function () {    // always executed  });// Optionally the request above could also be done asaxios.get('/user', {    params: {      ID: 12345    }  })  .then(function (response) {    console.log(response);  })  .catch(function (error) {    console.log(error);  })  .finally(function () {    // always executed  });// Want to use async/await? Add the `async` keyword to your outer function/method.async function getUser() {  try {    const response = await axios.get('/user?ID=12345');    console.log(response);  } catch (error) {    console.error(error);  }}Note async/await is part of ECMAScript 2017 and is not supported in InternetExplorer and older browsers, so use with caution.Performing a POST requestaxios.post('/user', {    firstName: 'Fred',    lastName: 'Flintstone'  })  .then(function (response) {    console.log(response);  })  .catch(function (error) {    console.log(error);  });Performing multiple concurrent requestsfunction getUserAccount() {  return axios.get('/user/12345');}function getUserPermissions() {  return axios.get('/user/12345/permissions');}Promise.all([getUserAccount(), getUserPermissions()])  .then(function (results) {    const acct = results[0];    const perm = results[1];  });axios APIRequests can be made by passing the relevant config to axios.axios(config)// Send a POST requestaxios({  method: 'post',  url: '/user/12345',  data: {    firstName: 'Fred',    lastName: 'Flintstone'  }});// GET request for remote image in node.jsaxios({  method: 'get',  url: 'https://bit.ly/2mTM3nY',  responseType: 'stream'})  .then(function (response) {    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))  });axios(url[, config])// Send a GET request (default method)axios('/user/12345');Request method aliasesFor convenience, aliases have been provided for all common request methods.axios.request(config)axios.get(url[, config])axios.delete(url[, config])axios.head(url[, config])axios.options(url[, config])axios.post(url[, data[, config]])axios.put(url[, data[, config]])axios.patch(url[, data[, config]])NOTEWhen using the alias methods url, method, and data properties don't need to be specified in config.Concurrency (Deprecated)Please use Promise.all to replace the below functions.Helper functions for dealing with concurrent requests.axios.all(iterable)axios.spread(callback)Creating an instanceYou can create a new instance of axios with a custom config.axios.create([config])const instance = axios.create({  baseURL: 'https://some-domain.com/api/',  timeout: 1000,  headers: {'X-Custom-Header': 'foobar'}});Instance methodsThe available instance methods are listed below. The specified config will be merged with the instance config.axios#request(config)axios#get(url[, config])axios#delete(url[, config])axios#head(url[, config])axios#options(url[, config])axios#post(url[, data[, config]])axios#put(url[, data[, config]])axios#patch(url[, data[, config]])axios#getUri([config])Request ConfigThese are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified.{  // `url` is the server URL that will be used for the request  url: '/user',  // `method` is the request method to be used when making the request  method: 'get', // default  // `baseURL` will be prepended to `url` unless `url` is absolute.  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs  // to methods of that instance.  baseURL: 'https://some-domain.com/api/',  // `transformRequest` allows changes to the request data before it is sent to the server  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,  // FormData or Stream  // You may modify the headers object.  transformRequest: [function (data, headers) {    // Do whatever you want to transform the data    return data;  }],  // `transformResponse` allows changes to the response data to be made before  // it is passed to then/catch  transformResponse: [function (data) {    // Do whatever you want to transform the data    return data;  }],  // `headers` are custom headers to be sent  headers: {'X-Requested-With': 'XMLHttpRequest'},  // `params` are the URL parameters to be sent with the request  // Must be a plain object or a URLSearchParams object  params: {    ID: 12345  },  // `paramsSerializer` is an optional config in charge of serializing `params`  paramsSerializer: {    encode?: (param: string): string => { /* Do custom ops here and return transformed string */ }, // custom encoder function; sends Key/Values in an iterative fashion    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), // mimic pre 1.x behavior and send entire params object to a custom serializer func. Allows consumer to control how params are serialized.    indexes: false // array indexes format (null - no brackets, false (default) - empty brackets, true - brackets with indexes)  },  // `data` is the data to be sent as the request body  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'  // When no `transformRequest` is set, must be of one of the following types:  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams  // - Browser only: FormData, File, Blob  // - Node only: Stream, Buffer, FormData (form-data package)  data: {    firstName: 'Fred'  },  // syntax alternative to send data into the body  // method post  // only the value is sent, not the key  data: 'Country=Brasil&City=Belo Horizonte',  // `timeout` specifies the number of milliseconds before the request times out.  // If the request takes longer than `timeout`, the request will be aborted.  timeout: 1000, // default is `0` (no timeout)  // `withCredentials` indicates whether or not cross-site Access-Control requests  // should be made using credentials  withCredentials: false, // default  // `adapter` allows custom handling of requests which makes testing easier.  // Return a promise and supply a valid response (see lib/adapters/README.md).  adapter: function (config) {    /* ... */  },  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.  // This will set an `Authorization` header, overwriting any existing  // `Authorization` custom headers you have set using `headers`.  // Please note that only HTTP Basic auth is configurable through this parameter.  // For Bearer tokens and such, use `Authorization` custom headers instead.  auth: {    username: 'janedoe',    password: 's00pers3cret'  },  // `responseType` indicates the type of data that the server will respond with  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'  //   browser only: 'blob'  responseType: 'json', // default  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)  // Note: Ignored for `responseType` of 'stream' or client-side requests  responseEncoding: 'utf8', // default  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token  xsrfCookieName: 'XSRF-TOKEN', // default  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value  xsrfHeaderName: 'X-XSRF-TOKEN', // default  // `onUploadProgress` allows handling of progress events for uploads  // browser & node.js  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {    // Do whatever you want with the Axios progress event  },  // `onDownloadProgress` allows handling of progress events for downloads  // browser & node.js  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {    // Do whatever you want with the Axios progress event  },  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js  maxContentLength: 2000,  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed  maxBodyLength: 2000,  // `validateStatus` defines whether to resolve or reject the promise for a given  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`  // or `undefined`), the promise will be resolved; otherwise, the promise will be  // rejected.  validateStatus: function (status) {    return status >= 200 && status < 300; // default  },  // `maxRedirects` defines the maximum number of redirects to follow in node.js.  // If set to 0, no redirects will be followed.  maxRedirects: 21, // default  // `beforeRedirect` defines a function that will be called before redirect.  // Use this to adjust the request options upon redirecting,  // to inspect the latest response headers,  // or to cancel the request by throwing an error  // If maxRedirects is set to 0, `beforeRedirect` is not used.  beforeRedirect: (options, { headers }) => {    if (options.hostname === \""example.com\"") {      options.auth = \""user:password\"";    }  },  // `socketPath` defines a UNIX Socket to be used in node.js.  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.  // Only either `socketPath` or `proxy` can be specified.  // If both are specified, `socketPath` is used.  socketPath: null, // default    // `transport` determines the transport method that will be used to make the request. If defined, it will be used. Otherwise, if `maxRedirects` is 0, the default `http` or `https` library will be used, depending on the protocol specified in `protocol`. Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol, which can handle redirects.  transport: undefined, // default  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http  // and https requests, respectively, in node.js. This allows options to be added like  // `keepAlive` that are not enabled by default.  httpAgent: new http.Agent({ keepAlive: true }),  httpsAgent: new https.Agent({ keepAlive: true }),  // `proxy` defines the hostname, port, and protocol of the proxy server.  // You can also define your proxy using the conventional `http_proxy` and  // `https_proxy` environment variables. If you are using environment variables  // for your proxy configuration, you can also define a `no_proxy` environment  // variable as a comma-separated list of domains that should not be proxied.  // Use `false` to disable proxies, ignoring environment variables.  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and  // supplies credentials.  // This will set an `Proxy-Authorization` header, overwriting any existing  // `Proxy-Authorization` custom headers you have set using `headers`.  // If the proxy server uses HTTPS, then you must set the protocol to `https`.  proxy: {    protocol: 'https',    host: '127.0.0.1',    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined    port: 9000,    auth: {      username: 'mikeymike',      password: 'rapunz3l'    }  },  // `cancelToken` specifies a cancel token that can be used to cancel the request  // (see Cancellation section below for details)  cancelToken: new CancelToken(function (cancel) {  }),  // an alternative way to cancel Axios requests using AbortController  signal: new AbortController().signal,  // `decompress` indicates whether or not the response body should be decompressed  // automatically. If set to `true` will also remove the 'content-encoding' header  // from the responses objects of all decompressed responses  // - Node only (XHR cannot turn off decompression)  decompress: true // default  // `insecureHTTPParser` boolean.  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.  // This may allow interoperability with non-conformant HTTP implementations.  // Using the insecure parser should be avoided.  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none  insecureHTTPParser: undefined // default  // transitional options for backward compatibility that may be removed in the newer versions  transitional: {    // silent JSON parsing mode    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')    silentJSONParsing: true, // default value for the current Axios version    // try to parse the response string as JSON even if `responseType` is not 'json'    forcedJSONParsing: true,    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts    clarifyTimeoutError: false,  },  env: {    // The FormData class to be used to automatically serialize the payload into a FormData object    FormData: window?.FormData || global?.FormData  },  formSerializer: {      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values      dots: boolean; // use dots instead of brackets format      metaTokens: boolean; // keep special endings like {} in parameter key      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes  },  // http adapter only (node.js)  maxRate: [    100 * 1024, // 100KB/s upload limit,    100 * 1024  // 100KB/s download limit  ]}Response SchemaThe response for a request contains the following information.{  // `data` is the response that was provided by the server  data: {},  // `status` is the HTTP status code from the server response  status: 200,  // `statusText` is the HTTP status message from the server response  statusText: 'OK',  // `headers` the HTTP headers that the server responded with  // All header names are lowercase and can be accessed using the bracket notation.  // Example: `response.headers['content-type']`  headers: {},  // `config` is the config that was provided to `axios` for the request  config: {},  // `request` is the request that generated this response  // It is the last ClientRequest instance in node.js (in redirects)  // and an XMLHttpRequest instance in the browser  request: {}}When using then, you will receive the response as follows:axios.get('/user/12345')  .then(function (response) {    console.log(response.data);    console.log(response.status);    console.log(response.statusText);    console.log(response.headers);    console.log(response.config);  });When using catch, or passing a rejection callback as second parameter of then, the response will be available through the error object as explained in the Handling Errors section.Config DefaultsYou can specify config defaults that will be applied to every request.Global axios defaultsaxios.defaults.baseURL = 'https://api.example.com';// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.// See below for an example using Custom instance defaults instead.axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';Custom instance defaults// Set config defaults when creating the instanceconst instance = axios.create({  baseURL: 'https://api.example.com'});// Alter defaults after instance has been createdinstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;Config order of precedenceConfig will be merged with an order of precedence. The order is library defaults found in lib/defaults.js, then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example.// Create an instance using the config defaults provided by the library// At this point the timeout config value is `0` as is the default for the libraryconst instance = axios.create();// Override timeout default for the library// Now all requests using this instance will wait 2.5 seconds before timing outinstance.defaults.timeout = 2500;// Override timeout for this request as it's known to take a long timeinstance.get('/longRequest', {  timeout: 5000});InterceptorsYou can intercept requests or responses before they are handled by then or catch.// Add a request interceptoraxios.interceptors.request.use(function (config) {    // Do something before request is sent    return config;  }, function (error) {    // Do something with request error    return Promise.reject(error);  });// Add a response interceptoraxios.interceptors.response.use(function (response) {    // Any status code that lie within the range of 2xx cause this function to trigger    // Do something with response data    return response;  }, function (error) {    // Any status codes that falls outside the range of 2xx cause this function to trigger    // Do something with response error    return Promise.reject(error);  });If you need to remove an interceptor later you can.const myInterceptor = axios.interceptors.request.use(function () {/*...*/});axios.interceptors.request.eject(myInterceptor);You can also clear all interceptors for requests or responses.const instance = axios.create();instance.interceptors.request.use(function () {/*...*/});instance.interceptors.request.clear(); // Removes interceptors from requestsinstance.interceptors.response.use(function () {/*...*/});instance.interceptors.response.clear(); // Removes interceptors from responsesYou can add interceptors to a custom instance of axios.const instance = axios.create();instance.interceptors.request.use(function () {/*...*/});When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delayin the execution of your axios request when the main thread is blocked (a promise is created under the hood forthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flagto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.axios.interceptors.request.use(function (config) {  config.headers.test = 'I am only a header!';  return config;}, null, { synchronous: true });If you want to execute a particular interceptor based on a runtime check,you can add a runWhen function to the options object. The interceptor will not be executed if and only if the returnof runWhen is false. The function will be called with the configobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have anasynchronous request interceptor that only needs to run at certain times.function onGetCall(config) {  return config.method === 'get';}axios.interceptors.request.use(function (config) {  config.headers.test = 'special get headers';  return config;}, null, { runWhen: onGetCall });Multiple InterceptorsGiven you add multiple response interceptorsand when the response was fulfilledthen each interceptor is executedthen they are executed in the order they were addedthen only the last interceptor's result is returnedthen every interceptor receives the result of its predecessorand when the fulfillment-interceptor throwsthen the following fulfillment-interceptor is not calledthen the following rejection-interceptor is calledonce caught, another following fulfill-interceptor is called again (just like in a promise chain).Read the interceptor tests for seeing all this in code.Error TypesThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.The general structure of axios errors is as follows:PropertyDefinitionmessageA quick summary of the error message and the status it failed with.nameThis defines where the error originated from. For axios, it will always be an 'AxiosError'.stackProvides the stack trace of the error.configAn axios config object with specific instance configurations defined by the user from when the request was madecodeRepresents an axios identified error. The table below lists out specific definitions for internal axios error.statusHTTP response status code. See here for common HTTP response status code meanings.Below is a list of potential axios identified errorCodeDefinitionERR_BAD_OPTION_VALUEInvalid or unsupported value provided in axios configuration.ERR_BAD_OPTIONInvalid option provided in axios configuration.ECONNABORTEDRequest timed out due to exceeding timeout specified in axios configuration.ETIMEDOUTRequest timed out due to exceeding default axios timelimit.ERR_NETWORKNetwork-related issue.ERR_FR_TOO_MANY_REDIRECTSRequest is redirected too many times; exceeds max redirects specified in axios configuration.ERR_DEPRECATEDDeprecated feature or method used in axios.ERR_BAD_RESPONSEResponse cannot be parsed properly or is in an unexpected format.ERR_BAD_REQUESTRequested has unexpected format or missing required parameters.ERR_CANCELEDFeature or method is canceled explicitly by the user.ERR_NOT_SUPPORTFeature or method not supported in the current axios environment.ERR_INVALID_URLInvalid URL provided for axios request.Handling Errorsthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.axios.get('/user/12345')  .catch(function (error) {    if (error.response) {      // The request was made and the server responded with a status code      // that falls out of the range of 2xx      console.log(error.response.data);      console.log(error.response.status);      console.log(error.response.headers);    } else if (error.request) {      // The request was made but no response was received      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of      // http.ClientRequest in node.js      console.log(error.request);    } else {      // Something happened in setting up the request that triggered an Error      console.log('Error', error.message);    }    console.log(error.config);  });Using the validateStatus config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.axios.get('/user/12345', {  validateStatus: function (status) {    return status < 500; // Resolve only if the status code is less than 500  }})Using toJSON you get an object with more information about the HTTP error.axios.get('/user/12345')  .catch(function (error) {    console.log(error.toJSON());  });CancellationAbortControllerStarting from v0.22.0 Axios supports AbortController to cancel requests in fetch API way:const controller = new AbortController();axios.get('/foo/bar', {   signal: controller.signal}).then(function(response) {   //...});// cancel the requestcontroller.abort()CancelToken 👎deprecatedYou can also cancel a request using a CancelToken.The axios cancel token API is based on the withdrawn cancellable promises proposal.This API is deprecated since v0.22.0 and shouldn't be used in new projectsYou can create a cancel token using the CancelToken.source factory as shown below:const CancelToken = axios.CancelToken;const source = CancelToken.source();axios.get('/user/12345', {  cancelToken: source.token}).catch(function (thrown) {  if (axios.isCancel(thrown)) {    console.log('Request canceled', thrown.message);  } else {    // handle error  }});axios.post('/user/12345', {  name: 'new name'}, {  cancelToken: source.token})// cancel the request (the message parameter is optional)source.cancel('Operation canceled by the user.');You can also create a cancel token by passing an executor function to the CancelToken constructor:const CancelToken = axios.CancelToken;let cancel;axios.get('/user/12345', {  cancelToken: new CancelToken(function executor(c) {    // An executor function receives a cancel function as a parameter    cancel = c;  })});// cancel the requestcancel();Note: you can cancel several requests with the same cancel token/abort controller.If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.During the transition period, you can use both cancellation APIs, even for the same request:Using application/x-www-form-urlencoded formatURLSearchParamsBy default, axios serializes JavaScript objects to JSON. To send data in the application/x-www-form-urlencoded format instead, you can use the URLSearchParams API, which is supported in the vast majority of browsers,and  Node starting with v10 (released in 2018).const params = new URLSearchParams({ foo: 'bar' });params.append('extraparam', 'value');axios.post('/foo', params);Query string (Older browsers)For compatibility with very old browsers, there is a polyfill available (make sure to polyfill the global environment).Alternatively, you can encode data using the qs library:const qs = require('qs');axios.post('/foo', qs.stringify({ 'bar': 123 }));Or in another way (ES6),import qs from 'qs';const data = { 'bar': 123 };const options = {  method: 'POST',  headers: { 'content-type': 'application/x-www-form-urlencoded' },  data: qs.stringify(data),  url,};axios(options);Older Node.js versionsFor older Node.js engines, you can use the querystring module as follows:const querystring = require('querystring');axios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));You can also use the qs library.NoteThe qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case.🆕 Automatic serialization to URLSearchParamsAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \""application/x-www-form-urlencoded\"".const data = {  x: 1,  arr: [1, 2, 3],  arr2: [1, [2], 3],  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],};await axios.postForm('https://postman-echo.com/post', data,  {headers: {'content-type': 'application/x-www-form-urlencoded'}});The server will handle it as:  {    x: '1',    'arr[]': [ '1', '2', '3' ],    'arr2[0]': '1',    'arr2[1][0]': '2',    'arr2[2]': '3',    'arr3[]': [ '1', '2', '3' ],    'users[0][name]': 'Peter',    'users[0][surname]': 'griffin',    'users[1][name]': 'Thomas',    'users[1][surname]': 'Anderson'  }If your backend body-parser (like body-parser of express.js) supports nested objects decoding, you will get the same object on the server-side automatically  var app = express();  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies  app.post('/', function (req, res, next) {     // echo body as JSON     res.send(JSON.stringify(req.body));  });  server = app.listen(3000);Using multipart/form-data formatFormDataTo send the data as a multipart/formdata you need to pass a formData instance as a payload.Setting the Content-Type header is not required as Axios guesses it based on the payload type.const formData = new FormData();formData.append('foo', 'bar');axios.post('https://httpbin.org/post', formData);In node.js, you can use the form-data library as follows:const FormData = require('form-data');const form = new FormData();form.append('my_field', 'my value');form.append('my_buffer', new Buffer(10));form.append('my_file', fs.createReadStream('/foo/bar.jpg'));axios.post('https://example.com', form)🆕 Automatic serialization to FormDataStarting from v0.27.0, Axios supports automatic object serialization to a FormData object if the request Content-Typeheader is set to multipart/form-data.The following request will submit the data in a FormData format (Browser & Node.js):import axios from 'axios';axios.post('https://httpbin.org/post', {x: 1}, {  headers: {    'Content-Type': 'multipart/form-data'  }}).then(({data}) => console.log(data));In the node.js build, the (form-data) polyfill is used by default.You can overload the FormData class by setting the env.FormData config variable,but you probably won't need it in most cases:const axios = require('axios');var FormData = require('form-data');axios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {  headers: {    'Content-Type': 'multipart/form-data'  }}).then(({data}) => console.log(data));Axios FormData serializer supports some special endings to perform the following operations:{} - serialize the value with JSON.stringify[] - unwrap the array-like object as separate fields with the same keyNoteunwrap/expand operation will be used by default on arrays and FileList objectsFormData serializer supports additional options via config.formSerializer: object property to handle rare cases:visitor: Function - user-defined visitor function that will be called recursively to serialize the data objectto a FormData object by following custom rules.dots: boolean = false - use dot notation instead of brackets to serialize arrays and objects;metaTokens: boolean = true - add the special ending (e.g user{}: '{\""name\"": \""John\""}') in the FormData key.The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.indexes: null|false|true = false - controls how indexes will be added to unwrapped keys of flat array-like objectsnull - don't add brackets (arr: 1, arr: 2, arr: 3)false(default) - add empty brackets (arr[]: 1, arr[]: 2, arr[]: 3)true - add brackets with indexes  (arr[0]: 1, arr[1]: 2, arr[2]: 3)Let's say we have an object like this one:const obj = {  x: 1,  arr: [1, 2, 3],  arr2: [1, [2], 3],  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],  'obj2{}': [{x:1}]};The following steps will be executed by the Axios serializer internally:const formData = new FormData();formData.append('x', '1');formData.append('arr[]', '1');formData.append('arr[]', '2');formData.append('arr[]', '3');formData.append('arr2[0]', '1');formData.append('arr2[1][0]', '2');formData.append('arr2[2]', '3');formData.append('users[0][name]', 'Peter');formData.append('users[0][surname]', 'Griffin');formData.append('users[1][name]', 'Thomas');formData.append('users[1][surname]', 'Anderson');formData.append('obj2{}', '[{\""x\"":1}]');Axios supports the following shortcut methods: postForm, putForm, patchFormwhich are just the corresponding http methods with the Content-Type header preset to multipart/form-data.Files PostingYou can easily submit a single file:await axios.postForm('https://httpbin.org/post', {  'myVar' : 'foo',  'file': document.querySelector('#fileInput').files[0]});or multiple files as multipart/form-data:await axios.postForm('https://httpbin.org/post', {  'files[]': document.querySelector('#fileInput').files});FileList object can be passed directly:await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)All files will be sent with the same field names: files[].🆕 HTML Form Posting (browser)Pass HTML Form element as a payload to submit it as multipart/form-data content.await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));FormData and HTMLForm objects can also be posted as JSON by explicitly setting the Content-Type header to application/json:await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {  headers: {    'Content-Type': 'application/json'  }})For example, the Form<form id=\""form\"">  <input type=\""text\"" name=\""foo\"" value=\""1\"">  <input type=\""text\"" name=\""deep.prop\"" value=\""2\"">  <input type=\""text\"" name=\""deep prop spaced\"" value=\""3\"">  <input type=\""text\"" name=\""baz\"" value=\""4\"">  <input type=\""text\"" name=\""baz\"" value=\""5\"">  <select name=\""user.age\"">    <option value=\""value1\"">Value 1</option>    <option value=\""value2\"" selected>Value 2</option>    <option value=\""value3\"">Value 3</option>  </select>  <input type=\""submit\"" value=\""Save\""></form>will be submitted as the following JSON object:{  \""foo\"": \""1\"",  \""deep\"": {    \""prop\"": {      \""spaced\"": \""3\""    }  },  \""baz\"": [    \""4\"",    \""5\""  ],  \""user\"": {    \""age\"": \""value2\""  }}Sending Blobs/Files as JSON (base64) is not currently supported.🆕 Progress capturingAxios supports both browser and node environments to capture request upload/download progress.await axios.post(url, data, {  onUploadProgress: function (axiosProgressEvent) {    /*{      loaded: number;      total?: number;      progress?: number; // in range [0..1]      bytes: number; // how many bytes have been transferred since the last trigger (delta)      estimated?: number; // estimated time in seconds      rate?: number; // upload speed in bytes      upload: true; // upload sign    }*/  },  onDownloadProgress: function (axiosProgressEvent) {    /*{      loaded: number;      total?: number;      progress?: number;      bytes: number;       estimated?: number;      rate?: number; // download speed in bytes      download: true; // download sign    }*/  }});  You can also track stream upload/download progress in node.js:const {data} = await axios.post(SERVER_URL, readableStream, {   onUploadProgress: ({progress}) => {     console.log((progress * 100).toFixed(2));   },     headers: {    'Content-Length': contentLength   },   maxRedirects: 0 // avoid buffering the entire stream});Note:Capturing FormData upload progress is currently not currently supported in node.js environments.⚠️ WarningIt is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the node.js environment,as follow-redirects package will buffer the entire stream in RAM without following the \""backpressure\"" algorithm.🆕 Rate limitingDownload and upload rate limits can only be set for the http adapter (node.js):const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {  onUploadProgress: ({progress, rate}) => {    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)  },     maxRate: [100 * 1024], // 100KB/s limit});SemverUntil axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1, and 0.5.4 will have the same API, but 0.6.0 will have breaking changes.Promisesaxios depends on a native ES6 Promise implementation to be supported.If your environment doesn't support ES6 Promises, you can polyfill.TypeScriptaxios includes TypeScript definitions and a type guard for axios errors.let user: User = null;try {  const { data } = await axios.get('/user?ID=12345');  user = data.userDetails;} catch (error) {  if (axios.isAxiosError(error)) {    handleAxiosError(error);  } else {    handleUnexpectedError(error);  }}Because axios dual publishes with an ESM default export and a CJS module.exports, there are some caveats.The recommended setting is to use \""moduleResolution\"": \""node16\"" (this is implied by \""module\"": \""node16\""). Note that this requires TypeScript 4.7 or greater.If use ESM, your settings should be fine.If you compile TypeScript to CJS and you can’t use \""moduleResolution\"": \""node 16\"", you have to enable esModuleInterop.If you use TypeScript to type check CJS JavaScript code, your only option is to use \""moduleResolution\"": \""node16\"".Online one-click setupYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.ResourcesChangelogEcosystemContributing GuideCode of ConductCreditsaxios is heavily inspired by the $http service provided in AngularJS. Ultimately axios is an effort to provide a standalone $http-like service for use outside of AngularJS.LicenseMIT"
15,TryGhost/Ghost,https://github.com/TryGhost/Ghost/blob/main/README.md,JavaScript,"                      Ghost.org •    Forum •    Docs •    Contributing •    Twitter                                                                      Love open source? We're hiring JavaScript engineers to work on Ghost full-time.  The easiest way to get a production instance deployed is with our official Ghost(Pro) managed service. It takes about 2 minutes to launch a new site with worldwide CDN, backups, security and maintenance all done for you.For most people this ends up being the best value option because of how much time it saves — and 100% of revenue goes to the Ghost Foundation; funding the maintenance and further development of the project itself. So you’ll be supporting open source software and getting a great service! Quickstart installIf you want to run your own instance of Ghost, in most cases the best way is to use our CLI toolnpm install ghost-cli -g Then, if installing locally add the local flag to get up and running in under a minute - Local install docsghost install local or on a server run the full install, including automatic SSL setup using LetsEncrypt - Production install docsghost install Check out our official documentation for more information about our recommended hosting stack & properly upgrading Ghost, plus everything you need to develop your own Ghost themes or work with our API.Contributors & advanced developersFor anyone wishing to contribute to Ghost or to hack/customize core files we recommend following our full development setup guides: Contributor guide • Developer setup Ghost sponsorsWe'd like to extend big thanks to our sponsors and partners who make Ghost possible. If you're interested in sponsoring Ghost and supporting the project, please check out our profile on GitHub sponsors ❤️DigitalOcean • Fastly Getting helpYou can find answers to a huge variety of questions, along with a large community of helpful developers over on the Ghost forum - replies are generally very quick. Ghost(Pro) customers also have access to 24/7 email support.To stay up to date with all the latest news and product updates, make sure you subscribe to our blog — or you can always follow us on Twitter, if you prefer your updates bite-sized and facetious. 🎷🐢 Copyright & licenseCopyright (c) 2013-2023 Ghost Foundation - Released under the MIT license. Ghost and the Ghost Logo are trademarks of Ghost Foundation Ltd. Please see our trademark policy for info on acceptable usage."
16,bettiolo/node-echo,https://github.com/bettiolo/node-echo/blob/master/README.md,JavaScript,"node-echonode.js echo server, returns request data to response"
17,AlreadyBored/basic-js,https://github.com/AlreadyBored/basic-js/blob/master/README.md,JavaScript,"BasicJS⚠️ DO NOT SUBMIT PULL REQUESTS TO THIS REPO ⚠️PrerequisitesInstall Node.jsFork this repository: https://github.com/AlreadyBored/basic-jsClone your newly created repo: https://github.com/<%your_github_username%>/basic-js/Go to folder basic-jsTo install all dependencies use npm installRun npm run test in command line.You will see the number of pending, passing and failing tests. 100% of passing tests is equal to max score for the taskTroubleshootingIf you catch error like this you can try to make npm install -g node-gypSubmit to rs appOpen rs app and loginGo to submit task pageSelect your task (BasicJS)Press the submit button and enjoyNotesWe recommend you to use Node.js of version 16.x.x LTS. If you use any of features, that does not supported by Node.js v16, there may be problems with task submit.Please, be sure that each of your tests is limited to 30 sec.General task descriptionYour task is to write several functions that are the solution to the subtasks. Subtasks descriptions, as well as instructions on how to run tests and submit solutions are below.Count cats!Your task is to count the cats hidden in the backyard (presented by two-dimensional Array). Cats hide well, but their ears (\""^^\"") are clearly visible. Your task is to implement the countCats(backyard) function that will count cats. Good luck!Number of cats found should be number. If no cats found, function should return 0.For example:countCats([ [0, 1, '^^'], [0, '^^', 2], ['^^', 1, 2] ]) => 3Write your code in src/count-cats.js.Carbon datingTo determine the age of archaeological finds, radioisotope dating is widely used. One of its types is radiocarbon dating.The approximate age of the sample is calculated by measuring the ratio of the modern activity of the C14 isotope to the activity of the same isotope in the sample.Read about method  About calculations  You can use the formula from the article at the link above. 0.693 is an approximation of the natural logarithm of two.Your task is to implement the function dateSample(sampleActivity) that calculates sample approximate age (in years). Please use given MODERN_ACTIVITY and HALF_LIFE_PERIOD.Function parameter sampleActivity is a string. Calculated sample age must be number.Age must be integer. Age must be rounded up (ceiling). In case of wrong input parameter type or inadequate activity value or absence of argument function must return false.For example:dateSample('1') => 22387 (or 22392 depending on formula used)dateSample('WOOT!') => falseWrite your code in src/carbon-dating.js.Dream teamImagine you and your friends decide to create a dream team. This team should have a cool secret name that contains encrypted information about it. For example, these may be the first letters of the names of its members in upper case sorted alphabetically.Your task is to implement the createDreamTeam(members) function that returns name of a newly made team (string) based on the names of its members (Array). Good luck!Names of the members should be strings. Values with other type should be ignored. In case of wrong members type function must return false.NB! Team member name may contain whitespaces.For example:createDreamTeam(['Matt', 'Ann', 'Dmitry', 'Max']) => 'ADMM'createDreamTeam(['Olivia', 1111, 'Lily', 'Oscar', true, null]) => 'LOO'Write your code in src/dream-team.js.What season?Your task is to implement the function getSeason(date) that accepts Date object and returns the time of the year that matches it.Time of the year must be string.Seasons in EnglishThe names of the seasons in English are: spring, summer, autumn (fall), winter.If the date argument was not passed, the function must return the string 'Unable to determine the time of year!'. If the date argument is invalid, the function must throw an Error with message Invalid date!.Shh! An enemy scout has lurked among the arguments that come into this function.He is guided by the famous proverb: “If it looks like a duck, swims like a duck and quacks like a duck, then it probably is a duck (who cares what it really is)”. He is expertly disguised as a real date, but a clever javascript developer can catch him and throw an Error with message Invalid date! just in time!For example:const springDate = new Date(2020, 02, 31)getSeason(springDate) => 'spring'Write your code in src/what-season.js.Tower of HanoiTower of Hanoi is famous mathematical puzzle of the 18th century.It consists of three rods and a number of disks of different sizes, which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:Only one disk can be moved at a time.Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.No larger disk may be placed on top of a smaller disk.Your task is much easier than coming up with an algorithm that solves this puzzle :)Implement the function calculateHanoi that accepts diskNumber and turnsSpeed parameters. diskNumber is a number of disks and turnsSpeed is the speed of moving discs (in turns per hour).Both parameters are numbers.calculateHanoi function returns an object with 2 properties:turns (minimum number of turns to solve the puzzle)seconds (minimum number of seconds to solve the puzzle at a given turnsSpeed, seconds must be an integer, obtained  from rounded down (floor) calculation result)You don't need to validate parameters.For example:calculateHanoi(9, 4308) => { turns: 511, seconds: 427 }Write your code in src/hanoi-tower.js.Transform arrayYour task is to implement the function transform(arr) that takes an array and returns transformed array, based on the control sequences that arr contains.Control sequences are defined string elements of the mentioned array:--discard-next excludes the next element of the array from the transformed array.--discard-prev excludes the previous element of the array from the transformed array.--double-next duplicates the next element of the array in the transformed array.--double-prev duplicates the previous element of the array in the transformed array.For example:transform([1, 2, 3, '--double-next', 4, 5]) => [1, 2, 3, 4, 4, 5]transform([1, 2, 3, '--discard-prev', 4, 5]) => [1, 2, 4, 5]The function must not affect inital array. Control sequences are applied from left to right to initial array elements. Control sequences do not fall into the transformed array. Control sequences in initial array don't occur in a row. If there is no element next to the control sequence to which it can be applied in the initial array, or this element was previously deleted, it does nothing. The function should throw an Error with message 'arr' parameter must be an instance of the Array! if the arr is not an Array.Write your code in src/transform-array.js.Chain makerLet's practice in chaining!Your task is to create the object chainMaker that creates chains. The finished chain is a string and looks like this: '( value1 )~~( value2 )~~( value3 )'.The chainMaker has several methods for creating chains and modifying them:getLength returns the current chain length as a number;addLink(value) adds a link containing a string representation of the value to the chain;removeLink(position) removes a chain link in the specified position;reverseChain reverses the chain;finishChain ends the chain and returns it.addLink, reverseChain and removeLink methods are chainable, while the another ones are not. If addLink is called with no arguments, it adds an empty link ('(  )') to the chain. If removeLink accepts invalid position (e.g. not a number, or a fractional number, or corresponding to a nonexistent link), it must throw an Error with message You can't remove incorrect link!. After calling the finishChain method, the existing chain must be deleted, as if an Error was thrown.For example:chainMaker.addLink(1).addLink(2).addLink(3).finishChain() => '( 1 )~~( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).removeLink(1).addLink(3).finishChain() => '( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).reverseChain().addLink(3).finishChain() => '( 2 )~~( 1 )~~( 3 )'Write your code in src/simple-chain.js.Recursive depth calculatorYour task is to implement the class DepthCalculator with method calculateDepth that takes an array and returns its depth.calculateDepth method must pass the given array recursively. Depth of a flat array is 1. Method must correctly work with arrays that contain no elements or contain empty arrays.For example:const depthCalc = new DepthCalculator();depthCalc.calculateDepth([1, 2, 3, 4, 5]) => 1depthCalc.calculateDepth([1, 2, 3, [4, 5]]) => 2depthCalc.calculateDepth([[[]]]) => 3Write your code in src/recursive-depth.js.Extended repeaterYour task is to implement the function repeater(str, options).This function returns a repeating string based on the given parameters:str is a string to repeat;options is an object of options, that contains properties:repeatTimes sets the number of repetitions of the str;separator is a string separating repetitions of the str;addition is an additional string that will be added to each repetition of the str;additionRepeatTimes sets the number of repetitions of the addition;additionSeparator is a string separating repetitions of the addition.The str and addition parameters are strings by default. In case when type of these parameters is different, they must be converted to a string.separator and additionSeparator parameters are strings.repeatTimes and additionRepeatTimes are integer numbers (in the absence of any of them, the corresponding string is not repeated).The only indispensable parameter is str, any others may be not defined. separator default value is '+'. additionSeparator default value is '|'.For example: repeater('STRING', { repeatTimes: 3, separator: '**', addition: 'PLUS', additionRepeatTimes: 3, additionSeparator: '00' }) => 'STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS'Write your code in src/extended-repeater.js.Vigenere cipherCryptography is awesome! Let's try to organize production of encryption machines. Our machines will use one of the encryption methods that are easy to understand, but also not amenable to simple cryptanalysis - the Vigenere cipher.Our machine will have 2 modifications: direct and reverse (the type of machine is determined at the moment of creation). The direct machine simply encodes and decodes the string that was transmitted to it, and the reverse machine returns an inverted string after encoding and decoding.Your task is to implement the class VigenereCipheringMachine. constructor of this class accepts true (or nothing) to create direct machine and false to create reverse machine.Each instance of VigenereCipheringMachine must have 2 methods: encrypt and decrypt.encrypt method accepts 2 parameters: message (string to encode) and key (string-keyword).decrypt method accepts 2 parameters: encryptedMessage (string to decode) and key (string-keyword).These parameters for both methods are mandatory. If at least one of them has not been given, an Error with message Incorrect arguments! must be thrown. The text returned by these methods must be uppercase. Machines encrypt and decrypt only latin alphabet (all other symbols remain unchanged).You don't need to validate value sent to constructor and to encrypt and decrypt methods (except throwing an Error on absence of argument for these methods).For example:const directMachine = new VigenereCipheringMachine();const reverseMachine = new VigenereCipheringMachine(false);directMachine.encrypt('attack at dawn!', 'alphonse') => 'AEIHQX SX DLLU!'directMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => 'ATTACK AT DAWN!'reverseMachine.encrypt('attack at dawn!', 'alphonse') => '!ULLD XS XQHIEA'reverseMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => '!NWAD TA KCATTA'Write your code in src/vigenere-cipher.js.(ST) Common character countYour task is to implement function that accepts two strings (s1 and s2) and returns number of common characters between them.For example:getCommonCharacterCount('aabcc', 'adcaa') => 3Write your code in src/common-character-count.js.(ST) Delete digitYour task is to implement function that accepts integer number (n) and returns maximal number you can obtain by deleting exactly one digit of the given number.For example:deleteDigit(152) => 52Write your code in src/delete-digit.js.(ST) DNS statYour task is to implement function that accepts an array of domains (domains) and returns the object with the appearances of the DNS.For example:getDNSStats(['code.yandex.ru', 'music.yandex.ru', 'yandex.ru']) => {'.ru': 3, '.ru.yandex': 3, '.ru.yandex.code': 1,'.ru.yandex.music': 1}Write your code in src/dns-stats.js.(ST) Encode lineYour task is to implement function that accepts string (str) and returns its encoded version.For example:encodeLine('aabbbc') => '2a3bc'Write your code in src/encode-line.js.(ST) File namesThere's a list of file, since two files cannot have equal names, the one which comes later will have a suffix (k), where k is the smallest integer such that the found name is not used yet.Your task is to implement function that accepts array of names (names) and returns an array of names that will be given to the files.For example:renameFiles([\""file\"", \""file\"", \""image\"", \""file(1)\"", \""file\""]) => [\""file\"", \""file(1)\"", \""image\"", \""file(1)(1)\"", \""file(2)\""]Write your code in src/file-names.js.(ST) Get email domainYour task is to implement function that accepts email address (email) and returns it's domain.For example:getEmailDomain('prettyandsimple@example.com') => 'example.com'Write your code in src/get-email-domain.js.(ST) Is MAC-48 Address?The MAC-48 address is six groups of two hexadecimal digits (0 to 9 or A to F) separated by hyphens.Your task is to implement function that accepts string (inputString) and returns true if string is valid MAC-48 address.For example:isMAC48Address('00-1B-63-84-45-E6') => trueWrite your code in src/mac-adress.js.(ST) Matrix elements sumGiven matrix, a rectangular matrix of integers, just add up all the values that don't appear below a \""0\"".For example:const matrix = [ [0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]];getMatrixElementsSum(matrix) => 9Write your code in src/matrix-elements-sum.js.(ST) MinesweeperIn the popular Minesweeper game you have a board with some mines and cells that have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.For example:const matrix = [ [true, false, false], [false, true, false], [false, false, false]];minesweeper(matrix) => [ [1, 2, 1], [2, 1, 1], [1, 1, 1]];Write your code in src/mine-sweeper.js.(ST) Sort by heightGiven an array with heights, sort them except if the value is -1.Your task is to implement function that accepts array (arr) and returns it sortedFor example:sortByHeight([-1, 150, 190, 170, -1, -1, 160, 180]) => [-1, 150, 160, 170, -1, -1, 180, 190]Write your code in src/sort-by-height.js.(ST) Sum digitsYour task is to implement function that accepts a number (n) and returns the sum of its digits until we get to a one digit number.For example:For 100, the result should be 1 (1 + 0 + 0 = 1)getSumOfDigits(100) => 1For 91, the result should be 1 (9 + 1 = 10, 1 + 0 = 1)getSumOfDigits(91) => 1Write your code in src/sum-digits.js.© AlreadyBored& tasks:Common character countDelete digitDNS statEncode lineFile namesGet email domainIs MAC-48 Adress?Matrix elements sumMinesweeperSort by heightSum digitsare integrated from Short track 2021 repo& Thanks mikhama for assistance!"
18,webpack/webpack,https://github.com/webpack/webpack/blob/main/README.md,JavaScript,"                      \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  \t\t\t  webpack      Webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset.  Table of ContentsInstallIntroductionConceptsContributingSupportCore TeamSponsoringPremium PartnersOther Backers and SponsorsGold SponsorsSilver SponsorsBronze SponsorsBackersSpecial ThanksInstallInstall with npm:npm install --save-dev webpackInstall with yarn:yarn add webpack --devIntroductionWebpack is a bundler for modules. The main purpose is to bundle JavaScriptfiles for usage in a browser, yet it is also capable of transforming, bundling,or packaging just about any resource or asset.TL;DRBundles ES Modules, CommonJS, and AMD modules (even combined).Can create a single bundle or multiple chunks that are asynchronously loaded at runtime (to reduce initial loading time).Dependencies are resolved during compilation, reducing the runtime size.Loaders can preprocess files while compiling, e.g. TypeScript to JavaScript, Handlebars strings to compiled functions, images to Base64, etc.Highly modular plugin system to do whatever else your application requires.Get StartedCheck out webpack's quick Get Started guide and the other guides.Browser CompatibilityWebpack supports all browsers that are ES5-compliant (IE8 and below are not supported).Webpack also needs Promise for import() and require.ensure(). If you want to support older browsers, you will need to load a polyfill before using these expressions.ConceptsPluginsWebpack has a rich plugininterface. Most of the featureswithin webpack itself use this plugin interface. This makes webpack veryflexible.NameStatusInstall SizeDescriptionmini-css-extract-pluginExtracts CSS into separate files. It creates a CSS file per JS file which contains CSS.compression-webpack-pluginPrepares compressed versions of assets to serve them with Content-Encodinghtml-webpack-pluginSimplifies creation of HTML files (index.html) to serve your bundlespug-pluginRenders Pug files to HTML, extracts JS and CSS from sources specified directly in Pug.LoadersWebpack enables the use of loaders to preprocess files. This allows you to bundleany static resource way beyond JavaScript. You can easily write your ownloaders using Node.js.Loaders are activated by using loadername! prefixes in require() statements,or are automatically applied via regex from your webpack configuration.FilesNameStatusInstall SizeDescriptionval-loaderExecutes code as module and considers exports as JS codeJSONNameStatusInstall SizeDescriptionLoads and transpiles a CSON fileTranspilingNameStatusInstall SizeDescriptionLoads ES2015+ code and transpiles to ES5 using BabelLoads TypeScript like JavaScriptLoads CoffeeScript like JavaScriptTemplatingNameStatusInstall SizeDescriptionExports HTML as string, requires references to static resourcesLoads Pug templates and returns a functionCompiles Pug to a function or HTML string, useful for use with Vue, React, AngularCompiles Markdown to HTMLLoads and transforms a HTML file using PostHTMLCompiles Handlebars to HTMLStylingNameStatusInstall SizeDescription<style>Add exports of a module as style to DOMLoads CSS file with resolved imports and returns CSS codeLoads and compiles a LESS fileLoads and compiles a Sass/SCSS fileLoads and compiles a Stylus fileLoads and transforms a CSS/SSS file using PostCSSFrameworksNameStatusInstall SizeDescriptionLoads and compiles Vue ComponentsProcess HTML & CSS with preprocessor of choice and require() Web Components like first-class modulesLoads and compiles Angular 2 ComponentsRiot official webpack loaderOfficial Svelte loaderPerformanceWebpack uses async I/O and has multiple caching levels. This makes webpack fastand incredibly fast on incremental compilations.Module FormatsWebpack supports ES2015+, CommonJS and AMD modules out of the box. It performs clever staticanalysis on the AST of your code. It even has an evaluation engine to evaluatesimple expressions. This allows you to support most existing libraries out of the box.Code SplittingWebpack allows you to split your codebase into multiple chunks. Chunks areloaded asynchronously at runtime. This reduces the initial loading time.OptimizationsWebpack can do many optimizations to reduce the output size of yourJavaScript by deduplicating frequently used modules, minifying, and givingyou full control of what is loaded initially and what is loaded at runtimethrough code splitting. It can also make your code chunks cachefriendly by using hashes.ContributingWe want contributing to webpack to be fun, enjoyable, and educational for anyone, and everyone. We have a vibrant ecosystem that spans beyond this single repo. We welcome you to check out any of the repositories in our organization or webpack-contrib organization which houses all of our loaders and plugins.Contributions go far beyond pull requests and commits. Although we love giving you the opportunity to put your stamp on webpack, we also are thrilled to receive a variety of other contributions including:Documentation updates, enhancements, designs, or bugfixesSpelling or grammar fixesREADME.md corrections or redesignsAdding unit, or functional testsTriaging GitHub issues -- especially determining whether an issue still persists or is reproducible.Searching #webpack on twitter and helping someone else who needs helpTeaching others how to contribute to one of the many webpack's repos!Blogging, speaking about, or creating tutorials about one of webpack's many features.Helping others in our webpack gitter channel.To get started have a look at our documentation on contributing.If you are worried or don't know where to start, you can always reach out to Sean Larkin (@TheLarkInn) on Twitter or simply submit an issue and a maintainer can help give you guidance!We have also started a series on our Medium Publication called The Contributor's Guide to webpack. We welcome you to read it and post any questions or responses if you still need help.Looking to speak about webpack? We'd love to review your talk abstract/CFP! You can email it to webpack [at] opencollective [dot] com and we can give pointers or tips!!!Creating your own plugins and loadersIf you create a loader or plugin, we would <3 for you to open source it, and put it on npm. We follow the x-loader, x-webpack-plugin naming convention.SupportWe consider webpack to be a low-level tool used not only individually but also layered beneath other awesome tools. Because of its flexibility, webpack isn't always the easiest entry-level solution, however we do believe it is the most powerful. That said, we're always looking for ways to improve and simplify the tool without compromising functionality. If you have any ideas on ways to accomplish this, we're all ears!If you're just getting started, take a look at our new docs and concepts page. This has a high level overview that is great for beginners!!Looking for webpack 1 docs? Please check out the old wiki, but note that this deprecated version is no longer supported.If you want to discuss something or just need help, here is our Gitter room where there are always individuals looking to help out!If you are still having difficulty, we would love for you to posta question to StackOverflow with the webpack tag. It is much easier to answer questions that include your webpack.config.js and relevant files! So if you can provide them, we'd be extremely grateful (and more likely to help you find the answer!)If you are twitter savvy you can tweet #webpack with your question and someone should be able to reach out and help also.If you have discovered a 🐜 or have a feature suggestion, feel free to create an issue on Github.LicenseCore Team                                    Tobias Koppers        Core                Founder of webpack                                    Johannes Ewald        Loaders & Plugins                Early adopter of webpack                                    Sean T. Larkin        Public Relations                Founder of the core team                                    Kees Kluskens        Development                Sponsor                          \t\t             SponsoringMost of the core team members, webpack contributors and contributors in the ecosystem do this open source work in their free time. If you use webpack for a serious task, and you'd like us to invest more time on it, please donate. This project increases your income/productivity too. It makes development and applications faster and it reduces the required bandwidth.This is how we use the donations:Allow the core team to work on webpackThank contributors if they invested a large amount of time in contributingSupport projects in the ecosystem that are of great value for usersSupport projects that are voted most (work in progress)Infrastructure costFees for money handlingPremium PartnersOther Backers and SponsorsBefore we started using OpenCollective, donations were made anonymously. Now that we have made the switch, we would like to acknowledge these sponsors (and the ones who continue to donate using OpenCollective). If we've missed someone, please send us a PR, and we'll add you to this list.Gold SponsorsBecome a gold sponsor and get your logo on our README on Github with a link to your site.Silver SponsorsBecome a silver sponsor and get your logo on our README on Github with a link to your site.Bronze SponsorsBecome a bronze sponsor and get your logo on our README on Github with a link to your site.BackersBecome a backer and get your image on our README on Github with a link to your site.Special Thanks to(In chronological order)@google for Google Web Toolkit (GWT), which aims to compile Java to JavaScript. It features a similar Code Splitting as webpack.@medikoo for modules-webmake, which is a similar project. webpack was born because I wanted Code Splitting for modules-webmake. Interestingly the Code Splitting issue is still open (thanks also to @Phoscur for the discussion).@substack for browserify, which is a similar project and source for many ideas.@jrburke for require.js, which is a similar project and source for many ideas.@defunctzombie for the browser-field spec, which makes modules available for node.js, browserify and webpack.Every early webpack user, which contributed to webpack by writing issues or PRs. You influenced the direction...@shama, @jhnns and @sokra for maintaining this projectEveryone who has written a loader for webpack. You are the ecosystem...Everyone I forgot to mention here, but also influenced webpack."
19,swagger-api/swagger-ui,https://github.com/swagger-api/swagger-ui/blob/master/README.md,JavaScript,"IntroductionSwagger UI allows anyone — be it your development team or your end consumers — to visualize and interact with the API’s resources without having any of the implementation logic in place. It’s automatically generated from your OpenAPI (formerly known as Swagger) Specification, with the visual documentation making it easy for back end implementation and client side consumption.General👉🏼 Want to score an easy open-source contribution? Check out our Good first issue label.🕰️ Looking for the older version of Swagger UI? Refer to the 2.x branch.This repository publishes three different NPM modules:swagger-ui is a traditional npm module intended for use in single-page applications that are capable of resolving dependencies (via Webpack, Browserify, etc).swagger-ui-dist is a dependency-free module that includes everything you need to serve Swagger UI in a server-side project, or a single-page application that can't resolve npm module dependencies.swagger-ui-react is Swagger UI packaged as a React component for use in React applications.We strongly suggest that you use swagger-ui instead of swagger-ui-dist if you're building a single-page application, since swagger-ui-dist is significantly larger.If you are looking for plain ol' HTML/JS/CSS, download the latest release and copy the contents of the /dist folder to your server.CompatibilityThe OpenAPI Specification has undergone 5 revisions since initial creation in 2010.  Compatibility between Swagger UI and the OpenAPI Specification is as follows:Swagger UI VersionRelease DateOpenAPI Spec compatibilityNotes5.0.02023-06-122.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3, 3.1.0tag v5.0.04.0.02021-11-032.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3tag v4.0.03.18.32018-08-032.0, 3.0.0, 3.0.1, 3.0.2, 3.0.3tag v3.18.33.0.212017-07-262.0tag v3.0.212.2.102017-01-041.1, 1.2, 2.0tag v2.2.102.1.52016-07-201.1, 1.2, 2.0tag v2.1.52.0.242014-09-121.1, 1.2tag v2.0.241.0.132013-03-081.1, 1.2tag v1.0.131.0.12011-10-111.0, 1.1tag v1.0.1DocumentationUsageInstallationConfigurationCORSOAuth2Deep LinkingLimitationsVersion detectionCustomizationOverviewPlugin APICustom layoutDevelopmentSetting upScriptsContributingContributingIntegration TestsYou will need JDK of version 7 or higher as instructed herehttps://nightwatchjs.org/guide/getting-started/installation.html#install-selenium-serverIntegration tests can be run locally with npm run e2e - be sure you aren't running a dev server when testing!Browser supportSwagger UI works in the latest versions of Chrome, Safari, Firefox, and Edge.Known IssuesTo help with the migration, here are the currently known issues with 3.X. This list will update regularly, and will not include features that were not implemented in previous versions.Only part of the parameters previously supported are available.The JSON Form Editor is not implemented.Support for collectionFormat is partial.l10n (translations) is not implemented.Relative path support for external files is not implemented.Security contactPlease disclose any security-related issues or vulnerabilities by emailing security@swagger.io, instead of using the public issue tracker.LicenseSwaggerUI is licensed under Apache 2.0 license.SwaggerUI comes with an explicit NOTICE filecontaining additional legal notices and information."
20,lyfe00011/whatsapp-bot-md,https://github.com/lyfe00011/whatsapp-bot-md/blob/master/README.md,JavaScript,"WhatsApp MD User BotA simple WhatsApp User bot.SetupDeploy on HerokuClick SCAN and scan the QR code through the \""WhatsApp Linked Devices\"" option in your WhatsApp app.You will get a session ID in WhatsApp, copy the ID only.If you don't have an account on Heroku, create an account now.If you don't have a GitHub account, sign up now.FORK this repository.Now DEPLOY.Deploy on KoyebCreate an account on Koyeb. Sign up now.Get DATABASE_URL. You'll need this while deploying.Get SESSION_ID. Open Linked Devices in WhatsApp and SCAN now.Get the Koyeb API key. Let's Go.DEPLOY now.Enter Environment Variables. Read More.Enter a name and click \""Create Service.\""Deploy on VPS or PC (Example here as in Ubuntu)Install with scriptwget -N -O levanter.sh http://bit.ly/43JqREw && chmod +x levanter.sh && ./levanter.shInstall without a scriptInstall git, ffmpeg, and curl:sudo apt -y update && sudo apt -y upgradesudo apt -y install git ffmpeg curlInstall nodejs:sudo apt -y remove nodejscurl -fsSl https://deb.nodesource.com/setup_lts.x | sudo bash - && sudo apt -y install nodejsInstall yarn:npm install -g yarnInstall pm2:sudo yarn global add pm2Clone the repository and install packages:git clone https://github.com/lyfe00011/whatsapp-bot-md botName cd botName  yarn install --network-concurrency 1Enter Environment Variables: Copy-paste the lines below (remove SESSION_ID if not needed):echo \""SESSION_ID = Session_Id_you_Got_After_Scan_Dont_Add_This_Line_If_You_Can_Scan_From_Terminal_ItselfPREFIX = .STICKER_PACKNAME = LyFEALWAYS_ONLINE = falseRMBG_KEY = nullLANGUAG = enWARN_LIMIT = 3FORCE_LOGOUT = falseBRAINSHOP = 159501,6pq8dPiYt7PdqHz3MAX_UPLOAD = 200REJECT_CALL = falseSUDO = 989876543210TZ = Asia/KolkataVPS = trueAUTO_STATUS_VIEW = trueSEND_READ = trueAJOIN = trueDISABLE_START_MESSAGE = falsePERSONAL_MESSAGE = null\"" > config.envRead MoreEdit the config.env using nano if needed. To save, press Ctrl + O, then press Enter, and to exit, press Ctrl + X.Start and stop the bot:To start the bot: pm2 start . --name botName --attach --timeTo stop the bot: pm2 stop botNameThanks ToYusuf Usta for WhatsAsena@adiwajshing for Baileys"
21,zizifn/edgetunnel,https://github.com/zizifn/edgetunnel/blob/main/README.md,JavaScript,
22,chartjs/Chart.js,https://github.com/chartjs/Chart.js/blob/master/README.md,JavaScript,"            Simple yet flexible JavaScript charting for designers & developers                    DocumentationAll the links point to the new version 4 of the lib.IntroductionGetting StartedGeneralConfigurationChartsAxesDevelopersPopular ExtensionsSamplesIn case you are looking for an older version of the docs, you will have to specify the specific version in the url like this: https://www.chartjs.org/docs/2.9.4/ContributingInstructions on building and testing Chart.js can be found in the documentation. Before submitting an issue or a pull request, please take a moment to look over the contributing guidelines first. For support, please post questions on Stack Overflow with the chart.js tag.LicenseChart.js is available under the MIT license."
23,30-seconds/30-seconds-of-code,https://github.com/30-seconds/30-seconds-of-code/blob/master/README.md,JavaScript,"30 seconds of codeShort code snippets for all your development needsVisit our website to view our snippet collection.Search for snippets that suit your needs. You can search by name, tag, language or using a snippet's description. Just start typing a term and see what comes up.Browse all snippets or individual snippet collections for each topic.Click on each snippet card to view the whole snippet, including code, explanation and examples.You can copy code blocks on any snippet card, using the copy button at the top right.If you like the project, give it a star. It means a lot to the people maintaining it.Want to contribute?If you want to help us improve, take a minute to read the Contribution Guidelines first.Use the relevant template.md to add new snippets to each collection.If you find a problem with a specific snippet, please open an issue.If you find a problem with the website, please report it in the web repository.CreditsThis repository is maintained by the 30 seconds of code organization on GitHub.All snippets are licensed under the CC-BY-4.0 License, unless explicitly stated otherwise.Logos, names and trademarks are not to be used without the explicit consent of the owners of the 30 seconds of code GitHub organization.Our website is powered by Netlify, Astro & GitHub."
24,adam-p/markdown-here,https://github.com/adam-p/markdown-here/blob/master/README.md,JavaScript," Markdown HereVisit the website.Get it for Chrome.Get it for Firefox.Get it for Safari.Get it for Thunderbird and Postbox.Get it for Opera.Discuss it and ask questions in the Google Group.Markdown Here is a Google Chrome, Firefox, Safari, Opera, and Thunderbird extension that lets you write email† in Markdown‡ and render them before sending. It also supports syntax highlighting (just specify the language in a fenced code block).Writing email with code in it is pretty tedious. Writing Markdown with code in it is easy. I found myself writing email in Markdown in the Github in-browser editor, then copying the preview into email. This is a pretty absurd workflow, so I decided create a tool to write and render Markdown right in the email.To discover what can be done with Markdown in Markdown Here, check out the Markdown Here Cheatsheet and the other wiki pages.†: And Google Groups posts, and Blogger posts, and Evernote notes, and Wordpress posts! See more.‡: And TeX mathematical formulae!Table of ContentsInstallation InstructionsUsage InstructionsTroubleshootingCompatibilityNotes and MiscellaneousBuilding the Extension BundlesNext Steps, Credits, Feedback, LicenseInstallation InstructionsChromeChrome Web StoreGo to the Chrome Web Store page for Markdown Here and install normally.After installing, make sure to reload your webmail or restart Chrome!Manual/DevelopmentClone this repo.In Chrome, open the Extensions settings. (Wrench button, Tools, Extensions.)On the Extensions settings page, click the \""Developer Mode\"" checkbox.Click the now-visible \""Load unpacked extension…\"" button. Navigate to the directory where you cloned the repo, then the src directory under that.The Markdown Here extension should now be visible in your extensions list.Reload your webmail page (and maybe application) before trying to convert an email.Firefox and ThunderbirdMozilla Add-ons siteGo to the Firefox Add-ons page for Markdown Here and install normally.Or go to the \""Tools > Add-ons\"" menu and then search for \""Markdown Here\"".After installing, make sure to restart Firefox/Thunderbird!Note: It takes up to a month for Mozilla to approve changes to the Firefox/Thunderbird extension, so updates (features, fixes) will lag behind what is shown here. You can manually choose to install the newest version before it's reviewed from the list of versions: https://addons.mozilla.org/en-US/firefox/addon/markdown-here/versions/Manual/DevelopmentClone this repo.Follow the instructions in the MDN \""Setting up an extension development environment\"" article.SafariDownload the extension directly. When it has finished downloading, double click it to install.PreferencesTo get to the Markdown Here preferences, open the Safari preferences and then go to the \""Extensions\"" tab. Then click the \""Click me to show Markdown Here options\"" box.OperaNote that Markdown Here only works with Opera versions 16 and higher (i.e., the ones that are based on Chromium).Go to the Opera Add-ons store page for Markdown Here and install normally.After installing, make sure to reload your webmail or restart Chrome!Usage InstructionsInstall it, and then…In Chrome/Safari/Opera, make sure you reload your web mail page before trying to use Markdown Here.In Chrome/Firefox/Safari/Opera, log into your Gmail, Hotmail, or Yahoo account and start a new email. In Thunderbird, start a new message.Make sure you're using the rich editor.In Gmail, click the \""Rich formatting\"" link, if it's visible.In Thunderbird, make sure \""Compose messages in HTML format\"" is enabled in your \""Account Settings\"", \""Composition & Addressing\"" pane.Compose an email in Markdown. For example:**Hello** `world`.```javascriptalert('Hello syntax highlighting.');```Right-click in the compose box and choose the \""Markdown Toggle\"" item from the context menu. Or click the button that appears in your address bar. Or use the hotkey (CTRL+ALT+M by default).You should see your email rendered correctly from Markdown into rich HTML.Send your awesome email to everyone you know. It will appear to them the same way it looks to you.Revert to MarkdownAfter rendering your Markdown to pretty HTML, you can still get back to your original Markdown. Just right-click anywhere in the newly rendered Markdown and click \""Markdown Toggle\"" -- your email compose body will change back to the Markdown you had written.Note that any changes you make to the pretty HTML will be lost when you revert to Markdown.In Gmail, you can also use the browser's Undo command (CTRL+Z / CMD+Z, or from the Edit menu). Be warned that you might also lose the last few characters you entered.RepliesIn Gmail, Thunderbird, and Google Groups, you can use \""Markdown Toggle\"" normally: just write your reply (top, bottom, inline, wherever) and then convert. The original email that you're replying to will be left alone. (Technically: Existing blockquote blocks will be left intact.)In Hotmail and Yahoo (which don't put the original in a blockquote), and optionally in Gmail, Thunderbird, and Google Groups, you can ensure that only the part of the reply that you wrote gets converted by selecting what you want to convert and then clicking \""Markdown Toggle\"" -- see the next section.Selection/Piecemeal ConversionSometimes you don't want to convert the entire email; sometimes your email isn't entirely Markdown. To convert only part of the email, select the text (with your mouse or keyboard), right-click on it, and click the \""Markdown Toggle\"" menu item. Your selection is magically rendered into pretty HTML.To revert back to Markdown, just put your cursor anywhere in the block of converted text, right click, and click the \""Markdown Toggle\"" menu item again. Now it's magically back to the original Markdown.Things to know about converting/reverting a selectionIf you select only part of a block of text, only that text will be converted. The converted block will be wrapped in a paragraph element, so the original line will be broken up. You probably don't want to ever do this.You can select and revert multiple converted blocks at the same time. One upshot of this is that you can select your entire email, click \""Markdown Toggle\"", and all portions of it that you had converted will be reverted.If you don't have anything selected when you click \""Markdown Toggle\"", Markdown Here will check if there are converted blocks anywhere in the message and revert them. If there no converted blocks are found, it will convert the entire email.OptionsThe Markdown Here Options page can be accessed via the Chrome, Firefox, Safari, or Thunderbird extensions list. The available options include:Styling modifications for the rendered Markdown.Syntax highlighting theme selection and modification.TeX math formulae processing enabling and customization.What the hotkey should be.For Chrome and Firefox, any changes made in the Markdown Here Options are automatically synchronized between your other installations of that browser (if you have the sync feature enabled in the browser).TroubleshootingSee the Troubleshooting wiki page.CompatibilitySee the Compatibility wiki page.Notes and MiscellaneousMarkdown Here uses Github Flavored Markdown, with the limitation that GFM special links are not supported (issue #11); nor will they be, as MDH is not Github-specific.Available languages for syntax highlighting (and the way they should be written in the fenced code block) can be seen on the highlight.js demo page.Images embedded inline in your Markdown will be retained when you \""Markdown Toggle\"". Gmail allows you to put images inline in your email -- this can be much easier than referencing an external image.Email signatures are automatically excluded from conversion. Specifically, anything after the semi-standard '-- ' (note the trailing space) is left alone.Note that Hotmail and Yahoo do not automatically add the '-- ' to signatures, so you have to add it yourself.The \""Markdown Toggle\"" menu item shows up for more element types than it can correctly render. This is intended to help people realize that they're not using a rich editor. Otherwise they just don't see the menu item and don't know why.Styling:The use of browser-specific styles (-moz-, -webkit-) should be avoided. If used, they may not render correctly for people reading the email in a different browser from the one where the email was sent.The use of state-dependent styles (like a:hover) don't work because they don't match at the time the styles are made explicit. (In email, styles must be explicitly applied to all elements -- stylesheets get stripped.)For more tweaky features, visit the Tips and Tricks section.Building the Extension Bundlescd utilsnode build.jsChrome and Opera extensionCreate a file with a .zip extension containing these files and directories:manifest.jsoncommon/chrome/Firefox/Thunderbird extensionCreate a file with a .xpi extension containing these files and directories:chrome.manifestinstall.rdfcommon/firefox/Safari extensionThe browser-specific code is located in the markdown-here-safari project.Use the Safari Extension Builder.Next StepsSee the issues list and the Notes Wiki. All ideas, bugs, plans, complaints, and dreams will end up in one of those two places.Feel free to create a feature request issue if what you want isn't already there. If you'd prefer a less formal approach to floating an idea, post to the \""markdown-here\"" Google Group.It also takes a fair bit of work to stay up-to-date with the latest changes in all the applications and web sites where Markdown Here works.CreditsMarkdown Here was coded on the shoulders of giants.Markdown-to-HTML: chjj / markedSyntax highlighting: isagalaev / highlight.jsHTML-to-text: mtrimpe / jsHtmlToTextFeedbackAll bugs, feature requests, pull requests, feedback, etc., are welcome. Create an issue. Or post to the \""markdown-here\"" Google Group.LicenseCodeMIT License: http://adampritchard.mit-license.org/ or see the LICENSE file.LogoCopyright 2015, Austin Anderson. Licensed to Markdown Here under the MDH contributor license agreement.Other imagesCreative Commons Attribution 3.0 Unported (CC BY 3.0) License"
25,gatsbyjs/gatsby,https://github.com/gatsbyjs/gatsby/blob/master/README.md,JavaScript,"          Gatsby      The future of web development is here.    Gatsby is a free and open source framework based on React that helps developers build blazing fast websites and apps.  It combines the control and scalability of dynamically rendered sites with the speed of static-site generation, creating a whole new web of possibilities.                                                          Quickstart   ·   Tutorial   ·   Plugins   ·   Starters   ·   Showcase   ·   Contribute    Support: Twitter, Discussions   &   DiscordGatsby helps professional developers efficiently create maintainable, highly-performant, content-rich websites.Load Data From Anywhere. Gatsby pulls in data from any data source, whether it’s Markdown files, a headless CMS like Contentful or WordPress, or a REST or GraphQL API. Use source plugins to load your data, then develop using Gatsby’s uniform GraphQL interface.Go Beyond Static Websites. Get all the benefits of static websites with none of the limitations. Gatsby sites are fully functional React apps, so you can create high-quality, dynamic web apps, from blogs to e-commerce sites to user dashboards.Choose your Rendering Options. You can choose alternative rendering options, namely Deferred Static Generation (DSG) and Server-Side Rendering (SSR), in addition to Static Site Generation (SSG) — on a per-page basis. This type of granular control allows you to optimize for performance and productivity without sacrificing one for the other.Performance Is Baked In. Ace your performance audits by default. Gatsby automates code splitting, image optimization, inlining critical styles, lazy-loading, prefetching resources, and more to ensure your site is fast — no manual tuning required.Use a Modern Stack for Every Site. No matter where the data comes from, Gatsby sites are built using React and GraphQL. Build a uniform workflow for you and your team, regardless of whether the data is coming from the same backend.Host at Scale for Pennies. Gatsby sites don’t require servers, so you can host your entire site on a CDN for a fraction of the cost of a server-rendered site. Many Gatsby sites can be hosted entirely free on Gatsby Cloud and other similar services.Use Gatsby's Centralized Data Layer Everywhere. With Gatsby's Valhalla Content Hub you can bring Gatsby's data layer to any project. Making it accessible via a unified GraphQL API for building content sites, eCommerce platforms, and both native and web applications.Learn how to use Gatsby for your next project.🚀 Ship your first Gatsby site in 5 MinutesClick the link below to quickly try the workflow of developing, building, and deploying websites with Gatsby and Gatsby Cloud.At the end of this process, you'll havea site working on Gatsby Clouda new repository that is linked to that new siteas you push changes to your new repository, Gatsby Cloud will automatically rebuild and redeploy your site!💻 Get started with Gatsby locally in 5 MinutesYou can get a new Gatsby site up and running on your local dev environment in 5 minutes with these four steps:Initialize a new project.npm init gatsbyGive it the name \""My Gatsby Site\"".Start the site in develop mode.Next, move into your new site’s directory and start it up:cd my-gatsby-site/npm run developOpen the source code and start editing!Your site is now running at http://localhost:8000. Open the my-gatsby-site directory in your code editor of choice and edit src/pages/index.js. Save your changes, and the browser will update in real time!At this point, you’ve got a fully functional Gatsby website. For additional information on how you can customize your Gatsby site, see our plugins and the official tutorial.🎓 Learning GatsbyFull documentation for Gatsby lives on the website.For most developers, we recommend starting with our in-depth tutorial for creating a site with Gatsby. It starts with zero assumptions about your level of ability and walks through every step of the process.To dive straight into code samples head to our documentation. In particular, check out the “How-to Guides”, “Reference”, and “Conceptual Guides” sections in the sidebar.We welcome suggestions for improving our docs. See the “how to contribute” documentation for more details.Start Learning Gatsby: Follow the Tutorial · Read the Docs🚢 Release NotesWondering what we've shipped recently? Check out our release notes for key highlights, performance improvements, new features, and notable bugfixes.Also, read our documentation on version support to understand our plans for each version of Gatsby.💼 Migration GuidesAlready have a Gatsby site? These handy guides will help you add the improvements of Gatsby v5 to your site without starting from scratch!Migrate from v4 to v5Migrate from v3 to v4Migrate from v2 to v3❗ Code of ConductGatsby is dedicated to building a welcoming, diverse, safe community. We expect everyone participating in the Gatsby community to abide by our Code of Conduct. Please read it. Please follow it. In the Gatsby community, we work hard to build each other up and create amazing things together. 💪💜🤝 How to ContributeWhether you're helping us fix bugs, improve the docs, or spread the word, we'd love to have you as part of the Gatsby community!Check out our Contributing Guide for ideas on contributing and setup steps for getting our repositories up and running on your local machine.A note on how this repository is organizedThis repository is a monorepo managed using Lerna. This means there are multiple packages managed in this codebase, even though we publish them to NPM as separate packages.📝 LicenseLicensed under the MIT License.💜 ThanksThanks go out to all our many contributors creating plugins, starters, videos, and blog posts. And a special appreciation for our community members helping with issues and PRs, or answering questions on Discord and GitHub Discussions.A big part of what makes Gatsby great is each and every one of you in the community. Your contributions enrich the Gatsby experience and make it better every day."
26,axios/axios,https://github.com/axios/axios/blob/v1.x/README.md,JavaScript,"               Promise based HTTP client for the browser and node.js    Website •    DocumentationTable of ContentsFeaturesBrowser SupportInstallingPackage managerCDNExampleAxios APIRequest method aliasesConcurrency 👎Creating an instanceInstance methodsRequest ConfigResponse SchemaConfig DefaultsGlobal axios defaultsCustom instance defaultsConfig order of precedenceInterceptorsMultiple InterceptorsHandling ErrorsCancellationAbortControllerCancelToken 👎Using application/x-www-form-urlencoded formatURLSearchParamsQuery string🆕 Automatic serializationUsing multipart/form-data formatFormData🆕 Automatic serializationFiles PostingHTML Form Posting🆕 Progress capturing🆕 Rate limitingSemverPromisesTypeScriptResourcesCreditsLicenseFeaturesMake XMLHttpRequests from the browserMake http requests from node.jsSupports the Promise APIIntercept request and responseTransform request and response dataCancel requestsAutomatic transforms for JSON data🆕 Automatic data object serialization to multipart/form-data and x-www-form-urlencoded body encodingsClient side support for protecting against XSRFBrowser SupportLatest ✔Latest ✔Latest ✔Latest ✔Latest ✔11 ✔InstallingPackage managerUsing npm:$ npm install axiosUsing bower:$ bower install axiosUsing yarn:$ yarn add axiosUsing pnpm:$ pnpm add axiosOnce the package is installed, you can import the library using import or require approach:import axios, {isCancel, AxiosError} from 'axios';You can also use the default export, since the named export is just a re-export from the Axios factory:import axios from 'axios';console.log(axios.isCancel('something'));If you use require for importing, only default export is available:const axios = require('axios');console.log(axios.isCancel('something'));For cases where something went wrong when trying to import a module into a custom or legacy environment,you can try importing the module package directly:const axios = require('axios/dist/browser/axios.cjs'); // browser commonJS bundle (ES2017)// const axios = require('axios/dist/node/axios.cjs'); // node commonJS bundle (ES2017)CDNUsing jsDelivr CDN (ES5 UMD browser module):<script src=\""https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js\""></script>Using unpkg CDN:<script src=\""https://unpkg.com/axios@1.1.2/dist/axios.min.js\""></script>ExampleNote CommonJS usageIn order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with require(), use the following approach:import axios from 'axios';//const axios = require('axios'); // legacy way// Make a request for a user with a given IDaxios.get('/user?ID=12345')  .then(function (response) {    // handle success    console.log(response);  })  .catch(function (error) {    // handle error    console.log(error);  })  .finally(function () {    // always executed  });// Optionally the request above could also be done asaxios.get('/user', {    params: {      ID: 12345    }  })  .then(function (response) {    console.log(response);  })  .catch(function (error) {    console.log(error);  })  .finally(function () {    // always executed  });// Want to use async/await? Add the `async` keyword to your outer function/method.async function getUser() {  try {    const response = await axios.get('/user?ID=12345');    console.log(response);  } catch (error) {    console.error(error);  }}Note async/await is part of ECMAScript 2017 and is not supported in InternetExplorer and older browsers, so use with caution.Performing a POST requestaxios.post('/user', {    firstName: 'Fred',    lastName: 'Flintstone'  })  .then(function (response) {    console.log(response);  })  .catch(function (error) {    console.log(error);  });Performing multiple concurrent requestsfunction getUserAccount() {  return axios.get('/user/12345');}function getUserPermissions() {  return axios.get('/user/12345/permissions');}Promise.all([getUserAccount(), getUserPermissions()])  .then(function (results) {    const acct = results[0];    const perm = results[1];  });axios APIRequests can be made by passing the relevant config to axios.axios(config)// Send a POST requestaxios({  method: 'post',  url: '/user/12345',  data: {    firstName: 'Fred',    lastName: 'Flintstone'  }});// GET request for remote image in node.jsaxios({  method: 'get',  url: 'https://bit.ly/2mTM3nY',  responseType: 'stream'})  .then(function (response) {    response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))  });axios(url[, config])// Send a GET request (default method)axios('/user/12345');Request method aliasesFor convenience, aliases have been provided for all common request methods.axios.request(config)axios.get(url[, config])axios.delete(url[, config])axios.head(url[, config])axios.options(url[, config])axios.post(url[, data[, config]])axios.put(url[, data[, config]])axios.patch(url[, data[, config]])NOTEWhen using the alias methods url, method, and data properties don't need to be specified in config.Concurrency (Deprecated)Please use Promise.all to replace the below functions.Helper functions for dealing with concurrent requests.axios.all(iterable)axios.spread(callback)Creating an instanceYou can create a new instance of axios with a custom config.axios.create([config])const instance = axios.create({  baseURL: 'https://some-domain.com/api/',  timeout: 1000,  headers: {'X-Custom-Header': 'foobar'}});Instance methodsThe available instance methods are listed below. The specified config will be merged with the instance config.axios#request(config)axios#get(url[, config])axios#delete(url[, config])axios#head(url[, config])axios#options(url[, config])axios#post(url[, data[, config]])axios#put(url[, data[, config]])axios#patch(url[, data[, config]])axios#getUri([config])Request ConfigThese are the available config options for making requests. Only the url is required. Requests will default to GET if method is not specified.{  // `url` is the server URL that will be used for the request  url: '/user',  // `method` is the request method to be used when making the request  method: 'get', // default  // `baseURL` will be prepended to `url` unless `url` is absolute.  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs  // to methods of that instance.  baseURL: 'https://some-domain.com/api/',  // `transformRequest` allows changes to the request data before it is sent to the server  // This is only applicable for request methods 'PUT', 'POST', 'PATCH' and 'DELETE'  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,  // FormData or Stream  // You may modify the headers object.  transformRequest: [function (data, headers) {    // Do whatever you want to transform the data    return data;  }],  // `transformResponse` allows changes to the response data to be made before  // it is passed to then/catch  transformResponse: [function (data) {    // Do whatever you want to transform the data    return data;  }],  // `headers` are custom headers to be sent  headers: {'X-Requested-With': 'XMLHttpRequest'},  // `params` are the URL parameters to be sent with the request  // Must be a plain object or a URLSearchParams object  params: {    ID: 12345  },  // `paramsSerializer` is an optional config in charge of serializing `params`  paramsSerializer: {    encode?: (param: string): string => { /* Do custom ops here and return transformed string */ }, // custom encoder function; sends Key/Values in an iterative fashion    serialize?: (params: Record<string, any>, options?: ParamsSerializerOptions ), // mimic pre 1.x behavior and send entire params object to a custom serializer func. Allows consumer to control how params are serialized.    indexes: false // array indexes format (null - no brackets, false (default) - empty brackets, true - brackets with indexes)  },  // `data` is the data to be sent as the request body  // Only applicable for request methods 'PUT', 'POST', 'DELETE , and 'PATCH'  // When no `transformRequest` is set, must be of one of the following types:  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams  // - Browser only: FormData, File, Blob  // - Node only: Stream, Buffer, FormData (form-data package)  data: {    firstName: 'Fred'  },  // syntax alternative to send data into the body  // method post  // only the value is sent, not the key  data: 'Country=Brasil&City=Belo Horizonte',  // `timeout` specifies the number of milliseconds before the request times out.  // If the request takes longer than `timeout`, the request will be aborted.  timeout: 1000, // default is `0` (no timeout)  // `withCredentials` indicates whether or not cross-site Access-Control requests  // should be made using credentials  withCredentials: false, // default  // `adapter` allows custom handling of requests which makes testing easier.  // Return a promise and supply a valid response (see lib/adapters/README.md).  adapter: function (config) {    /* ... */  },  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.  // This will set an `Authorization` header, overwriting any existing  // `Authorization` custom headers you have set using `headers`.  // Please note that only HTTP Basic auth is configurable through this parameter.  // For Bearer tokens and such, use `Authorization` custom headers instead.  auth: {    username: 'janedoe',    password: 's00pers3cret'  },  // `responseType` indicates the type of data that the server will respond with  // options are: 'arraybuffer', 'document', 'json', 'text', 'stream'  //   browser only: 'blob'  responseType: 'json', // default  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)  // Note: Ignored for `responseType` of 'stream' or client-side requests  responseEncoding: 'utf8', // default  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token  xsrfCookieName: 'XSRF-TOKEN', // default  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value  xsrfHeaderName: 'X-XSRF-TOKEN', // default  // `onUploadProgress` allows handling of progress events for uploads  // browser & node.js  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {    // Do whatever you want with the Axios progress event  },  // `onDownloadProgress` allows handling of progress events for downloads  // browser & node.js  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {    // Do whatever you want with the Axios progress event  },  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js  maxContentLength: 2000,  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed  maxBodyLength: 2000,  // `validateStatus` defines whether to resolve or reject the promise for a given  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`  // or `undefined`), the promise will be resolved; otherwise, the promise will be  // rejected.  validateStatus: function (status) {    return status >= 200 && status < 300; // default  },  // `maxRedirects` defines the maximum number of redirects to follow in node.js.  // If set to 0, no redirects will be followed.  maxRedirects: 21, // default  // `beforeRedirect` defines a function that will be called before redirect.  // Use this to adjust the request options upon redirecting,  // to inspect the latest response headers,  // or to cancel the request by throwing an error  // If maxRedirects is set to 0, `beforeRedirect` is not used.  beforeRedirect: (options, { headers }) => {    if (options.hostname === \""example.com\"") {      options.auth = \""user:password\"";    }  },  // `socketPath` defines a UNIX Socket to be used in node.js.  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.  // Only either `socketPath` or `proxy` can be specified.  // If both are specified, `socketPath` is used.  socketPath: null, // default    // `transport` determines the transport method that will be used to make the request. If defined, it will be used. Otherwise, if `maxRedirects` is 0, the default `http` or `https` library will be used, depending on the protocol specified in `protocol`. Otherwise, the `httpFollow` or `httpsFollow` library will be used, again depending on the protocol, which can handle redirects.  transport: undefined, // default  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http  // and https requests, respectively, in node.js. This allows options to be added like  // `keepAlive` that are not enabled by default.  httpAgent: new http.Agent({ keepAlive: true }),  httpsAgent: new https.Agent({ keepAlive: true }),  // `proxy` defines the hostname, port, and protocol of the proxy server.  // You can also define your proxy using the conventional `http_proxy` and  // `https_proxy` environment variables. If you are using environment variables  // for your proxy configuration, you can also define a `no_proxy` environment  // variable as a comma-separated list of domains that should not be proxied.  // Use `false` to disable proxies, ignoring environment variables.  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and  // supplies credentials.  // This will set an `Proxy-Authorization` header, overwriting any existing  // `Proxy-Authorization` custom headers you have set using `headers`.  // If the proxy server uses HTTPS, then you must set the protocol to `https`.  proxy: {    protocol: 'https',    host: '127.0.0.1',    // hostname: '127.0.0.1' // Takes precedence over 'host' if both are defined    port: 9000,    auth: {      username: 'mikeymike',      password: 'rapunz3l'    }  },  // `cancelToken` specifies a cancel token that can be used to cancel the request  // (see Cancellation section below for details)  cancelToken: new CancelToken(function (cancel) {  }),  // an alternative way to cancel Axios requests using AbortController  signal: new AbortController().signal,  // `decompress` indicates whether or not the response body should be decompressed  // automatically. If set to `true` will also remove the 'content-encoding' header  // from the responses objects of all decompressed responses  // - Node only (XHR cannot turn off decompression)  decompress: true // default  // `insecureHTTPParser` boolean.  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.  // This may allow interoperability with non-conformant HTTP implementations.  // Using the insecure parser should be avoided.  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none  insecureHTTPParser: undefined // default  // transitional options for backward compatibility that may be removed in the newer versions  transitional: {    // silent JSON parsing mode    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to 'json')    silentJSONParsing: true, // default value for the current Axios version    // try to parse the response string as JSON even if `responseType` is not 'json'    forcedJSONParsing: true,    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts    clarifyTimeoutError: false,  },  env: {    // The FormData class to be used to automatically serialize the payload into a FormData object    FormData: window?.FormData || global?.FormData  },  formSerializer: {      visitor: (value, key, path, helpers) => {}; // custom visitor function to serialize form values      dots: boolean; // use dots instead of brackets format      metaTokens: boolean; // keep special endings like {} in parameter key      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes  },  // http adapter only (node.js)  maxRate: [    100 * 1024, // 100KB/s upload limit,    100 * 1024  // 100KB/s download limit  ]}Response SchemaThe response for a request contains the following information.{  // `data` is the response that was provided by the server  data: {},  // `status` is the HTTP status code from the server response  status: 200,  // `statusText` is the HTTP status message from the server response  statusText: 'OK',  // `headers` the HTTP headers that the server responded with  // All header names are lowercase and can be accessed using the bracket notation.  // Example: `response.headers['content-type']`  headers: {},  // `config` is the config that was provided to `axios` for the request  config: {},  // `request` is the request that generated this response  // It is the last ClientRequest instance in node.js (in redirects)  // and an XMLHttpRequest instance in the browser  request: {}}When using then, you will receive the response as follows:axios.get('/user/12345')  .then(function (response) {    console.log(response.data);    console.log(response.status);    console.log(response.statusText);    console.log(response.headers);    console.log(response.config);  });When using catch, or passing a rejection callback as second parameter of then, the response will be available through the error object as explained in the Handling Errors section.Config DefaultsYou can specify config defaults that will be applied to every request.Global axios defaultsaxios.defaults.baseURL = 'https://api.example.com';// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.// See below for an example using Custom instance defaults instead.axios.defaults.headers.common['Authorization'] = AUTH_TOKEN;axios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';Custom instance defaults// Set config defaults when creating the instanceconst instance = axios.create({  baseURL: 'https://api.example.com'});// Alter defaults after instance has been createdinstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;Config order of precedenceConfig will be merged with an order of precedence. The order is library defaults found in lib/defaults.js, then defaults property of the instance, and finally config argument for the request. The latter will take precedence over the former. Here's an example.// Create an instance using the config defaults provided by the library// At this point the timeout config value is `0` as is the default for the libraryconst instance = axios.create();// Override timeout default for the library// Now all requests using this instance will wait 2.5 seconds before timing outinstance.defaults.timeout = 2500;// Override timeout for this request as it's known to take a long timeinstance.get('/longRequest', {  timeout: 5000});InterceptorsYou can intercept requests or responses before they are handled by then or catch.// Add a request interceptoraxios.interceptors.request.use(function (config) {    // Do something before request is sent    return config;  }, function (error) {    // Do something with request error    return Promise.reject(error);  });// Add a response interceptoraxios.interceptors.response.use(function (response) {    // Any status code that lie within the range of 2xx cause this function to trigger    // Do something with response data    return response;  }, function (error) {    // Any status codes that falls outside the range of 2xx cause this function to trigger    // Do something with response error    return Promise.reject(error);  });If you need to remove an interceptor later you can.const myInterceptor = axios.interceptors.request.use(function () {/*...*/});axios.interceptors.request.eject(myInterceptor);You can also clear all interceptors for requests or responses.const instance = axios.create();instance.interceptors.request.use(function () {/*...*/});instance.interceptors.request.clear(); // Removes interceptors from requestsinstance.interceptors.response.use(function () {/*...*/});instance.interceptors.response.clear(); // Removes interceptors from responsesYou can add interceptors to a custom instance of axios.const instance = axios.create();instance.interceptors.request.use(function () {/*...*/});When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delayin the execution of your axios request when the main thread is blocked (a promise is created under the hood forthe interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flagto the options object that will tell axios to run the code synchronously and avoid any delays in request execution.axios.interceptors.request.use(function (config) {  config.headers.test = 'I am only a header!';  return config;}, null, { synchronous: true });If you want to execute a particular interceptor based on a runtime check,you can add a runWhen function to the options object. The interceptor will not be executed if and only if the returnof runWhen is false. The function will be called with the configobject (don't forget that you can bind your own arguments to it as well.) This can be handy when you have anasynchronous request interceptor that only needs to run at certain times.function onGetCall(config) {  return config.method === 'get';}axios.interceptors.request.use(function (config) {  config.headers.test = 'special get headers';  return config;}, null, { runWhen: onGetCall });Multiple InterceptorsGiven you add multiple response interceptorsand when the response was fulfilledthen each interceptor is executedthen they are executed in the order they were addedthen only the last interceptor's result is returnedthen every interceptor receives the result of its predecessorand when the fulfillment-interceptor throwsthen the following fulfillment-interceptor is not calledthen the following rejection-interceptor is calledonce caught, another following fulfill-interceptor is called again (just like in a promise chain).Read the interceptor tests for seeing all this in code.Error TypesThere are many different axios error messages that can appear that can provide basic information about the specifics of the error and where opportunities may lie in debugging.The general structure of axios errors is as follows:PropertyDefinitionmessageA quick summary of the error message and the status it failed with.nameThis defines where the error originated from. For axios, it will always be an 'AxiosError'.stackProvides the stack trace of the error.configAn axios config object with specific instance configurations defined by the user from when the request was madecodeRepresents an axios identified error. The table below lists out specific definitions for internal axios error.statusHTTP response status code. See here for common HTTP response status code meanings.Below is a list of potential axios identified errorCodeDefinitionERR_BAD_OPTION_VALUEInvalid or unsupported value provided in axios configuration.ERR_BAD_OPTIONInvalid option provided in axios configuration.ECONNABORTEDRequest timed out due to exceeding timeout specified in axios configuration.ETIMEDOUTRequest timed out due to exceeding default axios timelimit.ERR_NETWORKNetwork-related issue.ERR_FR_TOO_MANY_REDIRECTSRequest is redirected too many times; exceeds max redirects specified in axios configuration.ERR_DEPRECATEDDeprecated feature or method used in axios.ERR_BAD_RESPONSEResponse cannot be parsed properly or is in an unexpected format.ERR_BAD_REQUESTRequested has unexpected format or missing required parameters.ERR_CANCELEDFeature or method is canceled explicitly by the user.ERR_NOT_SUPPORTFeature or method not supported in the current axios environment.ERR_INVALID_URLInvalid URL provided for axios request.Handling Errorsthe default behavior is to reject every response that returns with a status code that falls out of the range of 2xx and treat it as an error.axios.get('/user/12345')  .catch(function (error) {    if (error.response) {      // The request was made and the server responded with a status code      // that falls out of the range of 2xx      console.log(error.response.data);      console.log(error.response.status);      console.log(error.response.headers);    } else if (error.request) {      // The request was made but no response was received      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of      // http.ClientRequest in node.js      console.log(error.request);    } else {      // Something happened in setting up the request that triggered an Error      console.log('Error', error.message);    }    console.log(error.config);  });Using the validateStatus config option, you can override the default condition (status >= 200 && status < 300) and define HTTP code(s) that should throw an error.axios.get('/user/12345', {  validateStatus: function (status) {    return status < 500; // Resolve only if the status code is less than 500  }})Using toJSON you get an object with more information about the HTTP error.axios.get('/user/12345')  .catch(function (error) {    console.log(error.toJSON());  });CancellationAbortControllerStarting from v0.22.0 Axios supports AbortController to cancel requests in fetch API way:const controller = new AbortController();axios.get('/foo/bar', {   signal: controller.signal}).then(function(response) {   //...});// cancel the requestcontroller.abort()CancelToken 👎deprecatedYou can also cancel a request using a CancelToken.The axios cancel token API is based on the withdrawn cancellable promises proposal.This API is deprecated since v0.22.0 and shouldn't be used in new projectsYou can create a cancel token using the CancelToken.source factory as shown below:const CancelToken = axios.CancelToken;const source = CancelToken.source();axios.get('/user/12345', {  cancelToken: source.token}).catch(function (thrown) {  if (axios.isCancel(thrown)) {    console.log('Request canceled', thrown.message);  } else {    // handle error  }});axios.post('/user/12345', {  name: 'new name'}, {  cancelToken: source.token})// cancel the request (the message parameter is optional)source.cancel('Operation canceled by the user.');You can also create a cancel token by passing an executor function to the CancelToken constructor:const CancelToken = axios.CancelToken;let cancel;axios.get('/user/12345', {  cancelToken: new CancelToken(function executor(c) {    // An executor function receives a cancel function as a parameter    cancel = c;  })});// cancel the requestcancel();Note: you can cancel several requests with the same cancel token/abort controller.If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.During the transition period, you can use both cancellation APIs, even for the same request:Using application/x-www-form-urlencoded formatURLSearchParamsBy default, axios serializes JavaScript objects to JSON. To send data in the application/x-www-form-urlencoded format instead, you can use the URLSearchParams API, which is supported in the vast majority of browsers,and  Node starting with v10 (released in 2018).const params = new URLSearchParams({ foo: 'bar' });params.append('extraparam', 'value');axios.post('/foo', params);Query string (Older browsers)For compatibility with very old browsers, there is a polyfill available (make sure to polyfill the global environment).Alternatively, you can encode data using the qs library:const qs = require('qs');axios.post('/foo', qs.stringify({ 'bar': 123 }));Or in another way (ES6),import qs from 'qs';const data = { 'bar': 123 };const options = {  method: 'POST',  headers: { 'content-type': 'application/x-www-form-urlencoded' },  data: qs.stringify(data),  url,};axios(options);Older Node.js versionsFor older Node.js engines, you can use the querystring module as follows:const querystring = require('querystring');axios.post('https://something.com/', querystring.stringify({ foo: 'bar' }));You can also use the qs library.NoteThe qs library is preferable if you need to stringify nested objects, as the querystring method has known issues with that use case.🆕 Automatic serialization to URLSearchParamsAxios will automatically serialize the data object to urlencoded format if the content-type header is set to \""application/x-www-form-urlencoded\"".const data = {  x: 1,  arr: [1, 2, 3],  arr2: [1, [2], 3],  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],};await axios.postForm('https://postman-echo.com/post', data,  {headers: {'content-type': 'application/x-www-form-urlencoded'}});The server will handle it as:  {    x: '1',    'arr[]': [ '1', '2', '3' ],    'arr2[0]': '1',    'arr2[1][0]': '2',    'arr2[2]': '3',    'arr3[]': [ '1', '2', '3' ],    'users[0][name]': 'Peter',    'users[0][surname]': 'griffin',    'users[1][name]': 'Thomas',    'users[1][surname]': 'Anderson'  }If your backend body-parser (like body-parser of express.js) supports nested objects decoding, you will get the same object on the server-side automatically  var app = express();  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies  app.post('/', function (req, res, next) {     // echo body as JSON     res.send(JSON.stringify(req.body));  });  server = app.listen(3000);Using multipart/form-data formatFormDataTo send the data as a multipart/formdata you need to pass a formData instance as a payload.Setting the Content-Type header is not required as Axios guesses it based on the payload type.const formData = new FormData();formData.append('foo', 'bar');axios.post('https://httpbin.org/post', formData);In node.js, you can use the form-data library as follows:const FormData = require('form-data');const form = new FormData();form.append('my_field', 'my value');form.append('my_buffer', new Buffer(10));form.append('my_file', fs.createReadStream('/foo/bar.jpg'));axios.post('https://example.com', form)🆕 Automatic serialization to FormDataStarting from v0.27.0, Axios supports automatic object serialization to a FormData object if the request Content-Typeheader is set to multipart/form-data.The following request will submit the data in a FormData format (Browser & Node.js):import axios from 'axios';axios.post('https://httpbin.org/post', {x: 1}, {  headers: {    'Content-Type': 'multipart/form-data'  }}).then(({data}) => console.log(data));In the node.js build, the (form-data) polyfill is used by default.You can overload the FormData class by setting the env.FormData config variable,but you probably won't need it in most cases:const axios = require('axios');var FormData = require('form-data');axios.post('https://httpbin.org/post', {x: 1, buf: new Buffer(10)}, {  headers: {    'Content-Type': 'multipart/form-data'  }}).then(({data}) => console.log(data));Axios FormData serializer supports some special endings to perform the following operations:{} - serialize the value with JSON.stringify[] - unwrap the array-like object as separate fields with the same keyNoteunwrap/expand operation will be used by default on arrays and FileList objectsFormData serializer supports additional options via config.formSerializer: object property to handle rare cases:visitor: Function - user-defined visitor function that will be called recursively to serialize the data objectto a FormData object by following custom rules.dots: boolean = false - use dot notation instead of brackets to serialize arrays and objects;metaTokens: boolean = true - add the special ending (e.g user{}: '{\""name\"": \""John\""}') in the FormData key.The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.indexes: null|false|true = false - controls how indexes will be added to unwrapped keys of flat array-like objectsnull - don't add brackets (arr: 1, arr: 2, arr: 3)false(default) - add empty brackets (arr[]: 1, arr[]: 2, arr[]: 3)true - add brackets with indexes  (arr[0]: 1, arr[1]: 2, arr[2]: 3)Let's say we have an object like this one:const obj = {  x: 1,  arr: [1, 2, 3],  arr2: [1, [2], 3],  users: [{name: 'Peter', surname: 'Griffin'}, {name: 'Thomas', surname: 'Anderson'}],  'obj2{}': [{x:1}]};The following steps will be executed by the Axios serializer internally:const formData = new FormData();formData.append('x', '1');formData.append('arr[]', '1');formData.append('arr[]', '2');formData.append('arr[]', '3');formData.append('arr2[0]', '1');formData.append('arr2[1][0]', '2');formData.append('arr2[2]', '3');formData.append('users[0][name]', 'Peter');formData.append('users[0][surname]', 'Griffin');formData.append('users[1][name]', 'Thomas');formData.append('users[1][surname]', 'Anderson');formData.append('obj2{}', '[{\""x\"":1}]');Axios supports the following shortcut methods: postForm, putForm, patchFormwhich are just the corresponding http methods with the Content-Type header preset to multipart/form-data.Files PostingYou can easily submit a single file:await axios.postForm('https://httpbin.org/post', {  'myVar' : 'foo',  'file': document.querySelector('#fileInput').files[0]});or multiple files as multipart/form-data:await axios.postForm('https://httpbin.org/post', {  'files[]': document.querySelector('#fileInput').files});FileList object can be passed directly:await axios.postForm('https://httpbin.org/post', document.querySelector('#fileInput').files)All files will be sent with the same field names: files[].🆕 HTML Form Posting (browser)Pass HTML Form element as a payload to submit it as multipart/form-data content.await axios.postForm('https://httpbin.org/post', document.querySelector('#htmlForm'));FormData and HTMLForm objects can also be posted as JSON by explicitly setting the Content-Type header to application/json:await axios.post('https://httpbin.org/post', document.querySelector('#htmlForm'), {  headers: {    'Content-Type': 'application/json'  }})For example, the Form<form id=\""form\"">  <input type=\""text\"" name=\""foo\"" value=\""1\"">  <input type=\""text\"" name=\""deep.prop\"" value=\""2\"">  <input type=\""text\"" name=\""deep prop spaced\"" value=\""3\"">  <input type=\""text\"" name=\""baz\"" value=\""4\"">  <input type=\""text\"" name=\""baz\"" value=\""5\"">  <select name=\""user.age\"">    <option value=\""value1\"">Value 1</option>    <option value=\""value2\"" selected>Value 2</option>    <option value=\""value3\"">Value 3</option>  </select>  <input type=\""submit\"" value=\""Save\""></form>will be submitted as the following JSON object:{  \""foo\"": \""1\"",  \""deep\"": {    \""prop\"": {      \""spaced\"": \""3\""    }  },  \""baz\"": [    \""4\"",    \""5\""  ],  \""user\"": {    \""age\"": \""value2\""  }}Sending Blobs/Files as JSON (base64) is not currently supported.🆕 Progress capturingAxios supports both browser and node environments to capture request upload/download progress.await axios.post(url, data, {  onUploadProgress: function (axiosProgressEvent) {    /*{      loaded: number;      total?: number;      progress?: number; // in range [0..1]      bytes: number; // how many bytes have been transferred since the last trigger (delta)      estimated?: number; // estimated time in seconds      rate?: number; // upload speed in bytes      upload: true; // upload sign    }*/  },  onDownloadProgress: function (axiosProgressEvent) {    /*{      loaded: number;      total?: number;      progress?: number;      bytes: number;       estimated?: number;      rate?: number; // download speed in bytes      download: true; // download sign    }*/  }});  You can also track stream upload/download progress in node.js:const {data} = await axios.post(SERVER_URL, readableStream, {   onUploadProgress: ({progress}) => {     console.log((progress * 100).toFixed(2));   },     headers: {    'Content-Length': contentLength   },   maxRedirects: 0 // avoid buffering the entire stream});Note:Capturing FormData upload progress is currently not currently supported in node.js environments.⚠️ WarningIt is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the node.js environment,as follow-redirects package will buffer the entire stream in RAM without following the \""backpressure\"" algorithm.🆕 Rate limitingDownload and upload rate limits can only be set for the http adapter (node.js):const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {  onUploadProgress: ({progress, rate}) => {    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)  },     maxRate: [100 * 1024], // 100KB/s limit});SemverUntil axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1, and 0.5.4 will have the same API, but 0.6.0 will have breaking changes.Promisesaxios depends on a native ES6 Promise implementation to be supported.If your environment doesn't support ES6 Promises, you can polyfill.TypeScriptaxios includes TypeScript definitions and a type guard for axios errors.let user: User = null;try {  const { data } = await axios.get('/user?ID=12345');  user = data.userDetails;} catch (error) {  if (axios.isAxiosError(error)) {    handleAxiosError(error);  } else {    handleUnexpectedError(error);  }}Because axios dual publishes with an ESM default export and a CJS module.exports, there are some caveats.The recommended setting is to use \""moduleResolution\"": \""node16\"" (this is implied by \""module\"": \""node16\""). Note that this requires TypeScript 4.7 or greater.If use ESM, your settings should be fine.If you compile TypeScript to CJS and you can’t use \""moduleResolution\"": \""node 16\"", you have to enable esModuleInterop.If you use TypeScript to type check CJS JavaScript code, your only option is to use \""moduleResolution\"": \""node16\"".Online one-click setupYou can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.ResourcesChangelogEcosystemContributing GuideCode of ConductCreditsaxios is heavily inspired by the $http service provided in AngularJS. Ultimately axios is an effort to provide a standalone $http-like service for use outside of AngularJS.LicenseMIT"
27,vuejs/vuex,https://github.com/vuejs/vuex/blob/main/README.md,JavaScript,"VuexPinia is now the new defaultThe official state management library for Vue has changed to Pinia. Pinia has almost the exact same or enhanced API as Vuex 5, described in Vuex 5 RFC. You could simply consider Pinia as Vuex 5 with a different name. Pinia also works with Vue 2.x as well.Vuex 3 and 4 will still be maintained. However, it's unlikely to add new functionalities to it. Vuex and Pinia can be installed in the same project. If you're migrating existing Vuex app to Pinia, it might be a suitable option. However, if you're planning to start a new project, we highly recommend using Pinia instead.Vuex is a state management pattern + library for Vue.js applications. It serves as a centralized store for all the components in an application, with rules ensuring that the state can only be mutated in a predictable fashion. It also integrates with Vue's official devtools extension to provide advanced features such as zero-config time-travel debugging and state snapshot export / import.Learn more about Vuex at \""What is Vuex?\"", or get started by looking into full documentation.DocumentationTo check out docs, visit vuex.vuejs.org.ExamplesYou may find example applications built with Vuex under the examples directory.Running the examples:$ npm install$ npm run dev # serve examples at localhost:8080QuestionsFor questions and support please use the Discord chat server or the official forum. The issue list of this repo is exclusively for bug reports and feature requests.IssuesPlease make sure to read the Issue Reporting Checklist before opening an issue. Issues not conforming to the guidelines may be closed immediately.ChangelogDetailed changes for each release are documented in the release notes.Stay In TouchFor latest releases and announcements, follow on Twitter: @vuejs.ContributionPlease make sure to read the Contributing Guide before making a pull request.LicenseMITCopyright (c) 2015-present Evan You"
28,TryGhost/Ghost,https://github.com/TryGhost/Ghost/blob/main/README.md,JavaScript,"                      Ghost.org •    Forum •    Docs •    Contributing •    Twitter                                                                      Love open source? We're hiring JavaScript engineers to work on Ghost full-time.  The easiest way to get a production instance deployed is with our official Ghost(Pro) managed service. It takes about 2 minutes to launch a new site with worldwide CDN, backups, security and maintenance all done for you.For most people this ends up being the best value option because of how much time it saves — and 100% of revenue goes to the Ghost Foundation; funding the maintenance and further development of the project itself. So you’ll be supporting open source software and getting a great service! Quickstart installIf you want to run your own instance of Ghost, in most cases the best way is to use our CLI toolnpm install ghost-cli -g Then, if installing locally add the local flag to get up and running in under a minute - Local install docsghost install local or on a server run the full install, including automatic SSL setup using LetsEncrypt - Production install docsghost install Check out our official documentation for more information about our recommended hosting stack & properly upgrading Ghost, plus everything you need to develop your own Ghost themes or work with our API.Contributors & advanced developersFor anyone wishing to contribute to Ghost or to hack/customize core files we recommend following our full development setup guides: Contributor guide • Developer setup Ghost sponsorsWe'd like to extend big thanks to our sponsors and partners who make Ghost possible. If you're interested in sponsoring Ghost and supporting the project, please check out our profile on GitHub sponsors ❤️DigitalOcean • Fastly Getting helpYou can find answers to a huge variety of questions, along with a large community of helpful developers over on the Ghost forum - replies are generally very quick. Ghost(Pro) customers also have access to 24/7 email support.To stay up to date with all the latest news and product updates, make sure you subscribe to our blog — or you can always follow us on Twitter, if you prefer your updates bite-sized and facetious. 🎷🐢 Copyright & licenseCopyright (c) 2013-2023 Ghost Foundation - Released under the MIT license. Ghost and the Ghost Logo are trademarks of Ghost Foundation Ltd. Please see our trademark policy for info on acceptable usage."
29,ruanyf/es6tutorial,https://github.com/ruanyf/es6tutorial/blob/gh-pages/README.md,JavaScript,ES6 入门教程官方镜像JavaScript 教程TypeScript 教程《ECMAScript 6 入门教程》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。本书覆盖 ES6 与上一个版本 ES5 的所有不同之处，对涉及的语法知识给予详细介绍，并给出大量简洁易懂的示例代码。本书为中级难度，适合已经掌握 ES5 的读者，用来了解这门语言的最新发展；也可当作参考手册，查寻新增的语法点。如果你是 JavaScript 语言的初学者，建议先学完《JavaScript 语言教程》，再来看本书。全书已由电子工业出版社出版，2017年9月推出了第三版，书名为《ES6 标准入门》。纸版内容截止到出版时，网站内容一直在修订。淘宝京东当当版权许可本书采用“保持署名—非商用”创意共享4.0许可证。只要保持原作者署名和非商用，您可以自由地阅读、分享、修改本书。详细的法律条文请参见创意共享网站。
30,AlreadyBored/basic-js,https://github.com/AlreadyBored/basic-js/blob/master/README.md,JavaScript,"BasicJS⚠️ DO NOT SUBMIT PULL REQUESTS TO THIS REPO ⚠️PrerequisitesInstall Node.jsFork this repository: https://github.com/AlreadyBored/basic-jsClone your newly created repo: https://github.com/<%your_github_username%>/basic-js/Go to folder basic-jsTo install all dependencies use npm installRun npm run test in command line.You will see the number of pending, passing and failing tests. 100% of passing tests is equal to max score for the taskTroubleshootingIf you catch error like this you can try to make npm install -g node-gypSubmit to rs appOpen rs app and loginGo to submit task pageSelect your task (BasicJS)Press the submit button and enjoyNotesWe recommend you to use Node.js of version 16.x.x LTS. If you use any of features, that does not supported by Node.js v16, there may be problems with task submit.Please, be sure that each of your tests is limited to 30 sec.General task descriptionYour task is to write several functions that are the solution to the subtasks. Subtasks descriptions, as well as instructions on how to run tests and submit solutions are below.Count cats!Your task is to count the cats hidden in the backyard (presented by two-dimensional Array). Cats hide well, but their ears (\""^^\"") are clearly visible. Your task is to implement the countCats(backyard) function that will count cats. Good luck!Number of cats found should be number. If no cats found, function should return 0.For example:countCats([ [0, 1, '^^'], [0, '^^', 2], ['^^', 1, 2] ]) => 3Write your code in src/count-cats.js.Carbon datingTo determine the age of archaeological finds, radioisotope dating is widely used. One of its types is radiocarbon dating.The approximate age of the sample is calculated by measuring the ratio of the modern activity of the C14 isotope to the activity of the same isotope in the sample.Read about method  About calculations  You can use the formula from the article at the link above. 0.693 is an approximation of the natural logarithm of two.Your task is to implement the function dateSample(sampleActivity) that calculates sample approximate age (in years). Please use given MODERN_ACTIVITY and HALF_LIFE_PERIOD.Function parameter sampleActivity is a string. Calculated sample age must be number.Age must be integer. Age must be rounded up (ceiling). In case of wrong input parameter type or inadequate activity value or absence of argument function must return false.For example:dateSample('1') => 22387 (or 22392 depending on formula used)dateSample('WOOT!') => falseWrite your code in src/carbon-dating.js.Dream teamImagine you and your friends decide to create a dream team. This team should have a cool secret name that contains encrypted information about it. For example, these may be the first letters of the names of its members in upper case sorted alphabetically.Your task is to implement the createDreamTeam(members) function that returns name of a newly made team (string) based on the names of its members (Array). Good luck!Names of the members should be strings. Values with other type should be ignored. In case of wrong members type function must return false.NB! Team member name may contain whitespaces.For example:createDreamTeam(['Matt', 'Ann', 'Dmitry', 'Max']) => 'ADMM'createDreamTeam(['Olivia', 1111, 'Lily', 'Oscar', true, null]) => 'LOO'Write your code in src/dream-team.js.What season?Your task is to implement the function getSeason(date) that accepts Date object and returns the time of the year that matches it.Time of the year must be string.Seasons in EnglishThe names of the seasons in English are: spring, summer, autumn (fall), winter.If the date argument was not passed, the function must return the string 'Unable to determine the time of year!'. If the date argument is invalid, the function must throw an Error with message Invalid date!.Shh! An enemy scout has lurked among the arguments that come into this function.He is guided by the famous proverb: “If it looks like a duck, swims like a duck and quacks like a duck, then it probably is a duck (who cares what it really is)”. He is expertly disguised as a real date, but a clever javascript developer can catch him and throw an Error with message Invalid date! just in time!For example:const springDate = new Date(2020, 02, 31)getSeason(springDate) => 'spring'Write your code in src/what-season.js.Tower of HanoiTower of Hanoi is famous mathematical puzzle of the 18th century.It consists of three rods and a number of disks of different sizes, which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:Only one disk can be moved at a time.Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.No larger disk may be placed on top of a smaller disk.Your task is much easier than coming up with an algorithm that solves this puzzle :)Implement the function calculateHanoi that accepts diskNumber and turnsSpeed parameters. diskNumber is a number of disks and turnsSpeed is the speed of moving discs (in turns per hour).Both parameters are numbers.calculateHanoi function returns an object with 2 properties:turns (minimum number of turns to solve the puzzle)seconds (minimum number of seconds to solve the puzzle at a given turnsSpeed, seconds must be an integer, obtained  from rounded down (floor) calculation result)You don't need to validate parameters.For example:calculateHanoi(9, 4308) => { turns: 511, seconds: 427 }Write your code in src/hanoi-tower.js.Transform arrayYour task is to implement the function transform(arr) that takes an array and returns transformed array, based on the control sequences that arr contains.Control sequences are defined string elements of the mentioned array:--discard-next excludes the next element of the array from the transformed array.--discard-prev excludes the previous element of the array from the transformed array.--double-next duplicates the next element of the array in the transformed array.--double-prev duplicates the previous element of the array in the transformed array.For example:transform([1, 2, 3, '--double-next', 4, 5]) => [1, 2, 3, 4, 4, 5]transform([1, 2, 3, '--discard-prev', 4, 5]) => [1, 2, 4, 5]The function must not affect inital array. Control sequences are applied from left to right to initial array elements. Control sequences do not fall into the transformed array. Control sequences in initial array don't occur in a row. If there is no element next to the control sequence to which it can be applied in the initial array, or this element was previously deleted, it does nothing. The function should throw an Error with message 'arr' parameter must be an instance of the Array! if the arr is not an Array.Write your code in src/transform-array.js.Chain makerLet's practice in chaining!Your task is to create the object chainMaker that creates chains. The finished chain is a string and looks like this: '( value1 )~~( value2 )~~( value3 )'.The chainMaker has several methods for creating chains and modifying them:getLength returns the current chain length as a number;addLink(value) adds a link containing a string representation of the value to the chain;removeLink(position) removes a chain link in the specified position;reverseChain reverses the chain;finishChain ends the chain and returns it.addLink, reverseChain and removeLink methods are chainable, while the another ones are not. If addLink is called with no arguments, it adds an empty link ('(  )') to the chain. If removeLink accepts invalid position (e.g. not a number, or a fractional number, or corresponding to a nonexistent link), it must throw an Error with message You can't remove incorrect link!. After calling the finishChain method, the existing chain must be deleted, as if an Error was thrown.For example:chainMaker.addLink(1).addLink(2).addLink(3).finishChain() => '( 1 )~~( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).removeLink(1).addLink(3).finishChain() => '( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).reverseChain().addLink(3).finishChain() => '( 2 )~~( 1 )~~( 3 )'Write your code in src/simple-chain.js.Recursive depth calculatorYour task is to implement the class DepthCalculator with method calculateDepth that takes an array and returns its depth.calculateDepth method must pass the given array recursively. Depth of a flat array is 1. Method must correctly work with arrays that contain no elements or contain empty arrays.For example:const depthCalc = new DepthCalculator();depthCalc.calculateDepth([1, 2, 3, 4, 5]) => 1depthCalc.calculateDepth([1, 2, 3, [4, 5]]) => 2depthCalc.calculateDepth([[[]]]) => 3Write your code in src/recursive-depth.js.Extended repeaterYour task is to implement the function repeater(str, options).This function returns a repeating string based on the given parameters:str is a string to repeat;options is an object of options, that contains properties:repeatTimes sets the number of repetitions of the str;separator is a string separating repetitions of the str;addition is an additional string that will be added to each repetition of the str;additionRepeatTimes sets the number of repetitions of the addition;additionSeparator is a string separating repetitions of the addition.The str and addition parameters are strings by default. In case when type of these parameters is different, they must be converted to a string.separator and additionSeparator parameters are strings.repeatTimes and additionRepeatTimes are integer numbers (in the absence of any of them, the corresponding string is not repeated).The only indispensable parameter is str, any others may be not defined. separator default value is '+'. additionSeparator default value is '|'.For example: repeater('STRING', { repeatTimes: 3, separator: '**', addition: 'PLUS', additionRepeatTimes: 3, additionSeparator: '00' }) => 'STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS'Write your code in src/extended-repeater.js.Vigenere cipherCryptography is awesome! Let's try to organize production of encryption machines. Our machines will use one of the encryption methods that are easy to understand, but also not amenable to simple cryptanalysis - the Vigenere cipher.Our machine will have 2 modifications: direct and reverse (the type of machine is determined at the moment of creation). The direct machine simply encodes and decodes the string that was transmitted to it, and the reverse machine returns an inverted string after encoding and decoding.Your task is to implement the class VigenereCipheringMachine. constructor of this class accepts true (or nothing) to create direct machine and false to create reverse machine.Each instance of VigenereCipheringMachine must have 2 methods: encrypt and decrypt.encrypt method accepts 2 parameters: message (string to encode) and key (string-keyword).decrypt method accepts 2 parameters: encryptedMessage (string to decode) and key (string-keyword).These parameters for both methods are mandatory. If at least one of them has not been given, an Error with message Incorrect arguments! must be thrown. The text returned by these methods must be uppercase. Machines encrypt and decrypt only latin alphabet (all other symbols remain unchanged).You don't need to validate value sent to constructor and to encrypt and decrypt methods (except throwing an Error on absence of argument for these methods).For example:const directMachine = new VigenereCipheringMachine();const reverseMachine = new VigenereCipheringMachine(false);directMachine.encrypt('attack at dawn!', 'alphonse') => 'AEIHQX SX DLLU!'directMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => 'ATTACK AT DAWN!'reverseMachine.encrypt('attack at dawn!', 'alphonse') => '!ULLD XS XQHIEA'reverseMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => '!NWAD TA KCATTA'Write your code in src/vigenere-cipher.js.(ST) Common character countYour task is to implement function that accepts two strings (s1 and s2) and returns number of common characters between them.For example:getCommonCharacterCount('aabcc', 'adcaa') => 3Write your code in src/common-character-count.js.(ST) Delete digitYour task is to implement function that accepts integer number (n) and returns maximal number you can obtain by deleting exactly one digit of the given number.For example:deleteDigit(152) => 52Write your code in src/delete-digit.js.(ST) DNS statYour task is to implement function that accepts an array of domains (domains) and returns the object with the appearances of the DNS.For example:getDNSStats(['code.yandex.ru', 'music.yandex.ru', 'yandex.ru']) => {'.ru': 3, '.ru.yandex': 3, '.ru.yandex.code': 1,'.ru.yandex.music': 1}Write your code in src/dns-stats.js.(ST) Encode lineYour task is to implement function that accepts string (str) and returns its encoded version.For example:encodeLine('aabbbc') => '2a3bc'Write your code in src/encode-line.js.(ST) File namesThere's a list of file, since two files cannot have equal names, the one which comes later will have a suffix (k), where k is the smallest integer such that the found name is not used yet.Your task is to implement function that accepts array of names (names) and returns an array of names that will be given to the files.For example:renameFiles([\""file\"", \""file\"", \""image\"", \""file(1)\"", \""file\""]) => [\""file\"", \""file(1)\"", \""image\"", \""file(1)(1)\"", \""file(2)\""]Write your code in src/file-names.js.(ST) Get email domainYour task is to implement function that accepts email address (email) and returns it's domain.For example:getEmailDomain('prettyandsimple@example.com') => 'example.com'Write your code in src/get-email-domain.js.(ST) Is MAC-48 Address?The MAC-48 address is six groups of two hexadecimal digits (0 to 9 or A to F) separated by hyphens.Your task is to implement function that accepts string (inputString) and returns true if string is valid MAC-48 address.For example:isMAC48Address('00-1B-63-84-45-E6') => trueWrite your code in src/mac-adress.js.(ST) Matrix elements sumGiven matrix, a rectangular matrix of integers, just add up all the values that don't appear below a \""0\"".For example:const matrix = [ [0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]];getMatrixElementsSum(matrix) => 9Write your code in src/matrix-elements-sum.js.(ST) MinesweeperIn the popular Minesweeper game you have a board with some mines and cells that have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.For example:const matrix = [ [true, false, false], [false, true, false], [false, false, false]];minesweeper(matrix) => [ [1, 2, 1], [2, 1, 1], [1, 1, 1]];Write your code in src/mine-sweeper.js.(ST) Sort by heightGiven an array with heights, sort them except if the value is -1.Your task is to implement function that accepts array (arr) and returns it sortedFor example:sortByHeight([-1, 150, 190, 170, -1, -1, 160, 180]) => [-1, 150, 160, 170, -1, -1, 180, 190]Write your code in src/sort-by-height.js.(ST) Sum digitsYour task is to implement function that accepts a number (n) and returns the sum of its digits until we get to a one digit number.For example:For 100, the result should be 1 (1 + 0 + 0 = 1)getSumOfDigits(100) => 1For 91, the result should be 1 (9 + 1 = 10, 1 + 0 = 1)getSumOfDigits(91) => 1Write your code in src/sum-digits.js.© AlreadyBored& tasks:Common character countDelete digitDNS statEncode lineFile namesGet email domainIs MAC-48 Adress?Matrix elements sumMinesweeperSort by heightSum digitsare integrated from Short track 2021 repo& Thanks mikhama for assistance!"
31,Shastel/reverse-int,https://github.com/Shastel/reverse-int/blob/master/README.md,JavaScript,"Reverse IntTaskGiven: number, your task is to implement function that reverse digits of this number.For example:reverse(123); // 321reverse(233); // 332reverse(535); // 535reverse(95034); // 43059Write your code in `src/index.js.All test cases are designed as “error-free”, so don't worry about handling any errors.Prepare and testInstall Node.jsFork this repository: reverse-intClone your newly created repo: https://github.com/<%your_github_username%>/reverse-int/Go to folder reverse-intTo install all dependencies use npm installRun npm test in the command lineYou will see the number of passing and failing tests you 100% of passing tests is equal to 100p in scoreSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (reverse-int)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using are any of the features which are not supported by v12, the score won't be submitted.Each of your test case is limited to 30 sec."
32,twilio-labs/open-pixel-art,https://github.com/twilio-labs/open-pixel-art/blob/master/README.md,JavaScript,"Open Pixel Art by Twilio   This is an art project created with the intention to teach you how to create a pull request.Visit open-pixel-art.com to see the full artwork!Anyone who wishes to learn how to create a pull request for a project on GitHub can use this project to contribute a pixel to the canvas. You will only be able to ever create one pixel but you can pick whatever color you prefer as long as it is a valid HEX code. For example: #F22F46 the brand color of TwilioIf you are new to open-source, GitHub or git in general, fear not, we created a tutorial in TwilioQuest for you. It will teach you step by step on how you can get started and will guide you on your quest of creating your pull request.🕹 Download TwilioQuestThe entire project is automated and is largely maintained by a set of bots that will verify any pixel contributions. However, if you'd like to know more about the project or submit other contributions to the project that are not a pixel, feel free to create a GitHub issue inside the Open Pixel Art project.ContributingIn order to contribute a pixel to the canvas, you'll have to create a pull request to the Open Pixel Art project on GitHub.If you are already familiar with git and how to create a pull request on GitHub, you can go ahead and check out the contributing guide.We understand that contributing to open-source can be intimidating and as a result we created a mission in our interactive coding game TwilioQuest that will walk you step by step through creating a pull request for this project and help you embark on your new quest into open-source!Download TwilioQuestCheck out the Contribution Guides:EnglishEspañolDeutschBrazilian PortugueseChinese MandarinDutchCode of ConductWe want to make sure that this project is as welcoming to people as possible. By interacting with the project in any shape or form you are agreeing to the project's Code of Conduct:EnglishEspañolDeutschBrazilian PortugueseIf you feel like another individual has violated the code of conduct, please raise a complaint to open-source@twilio.com.ContributorsThanks goes to these wonderful people (emoji key):      Dominik Kundel💻 🤔    Amy Kapernick💻    Kevin Whinnery💻    Ricky Robinett💻    André Felipe Scalco💻    Teddy Gustiaux💻    Aidan Smith💻        Scott O'Malley💻    Todd Moy💻    Samuel Durkin💻    ChatterboxCoder💻    Simey de Klerk💻    Tilde Ann Thurium👀    Daniel Peukert📖        izontm📖    Carly Robison📖  This project follows the all-contributors specification. Contributions of any kind welcome!Technology Thank YouThis project is powered by various open-source projects. Among others:Eleventy for the static site generationDanger for the automated code reviewMergify for automated PR mergingAll Contributors Bot to recognize the contributions of everyoneJest for Unit TestingNES.css for the CSS stylingWelcome Bot to welcome new contributorsLicenseMIT"
33,Shastel/human-readable-number,https://github.com/Shastel/human-readable-number/blob/master/README.md,JavaScript,"Human Readable NumberTaskYour task is to implement function toReadable that converts given number, to readable string.For example:toReadable(1); // Will return 'one'toReadable(997); //will return 'nine hundred ninety seven'You can find even more examples in test.jsWrite your code in `src/index.js.All test cases are designed as “error-free”, so don't worry about handling any errors.Prepare and testInstall Node.jsFork this repository: human-readable-numberClone your newly created repo: https://github.com/<%your_github_username%>/human-readable-number/Go to folder human-readable-numberTo install all dependencies use npm installRun npm test in the command lineYou will see the number of passing and failing tests you 100% of passing tests is equal to 100p in scoreSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (human-readable-number)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using are any of the features which are not supported by v12, the score won't be submitted.Each of your test case is limited to 30 sec."
34,memochou1993/gpt-ai-assistant,https://github.com/memochou1993/gpt-ai-assistant/blob/main/README.md,JavaScript,"GPT AI Assistant GPT AI Assistant is an application that is implemented using the OpenAI API and LINE Messaging API. Through the installation process, you can start chatting with your own AI assistant using the LINE mobile app.News2023-05-03: The 4.6 version now support gpt-4 OpenAI model. 🔥2023-03-05: The 4.1 version now support the audio message of LINE and  whisper-1 OpenAI model. 🔥2023-03-02: The 4.0 version now support gpt-3.5-turbo OpenAI model. 🔥DemoDocumentations中文EnglishCreditsjayer95 - Debugging and testingkkdai - Idea of sum commandDayu0815 - Idea of search commandmics8128 - Implementing new featuresAll other contributorsContactIf there is any question, please contact me at memochou1993@gmail.com. Thank you.ChangelogDetailed changes for each release are documented in the release notes.LicenseMIT"
35,sahat/hackathon-starter,https://github.com/sahat/hackathon-starter/blob/master/README.md,JavaScript,"Hackathon StarterLive Demo: LinkJump to What's new?A boilerplate for Node.js web applications.If you have attended any hackathons in the past, then you know how much time it takes to get a project started: decide on what to build, pick a programming language, pick a web framework, pick a CSS framework. A while later, you might have an initial project up on GitHub, and only then can other team members start contributing. Or how about doing something as simple as Sign in with Facebook authentication? You can spend hours on it if you are not familiar with how OAuth 2.0 works.When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases of hackathon web apps, without being too specific. In the worst case, you can use this as a learning guide for your projects, if for example you are only interested in Sign in with Google authentication and nothing else.Testimonials“Nice! That README alone is already gold!”— Adrian Le Bas“Awesome. Simply awesome.”— Steven Rueter“I'm using it for a year now and many projects, it's an awesome boilerplate and the project is well maintained!”— Kevin Granger“Small world with Sahat's project. We were using his hackathon starter for our hackathon this past weekend and got some prizes. Really handy repo!”— Interview candidate for one of the companies I used to work with.Modern ThemeFlatly Bootstrap ThemeAPI ExamplesTable of ContentsFeaturesPrerequisitesGetting StartedObtaining API KeysProject StructureList of PackagesUseful Tools and ResourcesRecommended Design ResourcesRecommended Node.js LibrariesRecommended Client-side LibrariesPro TipsFAQHow It WorksCheatsheetsES6JavaScript DateMongoose CheatsheetDeploymentDockerProductionChangelogContributingLicenseFeaturesLoginLocal Authentication using Email and PasswordOAuth 2.0 Authentication: Sign in with Google, Facebook, Twitter, LinkedIn, Twitch, Github, SnapchatUser Profile and Account ManagementGravatarProfile DetailsChange PasswordForgot PasswordReset PasswordVerify EmailLink multiple OAuth strategies to one accountDelete AccountContact Form (powered by SMTP via Sendgrid, Mailgun, AWS SES, etc.)File uploadAPI ExamplesFacebook, Foursquare, Tumblr, Pinterest, Github, Steam, Quickbooks, Paypal, Stripe, Twilio (text messaging), Lob (USPS Mail), HERE Maps, Google Maps, Google Drive, Google Sheets, Alpha Vantage (stocks and finance info) with ChartJS, Last.fm, New York Times, Web Scraping,Flash notificationsreCaPTCHA and rate limit protectionCSRF protectionMVC Project StructureNode.js clusters supportHTTPS Proxy support (via ngrok, Cloudflare, etc.)Sass stylesheets (auto-compiled via middleware)Bootstrap 5\""Go to production\"" checklistPrerequisitesMongoDB (local install OR hosted)Local Install: MongoDBHosted: No need to install, see the MongoDB Atlas sectionNode.js 18+Command Line Tools Mac OS X: Xcode (or OS X 10.9+: xcode-select --install) Windows: Visual Studio Code + Windows Subsystem for Linux - Ubuntu OR Visual Studio Ubuntu /  Linux Mint: sudo apt-get install build-essential Fedora: sudo dnf groupinstall \""Development Tools\"" OpenSUSE: sudo zypper install --type pattern devel_basisNote: If you are new to Node or Express, you may find Node.js & Express From Scratch series helpful for learning the basics of Node and Express. Alternatively, here is another great tutorial for complete beginners - Getting Started With Node.js, Express, MongoDB.Getting StartedStep 1: The easiest way to get started is to clone the repository:# Get the latest snapshotgit clone https://github.com/sahat/hackathon-starter.git myproject# Change directorycd myproject# Install NPM dependenciesnpm install# Then simply start your appnode app.jsNote: I highly recommend installing Nodemon. It watches for any changes in your  node.js app and automatically restarts the server. Once installed, instead of node app.js use nodemon app.js. It willsave you a lot of time in the long run, because you won't need to manually restart the server each time you make a small change in code. To install, run sudo npm install -g nodemon.Step 2: Obtain API Keys and change configs if neededAfter completing step 1 and locally installing MongoDB, you should be able to access the application through a web browser and use local user accounts. However, certain functions like API integrations may not function correctly until you obtain specific keys from service providers. The keys provided in the project serve as placeholders, and you can retain them for features you are not currently utilizing. To incorporate the acquired keys into the application, you have two options:Set environment variables in your console session: Alternatively, you can set the keys as environment variables directly through the command prompt. For instance, in bash, you can use the export command like this: export FACEBOOK_SECRET=xxxxxx. This method is considered a better practice as it reduces the risk of accidentally including your secrets in a code repository.Replace the keys in the .env.example file: Open the .env.example file and update the placeholder keys with the newly acquired ones. This method has the risk of accidental checking-in of your secrets to code repos.What to get and configure:SMTPFor user workflows for reset password and verify emailFor contact form processingreCAPTCHAFor contact form submissionOAuth for social logins (Sign in with / Login with)Depending on your application need, obtain keys from Google, Facebook, Twitter, LinkedIn, Twitch, GitHub, Snapchat.  You don't have to obtain valid keys for any provider that you don't need. Just remove the buttons and links in the login and account pug views before your demo.API keys for service providers in the API Examples if you are planning to use them.MongoDB AtlasIf you are using MongoDB Atlas instead of a local db, set the MONGODB_URI to your db URI (including your db user/password).Email addressSet SITE_CONTACT_EMAIL as your incoming email address for messages sent to you thru the contact form.Set TRANSACTION_EMAIL as the \""From\"" address for emails sent to users thru the lost password or email verification emails to users.  You may set this to the same address as SITE_CONTACT_EMAIL.ngrok and HTTPSIf you want to use some API that needs HTTPS to work (for example Pinterest or Facebook),you will need to download ngrok. Start ngrok, set your BASE_URL to the forwarding address  (i.e  https://3ccb-1234-abcd.ngrok-free.app ), and use the forwarding address to access your application.  If you are using a proxy like ngrok, you may get a CSRF mismatch error if you try to access the app at http://localhost:8080 instead of the https://...ngrok-free.app address.After installing or downloading the standalone ngrok client you can start ngrok to intercept the data exchanged on port 8080 with ./ngrok http 8080 in Linux or ngrok http 8080 in Windows.Step 3: Develop your application and customize the experienceCheck out How It WorksStep 4: Optional - deploy to productionSee:Deploymentprod-checklist.mdObtaining API KeysYou will need to obtain appropriate credentials (Client ID, Client Secret, API Key, or Username & Password) for API and service provides which you need.  See Step 2 in the Getting started section for more info.SMTPObtain SMTP credentials from a provider for transactional emails.  Set the SMTP_USER, SMTP_PASSWORD, and SMTP_HOST environment variables accordingly.  When picking the smtp host, keep in mind that the app is configured to use secure SMTP transmissions over port 465 out of the box.  You have the flexibility to select any provider that suits your needs or take advantage of one of the following providers, each offering a free tier for your convenience.ProviderFree TierWebsiteSendGrid100 emails/day for freehttps://sendgrid.comSMTP2Go1000 emails/month for freehttps://www.smtp2go.comBrevo300 emails/day for freehttps://www.brevo.comVisit Google reCAPTCHA Admin ConsoleEnter your application's name as the LabelChoose reCAPTCHA v2, \""I'm not a robot\"" CheckboxEnter localhost as the domain.  You can have other domains added in addition to localhostAccept the terms and submit the formCopy the Site Key and the Secret key into .env.  These keys will be accessible under Settings, reCAPTCHA keys drop down if you need them again laterVisit Google Cloud ConsoleClick on the Create Project buttonEnter Project Name, then click on Create buttonThen click on APIs & auth in the sidebar and select API tabClick on Google+ API under Social APIs, then click Enable APIClick on Google Drive API under G Suite, then click Enable APIClick on Google Sheets API under G Suite, then click Enable APINext, under APIs & auth in the sidebar click on Credentials tabClick on Create new Client ID buttonSelect Web Application and click on Configure Consent ScreenFill out the required fields then click on SaveIn the Create Client ID modal dialog:Application Type: Web ApplicationAuthorized Javascript origins: set to your BASE_URL value (i.e. http://localhost:8080, etc)Authorized redirect URI: set to your BASE_URL value followed by /auth/google/callback (i.e. http://localhost:8080/auth/google/callback )Click on Create Client ID buttonCopy and paste Client ID and Client secret keys into .envVisit Snap Kit Developer PortalClick on the + button to create an appEnter a name for your appEnable the scopes that you will want to use in your appClick on the Continue buttonFind the Kits section and make sure that Login Kit is enabledFind the Redirect URLs section, click the + Add button, and enter your BASE_URL value followed by /auth/snapchat/callback (i.e. http://localhost:8080/auth/snapchat/callback )Find the Development Environment section. Click the Generate button next to the Confidential OAuth2 Client heading within it.Copy and paste the generated Private Key and OAuth2 Client ID keys into .envNote: OAuth2 Client ID is SNAPCHAT_ID, Private Key is SNAPCHAT_SECRET in .envTo prepare the app for submission, fill out the rest of the required fields: Category, Description, Privacy Policy Url, and App IconVisit Facebook DevelopersClick My Apps, then select *Add a New App from the dropdown menuEnter a new name for your appClick on the Create App ID buttonFind the Facebook Login Product and click on Facebook LoginInstead of going through their Quickstart, click on Settings for your app in the top left cornerCopy and paste App ID and App Secret keys into .envNote: App ID is FACEBOOK_ID, App Secret is FACEBOOK_SECRET in .envEnter localhost under App DomainsChoose a Category that best describes your appClick on + Add Platform and select WebsiteEnter your BASE_URL value (i.e. http://localhost:8080, etc) under Site URLClick on the Settings tab in the left nav under Facebook LoginEnter your BASE_URL value followed by /auth/facebook/callback (i.e. http://localhost:8080/auth/facebook/callback ) under Valid OAuth redirect URIsNote: After a successful sign-in with Facebook, a user will be redirected back to the home page with appended hash #_=_ in the URL. It is not a bug. See this Stack Overflow discussion for ways to handle it.Go to Account SettingsSelect Developer settings from the sidebarThen click on OAuth Apps and then on Register new applicationEnter Application Name and Homepage URL. Enter your BASE_URL value (i.e. http://localhost:8080, etc) as the homepage URL.For Authorization Callback URL: your BASE_URL value followed by /auth/github/callback (i.e. http://localhost:8080/auth/github/callback )Click Register applicationNow copy and paste Client ID and Client Secret keys into .env fileSign in at https://apps.twitter.comClick Create a new applicationEnter your application name, website and description. Set the website as your BASE_URL value (i.e. http://localhost:8080, etc).For Callback URL: your BASE_URL value followed by /auth/twitter/callback (i.e. http://localhost:8080/auth/twitter/callback )Go to Settings tabUnder Application Type select Read and Write accessCheck the box Allow this application to be used to Sign in with TwitterClick Update this Twitter's applications settingsCopy and paste Consumer Key and Consumer Secret keys into .env fileSign in at LinkedIn Developer NetworkFrom the account name dropdown menu select API KeysIt may ask you to sign in once againClick + Add New Application buttonFill out all the required fieldsOAuth 2.0 Redirect URLs: your BASE_URL value followed by /auth/linkedin/callback (i.e. http://localhost:8080/auth/linkedin/callback )JavaScript API Domains: your BASE_URL value (i.e. http://localhost:8080, etc).For Default Application Permissions make sure at least the following is checked:r_basicprofileFinish by clicking Add Application buttonCopy and paste API Key and Secret Key keys into .env fileAPI Key is your clientIDSecret Key is your clientSecretSign up or log into your dashboardClick on your profile and click on Account SettingsThen click on API KeysCopy the Secret Key. and add this into .env fileVisit PayPal DeveloperLog in to your PayPal accountClick Applications > Create App in the navigation barEnter Application Name, then click Create appCopy and paste Client ID and Secret keys into .env fileApp ID is client_id, App Secret is client_secretChange host to api.paypal.com if you want to test against production and use the live credentialsGo to Foursquare for DevelopersClick on My Apps in the top menuClick the Create A New App buttonEnter App Name, Welcome page url,For Redirect URI: your BASE_URL value followed by /auth/foursquare/callback (i.e. http://localhost:8080/auth/foursquare/callback )Click Save ChangesCopy and paste Client ID and Client Secret keys into .env fileGo to http://www.tumblr.com/oauth/appsOnce signed in, click +Register applicationFill in all the detailsFor Default Callback URL: your BASE_URL value followed by /auth/tumblr/callback (i.e. http://localhost:8080/auth/tumblr/callback )Click ✔RegisterCopy and paste OAuth consumer key and OAuth consumer secret keys into .env fileGo to http://steamcommunity.com/dev/apikeySign in with your existing Steam accountEnter your Domain Name based on your BASE_URL, then and click RegisterCopy and paste Key into .env fileVisit the Twitch developer dashboardIf prompted, authorize the dashboard to access your twitch accountIn the Console, click on Register Your ApplicationEnter the name of your applicationUse OAuth Redirect URLs enter your BASE_URL value followed by /auth/twitch/callback (i.e. http://localhost:8080/auth/twitch/callback )Set Category to Website Integration and press the Create buttonAfter the application has been created, click on the Manage buttonCopy and paste Client ID into .envIf there is no Client Secret displayed, click on the New Secret button and then copy and paste the Client secret into .envGo to https://developer.here.comSign up and create a Freemium projectCreate JAVASCRIPT/REST credentials. Copy and paste the APP_ID and APP into .env file.Note that these credentials are available on the client-side, and you need to create a domain whitelist for your app credentials when you are publicly launching the app.Go to https://www.twilio.com/try-twilioSign up for an account.Once logged into the dashboard, expand the link 'show api credentials'Copy your Account Sid and Auth TokenGo to https://developer.intuit.com/app/developer/qbo/docs/get-startedUse the Sign Up option in the upper right corner of the screen (navbar) to get a free developer account and a sandbox company.Create a new app by going to your Dashboard using the My Apps option in the top nav bar or by going to https://developer.intuit.com/app/developer/myappsIn your App, under Development, Keys & OAuth (right nav), find the Client ID and Client Secret for your .env fileProject StructureNameDescriptionconfig/passport.jsPassport Local and OAuth strategies, plus login middleware.controllers/api.jsController for /api route and all api examples.controllers/contact.jsController for contact form.controllers/home.jsController for home page (index).controllers/user.jsController for user account management.models/User.jsMongoose schema and model for User.public/Static assets (fonts, css, js, img).public/js/application.jsSpecify client-side JavaScript dependencies.public/js/app.jsPlace your client-side JavaScript here.public/css/main.scssMain stylesheet for your app.views/account/Templates for login, password reset, signup, profile.views/api/Templates for API Examples.views/partials/flash.pugError, info and success flash notifications.views/partials/header.pugNavbar partial template.views/partials/footer.pugFooter partial template.views/layout.pugBase template.views/home.pugHome page template..dockerignoreFolder and files ignored by docker usage..env.exampleYour API keys, tokens, passwords and database URI..eslintrcRules for eslint linter..gitignoreFolder and files ignored by git.app.jsThe main application file.docker-compose.ymlDocker compose configuration file.DockerfileDocker configuration file.package.jsonNPM dependencies.package-lock.jsonContains exact versions of NPM dependencies in package.json.Note: There is no preference for how you name or structure your views.You could place all your templates in a top-level views directory withouthaving a nested folder structure if that makes things easier for you.Just don't forget to update extends ../layout  and correspondingres.render() paths in controllers.List of PackagesPackageDescription@fortawesome/fontawesome-freeSymbol and Icon library.@googleapis/driveGoogle Drive API integration library.@googleapis/sheetsGoogle Sheets API integration library.@ladjs/bootstrap-socialSocial buttons library.@lob/lob-typescript-sdkLob (USPS mailing / physical mailing service) library.@node-rs/bcryptLibrary for hashing and salting user passwords.@octokit/restGitHub API library.@passport-js/passport-twitterTwitter login support (OAuth 2).@popperjs/coreFrontend js library for poppers and tooltips.axiosHTTP client.body-parserNode.js body parsing middleware.bootstrapCSS Framework.chaiBDD/TDD assertion library.cheerioScrape web pages using jQuery-style syntax.compressionNode.js compression middleware.connect-mongoMongoDB session store for Express.dotenvLoads environment variables from .env file.errorhandlerDevelopment-only error handler middleware.eslintLinter JavaScript.eslint-config-airbnb-baseConfiguration eslint by airbnb.eslint-plugin-chai-friendlyMakes eslint friendly towards Chai.js 'expect' and 'should' statements.eslint-plugin-importESLint plugin with rules that help validate proper imports.expressNode.js web framework.express-flashProvides flash messages for Express.express-rate-limitRate limiting middleware for abuse protection.express-sessionSimple session middleware for Express.huskyGit hook manager to automate tasks with git.jqueryFront-end JS library to interact with HTML elements.lastfmLast.fm API library.lint-stageUtility to lint files staged by git.lobLob API library.lodashA utility library for working with arrays, numbers, objects, strings.luscaCSRF middleware.mailcheckerVerifies that an email address is valid and not a disposable address.mochaTest framework.momentParse, validate, compute dates and times.mongodbMemoryServerMongoDB in memory (for running tests without a running db).mongooseMongoDB ODM.morganHTTP request logger middleware for node.js.multerNode.js middleware for handling multipart/form-data.nodemailerNode.js library for sending emails.nycCoverage test.passportSimple and elegant authentication library for node.js.passport-facebookSign-in with Facebook plugin.passport-github2Sign-in with GitHub plugin.passport-google-oauthSign-in with Google plugin.passport-linkedin-oauth2Sign-in with LinkedIn plugin.passport-localSign-in with Username and Password plugin.passport-oauthAllows you to set up your own OAuth 1.0a and OAuth 2.0 strategies.passport-oauth2-refreshA library to refresh OAuth 2.0 access tokens using refresh tokens.passport-snapchatSign-in with Snapchat plugin.passport-steam-openidOpenID 2.0 Steam plugin.patch-packageFix broken node modules ahead of fixes by maintainers.paypal-rest-sdkPayPal APIs library.pugTemplate engine for Express.sassSass compiler to generate CSS with superpowerssinonTest spies, stubs and mocks for JavaScript.stripeOffical Stripe API library.supertestHTTP assertion library.twilioTwilio API library.twitch-passportSign-in with Twitch plugin.validatorA library of string validators and sanitizers.Useful Tools and ResourcesJavaScripting - The Database of JavaScript LibrariesHTML to Pug converter - HTML to PUG is a free online converter helping you to convert HTML files to pug syntax in real-time.JavascriptOO - A directory of JavaScript libraries with examples, CDN links, statistics, and videos.Favicon Generator - Generate favicons for PC, Android, iOS, Windows 8.Recommended Design ResourcesCode Guide - Standards for developing flexible, durable, and sustainable HTML and CSS.Bootsnipp - Code snippets for Bootstrap.Bootstrap Zero - Free Bootstrap templates themes.Google Bootstrap - Google-styled theme for Bootstrap.Font Awesome Icons - It's already part of the Hackathon Starter, so use this page as a reference.Colors - A nicer color palette for the web.Creative Button Styles - awesome button styles.Creative Link Effects - Beautiful link effects in CSS.Medium Scroll Effect - Fade in/out header background image as you scroll.GeoPattern - SVG background pattern generator.Trianglify - SVG low-poly background pattern generator.Recommended Node.js LibrariesNodemon - Automatically restart Node.js server on code changes.geoip-lite - Geolocation coordinates from IP address.Filesize.js - Pretty file sizes, e.g. filesize(265318); // \""265.32 kB\"".Numeral.js - Library for formatting and manipulating numbers.sharp - Node.js module for resizing JPEG, PNG, WebP and TIFF images.Recommended Client-side LibrariesFramework7 - Full Featured HTML Framework For Building iOS7 Apps.InstantClick - Makes your pages load instantly by pre-loading them on mouse hover.NProgress.js - Slim progress bars like on YouTube and Medium.Hover - Awesome CSS3 animations on mouse hover.Magnific Popup - Responsive jQuery Lightbox Plugin.Offline.js - Detect when user's internet connection goes offline.Alertify.js - Sweet looking alerts and browser dialogs.selectize.js - Styleable select elements and input tags.drop.js -  Powerful Javascript and CSS library for creating dropdowns and other floating displays.scrollReveal.js - Declarative on-scroll reveal animations.Pro TipsNeed to find a specific object inside an Array? Use _.find function from Lodash. For example, this is how you would retrieve a Twitter token from database: var token = _.find(req.user.tokens, { kind: 'twitter' });, where 1st parameter is an array, and a 2nd parameter is an object to search for.FAQWhy do I get 403 Error: Forbidden when submitting a form?You need to add the following hidden input element to your form. This has been added in the pull request #40 as part of the CSRF protection.input(type='hidden', name='_csrf', value=_csrf)Note: It is now possible to whitelist certain URLs. In other words, you can specify a list of routes that should bypass the CSRF verification check.Note 2: To whitelist dynamic URLs use regular expression tests inside the CSRF middleware to see if req.originalUrl matches your desired pattern.I am getting MongoDB Connection Error, how do I fix it?That's a custom error message defined in app.js to indicate that there was a problem connecting to MongoDB:mongoose.connection.on('error', (err) => {  console.error(err);  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('✗'));  process.exit();});You need to have a MongoDB server running before launching app.js. You can download MongoDB here, or install it via a package manager.Windows users, read Install MongoDB on Windows.Tip: If you are always connected to the internet, you could just use MongoDB Atlas instead of downloading and installing MongoDB locally. You will only need to update database credentials in .env file.I get an error when I deploy my app, why?Chances are you haven't changed the Database URI in .env. If MONGODB is set to localhost, it will only work on your machine as long as MongoDB is running. When you deploy to Render, OpenShift, or some other provider, you will not have MongoDB running on localhost. You need to create an account with MongoDB Atlas, then create a free tier database.See Deployment for more information on how to set up an account and a new database step-by-step with MongoDB Atlas.Why do you have all routes defined in app.js?For the sake of simplicity. While there might be a better approach, such as passing app context to each controller as outlined in this blog, I find such a style to be confusing for beginners. It took me a long time to grasp the concept of exports and module.exports, let alone having a global app reference in other files. Tha to me is backward thinking.The app.js is the \""heart of the app\"", it should be the one referencing models, routes, controllers, etc.When working solo on small projects, I prefer to have everything inside app.js as is the case with this REST API server.How It Works (mini guides)This section is intended for giving you a detailed explanation of how a particular functionality works. Maybe you are just curious about how it works, or perhaps you are lost and confused while reading the code, I hope it provides some guidance to you.Custom HTML and CSS Design 101HTML5 UP has many beautiful templates that you can download for free.When you download the ZIP file, it will come with index.html, images, CSS and js folders. So, how do you integrate it with Hackathon Starter? Hackathon Starter uses the Bootstrap CSS framework, but these templates do not.Trying to use both CSS files at the same time will likely result in undesired effects.Note: Using the custom templates approach, you should understand that you cannot reuse any of the views I have created: layout, the home page, API browser, login, signup, account management, contact. Those views were built using Bootstrap grid and styles. You will have to manually update the grid using a different syntax provided in the template. Having said that, you can mix and match if you want to do so: Use Bootstrap for the main app interface, and a custom template for a landing page.Let's start from the beginning. For this example I will use Escape Velocity template:Note: For the sake of simplicity I will only consider index.html, and skip left-sidebar.html,no-sidebar.html, right-sidebar.html.Move all JavaScript files from html5up-escape-velocity/js to public/js. Then move all CSS files from html5up-escape-velocity/css to public/css. And finally, move all images from html5up-escape-velocity/images to public/images. You could move it to the existing img folder, but that would require manually changing every img reference. Grab the contents of index.html and paste it into HTML To Pug.Note: Do not forget to update all the CSS and JS paths accordingly.Create a new file escape-velocity.pug and paste the Pug markup in views folder.Whenever you see the code res.render('account/login') - that means it will search for views/account/login.pug file.Let's see how it looks. Create a new controller escapeVelocity inside controllers/home.js:exports.escapeVelocity = (req, res) => {  res.render('escape-velocity', {    title: 'Landing Page'  });};And then create a route in app.js. I placed it right after the index controller:app.get('/escape-velocity', homeController.escapeVelocity);Restart the server (if you are not using nodemon); then you should see the new template at http://localhost:8080/escape-velocityI will stop right here, but if you would like to use this template as more than just a single page, take a look at how these Pug templates work: layout.pug - base template, index.pug - home page, partials/header.pug - Bootstrap navbar, partials/footer.pug - sticky footer. You will have to manually break it apart into smaller pieces. Figure out which part of the template you want to keep the same on all pages - that's your new layout.pug.Then, each page that changes, be it index.pug, about.pug, contact.pugwill be embedded in your new layout.pug via block content. Use existing templates as a reference.This is a rather lengthy process, and templates you get from elsewhere might have yet another grid system. That's why I chose Bootstrap for the Hackathon Starter.Many people are already familiar with Bootstrap, plus it's easy to get started with it if you have never used Bootstrap.You can also buy many beautifully designed Bootstrap themes at Themeforest, and use them as a drop-in replacement for Hackathon Starter. However, if you would like to go with a completely custom HTML/CSS design, this should help you to get started!How do flash messages work in this project?Flash messages allow you to display a message at the end of the request and access it on the next request and only the next request. For instance, on a failed login attempt, you would display an alert with some error message, but as soon as you refresh that page or visit a different page and come back to the login page, that error message will be gone. It is only displayed once.This project uses express-flash module for flash messages. And that module is built on top of connect-flash, which is what I used in this project initially. With express-flash you don't have to explicitly send a flash message to every view inside res.render().All flash messages are available in your views via messages object by default, thanks to express-flash.Flash messages have a two-step process. You use req.flash('errors', { msg: 'Error messages goes here' }to create a flash message in your controllers, and then display them in your views:if messages.errors  .alert.alert-danger.fade.in    for error in messages.errors      div= error.msgIn the first step, 'errors' is the name of a flash message, which should match the name of the property on messages object in your views. You place alert messages inside if message.errors because you don't want to show them flash messages are present.The reason why you pass an error like { msg: 'Error message goes here' } instead of just a string - 'Error message goes here', is for the sake of consistency.To clarify that, express-validator module which is used for validating and sanitizing user's input, returns all errors as an array of objects, where each object has a msg property with a message why an error has occurred. Here is a more general example of what express-validator returns when there are errors present:[  { param: \""name\"", msg: \""Name is required\"", value: \""<received input>\"" },  { param: \""email\"", msg: \""A valid email is required\"", value: \""<received input>\"" }]To keep consistent with that style, you should pass all flash messages as { msg: 'My flash message' } instead of a string. Otherwise, you will see an alert box without an error message. That is because in partials/flash.pug template it will try to output error.msg (i.e. \""My flash message\"".msg), in other words, it will try to call a msg method on a String object, which will return undefined. Everything I just mentioned about errors, also applies to \""info\"" and \""success\"" flash messages, and you could even create a new one yourself, such as:Data Usage Controller (Example)req.flash('warning', { msg: 'You have exceeded 90% of your data usage' });User Account Page (Example)if messages.warning  .alert.alert-warning.fade.in    for warning in messages.warning      div= warning.msgpartials/flash.pug is a partial template that contains how flash messages are formatted. Previously, flash messages were scattered throughout each view that used flash messages (contact, login, signup, profile), but now, thankfully it uses a DRY approach.The flash messages partial template is included in the layout.pug, along with footer and navigation.body    include partials/header    .container      include partials/flash      block content    include partials/footerIf you have any further questions about flash messages, please feel free to open an issue, and I will update this mini-guide accordingly, or send a pull request if you would like to include something that I missed.How do I create a new page?A more correct way to say this would be \""How do I create a new route?\"" The main file app.js contains all the routes.Each route has a callback function associated with it. Sometimes you will see three or more arguments for a route. In a case like that, the first argument is still a URL string, while middle arguments are what's called middleware. Think of middleware as a door. If this door prevents you from continuing forward, you won't get to your callback function. One such example is a route that requires authentication.app.get('/account', passportConfig.isAuthenticated, userController.getAccount);It always goes from left to right. A user visits /account page. Then isAuthenticated middleware checks if you are authenticated:exports.isAuthenticated = (req, res, next) => {  if (req.isAuthenticated()) {    return next();  }  res.redirect('/login');};If you are authenticated, you let this visitor pass through your \""door\"" by calling return next();. It then proceeds to thenext middleware until it reaches the last argument, which is a callback function that typically renders a template on GET requests or redirects on POST requests. In this case, if you are authenticated, you will be redirected to the Account Management page; otherwise, you will be redirected to the Login page.exports.getAccount = (req, res) => {  res.render('account/profile', {    title: 'Account Management'  });};Express.js has app.get, app.post, app.put, app.delete, but for the most part, you will only use the first two HTTP verbs, unless you are building a RESTful API.If you just want to display a page, then use GET, if you are submitting a form, sending a file then use POST.Here is a typical workflow for adding new routes to your application. Let's say we are building a page that lists all books from the database.Step 1. Start by defining a route.app.get('/books', bookController.getBooks);Note: As of Express 4.x you can define your routes like so:app.route('/books')  .get(bookController.getBooks)  .post(bookController.createBooks)  .put(bookController.updateBooks)  .delete(bookController.deleteBooks)And here is how a route would look if it required an authentication and an authorization middleware:app.route('/api/twitter')  .all(passportConfig.isAuthenticated)  .all(passportConfig.isAuthorized)  .get(apiController.getTwitter)  .post(apiController.postTwitter)Use whichever style makes sense to you. Either one is acceptable. I think that chaining HTTP verbs on app.route is a very clean and elegant approach, but on the other hand, I can no longer see all my routes at a glance when you have one route per line.Step 2. Create a new schema and a model Book.js inside the models directory.const mongoose = require('mongoose');const bookSchema = new mongoose.Schema({  name: String});const Book = mongoose.model('Book', bookSchema);module.exports = Book;Step 3. Create a new controller file called book.js inside the controllers directory./** * GET /books * List all books. */const Book = require('../models/Book.js');exports.getBooks = (req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });};Step 4. Import that controller in app.js.const bookController = require('./controllers/book');Step 5. Create books.pug template.extends layoutblock content  .page-header    h3 All Books  ul    for book in books      li= book.nameThat's it! I will say that you could have combined Step 1, 2, 3 as following:app.get('/books',(req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });});Sure, it's simpler, but as soon as you pass 1000 lines of code in app.js it becomes a little challenging to navigate the file.I mean, the whole point of this boilerplate project was to separate concerns, so you could work with your teammates without running into MERGE CONFLICTS. Imagine you have four developers working on a single app.js, I promise you it won't be fun resolving merge conflicts all the time.If you are the only developer, then it's okay. But as I said, once it gets up to a certain LoC size, it becomes difficult to maintain everything in a single file.That's all there is to it. Express.js is super simple to use.Most of the time you will be dealing with other APIs to do the real work:Mongoose for querying database, socket.io for sending and receiving messages over WebSockets, sending emails via Nodemailer, form validation using validator.js library, parsing websites using Cheerio, etc.How do I use Socket.io with Hackathon Starter?Dan Stroot submitted an excellent pull request that adds a real-time dashboard with socket.io.And as  much as I'd like to add it to the project, I think it violates one of the main principles of the Hackathon Starter:When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases ofhackathon web apps, without being too specific.When I need to use socket.io, I really need it, but most of the time - I don't. But more importantly, WebSockets support is still experimental on most hosting providers.Due to past provider issues with WebSockets, I have not include socket.io as part of the Hackathon Starter. For now...If you need to use socket.io in your app, please continue reading.First, you need to install socket.io:npm install socket.ioReplace const app = express(); with the following code:const app = express();const server = require('http').Server(app);const io = require('socket.io')(server);I like to have the following code organization in app.js (from top to bottom): module dependencies,import controllers, import configs, connect to database, express configuration, routes,start the server, socket.io stuff. That way I always know where to look for things.Add the following code at the end of app.js:io.on('connection', (socket) => {  socket.emit('greet', { hello: 'Hey there browser!' });  socket.on('respond', (data) => {    console.log(data);  });  socket.on('disconnect', () => {    console.log('Socket disconnected');  });});One last thing left to change:app.listen(app.get('port'), () => {toserver.listen(app.get('port'), () => {At this point, we are done with the back-end.You now have a choice - to include your JavaScript code in Pug templates or have all your client-side JavaScript in a separate file - in app.js. I admit, when I first started with Node.js and JavaScript in general, I placed all JavaScript code inside templates because I have access to template variables passed in from Express right then and there. It's the easiest thing you can do, but also the least efficient and harder to maintain. Since then I almost never include inline JavaScript inside templates anymore.But it's also understandable if you want to take the easier road. Most of the time you don't even care about performance during hackathons, you just want to \""get shit done\"" before the time runs out. Well, either way, use whichever approach makes more sense to you. At the end of the day, it's what you build that matters, not how you build it.If you want to stick all your JavaScript inside templates, then in layout.pug - your main template file, add this to head block.script(src='/socket.io/socket.io.js')script.    let socket = io.connect(window.location.href);    socket.on('greet', function (data) {      console.log(data);      socket.emit('respond', { message: 'Hey there, server!' });    });Note: Notice the path of the socket.io.js, you don't actually have to have socket.io.js file anywhere in your project; it will be generated automatically at runtime.If you want to have JavaScript code separate from templates, move that inline script code into app.js, inside the $(document).ready() function:$(document).ready(function() {  // Place JavaScript code here...  let socket = io.connect(window.location.href);  socket.on('greet', function (data) {    console.log(data);    socket.emit('respond', { message: 'Hey there, server!' });  });});And we are done!Cheatsheets ES6 CheatsheetDeclarationsDeclares a read-only named constant.const name = 'yourName';Declares a block scope local variable.let index = 0;Template StringsUsing the `${}` syntax, strings can embed expressions.const name = 'Oggy';const age = 3;console.log(`My cat is named ${name} and is ${age} years old.`);ModulesTo import functions, objects, or primitives exported from an external module. These are the most common types of importing.const name = require('module-name');const { foo, bar } = require('module-name');To export functions, objects, or primitives from a given file or module.module.exports = { myFunction };module.exports.name = 'yourName';module.exports = myFunctionOrClass;Spread OperatorThe spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.myFunction(...iterableObject);<ChildComponent {...this.props} />PromisesA Promise is used in asynchronous computations to represent an operation that hasn't completed yet but is expected in the future.var p = new Promise(function(resolve, reject) { });The catch() method returns a Promise and deals with rejected cases only.p.catch(function(reason) { /* handle rejection */ });The then() method returns a Promise. It takes two arguments: callback for the success & failure cases.p.then(function(value) { /* handle fulfillment */ }, function(reason) { /* handle rejection */ });The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved or rejects with the reason of the first passed promise that rejects.Promise.all([p1, p2, p3]).then(function(values) { console.log(values) });Arrow FunctionsArrow function expression. Shorter syntax & lexically binds the this value. Arrow functions are anonymous.singleParam => { statements }() => { statements }(param1, param2) => expressionconst arr = [1, 2, 3, 4, 5];const squares = arr.map(x => x * x);ClassesThe class declaration creates a new class using prototype-based inheritance.class Person {  constructor(name, age, gender) {    this.name   = name;    this.age    = age;    this.gender = gender;  }  incrementAge() {    this.age++;  }}🎁 Credits: DuckDuckGo and @DrkSephy.🔝 back to top JavaScript Date CheatsheetUnix Timestamp (seconds)Math.floor(Date.now() / 1000);moment().unix();Add 30 minutes to a Date objectvar now = new Date();now.setMinutes(now.getMinutes() + 30);moment().add(30, 'minutes');Date Formatting// DD-MM-YYYYvar now = new Date();var DD = now.getDate();var MM = now.getMonth() + 1;var YYYY = now.getFullYear();if (DD < 10) {  DD = '0' + DD;}if (MM < 10) {  MM = '0' + MM;}console.log(MM + '-' + DD + '-' + YYYY); // 03-30-2016console.log(moment(new Date(), 'MM-DD-YYYY'));// hh:mm (12 hour time with am/pm)var now = new Date();var hours = now.getHours();var minutes = now.getMinutes();var amPm = hours >= 12 ? 'pm' : 'am';hours = hours % 12;hours = hours ? hours : 12;minutes = minutes < 10 ? '0' + minutes : minutes;console.log(hours + ':' + minutes + ' ' + amPm); // 1:43 amconsole.log(moment(new Date(), 'hh:mm A'));Next week Date objectvar today = new Date();var nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);moment().add(7, 'days');Yesterday Date objectvar today = new Date();var yesterday = date.setDate(date.getDate() - 1);moment().add(-1, 'days');🔝 back to topMongoose CheatsheetFind all users:User.find((err, users) => {  console.log(users);});Find a user by email:let userEmail = 'example@gmail.com';User.findOne({ email: userEmail }, (err, user) => {  console.log(user);});Find 5 most recent user accounts:User  .find()  .sort({ _id: -1 })  .limit(5)  .exec((err, users) => {    console.log(users);  });Get the total count of a field from all documents:Let's suppose that each user has a votes field and you would like to count the total number of votes in your database across all users. One very inefficient way would be to loop through each document and manually accumulate the count. Or you could use MongoDB Aggregation Framework instead:User.aggregate({ $group: { _id: null, total: { $sum: '$votes' } } }, (err, votesCount)  => {  console.log(votesCount.total);});🔝 back to topDockerYou will need docker and docker-compose installed to build the application.Docker installationCommon problems setting up dockerAfter installing docker, start the application with the following commands :# To build the project for the first time or when you add dependenciesdocker-compose build web# To start the application (or to restart after making changes to the source code)docker-compose up webTo view the app, find your docker IP address + port 8080 ( this will typically be http://localhost:8080/ ).  To use a port other than 8080, you would need to modify the port in app.js, Dockerfile, and docker-compose.yml.DeploymentOnce you are ready to deploy your app, you will need to create an account with a cloud platform to host it. These are not the only choices, but they are my top picks.  Additionally, you can create an account with MongoDB Atlas and then pick one of the providers below. Again, there are plenty of other choices, and you are not limited to just the ones listed below.Deployment to RenderRender provides free nodejs hosting for repos on Github and Gitlab.Sign up for a free Individual account at https://render.comLink your Github accountCreate a Web ServiceAdd your repo and add your environment variables under the Advanced settings.Note 1: The automated deployments may not work, and you may need to manually trigger deployments after your commits.Hosted MongoDB AtlasGo to https://www.mongodb.com/cloud/atlasClick the green Get started free buttonFill in your information then hit Get started freeYou will be redirected to Create New Cluster page.Select a Cloud Provider and Region (such as AWS and a free tier region)Select cluster Tier to Free forever Shared ClusterGive Cluster a name (default: Cluster0)Click on green ⚡Create Cluster buttonNow, to access your database you need to create a DB user. To create a new MongoDB user, from the Clusters view, select the Security tabUnder the MongoDB Users tab, click on +Add New UserFill in a username and password and give it either Atlas Admin User PrivilegeNext, you will need to create an IP address whitelist and obtain the connection URI.  In the Clusters view, under the cluster details (i.e. SANDBOX - Cluster0), click on the CONNECT button.Under section (1) Check the IP Whitelist, click on ALLOW ACCESS FROM ANYWHERE. The form will add a field with 0.0.0.0/0.  Click SAVE to save the 0.0.0.0/0 whitelist.Under section (2) Choose a connection method, click on Connect Your ApplicationIn the new screen, select Node.js as Driver and version 3.6 or later.Finally, copy the URI connection string and replace the URI in MONGODB_URI of .env.example with this URI string.  Make sure to replace the  with the db User password that you created under the Security tab.Note that after some of the steps in the Atlas UI, you may see a banner stating We are deploying your changes.  You will need to wait for the deployment to finish before using the DB in your application.OpenShift**NOTE** *These instructions might be out of date due to changes in OpenShift. Render is currently a good free alternative.  If you know the new process, please feel free to help us update this page*First, install this Ruby gem: sudo gem install rhc 💎Run rhc login and enter your OpenShift credentialsFrom your app directory run rhc app create MyApp nodejs-0.10Note: MyApp is the name of your app (no spaces)Once that is done, you will be provided with URL, SSH and Git Remote linksVisit provided URL, and you should see the Welcome to your Node.js application on OpenShift pageCopy and paste Git Remote into git remote add openshift YOUR_GIT_REMOTEBefore you push your app, you need to do a few modifications to your codeAdd these two lines to app.js, just place them anywhere before app.listen():var IP_ADDRESS = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';var PORT = process.env.OPENSHIFT_NODEJS_PORT || 8080;Then change app.listen() to:app.listen(PORT, IP_ADDRESS,() => {  console.log(`Express server listening on port ${PORT} in ${app.settings.env} mode`);});Add this to package.json, after name and version. This is necessary because, by default, OpenShift looks for server.js file. And by specifying supervisor app.js it will automatically restart the server when node.js process crashes.\""main\"": \""app.js\"",\""scripts\"": {  \""start\"": \""supervisor app.js\""},Finally, you can now push your code to OpenShift by running git push -f openshift masterNote: The first time you run this command, you have to pass -f (force) flag because OpenShift creates a dummy server with the welcome page when you create a new Node.js app. Passing -f flag will override everything with your Hackathon Starter project repository. Do not run git pull as it will create unnecessary merge conflicts.And you are done!Azure**NOTE** *Beyond the initial 12 month trial of Azure, the platform does not seem to offer a free tier for hosting NodeJS apps.  If you are looking for a free tier service to host your app, Render might be a better choice at this point*Login to Windows Azure Management PortalClick the + NEW button on the bottom left of the portalClick COMPUTE, then WEB APP, then QUICK CREATEEnter a name for URL and select the datacenter REGION for your web siteClick on CREATE WEB APP buttonOnce the web site status changes to Running, click on the name of the web site to access the DashboardAt the bottom right of the Quickstart page, select Set up a deployment from source controlSelect Local Git repository from the list, and then click the arrowTo enable Git publishing, Azure will ask you to create a user name and passwordOnce the Git repository is ready, you will be presented with a GIT URLInside your Hackathon Starter directory, run git remote add azure [Azure Git URL]To push your changes run git push azure masterNote: You will be prompted for the password you created earlierOn Deployments tab of your Windows Azure Web App, you will see the deployment historyIBM Bluemix Cloud PlatformNOTE At this point it appears that Bluemix's free tier to host NodeJS apps is limited to 30 days.  If you are looking for a free tier service to host your app, Render might be a better choice at this pointCreate a Bluemix AccountSign up for Bluemix, or use an existing account.Download and install the Cloud Foundry CLI to push your applications to Bluemix.Create a manifest.yml file in the root of your application.applications:- name:      <your-app-name>  host:      <your-app-host>  memory:    128M  services:  - myMongo-db-nameThe host you use will determinate your application URL initially, e.g. <host>.mybluemix.net.The service name 'myMongo-db-name' is a declaration of your MongoDB service.  If you are using other services like Watson for example, then you would declare them the same way.Connect and login to Bluemix via the Cloud-foundry CLI$ cf login -a https://api.ng.bluemix.netCreate a MongoDB service$ cf create-service mongodb 100 [your-service-name]Note: this is a free and experiment verion of MongoDB instance.Use the MongoDB by Compose instance for production applications:$ cf create-service compose-for-mongodb Standard [your-service-name]'Push the application$ cf push$ cf env <your-app-name >(To view the *environment variables* created for your application)Done, now go to the staging domain (<host>.mybluemix.net) and see your app running.More Bluemix samplesSimple ToDo app in a programming language of your choiceIBM WatsonBe sure to check out the full list of Watson services to forwarder enhance your application functionality with a little effort. Watson services are easy to get going; it is simply a RESTful API call. Here is an example of a Watson Toner Analyzer to understand the emotional context of a piece of text that you send to Watson.Watson catalog of servicesVirtual Assistant -    Deliver consistent and intelligent customer care across all channels and touchpoints with conversational AI.Natural Language Understanding - Analyze text to extract meta-data from content such as concepts, entities, keywords and more.Discovery - Accelerate business decisions and processes with an AI-powered intelligent document understanding and content analysis platform.Orchestrate - Hand off tedious tasks to Watson and never work the same way again.List of Watson Services.Google Cloud PlatformDownload and install Node.jsSelect or create a Google Cloud Platform Console projectEnable billing for your project (there's a $300 free trial)Install and initialize the Google Cloud SDKCreate an app.yaml file at the root of your hackathon-starter folder with the following contents:runtime: nodejsenv: flexmanual_scaling:  instances: 1Make sure you've set MONGODB_URI in .env.exampleRun the following command to deploy the hackathon-starter app:gcloud app deployMonitor your deployed app in the Cloud ConsoleView the logs for your app in the Cloud ConsoleProductionIf you are starting with this boilerplate to build an application for prod deployment, or if after your hackathon you would like to get your project hardened for production use, see prod-checklist.md.ChangelogYou can find the changelog for the project in: CHANGELOG.mdContributingIf something is unclear, confusing, or needs to be refactored, please let me know.Pull requests are always welcome, but due to the opinionated nature of this project, I cannot accept every pull request. Please open an issue before submitting a pull request. This project uses Airbnb JavaScript Style Guide with a few minor exceptions. If you are submitting a pull request that involves Pug templates, please make sure you are using spaces, not tabs.LicenseThe MIT License (MIT)Copyright (c) 2014-2023 Sahat YalkabovPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \""Software\""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
36,microsoft/Windows-universal-samples,https://github.com/microsoft/Windows-universal-samples/blob/main/README.md,JavaScript,"Universal Windows Platform (UWP) app samplesThis repo contains the samples that demonstrate the API usage patterns for the Universal Windows Platform (UWP) in the Windows Software Development Kit (SDK) for Windows 10. These code samples were created with the Universal Windows Platform templates available in Visual Studio, and are designed to run on desktop, mobile, and future devices that support the Universal Windows Platform.Note: If you are unfamiliar with Git and GitHub, you can download the entire collection as aZIP file, but besure to unzip everything to access shared dependencies. For more info on working with the ZIP file,the samples collection, and GitHub, see Get the UWP samples from GitHub.For more samples, see the Samples portal on the Windows Dev Center.Universal Windows Platform developmentThese samples require Visual Studio and the Windows Software Development Kit (SDK) for Windows 10.Get a free copy of Visual Studio Community Edition with support for building Universal Windows Platform appsAdditionally, to stay on top of the latest updates to Windows and the development tools, become a Windows Insider by joining the Windows Insider Program.Become a Windows InsiderUsing the samplesThe easiest way to use these samples without using Git is to download the zip file containing the current version (using the following link or by clicking the \""Download ZIP\"" button on the repo page). You can then unzip the entire archive and use the samples in Visual Studio.Download the samples ZIPNotes:Before you unzip the archive, right-click it, select Properties, and then select Unblock.Be sure to unzip the entire archive, and not just individual samples. The samples all depend on the SharedContent folder in the archive.In Visual Studio, the platform target defaults to ARM, so be sure to change that to x64 or x86 if you want to test on a non-ARM device.The samples use Linked files in Visual Studio to reduce duplication of common files, including sample template files and image assets. These common files are stored in the SharedContent folder at the root of the repository, and are referred to in the project files using links.Reminder: If you unzip individual samples, they will not build due to references to other portions of the ZIP file that were not unzipped. You must unzip the entire archive if you intend to build the samples.For more info about the programming models, platforms, languages, and APIs demonstrated in these samples, please refer to the guidance, tutorials, and reference topics provided in the Windows 10 documentation available in the Windows Developer Center. These samples are provided as-is in order to indicate or demonstrate the functionality of the programming models and feature APIs for Windows.ContributionsThese samples are direct from the feature teams and we welcome your input on issues and suggestions for new samples. At this time we are not accepting new samples from the public, but check back here as we evolve our contribution model.This project has adopted the Microsoft Open Source Code of Conduct.For more information, see the Code of Conduct FAQor contact opencode@microsoft.com with any additional questions or comments.See alsoFor additional Windows samples, see Windows on GitHub.Samples by categoryApp settings   App package information  Application data  Store Audio, video, and camera   360-degree video playback  Adaptive streaming  Advanced capture    Advanced casting  Audio categories  Audio graphs    Background media playback  Basic camera app  Basic face detection    Basic face tracking  Basic media casting  Camera face detection    Camera frames  Camera preview frame  Camera profiles    Camera resolution  Camera stream coordinate mapper  Camera stream correlation    DASH streaming  Direct2D photo adjustment  Media editing    Media import  Media transport controls  MIDI    Playlists  PlayReady  Processing frames with OpenCV    Simple imaging  Spatial audio  System media transport controls    Transcoding media  Video playback  Video playback synchronization    Video stabilization  Windows audio session (WASAPI) Communications   Bluetooth RFCOMM chat  Real-time communication  SMS send and receive Contacts and calendar   Appointment calendar  Contact cards  Contact panel    Contact picker  UserDataAccountManager Controls, layout, and text   3D Printing  3D Printing from Unity  Bottom-up list (XAML)    Clipboard  Colored glyphs (DirectWrite)  Commanding    Context menu  Context menu (XAML)  Custom text edit control    Data virtualization  Display orientation  Downloadable fonts (DirectWrite)    Downloadable fonts (XAML)  Drag and drop  Focus visuals    Full screen mode  Gamepad-style navigation (XAML)  Line spacing (DirectWrite)    ListView and GridView  Lock screen apps  Message dialog    Multiple views  OCR  Printing    Scaling according to DPI  Secondary windows  Splash screen    State triggers  Tailored multiple views  Title bar    UI basics (XAML)  User interaction mode  WebView control (XAML)    Window resizing Custom user interactions   Basic input  Complex inking  Ink analysis    Low latency input  Pen haptics  Simple inking    Touch keyboard  Touch keyboard text input Data   Compression  Content indexer  Logging    PDF document  Serializing and deserializing data  x:Bind    x:DeferLoadStrategy  XML DOM  XmlLite Deep links and app-to-app communication   App services  Jump list customization  Remote systems    Sharing content source app  Sharing content target app  User activities Devices and sensors   Accelerometer  Activity detection sensor  AllJoyn consumer experiences    AllJoyn producer experiences  Altimeter  Background sensors    Barcode scanner  Barcode scanner provider  Barometer    Bluetooth advertisement  Bluetooth Low Energy  Cash drawer    Compass  Custom HID device  Custom sensors    Custom serial device  Custom USB device  Device enumeration and pairing    General Purpose Input/Output (GPIO)  Gyrometer  Presence sensor    Inclinometer  Inter-Integrated Circuit (I2C)  Lamp device    Light sensor  Line display  Magnetometer    Magnetic stripe reader  Near field communication (NFC)  NFC enterprise provisioner    Orientation sensor  Pedometer  POS printer    Proximity sensor  Radial controller  Relative inclinometer    Serial Arduino  Serial Peripheral Interface (SPI)  Simple orientation sensor Files, folders, and libraries   File access  File and folder thumbnail  File picker    File picker provider  File search  Folder enumeration    Library management  Semantic text query Gaming   Direct3D game  DirectX and XAML game Globalization and localization   Application resources and localization  Calendar  Date and time formatting    Globalization preferences  Japanese phonetic analysis  Language font mapping    Linguistic services  Number formatting and parsing  Text segmentation    Text suggestions  Unicode string processing Graphics and animation   Animated GIF playback (XAML)  Animation metrics  Composition visual without framework    Direct2D advanced color image rendering  Direct2D custom image effects  Direct2D gradient mesh    Direct2D SVG image rendering  Transform3D animations Holographic   Basic hologram  Holographic face tracking  Holographic mixed reality capture    Holographic spatial mapping  Holographic spatial stage  Holographic voice input    Spatial interaction source  Tag-along hologram    Mixed Reality Model Identity, security, and encryption   Credential locker  Client Device Information  Credential picker    Disabling screen capture  Enterprise data protection  KeyCredentialManager    Lock screen personalization  Microsoft Passport and Windows Hello  Smart cards    User information  UserCertificateStore  UserConsentVerifier    Web account management  WebAuthenticationBroker Launching and background tasks   Association launching  Background activation  Background task    Extended execution  Multi-instance apps  Suspend and resume Maps and location   Geolocation  Geotag  MapControl Navigation   Back Button  Master/detail  Pivot    Projection Networking and web services   Background transfer  DatagramSocket  HttpClient    JSON  Mobile broadband  Network connectivity    On-Demand Wi-Fi hotspot  Radios  Socket activity trigger stream socket    StreamSocket  Syndication  USSD protocol    WebSocket  Wi-Fi Direct  Wi-Fi Direct services    Wi-Fi hotspot authentication  Wi-Fi scanning Platform architecture   Capabilities  Custom capabilities  In-process component authoring    In-process component authoring  Out-of-process component authoring  Version adaptive code Speech and Cortana   Cortana voice command  Speech recognition and synthesis Tiles, toasts, and notifications   Notifications  Secondary tiles "
37,SheetJS/sheetjs,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
38,leonardomso/33-js-concepts,https://github.com/leonardomso/33-js-concepts/blob/master/README.md,JavaScript,"          33 Concepts Every JavaScript Developer Should Know  IntroductionThis repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by Stephen Curtis and you can read it here.🚀 Considered by GitHub as one of the top open source projects of 2018!CommunityFeel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.All the translations for this repo will be listed below:(Arabic) — Amr Elsekilly汉语 (Chinese) — Re TianPortuguês do Brasil (Brazilian Portuguese) — Tiago Boeing한국어 (Korean) — Suin LeeEspañol (Spanish) — Adonis MendozaTürkçe (Turkish) — İlker Demirрусский язык (Russian) — Mihail GumenniiTiếng Việt (Vietnamese) — Nguyễn Trần ChungPolski (Polish) — Dawid Lipinskiفارسی (Persian) — Majid AlavizadehBahasa Indonesia (Indonesian) — Rijdzuan SampoernaFrançais (French) — Robin Métralहिन्दी (Hindi) — Vikas ChauhanΕλληνικά (Greek) — Dimitris Zarachanis日本語 (Japanese) — oimo23Deutsch (German) — burhannnукраї́нська мо́ва (Ukrainian) — Andrew Savetchukසිංහල (Sinhala) — Udaya ShamendraItaliano (Italian) — Gianluca Fioreภาษาไทย (Thai) — Arif WaramCatalà (Catalan) — Mario Estradaខ្មែរ (Khmer) — Chrea Chanchhunnengአማርኛ (Ethiopian) - Miniyahil Kebede(ምንያህል ከበደ)Беларуская мова (Belarussian) — Dzianis YafimauTable of ContentsCall StackPrimitive TypesValue Types and Reference TypesImplicit, Explicit, Nominal, Structuring and Duck Typing== vs === vs typeofFunction Scope, Block Scope and Lexical ScopeExpression vs StatementIIFE, Modules and NamespacesMessage Queue and Event LoopsetTimeout, setInterval and requestAnimationFrameJavaScript EnginesBitwise Operators, Type Arrays and Array BuffersDOM and Layout TreesFactories and Classesthis, call, apply and bindnew, Constructor, instanceof and InstancesPrototype Inheritance and Prototype ChainObject.create and Object.assignmap, reduce, filterPure Functions, Side Effects, State Mutation and Event PropagationClosuresHigh Order FunctionsRecursionCollections and GeneratorsPromisesasync/awaitData StructuresExpensive Operation and Big O NotationAlgorithmsInheritance, Polymorphism and Code ReuseDesign PatternsPartial Applications, Currying, Compose and PipeClean Code1. Call StackReference📜 Call Stack — MDNArticles📜 Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia📜 Understanding the JavaScript Call Stack — Charles Freeborn📜 Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi📜 What is the JS Event Loop and Call Stack? — Jess Telford📜 Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora📜 How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov📜 How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin RajbharVideos🎥 Javascript: the Call Stack explained — Coding Blocks India🎥 The JS Call Stack Explained In 9 Minutes — Colt Steele🎥 What is the Call Stack? — Eric Traub🎥 The Call Stack — Kevin Drumm🎥 Understanding JavaScript Execution — Codesmith🎥 The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis🎥 What the heck is the event loop anyway? — Philip Roberts🎥 La PILA DE EJECUCIÓN (Call Stack) de JavaScript — La Cocina del Código🎥 How JavaScript Code is executed? ❤️& Call Stack — Akshay Saini⬆ Back to Top2. Primitive TypesReference📜 JavaScript data types and data structures — MDNArticles📜 Primitive and Non-primitive data-types in JavaScript - GeeksforGeeks📜 Javascript variables (Beginner thinking)📜 How numbers are encoded in JavaScript — Dr. Axel Rauschmayer📜 What You Need to Know About JavaScript Number Type — Max Wizard K📜 What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy📜 The Secret Life of JavaScript Primitives — Angus Croll📜 Primitive Types — Flow📜 (Not) Everything in JavaScript is an Object — Daniel Li📜 JavaScript data types and data structures — MDN📜 Diving Deeper in JavaScripts Objects — Arfat Salman📜 The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji📜 Object to primitive conversion — JavaScript.infoVideos🎥 JavaScript Reference vs Primitive Types — Academind🎥 JavaScript Primitive Types — Simon Sez IT🎥 Value Types and Reference Types in JavaScript — Programming with Mosh🎥 JavaScript Primitive Data Types — Avelx🎥 Everything you never wanted to know about JavaScript numbers — Bartek Szopka🎥 What are variables in Javascript? — JS For Everyone🎥 TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código⬆ Back to Top3. Value Types and Reference TypesArticles📜 Explaining Value vs. Reference in Javascript — Arnav Aggarwal📜 Primitive Types & Reference Types in JavaScript — Bran van der Meer📜 Value Types, Reference Types and Scope in JavaScript — Ben Aston📜 Back to roots: JavaScript Value vs Reference — Miro Koczka📜 Grasp “By Value” and “By Reference” in JavaScript — Léna Faure📜 JavaScript Reference and Copy Variables — Vítor Capretz📜 JavaScript Primitive vs Reference Values📜 JavaScript by Reference vs. by Value — nrabinowitz📜 JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin📜 JavaScript map vs. forEach: When to Use Each One - Sajal SoniVideos🎥 Javascript Pass by Value vs Pass by Reference — techsith🎥 JavaScript Value vs Reference Types — Programming with Mosh🎥 VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código🎥 JavaScript - Reference vs Primitive Values/ Types - Academind⬆ Back to Top4. Implicit, Explicit, Nominal, Structuring and Duck TypingArticles📜 What you need to know about Javascript's Implicit Coercion — Promise Tochi📜 JavaScript Type Coercion Explained — Alexey Samoshkin📜 Javascript Coercion Explained — Ben Garrison📜 What exactly is Type Coercion in Javascript? - Stack OverflowVideos🎥 == ? === ??? ...#@^% - Shirmung Bielefeld🎥 Coercion in Javascript - Hitesh Choudhary🎥 JavaScript Questions: What is Coercion? - Steven Hancock🎥 Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse🎥 EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del CódigoBooksYou Don't Know JS, 1st Edition: Types & Grammar — Kyle Simpson⬆ Back to Top5. == vs === vs typeofArticles📜 JavaScript Double Equals vs. Triple Equals — Brandon Morelli📜 Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki📜 == vs === JavaScript: Double Equals and Coercion — AJ Meyghani📜 Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris📜 What is the difference between == and === in JavaScript? — Craig Buckler📜 Why javascript's typeof always return \""object\""? — Stack Overflow📜 Checking Types in Javascript — Toby Ho📜 How to better check data types in JavaScript — Webbjocke📜 Checking for the Absence of a Value in JavaScript — Tomer Aberbach📜 Difference between == and === in JavaScript — GeeksforGeeks📜 === vs == Comparision in JavaScript — FreeCodeCampVideos🎥 JavaScript - The typeof operator — Java Brains🎥 Javascript typeof operator — DevDelight🎥 JavaScript \""==\"" VS \""===\"" — Web Dev Simplified⬆ Back to Top6. Function Scope, Block Scope and Lexical ScopeBooksYou Don't Know JS Yet, 2nd Edition: Scope & Closures — Kyle SimpsonArticles📜 JavaScript Functions — Understanding The Basics — Brandon Morelli📜 Var, Let, and Const – What's the Difference?📜 Functions in JavaScript - Deepa Pandey📜 Emulating Block Scope in JavaScript — Josh Clanton📜 The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo📜 Function Scopes and Block Scopes in JavaScript — Samer Buna📜 Understanding Scope and Context in JavaScript — Ryan Morr📜 JavaScript Scope and Closures — Zell Liew📜 Understanding Scope in JavaScript — Wissam Abirached📜 Understanding Scope in JavaScript ― Hammad Ahmed📜 When to use a function declaration vs. a function expression ― Amber Wilkie📜 A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this” ― Alexandra Fren📜 Functions / Function scope ― MDNVideos🎥 What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy🎥 Variable Scope in JavaScript — Kirupa Chinnathambi🎥 JavaScript Block Scope and Function Scope — mmtuts🎥 What the Heck is Lexical Scope? — NWCalvank🎥 Variable Scope — Steve Griffith🎥 Javascript Tutorials for Beginners — Mosh Hemadani⬆ Back to Top7. Expression vs StatementArticles📜 All you need to know about Javascript's Expressions, Statements and Expression Statements — Promise Tochi📜 Function Expressions vs Function Declarations — Paul Wilkins📜 JavaScript Function — Declaration vs Expression — Ravi Roshan📜 Function Declarations vs. Function Expressions — Mandeep Singh📜 Function Declarations vs. Function Expressions — Anguls CrollVideos🎥 Expressions vs. Statements in JavaScript — Hexlet🎥 The difference between an expression and a statement in JavaScript⬆ Back to Top8. IIFE, Modules and NamespacesArticles📜 Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju📜 Do ES6 Modules make the case of IIFEs obsolete?📜 A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere📜 Modules ― Exploring JS📜 ES modules: A cartoon deep-dive — Lin Clark📜 Understanding ES6 Modules — Craig Buckler📜 An overview of ES6 Modules in JavaScript — Brent Graham📜 ES6 Modules in Depth — Nicolás Bevacqua📜 ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno📜 JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy📜 Using JavaScript modules on the web — Addy Osmani & Mathias Bynens📜 IIFE: Immediately Invoked Function Expressions — Parwinder📜 Javascript Module Bundlers — Vanshu HassijaVideos🎥 Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp🎥 Understanding JavaScript IIFE — Sheo Narayan🎥 JavaScript Modules: ES6 Import and Export — Kyle Robinson🎥 ES6 - Modules — Ryan Christiani🎥 ES6 Modules in the Real World — Sam Thorogood🎥 ES6 Modules — TempleCoding🎥 JavaScript IIFE (Immediately Invoked Function Expressions) — Steve Griffith⬆ Back to Top9. Message Queue and Event LoopArticles📜 JavaScript Event Loop Explained — Anoop Raveendran📜 The JavaScript Event Loop: Explained — Erin Sweson-Healey📜 Understanding JS: The Event Loop — Alexander Kondov📜 Understanding the JavaScript Event Loop — Ashish Gupta📜 The JavaScript Event Loop — Flavio Copes📜 How JavaScript works: Event loop — Alexander Zlatkov📜 Tasks, microtasks, queues and schedules — Jake Archibald📜 Visualising the JavaScript Event Loop with a Pizza Restaurant analogy — Priyansh Jain📜 JavaScript Visualized: Event Loop — Lydia HallieVideos🎥 What the heck is the event loop anyway? | JSConf EU — Philip Roberts🎥 JavaScript Event Loop — ComScience Simplified🎥 I'm stuck in an Event Loop — Philip Roberts🎥 In The Loop - Jake Archibald | JSConf.Asia 2018🎥 Desmitificando el Event Loop (Spanish)🎥 Callbacks, Sincrono, Assíncrono e Event Loop (PT-BR)⬆ Back to Top10. setTimeout, setInterval and requestAnimationFrameArticles📜 Javascript setTimeout - All you need to know📜 setTimeout and setInterval — JavaScript.Info📜 Why not to use setInterval — Akanksha Sharma📜 setTimeout VS setInterval — Develoger📜 Using requestAnimationFrame — Chris Coyier📜 Understanding JavaScript's requestAnimationFrame() — JavaScript Kit📜 Handling time intervals in JavaScript - Amit MerchantVideos🎥 Javascript: How setTimeout and setInterval works — Coding Blocks India🎥 setTimeout and setInterval in JavaScript — techsith🎥 JavaScript Timers — Steve Griffith🎥 JavaScript setTimeOut and setInterval Explained — Theodore Anderson⬆ Back to Top11. JavaScript EnginesArticles📜 Is javascript compiled or interpreted language?📜 JavaScript Engines — Jen Looper📜 Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead📜 Understanding V8’s Bytecode — Franziska Hinkelmann📜 A Brief History of Google’s V8 Javascript Engine — Clair Smith📜 JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp📜 JavaScript engine fundamentals: Shapes and Inline Caches📜 JavaScript engine fundamentals: optimizing prototypes📜 How V8 optimizes array operationsVideos🎥 JavaScript Engines: The Good Parts™ — Mathias Bynens & Benedikt Meurer🎥 JS Engine EXPOSED 🔥 Google's V8 Architecture 🚀 | Namaste JavaScript Ep. 16 - Akshay Saini🎥 How JavaScript Code is executed? How Javascript works behind the scenes🎥 Understanding the V8 JavaScript Engine - freeCodeCamp Talks⬆ Back to Top12. Bitwise Operators, Type Arrays and Array BuffersArticles📜 Programming with JS: Bitwise Operations — Alexander Kondov📜 Using JavaScript’s Bitwise Operators in Real Life — ian m📜 JavaScript Bitwise Operators — w3resource📜 Bitwise Operators in Javascript — Joe Cha📜 A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown📜 How can I understand Bitwise operation in JavaScript?Videos🎥 JavaScript Bitwise Operators — Programming with Mosh🎥 Bitwise Operators and WHY we use them — Alex Hyett🎥 JS Bitwise Operators and Binary Numbers — Steve Griffith - Prof3ssorSt3v3🎥 Deep Dive into Blobs, Files, and ArrayBuffers — Steve Griffith - Prof3ssorSt3v3⬆ Back to Top13. DOM and Layout TreesBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 14 - The Document Object ModelArticles📜 How To Understand and Modify the DOM in JavaScript — Tania Rascia📜 What’s the Document Object Model, and why you should know how to use it — Leonardo Maldonado📜 JavaScript DOM Tutorial with Example — Guru99📜 What is the DOM? — Chris Coyier📜 Traversing the DOM with JavaScript — Zell Liew📜 DOM Tree📜 How to traverse the DOM in Javascript — Vojislav Grujić📜 Render Tree Construction — Ilya Grigorik📜 What exactly is the DOM?Videos🎥 JavaScript DOM — The Net Ninja🎥 JavaScript DOM Crash Course — Traversy Media⬆ Back to Top14. Factories and ClassesArticles📜 How To Use Classes in JavaScript — Tania Rascia📜 Javascript Classes — Under The Hood — Majid📜 Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke📜 Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal📜 Factory Functions in JavaScript — Josh Miller📜 The Factory Pattern in JS ES6 — SnstsDev📜 Class vs Factory function: exploring the way forward — Cristi Salcescu📜 How ES6 classes really work and how to build your own — Robert Grosse📜 Understanding super in JavaScript📜 An Easy Guide To Understanding Classes In JavaScriptVideos🎥 JavaScript Factory Functions — Programming with Mosh🎥 Factory Functions in JavaScript — Fun Fun Function🎥 Javascript Tutorial Function Factories — Crypto Chan⬆ Back to Top15. this, call, apply and bindReference📜 call() — MDN📜 bind() — MDN📜 apply() — MDNArticles📜 Grokking call(), apply() and bind() methods in JavaScript — Aniket Kudale📜 How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta📜 JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell📜 Javascript: call(), apply() and bind() — Omer Goldberg📜 The difference between call / apply / bind — Ivan Sifrim📜 What the hack is call, apply, bind in JavaScript — Ritik📜 Mastering 'this' in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow📜 JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko📜 How AND When to use bind, call, and apply in Javascript — Eigen X📜 Let me explain to you what is this. (Javascript) — Jason Yu📜 Understanding the “this” Keyword in JavaScript — Pavan📜 How to understand the keyword this and context in JavaScript — Lukas Gisder-Dubé📜 What the heck is this in Javascript? — Hridayesh Sharma📜 This and Bind In Javascript — Brian Barbour📜 3 Techniques for Maintaining Your Sanity Using \""This\"" in JavaScript — Carl📜 Mastering the JavaScript \""this\"" Keyword — Aakash Srivastav📜 This binding in JavaScript – 4. New binding — Spyros Argalias📜 A quick intro to 'this' in JavaScript — Natalie Smith📜 Explaining JavaScript 'this' to my cat — Andrey K📜 A conversation with the 'this' keyword in Javascript — Karen Efereyan📜 What are call(), apply() and bind() in JavaScript — Amitav Mishra📜 Understanding 'this' binding in JavaScript — Yasemin CidemVideos🎥 JavaScript call, apply and bind — techsith🎥 JavaScript Practical Applications of Call, Apply and Bind functions— techsith🎥 JavaScript (call, bind, apply) — curious aatma🎥 Understanding Functions and 'this' In The World of ES2017 — Bryan Hughes🎥 bind and this - Object Creation in JavaScript - FunFunFunction🎥 JS Function Methods call(), apply(), and bind() — Steve Griffith⬆ Back to Top16. new, Constructor, instanceof and InstancesArticles📜 JavaScript For Beginners: the ‘new’ operator — Brandon Morelli📜 Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee📜 Constructor, operator \""new\"" — JavaScript.Info📜 Understanding JavaScript Constructors — Faraz Kelhini📜 Use Constructor Functions — Openclassrooms📜 Beyond typeof and instanceof: simplifying dynamic type checks — Dr. Axel Rauschmayer📜 What Is the Instanceof Operator in JavaScript — appendTo📜 Function and Object, instances of each other — Kiro Risk⬆ Back to Top17. Prototype Inheritance and Prototype ChainReference📜 Inheritance and the prototype chain — MDNArticles📜 Javascript : Prototype vs Class — Valentin PARSY📜 JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens📜 JavaScript Prototype — NC Patro📜 Prototype in Javascript — Sandeep Ranjan📜 Prototypes in JavaScript — Rupesh Mishra📜 Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal📜 Understanding JavaScript: Prototype and Inheritance — Alexander Kondov📜 Understanding Classes (ES5) and Prototypal Inheritance in JavaScript — Hridayesh Sharma📜 prototype, proto and Prototypal inheritance in JavaScript — Varun Dey📜 Prototypal Inheritance — JavaScript.Info📜 How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia📜 Master JavaScript Prototypes & Inheritance — Arnav Aggarwal📜 JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail📜 Prototypal Inheritance in JavaScript — Jannis Redmann📜 Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro📜 Intro To Prototypal Inheritance — Dharani Jayakanthan📜 Let’s Build Prototypal Inheritance in JS — var-che📜 Objects, Prototypes and Classes in JavaScript — Atta📜 The magical world of JavaScript prototypes — Belén📜 Understanding Prototypal Inheritance In JavaScript — Lawrence Eagles📜 Objects and Prototypes in JavaScript — Irena PopovaVideos🎥 Javascript Prototype Inheritance — Avelx🎥 JavaScript Prototype Inheritance Explained pt. I — techsith🎥 JavaScript Prototype Inheritance Explained pt. II — techsith🎥 JavaScript Prototype Inheritance Explained — Kyle Robinson🎥 Advanced Javascript - Prototypal Inheritance In 1 Minute🎥 An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode🎥 Object Oriented JavaScript - Prototype — The Net Ninja🎥 Prototype in JavaScript — kudvenkat🎥 JavaScript Using Prototypes — O'Reilly🎥 A Beginner's Guide to Javascript's Prototype — Tyler Mcginnis🎥 Prototypes in Javascript - p5.js Tutorial — The Coding TrainBooksYou Don't Know JS, 1st Edition: this & Object Prototypes — Kyle Simpson⬆ Back to Top18. Object.create and Object.assignReference📜 Object.create() — MDN📜 Object.assign() — MDNArticles📜 Object.create in JavaScript — Rupesh Mishra📜 Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle📜 Basic Inheritance with Object.create — Joshua Clanton📜 Object.create() In JavaScript — GeeksforGeeks📜 Understanding the difference between Object.create() and the new operator — Jonathan Voxland📜 JavaScript Object Creation: Patterns and Best Practices — Jeff Mott📜 Copying Objects in JavaScript ― Orinami Olatunji📜 JavaScript: Object.assign() — Thiago S. Adriano📜 How to deep clone a JavaScript Object — Flavio Copes📜 Object.create(): When and Why to Use — VZingVideos🎥 Object.assign() explained — Aaron Writes Code🎥 Object.assign() Method — techsith⬆ Back to Top19. map, reduce, filterArticles📜 JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac📜 Learn map, filter and reduce in Javascript — João Miguel Cunha📜 JavaScript’s Map, Reduce, and Filter — Dan Martensen📜 How to Use Map, Filter, & Reduce in JavaScript — Peleke Sengstacke📜 JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli📜 Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta📜 Understanding map, filter and reduce in Javascript — Luuk Gruijs📜 Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg📜 JavaScript: Map, Filter, Reduce — William S. Vincent📜 Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell📜 JavaScript: Arrow Functions for Beginners — Brandon Morelli📜 When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee📜 JavaScript — Learn & Understand Arrow Functions — Brandon Morelli📜 (JavaScript )=> Arrow functions — sigu📜 Javascript.reduce() — Paul Anderson📜 Why you should replace forEach with map and filter in JavaScript — Roope Hakulinen📜 Simplify your JavaScript – Use .map(), .reduce(), and .filter() — Etienne Talbot📜 JavaScript’s Reduce Method Explained By Going On a Diet — Kevin Kononenko📜 Difference between map, filter and reduce in JavaScript — Amirata Khodaparast📜 Map⇄Filter⇄Reduce↻ — ashay mandwarya📜 Finding Your Way With .map() — Brandon Wozniewicz📜 How to write your own map, filter and reduce functions in JavaScript — Hemand Nair📜 How to Manipulate Arrays in JavaScript — Bolaji Ayodeji📜 How to simplify your codebase with map(), reduce(), and filter() in JavaScript — Alex Permyakov📜 .map(), .filter(), and .reduce() — Andy Pickle📜 Map/Filter/Reduce Crash Course — Chris Achard📜 Map, Filter and Reduce – Animated — JavaScript Teacher📜 Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard — Mauro Bono📜 How to Use JavaScript’s .map, .filter, and .reduce — Avery Duffin📜 Javascript performance test - for vs for each vs (map, reduce, filter, find) — Deepak Gupta📜 Using .map(), .filter() and .reduce() properly — Sasanka Kudagoda📜 Mastering the JavaScript Reduce method ✂️ — sanderdebr📜 JavaScript Map – How to Use the JS .map() Function (Array Method) — FreeCodeCampVideos🎥 Map, Filter and Reduce — Lydia Hallie🎥 Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson🎥 JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata🎥 JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata🎥 JavaScript Higher Order Functions - Filter, Map, Sort & Reduce — Epicop🎥 [Array Methods 2/3] .filter + .map + .reduce — CodeWithNick🎥 Arrow functions in JavaScript - What, Why and How — Fun Fun Function🎥 Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf🎥 Map - Parte 2 JavaScript - Fun Fun Function🎥 Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function🎥 Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function🎥 reduce Array Method | JavaScript Tutorial - Florin Pop🎥 map Array Method | JavaScript Tutorial - Florin Pop🎥 Different array methods in 1 minute | Midudev (Spanish)⬆ Back to Top20. Pure Functions, Side Effects, State Mutation and Event PropagationArticles📜 Javascript and Functional Programming — Pure Functions — Omer Goldberg📜 Master the JavaScript Interview: What is a Pure Function? — Eric Elliott📜 JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery📜 Pure functions in JavaScript — @nicoespeon📜 Functional Programming: Pure Functions — Arne Brasseur📜 Pure Functions In Javascript — Krunal📜 Making your JavaScript Pure — Jack Franklin📜 Arrays, Objects and Mutations — Federico Knüssel📜 The State of Immutability — Maciej Sikora📜 Hablemos de Inmutabilidad — Kike Sanchez📜 How to deal with dirty side effects in your pure functional JavaScript — James Sinclair📜 Preventing Side Effects in JavaScript — David Walsh📜 Wielding Pure Functions in JavaScript and Function Composition — Peleke Sengstacke📜 JavaScript: Pure Functions — William S. Vincent📜 Functional programming paradigms in modern JavaScript: Pure functions — Alexander Kondov📜 Understanding Javascript Mutation and Pure Functions — Chidume Nnamdi📜 Functional-ish JavaScript — Daniel Brain📜 Event Propagation — MDN📜 Event Propagation — Bubbling and capturingVideos🎥 Pure Functions — Hexlet🎥 Pure Functions - Functional Programming in JavaScript — Paul McBride🎥 JavaScript Pure Functions — Seth Alexander🎥 JavaScript Pure vs Impure Functions Explained — Theodore Anderson🎥 Pure Functions - Programação Funcional: Parte 1 - Fun Fun Function🎥 Event Propagation - JavaScript Event Bubbling and Propagation - Steve Griffith⬆ Back to Top21. ClosuresReference📜 Closures — MDN📜 Closure — JavaScript.InfoArticles📜 I never understood JavaScript closures — Olivier De Meulder📜 Understand JavaScript Closures With Ease — Richard Bovell📜 Understanding JavaScript Closures — Codesmith📜 Understand Closures in JavaScript — Brandon Morelli📜 A simple guide to help you understand closures in JavaScript — Prashant Ram📜 Understanding JavaScript Closures: A Practical Approach — Paul Upendo📜 Understanding JavaScript: Closures — Alexander Kondov📜 How to use JavaScript closures with confidence — Léna Faure📜 JavaScript closures by example — tyler📜 JavaScript — Closures and Scope — Alex Aitken📜 Discover the power of closures in JavaScript — Cristi Salcescu📜 Getting Closure — RealLifeJS📜 Closure, Currying and IIFE in JavaScript — Ritik📜 Understanding Closures in JavaScript — Sukhjinder Arora📜 A basic guide to Closures in JavaScript — Parathan Thiyagalingam📜 Closures: Using Memoization — Brian Barbour📜 A Brief Introduction to Closures and Lexical Scoping in JavaScript — Ashutosh K Singh📜 Demystify Closures — stereobooster📜 Scopes and Closures - JavaScript Concepts — Agney Menon📜 Understanding Closures in JavaScript — Matt Popovich📜 whatthefuck.is · A Closure - Dan Abramov📜 Closures in JavaScript can... - Brandon LeBoeuf📜 Do you know Closures - Mohamed KhaledVideos🎥 JavaScript The Hard Parts: Closure, Scope & Execution Context - Codesmith🎥 Javascript Closure — techsith🎥 Closures — Fun Fun Function🎥 Closures in JavaScript — techsith🎥 JavaScript Closures 101: What is a closure? — JavaScript Tutorials🎥 Closures — freeCodeCamp🎥 JavaScript Closures — CodeWorkr🎥 Closures in JS - Akshay Saini🎥 CLOSURES en JavaScript: Qué son y cómo funcionan - Carlos Azaustre🎥 Learn Closures In 7 Minutes - Web Dev Simplified⬆ Back to Top22. High Order FunctionsBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 5 - Higher-order FunctionsArticles📜 Higher-Order Functions in JavaScript — M. David Green📜 Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz📜 First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco📜 Higher Order Functions in JavaScript — John Hannah📜 Just a reminder on how to use high order functions — Pedro Filho📜 Understanding Higher-Order Functions in JavaScript — Sukhjinder Arora📜 Higher Order Functions - A pragmatic approach — emmanuel ikwuomaVideos🎥 JavaScript Higher Order Functions & Arrays — Traversy Media🎥 Higher Order Functions — Fun Fun Function🎥 Higher Order Functions in Javascript — Raja Yogan🎥 Higher Order Iterators in JavaScript — Fun Fun Function🎥 Higher Order Functions in JavaScript — The Coding Train🎥 Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith🎥 Part 2: Understanding Why We Need Higher Order Functions - Codesmith🎥 Higher-Order Functions ft. Functional Programming - Akshay Saini⬆ Back to Top23. RecursionArticles📜 Recursion in JavaScript — Kevin Ennis📜 Understanding Recursion in JavaScript — Zak Frisch📜 Learn and Understand Recursion in JavaScript — Brandon Morelli📜 Recursion in Functional JavaScript — M. David Green📜 Programming with JS: Recursion — Alexander Kondov📜 Anonymous Recursion in JavaScript — simo📜 Recursion, iteration and tail calls in JS — loverajoel📜 Intro to Recursion — Brad Newman📜 Accio Recursion!: Your New Favorite JavaScript Spell — Leanne Cabey📜 Recursion Explained (with Examples) — ChristinaVideos🎥 Recursion In JavaScript — techsith🎥 Recursion — Fun Fun Function🎥 Recursion and Recursive Functions — Hexlet🎥 Recursion: Recursion() — JS Monthly — Lucas da Costa🎥 Recursive Function in JavaScript — kudvenkat🎥 What on Earth is Recursion? — Computerphile🎥 Javascript Tutorial 34: Introduction To Recursion — codedamn🎥 Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 — Anjana Vakil🎥 Recursion crash course - Colt Steele⬆ Back to Top24. Collections and GeneratorsReference📜 Generator — MDN web docsArticles📜 ES6 In Depth: Collections — Jason Orendorff📜 ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell📜 ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua📜 Map, Set, WeakMap and WeakSet — JavaScript.Info📜 Maps in ES6 - A Quick Guide — Ben Mildren📜 ES6 — Set vs Array — What and when? — Maya Shavin📜 ES6 — Map vs Object — What and when? — Maya Shavin📜 ES6: Working with Sets in JavaScript — Dead Code Rising📜 Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu📜 How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones📜 What You Should Know About ES6 Maps — Just Chris📜 ES6 Maps in Depth — Nicolás Bevacqua📜 What are JavaScript Generators and how to use them — Vladislav Stepanov📜 Understanding JavaScript Generators With Examples — Arfat Salman📜 The Basics of ES6 Generators — Kyle Simpson📜 An Introduction to JavaScript Generators — Alice KallaugherVideos🎥 JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media🎥 The Differences between ES6 Maps and Sets — Steve Griffith🎥 Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy⬆ Back to Top25. PromisesReference📜 Promise — MDNArticles📜 JavaScript Promises for Dummies ― Jecelyn Yeen📜 Understanding promises in JavaScript — Gokul N K📜 Master the JavaScript Interview: What is a Promise? — Eric Elliott📜 An Overview of JavaScript Promises — Sandeep Panda📜 How to use Promises in JavaScript — Prashant Ram📜 Implementing Promises In JavaScript — Maciej Cieslar📜 JavaScript: Promises explained with simple real life analogies — Shruti Kapoor📜 Promises for Asynchronous Programming — Exploring JS📜 JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko📜 ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan📜 A Simple Guide to ES6 Promises — Brandon Morelli📜 The ES6 Promises — Manoj Singh Negi📜 ES6 Promises in Depth — Nicolás Bevacqua📜 Playing with Javascript Promises: A Comprehensive Approach — Rajesh Babu📜 How to Write a JavaScript Promise — Brandon Wozniewicz📜 A Coding Writer’s Guide: An Introduction To ES6 Promises — Andrew Ly📜 Understanding Promises in JavaScript — Chris Noring📜 Converting callbacks to promises — Zell Liew📜 JavaScript Promises: Zero To Hero Plus Cheat Sheet — Joshua Saunders📜 Promises - JavaScript concepts — Agney Menon📜 Javascript Promise 101 — Igor Irianto📜 Simplify JavaScript Promises — Sunny Singh📜 The Lowdown on Promises — Aphinya Dechalert📜 JavaScript Visualized: Promises & Async/Await — Lydia Hallie📜 Promises in JavaScript — Peter Klingelhofer📜 Best Practices for ES6 Promises — Basti Ortiz📜 Lo que debemos saber de EScript 2020 — Kike Sanchez📜 Promise Basics - javascript.info📜 The Complete JavaScript Promise GuideVideos🎥 Let's Learn ES6 - Promises — Ryan Christiani🎥 JavaScript ES6 / ES2015 Promises — Traversy Media🎥 Promises — Fun Fun Function🎥 Error Handling Promises in JavaScript — Fun Fun Function🎥 Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train🎥 JavaScript Promise in 100 Seconds🎥 JavaScript Promise in 9 Minutes🎥 JavaScript Promises In 10 Minutes — Web Dev Simplified ⬆ Back to Top26. async/awaitReference📜 async/await — JavaScript.InfoBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 11 - Asynchronous Programming📜 Exploring JS: Asynchronous ProgrammingArticles📜 Understanding async/await in Javascript — Gokul N K📜 Asynchronous Javascript using async/await — Joy Warugu📜 Modern Asynchronous JavaScript with async/await — Flavio Copes📜 Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic📜 Javascript — ES8 Introducing async/await Functions — Ben Garrison📜 How to escape async/await hell — Aditya Agarwal📜 Understanding JavaScript’s async await — Nicolás Bevacqua📜 JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij📜 From JavaScript Promises to Async/Await: why bother? — Chris Nwamba📜 Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler📜 JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons📜 How to improve your asynchronous Javascript code with async and await — Indrek Lasn📜 Making Fetches Easy With Async Await — Mickey Sheridan📜 7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises — Mostafa Gaafar📜 Asynchronous Operations in JavaScript — Jscrambler📜 JavaScript: Promises or async-await — Gokul N K📜 Async / Await: From Zero to Hero — Zhi Yuan📜 JavaScript Visualized: Promises & Async/Await — Lydia Hallie📜 Making asynchronous programming easier with async and await — MDN📜 JavaScript Async/Await Tutorial – Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream📜 Better Than Promises - JavaScript Async/AwaitVideos🎥 Async + Await — Wes Bos🎥 Asynchrony: Under the Hood — Shelley Vohr🎥 async/await in JavaScript - What, Why and How — Fun Fun Function🎥 async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train🎥 async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train🎥 Complete Guide to JS Async & Await ES2017/ES8 — Colt Steele🎥 Tips for using async/await in JavaScript — James Q Quick🎥 JavaScript Async Await — Web Dev Simplified⬆ Back to Top27. Data StructuresArticles📜 Data Structures in JavaScript — Thon Ly📜 Algorithms and Data Structures in JavaScript — Oleksii Trekhleb📜 Data Structures: Objects and Arrays ― Chris Nwamba📜 Data structures in JavaScript — Benoit Vallon📜 Playing with Data Structures in Javascript — Anish K.📜 The Little Guide of Queue in JavaScript — Germán Cutraro📜 All algorithms writing with JavaScript in the book 'Algorithms Fourth Edition'📜 Collection of classic computer science paradigms in JavaScript📜 All the things you didn't know you wanted to know about data structures📜 JavaScript Data Structures: 40 Part Series — miku86📜 Data Structures: Understanding Graphs — Rachel Hawa📜 Data Structures Two Ways: Linked List (Pt 1) — Freddie Duffield📜 Data Structures Two Ways: Linked List (Pt 2) — Freddie Duffield📜 Graph Data Structures Explained in JavaScript — Adrian MejiaVideos🎥 Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions🎥 Data Structures and Algorithms in JavaScript — freeCodeCamp🎥 Learning JavaScript Data Structures and Algorithms: Sorting — Packt Video🎥 JavaScript Data Structures: Getting Started — Academind⬆ Back to Top28. Expensive Operation and Big O NotationArticles📜 Big O Notation in Javascript — César Antón Dorantes📜 Time Complexity/Big O Notation — Tim Roberts📜 Big O in JavaScript — Gabriela Medina📜 Big O Search Algorithms in JavaScript — Bradley Braithwaite📜 Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola📜 An Introduction to Big O Notation — Joseph TrettevikVideos🎥 JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub🎥 Essential Big O for JavaScript Developers — Dave Smith🎥 Big O Notation - Time Complexity Analysis — WebTunings⬆ Back to Top29. AlgorithmsArticles📜 Data Structures and Algorithms using ES6📜 Algorithms and data structures implemented in JavaScript with explanations and links to further readings📜 JS: Interview Algorithm📜 Algorithms in JavaScript — Thon Ly📜 JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov📜 Atwood's Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript📜 Data Structures and Algorithms library in JavaScript📜 Collection of computer science algorithms and data structures written in JavaScript📜 Algorithms and Data Structures in JavaScript — Oleksii Trekhleb⬆ Back to Top30. Inheritance, Polymorphism and Code ReuseReference📜 Inheritance in JavaScript — MDN📜 Class inheritance, super — JavaScript.InfoArticles📜 Inheritance in JavaScript — Rupesh Mishra📜 Simple Inheritance with JavaScript — David Catuhe📜 JavaScript — Inheritance, delegation patterns and Object linking — NC Patro📜 Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs📜 Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson📜 Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff MottVideos🎥 Inheritance in JavaScript — kudvenkat🎥 JavaScript ES6 Classes and Inheritance — Traversy Media🎥 Polymorphism in JavaScript — kudvenkat⬆ Back to Top31. Design PatternsBooks📜 Learning JavaScript Design Patterns — Addy OsmaniArticles📜 4 JavaScript Design Patterns You Should Know — Devan Patel📜 JavaScript Design Patterns – Beginner's Guide to Mobile Web Development — Soumyajit Pathak📜 JavaScript Design Patterns — Akash Pal📜 Javascript Design Patterns: What They Are & How To Use Them — Patrick Simpson📜 JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora📜 All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline📜 The Power of the Module Pattern in JavaScript — jsmanifest📜 Design Patterns for Developers using JavaScript pt. I — Oliver Mensah📜 Design Patterns for Developers using JavaScript pt. II — Oliver Mensah📜 Design patterns in modern JavaScript development📜 Understanding Design Patterns: Iterator using Dev.to and Medium social networks! — Carlos Caballero📜 JavaScript Design Patterns - Factory Pattern — KristijanFištrek📜 JavaScript Design Pattern — Module Pattern - Factory Pattern — Moon📜 Design Patterns: Null Object - Carlos Caballero📜 Strategy Pattern - Francesco Ciulla📜 Adapter Pattern - Francesco Ciulla📜 The Power of Composite Pattern in JavaScript - jsmanifest📜 In Defense of Defensive Programming - Adam Nathaniel DavisVideos🎥 JavaScript Design Patterns — Udacity🎥 JavaScript Patterns for 2017 — Scott Allen⬆ Back to Top32. Partial Applications, Currying, Compose and PipeBooks📜 Functional-Light JavaScript: Ch. 3 - Managing Function Inputs — Kyle SimpsonArticles📜 Use function composition in JavaScript — Rémi📜 Currying in JavaScript ES6 — Adam Bene📜 Composition and Currying Elegance in JavaScript — Pragyan Das📜 Functional JavaScript: Function Composition For Every Day Use — Joel Thoms📜 Functional Composition: compose() and pipe() — Anton Paras📜 Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif📜 A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair📜 Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao📜 Function Composition in JavaScript with Pipe — Andy Van Slaars📜 Practical Functional JavaScript with Ramda — Andrew D'Amelio, Yuri Takhteyev📜 The beauty in Partial Application, Currying, and Function Composition — Joel Thoms📜 Curry or Partial Application? — Eric Elliott📜 Partial Application in JavaScript — Ben Alman📜 Partial Application of Functions — Functional Reactive Ninja📜 Currying vs Partial Application — Deepak Gupta📜 Partial Application in ECMAScript 2015 — Ragan Wald📜 Functional Composition in Javascript — Joe Cortopassi📜 So You Want to be a Functional Programmer pt. I — Charles Scalfani📜 So You Want to be a Functional Programmer pt. II — Charles Scalfani📜 So You Want to be a Functional Programmer pt. III — Charles Scalfani📜 So You Want to be a Functional Programmer pt. IV — Charles Scalfani📜 So You Want to be a Functional Programmer pt. V — Charles Scalfani📜 An introduction to the basic principles of Functional Programming — TK📜 Concepts of Functional Programming in Javascript — TK📜 An Introduction to Functional Programming Style in JavaScript — JavaScript Teacher📜 A practical guide to writing more functional JavaScript — Nadeesha Cabral📜 A simple explanation of functional pipe in JavaScript — Ben LeshVideos🎥 Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios🎥 JavaScript Functional Programing: Compose — Theodore Anderson🎥 Function Composition - Functional JavaScript — NWCalvank🎥 JavaScript Function Composition Explained — Theodore Anderson🎥 Let's code with function composition — Fun Fun Function🎥 Partial Application vs. Currying — NWCalvank🎥 JavaScript Partial Application — Theodore Anderson🎥 call, apply and bind method in JavaScript⬆ Back to Top33. Clean CodeArticles📜 Clean Code Explained – A Practical Introduction to Clean Coding for Beginners — freeCodeCamp📜 Clean Code concepts adapted for JavaScript — Ryan McDermott📜 Clean Code Practice: How to write clean code — Tirth Bodawala📜 Function parameters in JavaScript Clean Code — Kevin Peters📜 Keeping your code clean — Samuel James📜 Best Practices for Using Modern JavaScript Syntax — M. David Green📜 best practices for cross node/web development - Jimmy Wärting📜 Writing Clean Code - Dylan Paulus📜 Writing Clean Code and The Practice of Programming - Nityesh Agarwal📜 Clean code, dirty code, human code - Daniel Irvine📜 Practical Ways to Write Better JavaScript - Ryland G📜 The Must-Know Clean Code Principles - Kesk on Medium📜 The Clean Code Book - Robert C MartinVideos🎥 JavaScript Pro Tips - Code This, NOT That🎥 Clean Code playlist - Beau teaches⬆ Back to Top"
39,learn-co-curriculum/phase-0-css-intro-lab,https://github.com/learn-co-curriculum/phase-0-css-intro-lab/blob/master/README.md,JavaScript,"Introduction to CSS LabLearning GoalsImport a CSS file in our HTMLImplement CSS declarationsIntroductionHTML's role in our websites is to provide structure, content, and link resources(e.g. CSS files). Its role in describing the style (\""presentation\"") of contentis minimal. HTML's ability to style is pretty much limited to \""pretty good\""defaults.In order to further customize the style, appearance, and interactive behavior ofour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we willwork on implementing CSS declarations in our HTML.Writing HTML vs. Writing CSSHTMLCSSDeals with:Content layerPresentation layerConcerns:Structure, hierarchy & meaningAesthetic & displayQuestions:- Should the order of items within a list matter?- Should the layout of the text be in a single or double column?- Should we wrap a list of links inside a navigation tag?- Should we use a different font color for the header?- Is this the most important header in the HTML document?- How should the content appear on a desktop vs. a mobile device?Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Import a CSS File in Our HTMLFirst things first: we need to make sure our HTML is loading our style sheet.We have two options:Write CSS rules inside of a <style> tag (\""internal CSS\""), which tells HTML\""Hey, I want to define some CSS styling here.\""Write CSS rules in an external file that is specified with the <link> tag(\""external CSS\"").In our case, we want to provide a link to our style sheet, instead of writingall of our CSS code directly in the <style> tag. This allows us to only haveto write styles for the entire site once, instead of repeating every <style>element on every page. A common workflow is to see developers work on CSS insideof the <style> tag until their styling is done. At that point they move it totheir external file and remove the <style> element from the HTML page. Feelfree to try it out!In index.html, provide a <link> tag which correctly sources the CSS filelocated in this directory. The <link> tag will link to our file with an hrefattribute, like so:<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />The href attribute should point to the file style.css which is located inthis directory using a relative path. The rel attribute is used to note thatthe file which is being linked has a relation of being a \""stylesheet.\""Now, what is a relative path? You could write href=\""style.css\"" and the contentof style.css would change your index.html file. But we want to teach you torequire external resources (like CSS or JavaScript) by using relative paths.Relative paths make it crystal clear which file is being used. Relative pathsstart with ./ which means \""from the directory I am currently in.\"" So, when weuse link to associate with a style sheet and we write href=\""./style.css\""we're saying: \""From the directory in which I, the index.html file live, lookfor a file called style.css and use it. This pattern will help you and otherdevelopers remove any possible confusion.<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />Links to style sheets should go at the end of the <head> section! Make sureyou provide a relative path to the style sheet. Hint: Open index.html in thebrowser. You can test whether your link is working or not by the color of yourheadline. If it's red, it's working! If it's black, keep going - you'll get it.Implement CSS DeclarationsNow, we are going to create some CSS declarations and add styling to ourdocument! First, open index.html in the browser to get a good idea of whatour un-styled page page looks like.What we would really like is something a little more jazzed up! Let'swork towards that. Set the following properties to specific values. Makesure to, after each update, look at index.html in the browser to see how ithas changed:Set the background of the <body> element (whole document) to #00b3e6(light blue)Set the <div> elements:width to 700pxmargin to auto (centers our element)font-family to \""Helvetica Neue\""background to whitepadding to 30px (creates an invisible space around the element)Set the element with the id of #main-header to a font-size of 22pxSet the elements with the class of .perspective-questions to a font-styleof italicRun npm test to test your work. Remember to push and submit your work usingCodeGrade when you're done.ConclusionCSS allows us to easily separate our 'styling' logic into separate files thatfollow the 'cascading' rule set. This enables us to keep our HTML clean andsimple to read, without sacrificing the customization that we have come toexpect on websites.ResourcesW3 Introduction to CSS"
40,moment/moment,https://github.com/moment/moment/blob/develop/README.md,JavaScript,"Moment.jsA JavaScript date library for parsing, validating, manipulating, and formatting dates.Project StatusMoment.js is a legacy project, now in maintenance mode.  In most cases, you should choose a different library.For more details and recommendations, please see Project Status in the docs.Thank you.ResourcesDocumentationChangelogStack OverflowLicenseMoment.js is freely distributable under the terms of the MIT license."
41,learn-co-curriculum/phase-0-html-tag-lab,https://github.com/learn-co-curriculum/phase-0-html-tag-lab/blob/master/README.md,JavaScript,"Your First HTML Tag LabLearning GoalsCode an h1 tagSet the inner text of the h1 to Hello, World!IntroductionSo far, we've seen how to markup content with HTML, how to structure an HTMLdocument and what HTML tags look like. Now let's focus on writing a single HTMLtag from scratch and examining each of its parts.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Code an h1 TagOpen index.html in your text editor. Add the h1 opening and closing tags.Set the Inner TextInside of the opening and closing h1 tags, insert the text: Hello, World!.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Viewing Your Work in the BrowserWhile working through these assignments, your general workflow should center onwriting code in the text editor and periodically running the test suite in theterminal to check your work.Another great way to track your progress is to open up the HTML document in yourbrowser and watch how each change you make in the text editor affects the visuallayout in the browser.You can open index.html a few ways, depending on the environment you are in:For Mac users:Open from the Terminal by running open index.html in the root directory ofthis labUse Finder to navigate to this lab's local folder and click the index.htmlfileFor WSL users:Open from Ubuntu by running explorer.exe index.html in the root directory ofthis labOpen a new Explorer window. There is a bar that says \""Quick Access\"" along thetop of the window (similar to a URL bar in a browser). Click this and type\\\\wsl$ to access files and folders on Ubuntu. Navigate to/home/<your-user-name>/ to get to your home directory, then locate thislab's local folder and click the index.html file.Once you have the HTML document open in your browser, you can make changes to itin a text editor, save the file, refresh the page in the browser, and see thechanges.ConclusionCongratulations! You wrote your first HTML tag. Now you can use your knowledgeof this basic building block to learn more HTML tags and see how they work witheach other to create an entire HTML document structure. Remember to submit yourwork in CodeGrade before moving on.Resourcesh1-h6 TagsSolving the First HTML Lab (Ifyou're stuck, here's a video walk-through of the lab to help you out.)"
42,PanJiaChen/vue-admin-template,https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md,JavaScript,"vue-admin-template这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后台必要的东西。线上地址国内访问目前版本为 v4.0+ 基于 vue-cli 进行构建，若你想使用旧版本，可以切换分支到tag/3.11.0，它不依赖 vue-cli。  SPONSORED BY            Extra如果你想要根据用户角色来动态生成侧边栏和 router，你可以使用该分支permission-control相关项目vue-element-adminelectron-vue-adminvue-typescript-admin-templateawesome-project写了一个系列的教程配套文章，如何从零构建后一个完整的后台项目:手摸手，带你用 vue 撸后台 系列一(基础篇)手摸手，带你用 vue 撸后台 系列二(登录权限篇)手摸手，带你用 vue 撸后台 系列三 (实战篇)手摸手，带你用 vue 撸后台 系列四(vueAdmin 一个极简的后台基础模板,专门针对本项目的文章,算作是一篇文档)手摸手，带你封装一个 vue componentBuild Setup# 克隆项目git clone https://github.com/PanJiaChen/vue-admin-template.git# 进入项目目录cd vue-admin-template# 安装依赖npm install# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org# 启动服务npm run dev浏览器访问 http://localhost:9528发布# 构建测试环境npm run build:stage# 构建生产环境npm run build:prod其它# 预览发布环境效果npm run preview# 预览发布环境效果 + 静态资源分析npm run preview -- --report# 代码格式检查npm run lint# 代码格式检查并自动修复npm run lint -- --fix更多信息请参考 使用文档购买贴纸你也可以通过 购买官方授权的贴纸 的方式来支持 vue-element-admin - 每售出一张贴纸，我们将获得 2 元的捐赠。DemoBrowsers supportModern browsers and Internet Explorer 10+.IE / EdgeFirefoxChromeSafariIE10, IE11, Edgelast 2 versionslast 2 versionslast 2 versionsLicenseMIT license.Copyright (c) 2017-present PanJiaChen"
43,learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/blob/master/README.md,JavaScript,"Looping LabLearning GoalsBuild a for loop.Build a while loop.Explain the purpose of a loop.Understand when to use each type of loop.IntroductionIn an earlier lesson, we learned about repetition statements —statements that allow us to break out of the default sequence and repeat asection of code multiple times. We also learned about two of JavaScript'srepetition constructs: the while loop and the do...while loop. In this lessonwe will learn about a third: the for loop.Let's say we have a bunch of gifts to wrap. They all happen to be the same sizeand shape, so for every gift, we need to cut a similarly sized piece of wrappingpaper, fold it up over the edges of the gift, tape it together, and add a nicelittle card. Then we set the wrapped gift aside and move on to the next gift.In programming terms, we can think of our collection of gifts as anArray and the act of wrapping them as a function. For example:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGift(gift) {  console.log(`Wrapped ${gift} and added a bow!`);}We could then call wrapGift() on each gift individually:wrapGift(gifts[0]);wrapGift(gifts[1]);wrapGift(gifts[2]);However, this isn't very efficient or extensible. It's a lot of repetitive codeto write out, and if we had more gifts we'd have to write a whole new line foreach.This is where loops come in handy! With a loop, we can just write the repeatedaction once and perform the action on every item in the collection.This is a code-along, so follow along with the instructions in each section.There are tests to make sure you're coding your solutions correctly. If youhaven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.The for loopOf the loops in JavaScript, the for loop is the most common. The for loop ismade up of four statements in the following structure:for ([initialization]; [condition]; [iteration]) {  [loop body]}InitializationTypically used to initialize a counter variable.ConditionAn expression evaluated before each pass through the loop. If this expressionevaluates to true, the statements in the loop body are executed. If theexpression evaluates to false, the loop exits.IterationAn expression executed at the end of each iteration. Typically, this will involveincrementing or decrementing a counter, bringing the loop ever closer tocompletion.Loop bodyCode that runs on each pass through the loop.Usage: Use a for loop when you know how many times you want the loop torun (for example, when you're looping through elements in an array).ExamplesLet's take a look at an example and get some practice using the Node debugger.Enter the code below into the index.js file.Note: You can, of course, copy/paste the code rather than typing it inyourself, but we recommend typing it in for now. The act of typing codedevelops muscle memory and helps your brain understand and internalize thesyntax.for (let age = 30; age < 40; age++) {  console.log(`I'm ${age} years old. Happy birthday to me!`);  debugger;}In the above code, let age = 30 is the initialization: we're creating avariable, age, that we'll use in the next three phases of the loop. Noticethat we use let instead of const because we need to increment the value ofage.The condition for the above loop is age < 40, or, in other words, \""Run thecode in the loop body until age is NOT less than 40.\"" As long as thecondition evaluates to true, the code in the loop body is executed, the valueof age is incremented, and the condition is reevaluated. As soon as thecondition evaluates to false, the loop ends.The iteration is age++, which increments the value of age by 1 afterevery pass through the loop. We initialized age as 30, and it retains thatvalue during the first pass through the loop. At the end of the first pass, weincrement age to 31, check whether the condition still holds true, and,since it does, run the loop body again with age as 31. After that secondloop, we increment age to 32, and so on.The loop body is the set of statements that we want to run when thecondition evaluates to true.Let's take a look at what's happening in our loop using debugger. Runnode inspect index.js in the terminal to start the debugger. You should seethe following:Now run cont at the debug prompt to start executing the loop and advance tothe breakpoint. It should look like this:Note, in the first line, that the message has been logged and that age isequal to 30. To verify that, enter repl at the debug prompt to open theREPL, then enter age. You should see 30 output. Now type Ctrl-C to exitthe repl, and enter cont at the debug prompt to advance to the nextiteration of the loop. You should see the following:Note that the logged output now shows that age is 31. You can continue to stepthrough the iterations by running cont at the debug prompt. At any point youcan verify the value of age by entering the REPL and typing age at theprompt, then exit the REPL to continue stepping through. When you're done, enter.exit or Ctrl-C twice to exit the debugger.Now let's remove debugger; from our code and execute it by runningnode index.js. You should see the following:Using for with ArraysThe for loop is often used to iterate over every element in an array. Let'srewrite our gift-wrapping action above as a for loop. Enter the following codeinto index.js:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  for (let i = 0; i < gifts.length; i++) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    debugger;  }  return gifts;}wrapGifts(gifts);We started our counter, i, at 0 because arrays have zero-based indexes. Ourcondition states that we should run the code in the loop body while i is lessthan gifts.length (3 in the above example). Our iteration, i++, incrementsour counter by 1 at the end of each pass through the loop.Run node inspect index.js in the terminal to enter the debugger, and cont atthe debug prompt to advance to the breakpoint. You should seeWrapped teddy bear and added a bow! logged. In our loop body, we referencegifts[i]. Since i starts out as 0, during the first pass through the loopgifts[i] is gifts[0], which is 'teddy bear'. Continue stepping through theloop by entering cont at thedebug prompt and remember you can enter the REPLat any point to check the values of our variables, i and gifts[i].When you're done, remove the debugger and execute the code by runningnode index.js. You should see the following logged to the terminal:Wrapped teddy bear and added a bow!Wrapped drone and added a bow!Wrapped doll and added a bow!AssignmentIn the previous section, the wrapGifts() function allowed us to take any arrayof gifts and loop over them, logging our own message. Let's practice that with aslightly different idea. To complement our gift wrapping function, your task isto create a thank you card creator.Note: Recall the difference between logging and returning values from afunction. When we log information we are simply outputting text to a terminalor console. When we return data from a function we will be able to referenceand use that information elsewhere because the data is being passed out of thefunction.In index.js, build a function named writeCards() that accepts two arguments:an array of string names, and an event name. Create a for loop with a counterthat starts at 0 and increments at the end of each loop. The for loop shouldstop once it has iterated over the length of the array.As with our previous wrapGifts() function, you will create a custom messagefor each name inside the loop. Unlike that example, however, instead of simplylogging the messages to the console, you will collect them in a new array andreturn this array at the end of the function. (Refer back to the ArrayMethods lesson if you need a refresher on how we can add an element to anarray.) The overall process should be:create a new, empty array to hold the messages;iterate through the input array and, inside the loop, build out the 'thankyou' message for each name using string interpolation, then add that messageto the new array you created;after the loop finishes and all of the messages have been added to the newarray, return the new array.Here is an example of what a call to the writeCards() function might look like:writeCards([\""Charlie\"", \""Samip\"", \""Ali\""], \""birthday\"");If we were to call the function using this function call, it should produce thefollowing array as the return value:[  \""Thank you, Charlie, for the wonderful birthday gift!\"",  \""Thank you, Samip, for the wonderful birthday gift!\"",  \""Thank you, Ali, for the wonderful birthday gift!\"",];Top Tip: The debugger isn't just for debugging code — you can also use itto help you write your function! Try building the structure of the loop,putting the debugger inside the loop body. Even before you start writing thecode, you can enter the debugger's REPL and try out code until you figure outhow to create the message and add it to an array. Once it's working in theREPL, transfer the code to index.js, exit the debugger, and run the tests.The while loopRecall from the earlier lesson that the while loop is similar to a for loop,repeating an action in a loop based on a condition. Both will continue to loopuntil that condition evaluates to false. Unlike for, while only requirescondition and loop statements:while ([condition]) {  [loop body]}The initialization and iteration statements of the for loop have notdisappeared, though. In fact, we could rewrite our original for loop giftwrapping example using a while loop and achieve the exact same result:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  let i = 0; // the initialization moves OUTSIDE the body of the loop!  while (i < gifts.length) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    i++; // the iteration moves INSIDE the body of the loop!  }  return gifts;}wrapGifts(gifts);// LOG: Wrapped teddy bear and added a bow!// LOG: Wrapped drone and added a bow!// LOG: Wrapped doll and added a bow!// => [\""teddy bear\"", \""drone\"", \""doll\""]Notice that we've just moved the initialization and iteration statements —declaring the i variable outside the loop, and incrementing it inside theloop.CAUTION: When using while loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that always evaluates to true, causing an infinite loop!Using a while loop enables us to check conditions that aren't based on acounter. Take a look at the following pseudocode for an example of howwe could use while in a program for planting a garden:function plantGarden() {  let keepWorking = true;  while (keepWorking) {    chooseSeedLocation();    plantSeed();    waterSeed();    keepWorking = checkForMoreSeeds();  }}We can imagine that while we have seeds, we take the same steps over and over:choose a location for a seed; plant it; water it. Then, check if there are moreseeds. If not, do not keep working.When to Use for and whileJavaScript, like many programming languages, provides a variety of loopingoptions. Loops like for and while are actually just slight variations of thesame process. By providing a variety, we as programmers have a larger vocabularyto work with.Often, you will see while loops simply being used as an alternative to forloops:let countup = 0;while (countup < 10) {  console.log(countup++);}This is perfectly fine as an alternative way to describe:for (let countup = 0; countup < 10; countup++) {  console.log(countup);}If you're feeling a bit lost about when to use a for vs. a while loop, takea deep breath. Most of the time, a regular for loop will suffice. It's by farthe most common looping construct in JavaScript. A general heuristic forchoosing which loop to use is to first try a for loop. If that doesn't serveyour purposes, then go ahead and try a while loop. Also, remember that you canalways refer to the documentation on these loops at anytime.Just don't forget: with while, make sure you are updating the conditionon each loop so that the loop eventually terminates!AssignmentTo get more acquainted with while, your task is to write a function,countDown, that takes in any positive integer and, starting from that number,counts down to zero using console.log(). Note that this means that runningcountDown(10); would actually log 11 times:109876543210Remember the workflow:Install the dependencies using npm install.Run the tests using npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 2 and 3 often until a test passes.Repeat as needed for the remaining tests.ConclusionAfter some time programming in JavaScript, writing a for loop will come asnaturally to you as wrapping one gift after another. Just as you slowly becomecomfortable using different words and vocabulary to better express yourself,you will become more acquainted with concepts like for and while until youare able to discern the nuanced differences in usage between them.ResourcesCodecademyfor loopwhile loopMDNfor loopwhile loopLoops and iteration"
44,DarkMakerofc/QUEEN-ELISA-MD,https://github.com/DarkMakerofc/QUEEN-ELISA-MD/blob/3.9.5-V/README.md,JavaScript," ♥️ ᴀɴ ᴡʜᴀᴛsᴀᴘᴘ ᴜsᴇʀ ʙᴏᴛ ʙʏ ᴍʀ ɴɪᴍᴀ ♥️    Please Give One Star ✨ & follow for me notify my updates 💗Version -> 3.9.5Queen elisa whatsapp bot is,  Queen elisa whatsapp bot is an easy to use whatsapp robot.   |  Queen elisa whatsapp bot යනු ඔබට පහසුවෙන් බාවිතකර හැකි whatsapp robo වරයෙකි.𝗙𝗢𝗥𝗞 𝗡𝗢𝗪𝗦𝗖𝗔𝗡 𝗤𝗥 𝗖𝗢𝗗𝗘ℹ️ if there any error please infrom it support group.  | මෙහිදී යම් ගැටලුවක් ඇති උවහොත් සහය සමූහය වෙත සම්බන්ධ වන්න.𝗖𝗟𝗜𝗖𝗞 𝗧𝗢 𝗗𝗘𝗣𝗟𝗢𝗬Deploy on RailwayDeploy on KoyebDeploy on MogeniusDeploy on herokuDeploy on ReplitDeploy on UffizziWATCH YOUTUBE VIDEOS##* How To setup Github 1st stepDeploy on Heroku Video ⇓ Deploy on Railway Video ⇓ Deploy on Replit Video ⇓ DEPLOY STEPSFork This RepositoryUpdate settings.jsUplode creds.json file to sessions folderMake acount on your hostConnect Your Repository to your web host siteWatch Videos[ DEPLY ON TERMUX ]apt updateapt upgradepkg update && pkg upgradepkg install bashpkg install libwebppkg install git -ypkg install nodejs -y pkg install ffmpeg -y pkg install wgetpkg install imagemagick -ygit clone https://github.com/DarkMakerofc/Queen-Elisa-Md-V2cd Queen-Elisa-Md-V2npm installnpm start✅ New Updates◉ Fix Downloaders ( fb , insta , tiktok )◉ Fix Logo errorℹ️ How To Update 🌐 Support For Deploy THANAKS FOR USNING QUEEN ELISA 💃💖🧑‍💻 Join Queen Elisa Support Group 🧑‍💻🦄 Join Public Group 🦄 ⚠️ We are not responsible for any inconvenience caused by your mistakes!   | ඔබගේ අත්වැරදීම් නිසා සිදුවන අපහසුතාවයන් සඳහා අප වගකිවයනු නොලැබේ !TOTAL PROFILE VIEWS 🧚💗 Thanks For -thashi 💖 for Voice ,slrealtech , darkalpha and isuru thanks for helps 💖 WHATSAPP GROUPS "
45,jenkins-docs/simple-node-js-react-npm-app,https://github.com/jenkins-docs/simple-node-js-react-npm-app/blob/master/README.md,JavaScript,"simple-node-js-react-npm-appThis repository is for theBuild a Node.js and React app with npmtutorial in the Jenkins User Documentation.The repository contains a simple Node.js and React application which generatesa web page with the content \""Welcome to React\"" and is accompanied by a test tocheck that the application renders satisfactorily.The jenkins directory contains an example of the Jenkinsfile (i.e. Pipeline)you'll be creating yourself during the tutorial and the scripts subdirectorycontains shell scripts with commands that are executed when Jenkins processesthe \""Test\"" and \""Deliver\"" stages of your Pipeline."
46,Superalgos/Superalgos,https://github.com/Superalgos/Superalgos/blob/master/README.md,JavaScript,"🔸 Superalgos 1.3.0🔸 Table of ContentsMain TopicsIntroductionBefore You BeginGetting StartedInstallation OptionsInstallation for Developers and ContributorsPre-RequisitesSuperalgos Platform Client InstallationUsageUninstallGet In TouchOther ResourcesContributingLicenseAppendixWorkspace Refactoring for Version 1Pre-Requisites NotesTroubleshooting Dependencies InstallationWSL2 VSCode IDE Environment SetupRunning Superalgos on a Headless Linux Server as a Daemon🔸 IntroductionSuperalgos is not just another open-source project. We are an open and welcoming community nurtured and incentivized with the project's native Superalgos (SA) Token, building an open trading intelligence network. You will notice the difference as soon as you join the Telegram Community Group or the new Discord Server!Superalgos is a vast project. The focus of this README file is the Superalgos Platform. Please, visit the platform's page on the website for an overview of features and functionality.🔸 Before You BeginWorth noting before you start:Online Demo | To get a feel of what Superalgos is about without installing anything, take the (limited) online demo for a spin!System requirementsFAQS:Before you beginTrust and safetyTrading with SuperalgosOpen-source strategiesDocumentation | The platform features interactive and searchable documentation counting over 1500 pages. At this point, the Docs are solely available within the app.🔸 Getting StartedSuperalgos is an ever-growing ecosystem of tools and applications. This guide will walk you through the main ways to install the Superalgos Platform — the flagship application of the ecosystem.Once you install and launch the app, a series of interactive tutorials take you by the hand and walk you all around the system while you learn the basic skills required to use the interface, mine data, backtest strategies, and even run a live trading session. It is highly recommended to do all tutorials, as they are carefully crafted to make your onboarding as easy as possible.✅ NOTE: Tutorials are the absolute best way to tackle the learning curve. You should do all tutorials before you start exploring other avenues on your own.The tutorial uses Binance or Binance US as the exchange of choice. If you don't have an account with Binance or Binance US, you will still be able to follow 100% of the tutorial. When you get to the live trading section, keep going even if you don't intend to run the session. You may learn how to work with other exchanges later on. If both Binance and Binance US are blocked in your region, you will need to set up a different exchange from the get-go.🔸 Installation OptionsThere are a variety of methods to install the Superalgos Platform ranging from docker installations and packaged application installations to fine-grained technical installations ideal for developers and contributors.We will briefly describe the options available. Click the link to go to the specific README file with further instructions for the installation method of your choice.Packaged and portable apps | This option is optimized for non-technical users and is by far the easiest way to get started with Superalgos. These are not suitable for development or for contributing.Docker deployments | Docker installations are another avenue that allows for a clean installation. While a little bit more technical than the packaged applications, Docker offers the ability to install the platform in a clean and isolated environment. The standard Docker installation is not optimized for development or contributions, but some workarounds are offered.Developers and Contributors | This is the default installation for developers that wish to dive into the codebase and contribute to making Superalgos better. It is also the recommended installation for non-developers who wish to contribute improvements to the Docs, translations, design work, and so on. Instructions are available further down this same file.Raspberry Pi | Raspberry Pi installations are a great economical option for running a trading system. You will need to be comfortable with either options 2 or 3 above to proceed here.✅ ABOUT REMOTE INSTALLATIONS AND MINIMALIST HARDWARE: Remote installations and minimalist hardware — both virtual and physical — are better suited for production deployments, where the use of the GUI is minimal. We highly recommend learning Superalgos in a local installation, on a full-size PC. Mastering the system takes time, and the use of the GUI to go through in-app tutorials is crucial during the learning process. Your experience will be orders of magnitude better if you follow this advice: leave remote installations and minimalist hardware for when you are ready to start trading live.✅ EXPERIENCING ISSUES INSTALLING SUPERALGOS? If you're having trouble installing or running the app for the first time, do not open an issue. Instead, join the Support Telegram Group and follow the instructions on the pinned message to ask for help. You may also join the new Discord Server, but bear in mind that the response time tends to be longer. Online support is provided by volunteers — please provide clear information and sufficient context about the issue you are facing, and be mindful of people's time.If you wish to try the packaged and portable apps or the docker deployments, there is nothing of critical importance left for you on this README file. That said, the Get In Touch, Other Resources, Contributing, and License sections are certainly of interest.If you opt for the installation for developers and contributors, please keep on reading. Otherwise, click one of the other options above.🔸 Installation for Developers and ContributorsThis is the purest, albeit more technical, way of installing Superalgos. It has no limitations to contributing, which is highly appreciated and rewarded with SA tokens, and gives you the most freedom for custom configurations.All procedures (other than pre-requisites) are the same for Windows, Linux, or Mac OS. Raspberry Pi terminal commands have been included for ease of use. Some edge cases are covered separately, further down this README.Pre-Requisites1️⃣ Install Node.JS, Git, and ChromeYou will need the latest versions of Node JS and Git installed. You will also need a web browser to access the interface. Google Chrome is recommended because it is the most tested browser being used by the development team and power users.Follow the installation wizards to install the latest NodeJS and Git. Make sure to follow all the default and recommended settings while installing Git. If desired also install Chrome.Node.js download pageGit download pageGoogle Chrome download page✅ NOTE: If you wish to test the (partial and incomplete) TensorFlow integration, you will also need Python 3.Additional notes about installing pre-requisites on specific environments and edge cases can be found in the Pre-Requisites Notes section in the Appendix.2️⃣ Get Your Github.com Personal Access TokenYou will need to get an access token from Github.com so that you may authenticate with the service from within the app and the terminal/command line.If you don't have a Github.com account, please open one! Once you are logged in, go to the New Github Personal Access Token Page and create a new token.Make sure you give it the repo and workflow scopes. Check the clip below for clarity:Once you get the token, copy it and save it somewhere in your local machine. You will need to retrieve it later on.Superalgos Platform Client InstallationNow that you have all the pre-requisites and optional environment configurations set up, we can get to the core installation of Superalgos!There are four steps required to install Superalgos:Fork the Superalgos RepositoryClone Your ForkInstall Node DependenciesInstall Community PluginsUpdate Forked Repositories from The Superalgos Upstream RepositoriesLet's get on with it!1️⃣ Fork the Superalgos RepositoryScroll the page to the top. Find and click the Fork button to create your fork/copy of this repository.✅ NOTE: On the page that opens when you click the fork button, Github gives you the option to fork only the master branch by default. You must remove the selection so that you fork all branches instead. Play the following video for clarity.To fork Superalgos you need a Github account. If you don't have one, go ahead and create it.✅ NOTE: A Fork is required so that the setup scripts may build the app from multiple repositories, and also for your contributions to the project. The reason why Superalgos is free and open-source is that the project has set up a collective business in which all users may participate. The way to participate is to contribute to make Superalgos better. The project's native SA token is distributed among contributors.2️⃣ Clone Your ForkOnce the fork is created, you will land on the page of your fork. Copy the complete URL from your browser's address bar.✅ NOTE: Notice it is your fork you will be cloning, not the upstream repository.In your computer/laptop/server, open a command prompt or terminal. Make sure you are in a directory where you have write permissions.✅ NOTE: On most systems, the terminal will open in your user's home directory. It's better to install Superalgos at the root folder of any of your drives, or at least in a path that is not too long. Some systems may experience issues with long paths.Clone the git repository using the command:git clone <URL of your Superalgos fork>For example, if your Github username is John, the command will look like this:git clone https://github.com/John/SuperalgosThis creates the Superalgos folder in the current directory, which contains the whole installation.3️⃣ Install Node DependenciesAfter the Superalgos directory has been installed, you need to set up the necessary node dependencies. In the same command prompt or terminal you just used, type the following:cd SuperalgosThat should take you inside the Superalgos folder created by the git clone command earlier. The node setup command installs the dependencies (notice there are a few options you may use).node setupAvailable Options:node setup <options>OptionDescriptionshortcutsUse this option to create desktop shortcuts. Otherwise, you will launch the app from the command line/terminal.tensorflowUse this option to include the TensorFlow dependencies, only if you intend to test the (partial and incomplete) TensorFlow integration.If you experience any issues installing dependencies, check the Troubleshooting Dependencies Installation section in the Appendix below.4️⃣ Install Community PluginsBefore using the software, you will need to install the plugins built by the community. To do so, just run this command from the Superalgos main folder:node setupPlugins <Your-Github-Username> <Your-Github-Personal-Access-Token>For example:node setupPlugins John ghz_2pBD4Sas0iYtwQGPjTq1Xlm3Ot4KpH3RLcr5✅ NOTE: This is the token you created on earlier steps!`This script is going to fork all Community Plugins repositories into your own Github account, and then it will clone each of these repositories into your local Superalgos/Plugins folder. The process is designed in a way that if someday a new type of plugin is added, you just need to run this command again and it will fork the new repo and clone it. This script will also find any missing forks needed and clone them too. You are safe running this script whenever you think is good.✅ NOTE: If you ever have issues with your Plugins repos, you can delete individual folders inside Superalgos/Plugins and run this script to fix the problems for you. Also, if you have any issues with any of your plugin forks at your Github account, you can delete the offending fork and run this script again to fix the problem.Congratulations! Your setup is complete. Now you may finally run the app for the first time. Please, follow the usage instructions below!5️⃣ Update Forked Repositories from The Superalgos Upstream RepositoriesPrerequisites:\""node setup\"" and \""node setupPlugins\"" commands must be executed beforehand.node updateGithubRepos🔸 UsagePartner ExchangesThe Superalgos Platform is exchange-agnostic, but the project offers partner exchanges custom support and a curated onboarding experience for their customers. In turn, partner exchanges offer preferential trading fees and, in some cases, other benefits to Superalgos users.Find more information on how to get the benefits, join the corresponding Telegram group.Partner ExchangeBenefitsTelegram GroupAscendEXVIP 2 (7.5 bip Maker, 8.5 bip Taker)https://t.me/superalgosascendexPartner exchanges have custom workspaces for the onboarding of their users.Run the Client and GUIUsing the shortcuts✅ NOTE: This method launches the platform with the fallback workspace only. If you wish to launch with a partner exchange workspace, use the Command Line method instead.If you ran node setup shortcuts while installing dependencies, then you should have a desktop icon that you can double click to launch the Superalgos application. A terminal window will show the server is running, and a browser window will open with the GUI.Using the Command LineTo launch the platform with one of the Partner Exchanges custom workspaces, go to the Superalgos directory and run the command as per the following table. You will learn about other options further down this page.Partner ExchangeLaunch CommandAscendEXnode platform Foundations 01-Onboarding-AscendEX✅ NOTE ABOUT ASCENDEX: An issue with AscendEX API may prevent the Welcome to Superalgos tutorial to run as expected. We suggest you use the fallback/default workspace in the meantime. The issue was reported to the exchange and is currently being investigated.To run Superalgos with the default/fallback workspace, go to the Superalgos directory/folder and run this command:node platformOptions usage:node platform <options> <project> <workspace>OptionDescriptionminMemoRun with minimal memory footprint. This is critical for running on platforms with 8GB of RAM or less, like a Raspberry Pi.noBrowserDo not open the GUI in a browser. This is useful on headless servers where a UI is not available.To load a specific workspace on launch, add any option you may require, then the project, then the workspace. For example, to load the Blank-Template workspace of the Foundations project with no options:node platform Foundations Blank-TemplateThe Client will run on your terminal and the GUI will launch on your default browser. If Chrome/Safari is not your default browser, copy the URL, close the browser, open Chrome/Safari, and paste the URL. Be patient... it takes a few seconds to fully load the GUI.Usage NotesWe are testing the UI on Google Chrome and Safari on macOS only. It may work on other browsers as well — or not. If you are running on a different browser and ever need support, make sure you mention that fact upfront, or even better, try on Chrome/Safari first.✅ TIP: If your computer has 8 GB of RAM or less, use node platform minMemo to run the system with minimal RAM requirements.🔸 UninstallSuperalgos writes nothing outside of the Superalgos folder other than shortcut files. To quickly remove the shortcut files, open a terminal or command prompt, navigate to your main Superalgos directory, and type the following command:node uninstallThen simply delete the Superalgos folder to completely remove the application.🔸 Get In TouchWe just opened a brand new Discord server for Support and the Community.We also meet on several Telegram groups, where it all started!⚠️ BEWARE OF IMPERSONATORS — SCAMMERS ARE LURKING! Superalgos Admins, the Founding Team, and Community Mods will never contact you directly unless you contact them first. We will never ask you for API keys, coins, or cash. We will never ask you to trust us in any way. Our Community Safety Policy explains why. In short, we want to make it clear that if someone contacts you directly claiming to work with or for the project, it is a scam. Please report scammers in the Community group so that they may be banned and to increase awareness of the problem, but also block them and report them to Telegram if the option is available.Via Telegram: online support through our Superalgos Support Group.In-App Integrated Documentation: Superalgos features interactive documentation built into the system.Video Tutorials: subscribe to the Superalgos YouTube Channel.In-App Tutorials: there are many interactive tutorials you may do and learn from.🔸 Other ResourcesWeb SiteFor an overview of what Superalgos can do for you, check the Superalgos Website.List of community resources featuring written, audiovisual, and interactive content.TelegramFor official news, join the Superalgos Announcements Channel.Meet other users in the Superalgos Telegram Community Group.Meet developers in the Superalgos Telegram Developer's Group.Users meet in other topic-specific Telegram Groups. There's a complete list of groups on the website.Blog: find official announcements and various articles on the Superalgos Blog.Twitter: to stay in the loop, follow Superalgos on Twitter. Help us spread the word!Facebook: follow Superalgos on Facebook.🔸 ContributingSuperalgos is a Community Project built by users for users. Learn how you may contribute.🔸 LicenseSuperalgos is open-source software released under Apache License 2.0.APPENDIX🔸 Workspace Refactoring for Version 1Version 1.2.0 carries with it a reorganization of the codebase where several projects were extracted from Foundations: Data-Mining, Algorithmic Trading, Machine Learning, and Community Plugins.This means that these projects can now have a project leader and a team working on them.To get your custom workspace upgraded to be compatible with beta 13 you will need to make a few changes:Project nodes need to be present in the workspace for things to work. The presence of the node of a project, somehow, enables that project features at a workspace. Go to the workspace node and click add missing projects.At the Plugins hierarchy, new guys appear, each one with their own type of plugin. Meaning that every workspace needs to be manually fixed because, currently, all plugins are loaded from the Foundations node there. The fix is easy though, it takes 2 - 3 min to delete the child nodes from the Foundation node, and add the same plugins from the project they belong to now.🔸 Pre-Requisites NotesWindows Pre-RequisitesWhen following the windows installer for Git, it is very important to make sure that you follow all the recommended and default settings. One of the most important one of these can be found in the screenshot below:Optional Windows Pre-RequisitesFor windows users interested in testing the (partial and incomplete) TensorFlow integration, you need to install Python.install Python 3.9.Github Desktop is a helpful tool to manage Git conflicts and issues. You can install it using the following link.GitHub Desktop download page. Click the \""Download for Windows\"" button and follow the wizard to install after the download completes.Mac OS Pre-Requisites Homebrew InstallationRather than manually installing NodeJS, Git, and Python, Homebrew can be used to install the pre-requisites with minimal effort on Mac OS.  After you clone the repository, change the directory to the Superalgos base and install the requirements using Homebrew.There are two ways to use Homebrew.  The first is to type:brew install git node npm python@3.9The second is to use the Brewfile included in the code repository. After downloading, run this command in the same directory where the Brewfile resides:brew bundle✅ NOTE: You can use Safari or Google Chrome as your default browser. If you run into a bug in Safari, you will be asked to reproduce it in Chrome as the development team uses Chrome.Linux (e.g. Ubuntu, or Raspberry Pi running Raspberry Pi OS/Raspbian) Pre-RequisitesFollow the Node.js package manager install instructions for your distribution to ensure you are getting the latest version of Node.js. Many distributions only maintain an older version in their default repositories.✅ NOTE: Python 3 is only required for testing the (partial and incomplete) TensorFlow integration.curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash - && sudo apt-get \\install -y \\nodejs npm git python3You may verify the installed versions with this command string:node \\-v && npm \\-v && git --versionIf you are running headless (i.e. as a server without a monitor attached) then you do not need to install a web browser and you can follow the tutorial for information on connecting remotely to the server.Alternatively, you can use https://github.com/nymea/berrylan to set up a tool for using Bluetooth to quickly assign WPA2 access on a WLAN on a Raspbian based Distro. Nymea also has tools for automation of IoT products to allow setting up SuperAlgos as a timed function without needing to learn how to code.✅ IMPORTANT:If you are having node version errors there is a chance you may need to read the information in the Debian Pre-Requisites section and use NVM to handle node versions. This is due to some distributions having out-of-date repositories in the package manager lists.Debian or Debian WSL/WSL2 Pre-Requisites(NVM & NPM Fix)Debian distributions have been found to have some additional issues with installing the right version of NodeJS needed to run Superalgos. What follows are the steps to fix this issue.For this to work you will need to [use NVM to install and control node] (https://github.com/nvm-sh/nvm)You will need to remove any versions of Node already installed on Debian due to the repositories currently being out of date.This is necessary before proceeding.sudo apt remove nodejs -ysudo apt \\update && apt upgrade \\-y sudo apt \\install npm -ysudo apt \\autoremove -y && \\sudo apt autoclean -ysudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bashWithout running the next 3 commands, you will need to logout off your shell/WSL2 user account before you are to use NVMexport NVM_DIR=\""$HOME/.nvm\""[ -s \""$NVM_DIR/nvm.sh\"" ] && \\. \""$NVM_DIR/nvm.sh\""[ -s \""$NVM_DIR/bash_completion\"" ] && \\. \""$NVM_DIR/bash_completion\""Make sure things are up to date and packages not needed are removedsudo apt update &&\\sudo apt upgrade && \\apt autoremove -ycd Superalgosinto the directory of SuperAlgosand run the install commands as follows:nvm run node <command string/var>✅ NOTE: This is for node.js/node only, npm should work fine with Debian.🔸 Troubleshooting Dependencies InstallationEdge Cases✅ NOTE FOR WINDOWS USERS INSTALLING TENSORFLOW DEPENDENCIES: You may get an error at the end of the setup process. If you do, please follow the instructions following the error message.✅ NOTE FOR USERS INSTALLING MULTIPLE INSTANCES OF SUPERALGOS ON THE SAME MACHINE: To avoid name conflicts between shortcuts, make sure to rename each Superalgos directory before running node setup shortcuts.✅ NOTE FOR USERS INSTALLING ON LINUX: If after running node setup you are prompted to address issues by running 'npm audit fix' ignore this step.✅ NOTE FOR USERS INSTALLING ON COMPUTERS WITH 1GB OF RAM Superalgos has just about outgrown computers with only 1GB of RAM. For Instance a Raspberry Pi 3 does run the Getting Started Tutorials, but over time (Into 2023) this may significantly slow and could even stop. If still wish to use a computer with only 1GB of RAM (you have been warned), you will need to use version 16.x of Node.js as version 18.x needs well over 1 GB of RAM during setup.General TroubleshootingIf you are having difficulty running the node setup command here are a few common issues that may be getting in the way.Check the version of node and npm you have installed. Make sure that you are running an updated version of node greater than version 16.6 and npm greater than version 5. You can check which version you have by typing node -v and npm -v into a command prompt or terminal. If your version numbers are below these, you can update your installation by following the instructions outlined in the \""Node JS Installation\"" step above.If you are installing Superalgos in an administratively protected directory you will need to do one of the following:For Windows start your command prompt as an administrator.For Linux and Mac Systems make sure to add the sudo command to node setup.  This will look like sudo node setup.For Windows it is important that you have C:\\Windows\\System32 added to your global PATH.  For instructions on how to do this google \""add to the path on Windows 10.\""If you are getting a lot of 'unexpected' errors during node setup, try resetting npm using the command npm ci before running node setup again.Enabling Desktop Shortcut in UbuntuThe majority of shortcuts that are installed will work out of the box. Desktop shortcuts on Ubuntu, however, require a few additional steps to set up. First, desktop icons need to be enabled within the Tweaks app.Check if Tweaks is installed.If not go to Ubuntu Software.Install Tweaks.Open Tweaks.Under extensions turn on Desktop Icons✅ TIP: If you do not see the desktop shortcut appear right away you may need to restart your computer.Finally, you will need to enable the desktop shortcut. Right-click Superalgos.desktop and select Allow Launching.Now both launcher and desktop shortcuts will launch Superalgos like any other program on your computer.🔸 WSL2 VSCode IDE Environment SetupVSCode is a popular IDE. This short section covers some helpful tips for setting up the IDE's development environment.There are a few things that need to be configured to obtain full functionality from VSCode. These configurations will make it possible to run notebooks for ML/AI algos and turn VSCode and Windows into a development bench for working with Superalgos.On windows:First, you need to install WSL and WSL2 https://docs.microsoft.com/en-us/windows/wsl/install then reboot if prompted.You may want to review the Docker WSL2 Backend information for VSCode as well before proceeding. https://aka.ms/vscode-remote/containers/docker-wsl2Install Debian or Ubuntu from the Windows Store, Setup the VM as instructed.On windows and Debian:To make managing these WSL instances a lot easier, we will now move to installing VSCode + Tools to allow for Dockerizing and rapidly deploying as well as editing and managing test/usage cases of Superalgos edit and forks you create and contribute.Install VSCode https://code.visualstudio.com/docs/?dv=win64userInstall the remote container and remote docker plugins/extensions for Visual Studio Code https://code.visualstudio.com/docs/remote/containers#_installationYou may want to spend time reading the specifics of this documentation on their website.When prompted install shell shortcuts for right-click options, this way you can open Superalgos easy inside of VSCode.✅ IMPORTANT:As mentioned above, you need to remove node.js/node from your system and install NVM if you are using Debian.Please refer to the information above for properly setting up node.js and npm on Debian systems with complications regarding versions of node.Once the install finishes you can now use VSCode as an interactive IDE/Shell to access SuperAlgos, run Dockers for working with Superalgos, and more.🔸 Running Superalgos on a Headless Linux Server as a DaemonIf you're running Superalgos on a headless Linux server like a Raspberry Pi, you might want to run it as a daemon so it isn't attached to your current login session. The easiest, most standard way to go about this is probably using systemd. Most Linux distributions use it as the default init system/service manager.Create a superalgos.service file looking like this (change <user> to your user name and /path/to/Superalgos to your Superalgos folder, for instance /home/John/Superalgos):[Unit]Description=Superalgos Platform Client[Service]Type=simpleUser=<user>WorkingDirectory=/path/to/SuperalgosExecStart=/usr/bin/node platform minMemo noBrowser[Install]WantedBy=multi-user.targetThere is no need to run Superalgos as root so we're running it as a user. The minMemo option assumes you're running on a small machine like a Raspberry Pi, while noBrowser makes sense for running daemonized. Now, you'll need to move the file to /etc/systemd/system/ for it to be recognized. You'll need then to enable and start the service.sudo mv superalgos.service /etc/systemd/systemsudo systemctl daemon-reloadsudo systemctl enable superalgossudo systemctl start superalgosTo check the service statussudo systemctl status superalgosTo stop the service:sudo systemctl stop superalgossudo systemctl disable superalgosTo see the output of Superalgos, use:journalctl -u superalgosor to follow the output with -f:journalctl -u superalgos -f"
47,photonstorm/phaser,https://github.com/photonstorm/phaser/blob/master/README.md,JavaScript,"Phaser - HTML5 Game FrameworkPhaser is a fast, free, and fun open source HTML5 game framework that offers WebGL and Canvas rendering across desktop and mobile web browsers. Games can be compiled to iOS, Android and native apps by using 3rd party tools. You can use JavaScript or TypeScript for development.Along with the fantastic open source community, Phaser is actively developed and maintained by Photon Storm. As a result of rapid support, and a developer friendly API, Phaser is currently one of the most starred game frameworks on GitHub.Thousands of developers from indie and multi-national digital agencies, and universities worldwide use Phaser. Take a look at their incredible games in our showcase video:Visit: The Phaser website and follow on Phaser TwitterPlay: Some of the amazing games #madewithphaserLearn: API Docs, Support Forum and StackOverflowCode: 2000+ Examples (source available in this repo)Read: The Phaser World NewsletterDiscord: Join us on DiscordExtend: With Phaser PluginsBe awesome: Support the future of PhaserGrab the source and join the fun!12th April 2023After 24 Beta releases, over 2000 updated examples and a year of insanely hard work we're thrilled to finally announce the release of Phaser 3.60!Today is also the 10th birthday of Phaser, so it's a very special day for us. 10 years ago we released the v0.5 version on the unsuspecting public and it's no exaggeration to say that it changed both our lives and the face of HTML5 game development forever.Phaser 3.60 is our biggest release ever. Eclipsing any version before it. Some of the headline features include:Built-in Special FX - We now bundle 14 highly flexible special effects into the core, which are available to all Game Objects. These include Glow, Blur, Bloom, Bokeh, Barrel, Wipe, Pixelate, Vignette, Displacement and more.Nine-Slice Game Object - A new native Nine Slice Game Object. A Nine Slice Game Object allows you to display a texture-based object that can be stretched both horizontally and vertically, but that retains fixed-sized corners. The dimensions of the corners are set via the parameters to the class. When you resize a Nine Slice Game Object only the middle sections of the texture stretch. This is extremely useful for UI and button-like elements, where you need them to expand to accommodate the content without distorting the texture.Plane Game Object - A new native Plane Game Object. The Plane Game Object is a helper class that takes the Mesh Game Object and extends it, allowing for fast and easy creation of Planes. A Plane is a one-sided grid of cells, where you specify the number of cells in each dimension. The Plane can have a texture that is either repeated (tiled) across each cell, or applied to the full Plane.New Tween System - We've reworked the entire Tween system to make it both more efficient, more powerful and easier for you to extend. New in this version are perfectly sequential Tween Chains, the ability to tween Sprite textures, much better garbage-collection and auto-destruction of expired tweens and lots more.Compressed Texture Support - Phaser 3.60 contains support for Compressed Textures. It can parse both KTX and PVR containers and within those has support for the following formats: ETC, ETC1, ATC, ASTC, BPTC, RGTC, PVRTC, S3TC and S3TCSRB. Compressed Textures differ from normal textures in that their structure is optimized for fast GPU data reads and lower memory consumption. Popular tools that can create compressed textures include PVRTexTool, ASTC Encoder and Texture Packer.Matter Physics v0.19 - We have updated the version of Matter Physics to the latest v0.18 release. This is a big jump and brings with it quite a few internal changes to Matter, as well as a ~40% performance improvement.There are also hundreds of updates and bug fixes across the entire codebase.We have created a brand new Change Log just for v3.60. Previously, we used to put all of the changes in a single file, but this felt impractical. So we've split it all into sections now, so you can easily see what's new and updated.v3.60 is available now from the Releases page. You can also download it from npm:npm i phaserYou'll find up to date TypeScript defs that align with this release in the types folder of this repository.If you find any problems please report them in GitHub issues.As usual, I'd like to send my thanks to the Phaser community for their help in both reporting issues and submitting pull requests to fix them. So, please do spend some time digging through the Change Log. I assure you, it's worth while 🙂I'd like to send a massive thank-you to everyone who supports Phaser on Patreon, GitHub Sponsors and our corporate backers. Your continued funding allows me to keep working on Phaser full-time and this monster of a new release is the very real result of that. If you've ever considered becoming a backer, now is the perfect time!If you'd like to stay abreast of developments then I'm now publishing them to the Phaser Patreon. Here you can find the latest development reports including the concepts behind Phaser 4.You can also follow Phaser on Twitter and chat with fellow Phaser devs in our Discord.Phaser 3 wouldn't have been possible without the fantastic support of the community and Patreon. Thank you to everyone who supports our work, who shares our belief in the future of HTML5 gaming, and Phaser's role in that.Happy coding everyone!Cheers,Rich - @photonstormBecause Phaser is an open source project, we cannot charge for it in the same way as traditional retail software. What's more, we don't ever want to. After all, it's built on, and was born from, open web standards. It's part of our manifesto that the core framework will always be free, even if you use it commercially, as many of you do.You may not realize it, but because of this, we rely 100% on community backing to fund development.Those funds allow Phaser to improve, and when it improves, everyone involved benefits. Your support helps secure a constant cycle of updates, fixes, new features and planning for the future.We use Patreon to manage the backing and you can support Phaser from $1 per month. The amount you pledge is entirely up to you and can be changed as often as you like. Patreon renews monthly, just like Netflix. You can, of course, cancel at any point. Tears will be shed on this end, but that's not your concern.You can also support us by using crypto currencies. The Phaser wallet addresses are:Ethereum: 0x6a716A122Ad186ECE865C55D16c1D361f1B13724BSC / AVAX / Polygon: 0x94aC3F640b8749AbD1d44f29A62ffeB32CA34628Extra special thanks to the following companies whose support makes Phaser possible:HathoraCerebral FixMoPubFacebookGame DistributionGameCommerceMozillaTexture PackerTwilioQuestPokiCrazyGamesLaggedNakamaPhaser 3 is available via GitHub, npm and CDNs:Clone the git repository via https, ssh or with the GitHub Windows or Mac clients.Download as zipDownload the build files: phaser.js and phaser.min.jsNPMInstall via npm:npm install phaserCDNPhaser is on jsDelivr which is a \""super-fast CDN for developers\"". Include the following in your html:<script src=\""//cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.js\""></script>or the minified version:<script src=\""//cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.min.js\""></script>API DocumentationGo to https://newdocs.phaser.io/ to read the docs online using our brand new interface. Use the links to navigate the namespaces, classes and Game Objects lists and also use the new search box.The documentation for Phaser 3 is an on-going project. Please help us by contributing improved docs and examples.TypeScript DefinitionsThe TypeScript definitions can be found inside the types folder. They are also referenced in the types entry in package.json.Depending on your project, you may need to add the following to your tsconfig.json file:\""lib\"": [\""es6\"", \""dom\"", \""dom.iterable\"", \""scripthost\""],\""typeRoots\"": [\""./node_modules/phaser/types\""],\""types\"": [\""Phaser\""]We recently updated our Phaser 3 TypeScript Project Template, which you can use to get started with. This now uses TypeScript 5 and Phaser v3.60.The TS defs are automatically generated from the JSDoc comments found in the Phaser source code. If you wish to help refine them then you must edit the Phaser JSDoc blocks directly, not the defs file. You can find more details about the parser we built in the scripts/tsgen folder.WebpackWe use Webpack to build Phaser and we take advantage of its conditional build flag feature to handle renderer swapping. If you wish to use Webpack with Phaser then please use our Phaser 3 Project Template as it's already set-up to handle the build conditions Phaser needs. Recent changes to our build steps mean you should now be able to use any other packager, like Parcel, without any config changes.LicensePhaser is released under the MIT License.Tutorials and guides on Phaser 3 development are being published every week.Getting Started with Phaser 3 (useful if you are completely new to Phaser)Making your first Phaser 3 GameThe Complete Phaser 3 Game Development course contains over 15 hours of videos covering all kinds of important topics.Plus, there are over 700 Phaser tutorials listed on the official website.We've 3 tutorials related specifically to creating Facebook Instant Games with Phaser:Getting Started with Facebook Instant GamesFacebook Instant Games Leaderboards TutorialDisplaying Ads in your Instant GamesSource Code ExamplesDuring our development of Phaser 3, we created hundreds of examples with the full source code and assets ready available. These examples can be browsed on the Phaser 3 Labs, or clone the examples repo. We are constantly adding to and refining these examples.HathoraHathora Cloud is a scalable hosting platform for online multiplayer games. You upload your server project using the Hathora console or CLI, and then dynamically create server instances in 10+ regions around the world. You get charged only for the duration of active matches/sessions. It's perfect for nodejs servers handling WebSocket connections, and takes care of SSL termination (for wss) and DDoS protection.They have also published a brand-new tutorial on creating a scalable multiplayer Phaser game. If you think this could be useful for your hosting needs, join their Discord server to get in touch.Huge list of Phaser 3 PluginsSuper community member RexRainbow has been publishing Phaser 3 content for years, building up an impressive catalogue in that time. You'll find loads of plugins, from UI controls such as text input boxes, to Firebase support, Finite State Machines and lots more. As well as the plugins there is also a comprehensive set of 'Notes' about Phaser 3, going into great detail about how the various systems work. It's an invaluable resource and well worth checking out at https://rexrainbow.github.ioCreate Your First Phaser 3 ExampleCreate an index.html page locally and paste the following code into it:<!DOCTYPE html><html><head>    <script src=\""https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser-arcade-physics.min.js\""></script> </head><body>    <script></script></body></html>This is a standard empty webpage. You'll notice there's a script tag that is pulling in a build of Phaser 3, but otherwise this webpage doesn't do anything yet. Now let's set-up the game config. Paste the following between the <script></script> tags:const config = {    type: Phaser.AUTO,    width: 800,    height: 600,    physics: {        default: 'arcade',        arcade: {            gravity: { y: 200 }        }    },    scene: Example};const game = new Phaser.Game(config);config is a pretty standard Phaser 3 Game Configuration object. We tell config to use the WebGL renderer if it can, set the canvas to a size of 800 x 600 pixels, enable Arcade Physics, and finally we tell it to use the Example Scene. This hasn't been implemented yet, so if you run this JavaScript code now you will have an error. Add the following above the config:class Example extends Phaser.Scene{    constructor ()    {        super();    }    preload ()    {        this.load.setBaseURL('https://labs.phaser.io');        this.load.image('sky', 'assets/skies/space3.png');        this.load.image('logo', 'assets/sprites/phaser3-logo.png');        this.load.image('red', 'assets/particles/red.png');    }    create ()    {    }}Here we create a Scene called Example. We've given it 2 functions. The preload function is where you load assets into your game. In preload, we set the Base URL to be the Phaser server and load 3 PNG files.The create function is empty, so it's time to fill it in:create (){    this.add.image(400, 300, 'sky');    const particles = this.add.particles(0, 0, 'red', {        speed: 100,        scale: { start: 1, end: 0 },        blendMode: 'ADD'    });    const logo = this.physics.add.image(400, 100, 'logo');    logo.setVelocity(100, 200);    logo.setBounce(1, 1);    logo.setCollideWorldBounds(true);    particles.startFollow(logo);}Here we add a sky image into the game and create a Particle Emitter. The scale value means that the particles will initially be large and will shrink to nothing as their lifespan progresses.After creating the emitter, we add a logo image called logo. Since logo is a Physics Image, logo is given a physics body by default. We set some properties for logo: velocity, bounce (or restitution), and collision with the world bounds. These properties will make our logo bounce around the screen. Finally, we tell the particle emitter to follow the logo - so as the logo moves, the particles will flow from it.Run it in your browser and you'll see the following:(Got an error? Here's the full code)This is a tiny example, and there are hundreds more for you to explore, but hopefully it shows how expressive and quick Phaser is to use. With just a few easily readable lines of code, we've got something pretty impressive up on screen!Ourcade have published two great Phaser 3 books. They'll take you from getting set-up, through to finishing your first game using modern JavaScript or TypeScript and they're both completely free! They also publish a huge range of quality tutorials and videos, so be sure to check out their site every week.Learn the secrets of HTML5 game development with Phaser 3.50 while building a cross platform endless runner game. Designed both for beginners and skilled programmers, the course guides you from an empty folder introducing the bare bones of JavaScript to advanced Phaser 3 features. Find out more details about HTML5 Cross Platform Game Development with Phaser.There are both plain and minified compiled versions of Phaser in the dist folder of the repository. The plain version is for use during development, and the minified version is for production use. You can and should also create your own builds.Custom BuildsPhaser 3 is built using Webpack and we take advantage of the Webpack definePlugin feature to allow for conditional building of the Canvas and WebGL renderers and extra plugins. You can custom the build process to only include the features you require. Doing so can cut the main build file size down to just 70KB.Read our comprehensive guide on creating Custom Builds of Phaser 3 for full details.Building from SourceIf you wish to build Phaser 3 from source, ensure you have the required packages by cloning the repository and then running npm install on your source directory.You can then run webpack to create a development build in the build folder which includes source maps for local testing. You can also npm run dist to create a minified packaged build in the dist folder. For a list of all commands available use npm run help.Change LogDue to the increasing size of our Change Logs we have now split them up, one version per folder.v3.60.0 Change Logv3.0.0 to v3.55.2. Change LogsWe've organized the Change Logs into commonly themed sections to make it more digestible, but we appreciate there is a lot in there. Please don't feel overwhelmed! If you need clarification about something, join us on the Phaser Discord and ask.The Contributors Guide contains full details on how to help with Phaser development. The main points are:Found a bug? Report it on GitHub Issues and include a code sample. Please state which version of Phaser you are using! This is vitally important.Before submitting a Pull Request run your code through ES Lint using our config and respect our Editor Config.Before contributing read the code of conduct.Written something cool in Phaser? Please tell us about it in the forum, or email support@phaser.ioPhaser is a Photon Storm production.Created by Richard Davey. Powered by coffee, anime, pixels and love.The Phaser logo and characters are © 2011 - 2023 Photon Storm Limited.All rights reserved.\""Above all, video games are meant to be just one thing: fun. Fun for everyone.\"" - Satoru Iwata"
48,learn-co-curriculum/phase-0-css-rainbow-lab,https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/blob/master/README.md,JavaScript,"My Little RainbowLearning GoalsReview HTML basicsReview CSS basicsSpecify hexadecimal color values with CSSIntroductionIn this lab, we're going to make a rainbow with HTML <div> elements. And whilewe do it we're going to learn about HTML elements, CSS styling, CSS selectors,how color works in CSS and importing style sheets.Before we start, here's some basic info about HTML and CSS. Skip toMake a CSS Rainbow if you feel comfortable enough with HTMLand CSS.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you work to see your test progress.Review HTML BasicsHyper Text Markup Language, or HTML, is a way to structure a document withdifferent parts. Each section of content is marked by elements (using tags).Each element has its own special meaning that the browser uses to render theHTML document. Use this cheat sheet on HTMLelements for guidance.ElementsAll begin with < and end with >, e.g., <div> (this last part is a tag).Most have an opening tag such as <div> and a closing tag </div>.The / indicates to the browser that that tag is a closing tag.The element is everything between the tags and the tags themselves.Some tags are self-closing like the line break element <br>.Elements can have IDs and classes to aid the browser in finding specific tags.Must begin with a letter A-Z or a-z.Can be followed by: letters (A-Za-z), digits (0-9), hyphens (-), andunderscores (_).IDs can only be used once per page. E.g.:<div id=\""this-special-div\""></div>.Classes can be used as many times as you want. E.g.:<div class=\""a-less-special-div\""></div>.Elements nested inside other elements are called children.Children inherit attributes from their parents.Don't nest everything.Elements next to one another are siblings.Siblings do not inherit from one another but are important for selecting inCSS.Here is an example of element relations:<div>  <!-- the parent element -->  <p></p>  <!-- the first sibling element/the first child-->  <p></p>  <!-- the second sibling element/the second child --></div>Review CSS BasicsCascading Style Sheets, or CSS, is a language created to style HTML documents bytelling the browser how specific elements should look. CSS does this byselecting elements based on their tag, ids, classes, or all of the above. Thereason for CSS is the separation of concerns. We want HTML to focus on thestructure and meaning of our content. We let CSS worry about how to make thatinformation appear clear and engaging.CSS selectorsThey select elements to assign them styles.* (wildcard) selects every element.An element, such as div, will select all elements of that type.They select an id like #some-idClasses are selected like this .some-classTo select all children elements of a parent do something like this div pTo select multiple different elements separate them by commas like thisdiv, p, aHere's an example of CSS styling:* {  color: red; /* color in CSS refers to font color */} /* all elements will have red font */ Make a CSS RainbowIn the directory, you'll see three files: index.html, main.css, and thisfile, README.md. Open index.html.If everything is working correctly, you should see a white page.Good job!Making the Divs VisibleIf you look at the file in your text editor or use the inspector, you'll seethat the basic HTML structure is present in index.html. So why can't we seeanything?Well, divs are structural elements. They're used to invisibly group othervisible elements together. But the style sheet that would tell our divs to dosomething a little different hasn't been linked yet!Let's fix this by adding the style sheet to the head:<head>  <title>My Little Rainbow</title>  <link rel=\""stylesheet\"" type=\""text/css\"" href=\""./main.css\"" /></head>Link is a self-closing tag that will create a relative path with the hrefattribute. A relative path ./main.css means the browser knows that themain.css file is in the same place as index.html. The head is a hiddenpart of the page that tells the browser where to find any other files it needsto display the page correctly, the title for the tab, and any other possibleimportant information.Now if you refresh the index.html page in your browser you should see aperfectly solid-black rainbow.We got the basic outline because in the main.css all the div elements wereselected and given a border whose color is #000, \""black.\"" While we could setborder-top-color: red;, we will have more colors available if we define colorswithout words.Instead of red, green, or the exotic tomato, professionals prefer a set ofnumbers with a base pair of 16 rather than a base pair of 10 like we use everyday. These numbers are called \""hexadecimal\"" and we can use them to make a widerange of colors.Some Stuff You Should Know About Hex Colors (and Web Colors in General)Hex colors begin with # and are followed by, generally, 6 numbers, but some ofthese numbers are actually letters. The lowest single digit number in hex is 0and the highest single digit number is f. This table might help to visualizewhat we mean by this.Decimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16Hexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10Hex colors work by creating Red, Green, Blue (RGB) values. Traditional RGBcolors are on a scale of 0 to 255 for each of the three colors in the spectrum.Hex colors are considered true colors since they can represent ~16 millioncolors—but your eye can only see 10 million of those. So #000000 translates toblack since 0 reds, 0 green, 0 blues represents the absence of all colors, and#ffffff makes white since 255 reds, 255 greens, and 255 blues is the maximumof each of the colors.Hex colors can be shortened to just three numbers when each RGB value is thesame for each digit. So #11dd99 can be written as #1d9.Coloring the RainbowTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: #f00;Orange: #ffa500; Yellow: #ff0; Green: #00bc3f; Blue: #06f; Indigo:#8a2be2; Violet: #d300c9All we have to do next is select each div individually and apply each of thosecolors. That is a perfect use for ids since they're meant to style one specificelement only. We need to add an id for each div so a logical name for each divwould be the color that they have to be. It could be something random, but goodnames make for semantic code. So let's give the outermost div the id red.<div id=\""red\"">...</div>To give that id some CSS attributes we'll go into main.css, select the id, andmark its color as red.#red {  /* this selects any elements with the red id */  border-top-color: #f00;}To make sure the rainbow isn't so monochromatic you now need to repeat the abovesteps with the final six colors, and when you do you should have a complete,colorful rainbow.Moving OnWhen you're done with this lab type npm test to confirm you've passed all thetests.ConclusionAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. Welinked our style sheet to our HTML page and added ids to our HTML elements. Wethen created CSS rules, using hexadecimal color values, for those elements todisplay all the colors on our completed HTML page."
49,learn-co-curriculum/phase-0-html-link-tag-with-href,https://github.com/learn-co-curriculum/phase-0-html-link-tag-with-href/blob/master/README.md,JavaScript,"Create a Link Using the href AttributeLearning GoalsWrite an a tag to create a linkIntroductionWe've got our HTML tags, and we've got our HTML tag attributes. How do we usethem together? We can figure it out by exploring the a tag and creating alink.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Write an a Tag to Create a LinkOpen index.html in your text editor. Add an a tag with the inner text (thetext between the <a> tag and the </a> tag) of Flatiron School anywhere inthe file. Then set the href attribute of your new link element tohttps://flatironschool.com.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Don't forget to open the index.html file in your browser so you can see thechanges as you go.ConclusionHere we saw how an attribute helps the a tag do its job, which is to link toanother location. Now we can go on to explore some additional HTML tags.ResourcesMozilla Developer Network: HTML <a> Tag"
50,learn-co-curriculum/phase-0-pac-3-what-is-a-test,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/blob/master/README.md,JavaScript,"Testing with JavaScriptLearning GoalsLearn about testing in JavaScriptIntroductionMany of the labs you will complete in this program use tests. Passing the testsverifies that the code you write behaves as desired and produces the expectedresults. But writing tests is also a way to provide specifics about exactly howthe code should function. In a common development strategy known as test-drivendevelopment (or TDD), programmers first write the test for a specificfunction of the code then write the code to make the tests pass. TDD isconsidered the most reliable methodology for delivering quality code.What this means is that the results of running the tests will be an importanttool in figuring out how to get those tests passing. Code testing can feel likean abstract concept at first, but it's worth starting to learn how it works.When you're having difficulty passing a test, being able to read and understandthe test output — and the tests themselves — can be an invaluable skill.Getting StartedThe lesson is set up as a code-along, so you'll first need to fork and cloneit to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. If necessary, select yourpersonal GitHub account as the Owner of the new fork. Click the Create forkbutton.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.Then, in your terminal:3. Make sure you're in Development/code/se-prep (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-0-pac-3-what-is-a-test.gitREMEMBER: Don't type the $. That's the universal symbol for a commandprompt. It's how technical documentation says \""Here's a thing for the shell toprocess.\""4. The previous command will create a folder in the se-prep foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-0-pac-3-what-is-a-test$ code .Open up index.js in your code editor. You are going to see mostly familiarthings:const name = \""Joe\"";const height = 74;const message = `${name} is ${height} inches tall`;module.exports = { name, height, message };This should all look familiar except for that last line. You don't need to worryabout it for now — just know that line of code makes the variables available tothe test file.Take a look at the message variable:const message = `${name} is ${height} inches tall`;We can use console.log to take a look at the value of the message variable.To do that, first type console.log(message); on the last line of index.jsand save the file. Next, navigate to the terminal, and type the followingcommand in the command line and hit enter (be sure you're still in the lab'sdirectory):$ node index.jsThe node command executes the code in whatever file you specify (in thiscase, index.js). You should see \""Joe is 74 inches tall\"" logged in theterminal.Top Tip: console.log is one of the debugging tools you can use as you'rewriting your code. Logging a variable and executing the code will allow you toverify that the value of the variable is what you're expecting.In the line of code above, we are using string interpolation to inject thevalues of the name and height variables into the message. Recall that, forthis to work, you have to wrap the entire string in backticks and wrap thevariables themselves in ${}. If you'd like a refresher, try leaving out the${}s or switching to a different type of quotes and run your code again to seewhat the value of message is. The backticks and the ${} tell Javascript tograb the value inside the variable, not just that variable name.The TestsWe have our code, now let's take a look at the tests. They are located in thetest folder inside a file named indexTest.js. In this lesson we'll getfamiliar with the tests, and then run them in the next lesson.const { name, height, message } = require(\""../index.js\"");/*describe('what-is-a-test', () => {  describe('Name', () => {    it('returns \""Susan\""', () => {      expect(name).toEqual('Susan')    })  })  describe('Height', () => {    it('is less than 40', () => {      expect(height).toBeLessThan(40)    })  })  describe('Message', () => {    it('gives the name and height', () => {      expect(message).toInclude(name)      expect(message).toInclude(height)    })  })})*/In the first line, we're enabling the tests to access the variables inindex.js. You don't need to worry about exactly how this works at this point —just know that the module.exports and require keywords allow us to accessvariables written in the index.js file from within the test file.The next thing to notice is that the test code itself is commented out using the/* and */ block commenting syntax. This is because, as mentioned above, wedon't actually want to run the tests yet. We will run the tests in the lab thatfollows this lesson; when you fork and clone that version of the files, you'llsee that the /* and */ have been removed.Next, note that the test code consists of three individual tests (each startingwith describe) nested inside a block for the tests as a whole (also startingwith describe).The first grouping is testing our name variable:describe(\""Name\"", () => {  it('returns \""Susan\""', () => {    expect(name).toEqual(\""Susan\"");  });});Take a look at the line that begins with expect. If we read it out loud, weget \""Expect name to equal Susan\"". That's exactly what it's saying! If wecontinue down to the Height section you'll see this code:describe(\""Height\"", () => {  it(\""is less than 40\"", () => {    expect(height).toBeLessThan(40);  });});Again, reading the line starting with expect out loud, we get \""Expect heightto be less than 40.\"" Again, this is just what the test is checking. Let's lookat the final one:describe(\""Message\"", () => {  it(\""gives the name and height\"", () => {    expect(message).toInclude(name);    expect(message).toInclude(height);  });});This one has two expect statements. If you read them out as English you'lldiscover that the tests expect the value of index.message to include bothindex.name and index.height.OK great. You now understand what the tests are saying. In the next lesson weare going to cover how to run them, and then you will solve the lab!Submitting the Code-AlongEven though you didn't need to write any code for this lesson, you'll still needto submit it using CodeGrade in order for it to be marked as complete in Canvas.Scroll to the bottom of this lesson page in Canvas and click the button labeled\""Load Testing With JavaScript in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories. Find the repo for this lesson and clickConnect. When you get the message that your repo has been connected, click onthe embedded link, then the \""AutoTest\"" tab. After a few moments, you should seethe green checkmark in the \""Pass\"" column, indicating that you've successfullysubmitted the lesson."
51,learn-co-curriculum/phase-0-html-lists-lab,https://github.com/learn-co-curriculum/phase-0-html-lists-lab/blob/master/README.md,JavaScript,"HTML ListsLearning GoalsRecognize unordered and ordered HTML ListsCreate unordered listsIdentify the ordered list tagCreate ordered listsIntroductionMany HTML tags behave in unique ways. Some apply automatic styling, like ptags that create margins around text. Some, like the header tags, increase thefont size. Using these tags delineates our content. When reading HTML, using thecorrect tags informs us of what the content's purpose is. If we see an h1 tag,we know that we're looking at a big page header. In this lesson, we're goingto be looking at a few new tags that help us organize lists of relatedcontent.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize Unordered And Ordered HTML ListsLet's say, for instance, we were building a personal website and wanted to listout our favorite foods. We could write this like so:<body>  <p>Banh Mi</p>  <p>Grilled Cheese</p>  <p>Baba Ghanoush</p>  <p>Tomato soup</p>  <p>Cheese and crackers</p>  <p>Sushi</p></body>The above would create a new line on the page for each food, but doesn't reallyindicate that these things are related. Using the built in ul, ol and liHTML tags however, we can group related list content together. We call such agrouping a \""list.\""In HTML, we create lists using the <ul> tag, which stands for unorderedlist, along with the <li> tag for each list item.To make a list, we write out the opening and closing <ul> tags, and insidethem, we'll add <li> tags, each listing a single item. Going back to ourfavorite foods example, if we wanted to convert it to a list, it would look likethis:<ul>  <li>Banh Mi</li>  <li>Grilled Cheese</li>  <li>Baba Ghanoush</li>  <li>Tomato soup</li>  <li>Za’atar Bread</li>  <li>Sushi</li></ul>Now, instead of just having each item show up on a new line, the content willalso be slightly indented and a bullet will appear next to each of them.Lists are very flexible and we can even nest lists inside of lists. Say wewanted to break down our favorite foods by category. We may have multiplecategories and one or more items in each:<ul>  <li>    Sandwiches    <ul>      <li>Banh Mi</li>      <li>Grilled Cheese</li>    </ul>  </li>  <li>    Snacks    <ul>      <li>Baba Ghanoush</li>      <li>Za’atar Bread</li>    </ul>  </li>  <li>    Soups    <ul>      <li>Tomato soup</li>    </ul>  </li>  <li>    Sushi    <ul>      <li>Sashimi</li>      <li>Uramaki</li>    </ul>  </li></ul>In this example, the nested lists will now be further indented and instead ofa solid bullet, they will appear with hollow bullets, indicating a sub-list.Adding a nested list one level deeper will make square bullets appear,allowing us to easily display related and nested content in a readable format.Create Unordered ListsThe first part of this challenge is to make the first 2 tests pass by:Creating an unordered listNesting each grilled cheese ingredient as a list item wrapped in <li> tagsOpen index.html in your browser.Let's say we wanted to list out the ingredients required for making a grilledcheese sandwich. The ingredients are: 2 slices of bread, 4 slices of cheese,1 tbsp of butter.For the first part of this challenge, in index.html, create an unordered listthat displays these ingredients. Run npm test to see if you can pass the firsttest. If you've done things correctly, you'll now be passing the first test, butthere are more tests to pass! We now need to turn our attention to the nexttest.Okay, now, let's say we wanted to make our grilled cheese a little more excitingand add a couple of cheeses, cheddar, mozzarella, and pepper jack.To pass the second test, inside the li with 4 slices of cheese, add anested unordered list that lists out the three types of cheese.After editing your index.html file, go back to the browser and refresh thepage you opened earlier. You should see something like this if you've set upyour lists correctly:2 slices of bread4 slices of cheesecheddarmozzarellapepper jack1 tbsp of butterRun npm test again. If your first two tests are passing, great! It's time totalk about another type of list!Identify the Ordered List TagUnordered lists are great for organizing related content where it doesn't matterwhat goes first, like in our grilled cheese ingredients. In situations where wewant items to be displayed in a specific, numbered order, we will want to usethe ordered list tag, which is written as <ol> instead of <ul>. Both use<li> tags inside, but this time, <ol> will display a numbered list insteadof bullets. If say, we wanted to write a ranked list of favorite foods, itmight look like:<h3>Top 5 Favorite Foods</h3><ol>  <li>Grilled Cheese</li>  <li>Sushi</li>  <li>Banh Mi</li>  <li>Tomato soup</li>  <li>Baba Ghanoush</li></ol>Top Tip: Feel free to test this out by adding it to index.html, saving andrefreshing the tab where the file is open. Now, Grilled Cheese will bedisplayed as 1. Grilled Cheese as the #1 food (where it belongs).Once you've got a feel for how this ordered list looks in HTML and how it'sdisplayed in the browser, delete the example code from your index.html file soyou can create a new one from scratch for the next deliverable.Nested ordered lists work the same as unordered, but instead of hollow andsquare bullets, each nested list will still display numbers.Note: To create a nested list, you must provide the ol or ul wrapper.Otherwise, an li inside another li will just be displayed as two items atthe same level.Create Ordered ListsTo complete the challenge write the necessary HTML to pass the final test:Create an ordered list with each step for creating grilled cheese as a listitem wrapped in <li> tagsOkay, so we've got our grilled cheese ingredients, but what about the stepsrequired to make a grilled cheese? Steps to a recipe need to be in order,otherwise we may end up with burnt cheese covered in bread and topped with asquare of butter. The steps to making a basic grilled cheese would be:Spread butter on bread and frying pan, Place bread in frying pan and fry,Add cheese on top of bread, Cover with second slice of bread,Turn over and fry for 2 minutes.After editing your index.html file, go back to the browser and refresh thepage you opened earlier. Your newly added list should look like this:Spread butter on bread and frying panPlace bread in frying pan and fryAdd cheese on top of breadCover with second slice of breadTurn over and fry for 2 minutesOnce you've written an ordered list that displays these 5 steps correctly, runnpm test to see the tests pass.ConclusionLists in HTML are very useful for organizing related content, and are really theonly way to indicate that content is related with basic HTML. Using unorderedlists ends up being very useful for more than just listing favorite foods andingredients. It's possible, for instance, to use list elements to organizenavigation links. With styling, we make the content look however we want —remove the bullets, make them line up horizontally — but in our HTML they willstill be organized and easy to read."
52,learn-co-curriculum/phase-0-html-tables-lab,https://github.com/learn-co-curriculum/phase-0-html-tables-lab/blob/master/README.md,JavaScript,"HTML TablesLearning GoalsRecognize basic HTML table elementsCreate HTML tablesIntroductionIn HTML, we can create lists of related content using unordered and orderedlists, and they will display line by line in the order we put them in. Sometimesas web developers, though, we need to display more complex data. For instance,imagine you are working with a financial company and need to display acollection of transactions, each with a title, value, time, and category. Or,imagine that you've been hired by a marketing company and need to display a listof the most popular Instagram accounts, each with their username, theowner of the account, and the number of followers. For sets of data like this,with many separate components, the best way to display would be to put the datainto a table.HTML has a built in way to display tables! In this lesson, we will be reviewinghow tables work and how to make our own.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize Basic HTML Table ElementsThe Table Tag: <table>The first thing we need in order to create a table is to write opening andclosing <table> tags.<table></table>This tells our browser to interpret anything inside as part of the table. Whatmakes up a table, exactly? A table has rows and columns, which together createindividual cells, as well as headers to label what each column is for.In HTML, we define these table components using individual elements that we nestinside our table tags.The Table Row Tag: <tr>It's important to note: order really matters when building a table in HTML!We're trying to display a two-dimensional table, but browsers interpret HTMLline by line. For this reason, HTML tables were designed so that there is notag for columns, only rows. If you were creating a table with 5 rows and 5columns, in designing the table, we would actually have to create 5 rows, eachwith 5 individual cells inside. When displayed, the cells in each row willline up to look like columns.Table rows always come first. To make a row inside our table, we use the tablerow tag, <tr>. So if we wanted to have four rows in our table, including arow of headers, setting up the rows it would look like this:<table>  <tr></tr>  <tr></tr>  <tr></tr>  <tr></tr></table>Any content we want in a row would go inside that particular <tr>.The Table Header Tag: <th>Tables generally start with a row of headers to label each column, so the firsttr tag we write will be dedicated to these headers.To create headers, we use <th>, the table header tag. Let's say we werecreating a list of guests to a party. The first column might have a headercalled 'Name' for the guest's name, the second, the guest's 'Phone Number', andthe third, what the guest is 'Bringing' to the party.These headers need to go in the first row, so that may look something like:<table>  <tr>    <th>Name</th>    <th>Phone Number</th>    <th>Bringing</th>  </tr>  <tr></tr>  <tr></tr>  <tr></tr></table>Even though we write the HTML from top down, we would see these headers in boldand lined up left to right. We can open up index.html right now to take alook to confirm.This first row is almost always the only place where we use the th tag.The Table Data Tag: <td>In the second row, we can start putting in our data. Here, we want to use thetable data tag, <td> instead of using the table header tag. The <td> tagrepresents one table cell. So, for our party table, we can add in some names,phone numbers and items for guests to bring. An example row would look like thefollowing:<tr>  <td>Daniel</td>  <td>718-555-1212</td>  <td>Guacamole</td></tr>As long as each bit of data in a <td> is in the same position as thecorresponding <th> in the first row, it will show up in that column.Repeating this structure, if we wanted to include 3 guests for our party, ourentire table would look like the following:<table>  <tr>    <th>Name</th>    <th>Phone Number</th>    <th>Bringing</th>  </tr>  <tr>    <td>Daniel</td>    <td>718-555-1212</td>    <td>Guacamole</td>  </tr>  <tr>    <td>Rachel</td>    <td>718-555-1212</td>    <td>Chips</td>  </tr>  <tr>    <td>Terrance</td>    <td>914-555-1212</td>    <td>Salsa</td>  </tr></table>Paste this into index.html and take a look at how it is displayed in browser.You'll see we've got a table with 4 rows and 3 columns! Each \""column\"" of contentexpands to fit the width of the content. It should look something like this:NamePhone NumberBringingDaniel718-555-1212GuacamoleRachel718-555-1212ChipsTerrance914-555-1212SalsaCreate HTML TablesOkay, now it's time to put what we've learned to the test. For this challenge,your task is to recreate a table using the following data:The above table shows total population of the 4 biggest cities in the US. We cansee there are 3 headers, \""City\"", \""State\"", and \""2017 estimate\"", and data for eachof the four cities.To complete this task, follow the order of table creation we discussed earlier:Create a table, and place rows inside,Dedicate the first row to just headersAdd in the data in the appropriate order so that each city name falls underthe \""City\"" column, each state is under \""State\"", etc...Run npm test to test your work and see your progress. The tests also includethe exact population numbers, so feel free to copy them from the errors!ConclusionWith table, tr, th and td, we are able to turn line by line HTML into atable with rows and columns! It may seem counterintuitive at first to list outrow content separately, but with this, you can represent all sorts of data!"
53,learn-co-curriculum/phase-0-html-images-lab,https://github.com/learn-co-curriculum/phase-0-html-images-lab/blob/master/README.md,JavaScript,"HTML ImagesLearning GoalsRecognize the img tagUse img tag attributesCreate imagesIntroductionImages are absolutely critical to making appealing and engaging websites. Canyou imagine the web without them? No cat memes. No animated dancing bananas! NoInstagram, at all. The internet would be a pretty boring and sad place!In this lesson, we will be discussing how to include images in your HTML, alongwith some important attributes of the tag. With images, you can make your webpages much more engaging and visually appealing.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize the img TagImages are inserted into HTML using the img tag. The tag can display a varietyof image types, including animated GIFs, bitmaps and vector graphics, thoughmost often, the images we see on the internet are JPEG and PNG files.The img tag is self closing, meaning it doesn't wrap around content or text.Instead, the relevant information is stored in attributes within the tag itself.There are two main attributes, src, the source of the image, and alt, thealternate text.Use the img Tag AttributesThe Image Source AttributeThe src attribute provides the relative path or URL to the image file we wantto display. The image file can be local; for example, if you're publishing awebsite and have your images stored in a folder within your file structure, yoursource may look like this:<img src=\""../images/my_company_logo.png\"" />However, it's very common, even when publishing your own websites, to haveimages hosted somewhere else on the internet. In these situations, we need toprovide a full URL as the source:<img src=\""https://i.imgur.com/H1qsYEl.png\"" />The src attribute is always necessary, as without it, the img tag would havenothing to display.The Image Alt AttributeThe alt attribute contains text relevant to the image we're displaying, andwill appear in its place if the image fails to load.Alt text is important for screen readers for the visually impaired, as the textwill be read out loud to the site visitor. Alt text also improves accessibilityfor non-disabled users, who will get a message if the image fails to load. It isespecially important if the image is used as additional content that expandsupon the written content.Alt text on a failed image will appear along with a small 'broken image' icon:To include an alt attribute, add it in along with the src attribute:<img  src=\""https://i.imgur.com/H1qsYEl.png\""  alt=\""comedic crow gets wholesome support\""/>Note that we've separated out each attribute on its own line in the HTML above.When an element gets too long for one line in your text editor, separating thecode as shown above will keep your HTML code more readable.Note: While alt text isn't required for the browser, adherence to theAmericans with Disabilities Act is often enforced through legislation. Yourbrowser will not throw an error if there is no alt text with an image, so itis up to you as the developer to adhere to best practices for accessibility.The Image Title AttributeOne additional attribute that can be useful is the title. Content added tothis attribute will display when we hover over the image with our mouse. If wewere creating an img tag with src, alt and title for a company logo, itmight look something like this:<img  src=\""../images/my_company_logo.png\""  alt=\""my company name\""  title=\""We're here to help you!\""/>When a visitor to your company site hovers over the logo, they'll see a messageappear saying 'We're here to help you!'The title attribute isn't necessary and is often left out, but can be a nicedetail to include.Create ImagesIts time to practice creating some images! For this challenge, feel free to useany images you'd like — the tests are looking for the correct tag andattributes, not the content. If you're not sure what to use, feel free to usethe following URL as your source:https://s3.amazonaws.com/ironboard-learn/lion.jpgYour challenge is to write three image tags:The first should have just a source attributeThe second should include an alt attribute, in addition to a sourceThe third should have both an alt and source attribute, as well as a titleattributeRun npm test and read the tests as you go.ConclusionWith images, we can fill our web pages with visual content in addition to text.Brand logos, animated instructional guides, personal artwork and photography, orpictures of you and your friends — you now have the ability to create visuallyappealing content of any type!"
54,learn-co-curriculum/phase-0-html-album-cover-lab,https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/blob/master/README.md,JavaScript,"HTML Album CoverLearning GoalsUse common HTML tags to produce a webpage based on a mock-upIntroductionLearning all the individual pieces that make up a web page is a necessary firststep in the process of learning HTML, but one of the best ways to solidify theconcepts we've learned is to apply concepts together. In this lab, your taskwill be to update index.html based on commented notes in the file, using whatwe've learned about text formatting and displaying images.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Apply Header, Paragraph, Image and Span TagsPharrell isn't quite happy, he needs some help coding the album cover for hishit song \""Happy.\"" His dev chops aren't quite as skilled as yours, so he's hiredyou to take care of business.Pharrell did provide us with a mock-up of what he would like to see for thedesign of the album cover:In the industry, front-end developers are typically given specs just like thisfrom the product team and then asked to write the code to make a website lookjust like the spec. Today, you're the developer and Pharrell is the productteam.Use SOURCE.mdPharrell has provided us with the text for the album and all the legalmumbo-jumbo to give credit where credit is due. You can find that text inSOURCE.md. Again, this is a typical industry standard workflow, where thedevelopers are given a copy for the site from the product team.Each line of text in this file corresponds to a note in index.html that willindicate where you'll need to add this information. It will be up to you to pickwhich HTML tags to use.DeliverablesWrite your code in index.html. Your job is to make sure the text fromSOURCE.md makes it into index.html surrounded by the appropriate HTML tags.You can see the images you'll be using in the 'images' folder, but you'll haveto write the correct URL paths (like http://..../image-name) in order for themto display correctly. The comments in the index.html will help you with this.You may not have encountered the span tag before, so if you are curious, takea moment to read up on some reference material to better understand its use.Open index.html in a separate browser tab to see your progress on the AlbumCover as you build it.Run npm test to make sure you've met all the deliverables and passed thetests.ConclusionA lot of the formatting in this lab is done using CSS, or Cascading StyleSheets, a language that defines styling for HTML. Before we can get to moreelaborate styling, though, it is important to have a strong understanding ofHTML fundamentals.In this lab, we've tested that understanding by having you practice applyingheaders, image, and paragraphs. Completing this lab means that you have a solidfoundation that we can build upon as we continue to learn about web development.Clap along if you feel you're getting the hang of HTML!"
55,layui/layui,https://github.com/layui/layui/blob/main/README.md,JavaScript,"        Layui  Classic modular front-end UI library                                  Layui 是一套开源免费的 Web UI 组件库，采用自身轻量级模块化规范，遵循原生态的 HTML/CSS/JavaScript 开发模式，极易上手，拿来即用。其风格简约轻盈，而内在雅致丰盈，甚至包括文档在内的每一处细节都经过精心雕琢，非常适合网页界面的快速构建。Layui 区别于一众主流的前端框架，却并非逆道而行，而是信奉返璞归真之道。确切地说，它更多是面向于追求简单的务实主义者，即无需涉足各类构建工具，只需面向浏览器本身，便可将页面所需呈现的元素与交互信手拈来。快速上手使用 Layui 只需在页面中引入核心文件即可：<!DOCTYPE html><html>  <head>    <meta charset=\""utf-8\"">    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1\"">    <title>Quick Start - Layui</title>    <link href=\""./layui/css/layui.css\"" rel=\""stylesheet\"">  </head>  <body>    <!-- HTML Content -->    <script src=\""./layui/layui.js\""></script>    <script>    // Usage    layui.use(function(){      var layer = layui.layer;      // Welcome      layer.msg('Hello World', {icon: 6});    });    </script>   </body></html>使用文档最新文档项目参与项目参与者破旧立新 🌱2016年10月14日，Layui 发布了 1.0.0 首版，此后多年被广泛应用于众多 Web 平台。2021年10月13日，Layui 发布了原官网下线的公告（导读），并将文档站点切换到了 Gitee Pages，社区及日常维护亦全面转移到了 Gitee 和 Github 平台，以此呼吁大家拥抱其他更好的主流框架，导致大家误以为 Layui 停更了。事实上，自那以后，Layui 仍然在 Github 和 Gitee 保持活跃，并不存在所谓的停止更新，从当时的 2.6.8 一直连续迭代到如今的最新版本。2023年4月24日，Layui 发布了 2.8.0 正式版，并上线了新的文档站点，这是一次朴实的回归，更是情怀的延续。 但我们仍然坚持两年前那则公告中的观点， 即仍然推荐大家去拥抱主流，始终保持对前沿技术的无限热爱，是开发者们都应具备的思维属性。 而 Layui 所做的，是为填补主流之外的那些略显狭小的空隙。Layui 虽不是前端主流，但也早已不是作者个人的 Layui，而是所有仍在坚持使用它的人的 Layui，它仍然支撑着许多项目，也代表着许多人的工作。作为开源创作者，应该要为这些坚持者而守望。未来，Layui 会持续陪伴着所有为之热爱的人们，共同去论证 Layui 开发模式的可行性。开源许可Layui 采用 MIT 许可发布。其他相关协议亦可参考《免责声明》。"
56,learn-co-curriculum/phase-0-css-intro-lab,https://github.com/learn-co-curriculum/phase-0-css-intro-lab/blob/master/README.md,JavaScript,"Introduction to CSS LabLearning GoalsImport a CSS file in our HTMLImplement CSS declarationsIntroductionHTML's role in our websites is to provide structure, content, and link resources(e.g. CSS files). Its role in describing the style (\""presentation\"") of contentis minimal. HTML's ability to style is pretty much limited to \""pretty good\""defaults.In order to further customize the style, appearance, and interactive behavior ofour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we willwork on implementing CSS declarations in our HTML.Writing HTML vs. Writing CSSHTMLCSSDeals with:Content layerPresentation layerConcerns:Structure, hierarchy & meaningAesthetic & displayQuestions:- Should the order of items within a list matter?- Should the layout of the text be in a single or double column?- Should we wrap a list of links inside a navigation tag?- Should we use a different font color for the header?- Is this the most important header in the HTML document?- How should the content appear on a desktop vs. a mobile device?Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Import a CSS File in Our HTMLFirst things first: we need to make sure our HTML is loading our style sheet.We have two options:Write CSS rules inside of a <style> tag (\""internal CSS\""), which tells HTML\""Hey, I want to define some CSS styling here.\""Write CSS rules in an external file that is specified with the <link> tag(\""external CSS\"").In our case, we want to provide a link to our style sheet, instead of writingall of our CSS code directly in the <style> tag. This allows us to only haveto write styles for the entire site once, instead of repeating every <style>element on every page. A common workflow is to see developers work on CSS insideof the <style> tag until their styling is done. At that point they move it totheir external file and remove the <style> element from the HTML page. Feelfree to try it out!In index.html, provide a <link> tag which correctly sources the CSS filelocated in this directory. The <link> tag will link to our file with an hrefattribute, like so:<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />The href attribute should point to the file style.css which is located inthis directory using a relative path. The rel attribute is used to note thatthe file which is being linked has a relation of being a \""stylesheet.\""Now, what is a relative path? You could write href=\""style.css\"" and the contentof style.css would change your index.html file. But we want to teach you torequire external resources (like CSS or JavaScript) by using relative paths.Relative paths make it crystal clear which file is being used. Relative pathsstart with ./ which means \""from the directory I am currently in.\"" So, when weuse link to associate with a style sheet and we write href=\""./style.css\""we're saying: \""From the directory in which I, the index.html file live, lookfor a file called style.css and use it. This pattern will help you and otherdevelopers remove any possible confusion.<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />Links to style sheets should go at the end of the <head> section! Make sureyou provide a relative path to the style sheet. Hint: Open index.html in thebrowser. You can test whether your link is working or not by the color of yourheadline. If it's red, it's working! If it's black, keep going - you'll get it.Implement CSS DeclarationsNow, we are going to create some CSS declarations and add styling to ourdocument! First, open index.html in the browser to get a good idea of whatour un-styled page page looks like.What we would really like is something a little more jazzed up! Let'swork towards that. Set the following properties to specific values. Makesure to, after each update, look at index.html in the browser to see how ithas changed:Set the background of the <body> element (whole document) to #00b3e6(light blue)Set the <div> elements:width to 700pxmargin to auto (centers our element)font-family to \""Helvetica Neue\""background to whitepadding to 30px (creates an invisible space around the element)Set the element with the id of #main-header to a font-size of 22pxSet the elements with the class of .perspective-questions to a font-styleof italicRun npm test to test your work. Remember to push and submit your work usingCodeGrade when you're done.ConclusionCSS allows us to easily separate our 'styling' logic into separate files thatfollow the 'cascading' rule set. This enables us to keep our HTML clean andsimple to read, without sacrificing the customization that we have come toexpect on websites.ResourcesW3 Introduction to CSS"
57,learn-co-curriculum/phase-0-html-tag-lab,https://github.com/learn-co-curriculum/phase-0-html-tag-lab/blob/master/README.md,JavaScript,"Your First HTML Tag LabLearning GoalsCode an h1 tagSet the inner text of the h1 to Hello, World!IntroductionSo far, we've seen how to markup content with HTML, how to structure an HTMLdocument and what HTML tags look like. Now let's focus on writing a single HTMLtag from scratch and examining each of its parts.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Code an h1 TagOpen index.html in your text editor. Add the h1 opening and closing tags.Set the Inner TextInside of the opening and closing h1 tags, insert the text: Hello, World!.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Viewing Your Work in the BrowserWhile working through these assignments, your general workflow should center onwriting code in the text editor and periodically running the test suite in theterminal to check your work.Another great way to track your progress is to open up the HTML document in yourbrowser and watch how each change you make in the text editor affects the visuallayout in the browser.You can open index.html a few ways, depending on the environment you are in:For Mac users:Open from the Terminal by running open index.html in the root directory ofthis labUse Finder to navigate to this lab's local folder and click the index.htmlfileFor WSL users:Open from Ubuntu by running explorer.exe index.html in the root directory ofthis labOpen a new Explorer window. There is a bar that says \""Quick Access\"" along thetop of the window (similar to a URL bar in a browser). Click this and type\\\\wsl$ to access files and folders on Ubuntu. Navigate to/home/<your-user-name>/ to get to your home directory, then locate thislab's local folder and click the index.html file.Once you have the HTML document open in your browser, you can make changes to itin a text editor, save the file, refresh the page in the browser, and see thechanges.ConclusionCongratulations! You wrote your first HTML tag. Now you can use your knowledgeof this basic building block to learn more HTML tags and see how they work witheach other to create an entire HTML document structure. Remember to submit yourwork in CodeGrade before moving on.Resourcesh1-h6 TagsSolving the First HTML Lab (Ifyou're stuck, here's a video walk-through of the lab to help you out.)"
58,PanJiaChen/vue-admin-template,https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md,JavaScript,"vue-admin-template这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后台必要的东西。线上地址国内访问目前版本为 v4.0+ 基于 vue-cli 进行构建，若你想使用旧版本，可以切换分支到tag/3.11.0，它不依赖 vue-cli。  SPONSORED BY            Extra如果你想要根据用户角色来动态生成侧边栏和 router，你可以使用该分支permission-control相关项目vue-element-adminelectron-vue-adminvue-typescript-admin-templateawesome-project写了一个系列的教程配套文章，如何从零构建后一个完整的后台项目:手摸手，带你用 vue 撸后台 系列一(基础篇)手摸手，带你用 vue 撸后台 系列二(登录权限篇)手摸手，带你用 vue 撸后台 系列三 (实战篇)手摸手，带你用 vue 撸后台 系列四(vueAdmin 一个极简的后台基础模板,专门针对本项目的文章,算作是一篇文档)手摸手，带你封装一个 vue componentBuild Setup# 克隆项目git clone https://github.com/PanJiaChen/vue-admin-template.git# 进入项目目录cd vue-admin-template# 安装依赖npm install# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org# 启动服务npm run dev浏览器访问 http://localhost:9528发布# 构建测试环境npm run build:stage# 构建生产环境npm run build:prod其它# 预览发布环境效果npm run preview# 预览发布环境效果 + 静态资源分析npm run preview -- --report# 代码格式检查npm run lint# 代码格式检查并自动修复npm run lint -- --fix更多信息请参考 使用文档购买贴纸你也可以通过 购买官方授权的贴纸 的方式来支持 vue-element-admin - 每售出一张贴纸，我们将获得 2 元的捐赠。DemoBrowsers supportModern browsers and Internet Explorer 10+.IE / EdgeFirefoxChromeSafariIE10, IE11, Edgelast 2 versionslast 2 versionslast 2 versionsLicenseMIT license.Copyright (c) 2017-present PanJiaChen"
59,Shastel/human-readable-number,https://github.com/Shastel/human-readable-number/blob/master/README.md,JavaScript,"Human Readable NumberTaskYour task is to implement function toReadable that converts given number, to readable string.For example:toReadable(1); // Will return 'one'toReadable(997); //will return 'nine hundred ninety seven'You can find even more examples in test.jsWrite your code in `src/index.js.All test cases are designed as “error-free”, so don't worry about handling any errors.Prepare and testInstall Node.jsFork this repository: human-readable-numberClone your newly created repo: https://github.com/<%your_github_username%>/human-readable-number/Go to folder human-readable-numberTo install all dependencies use npm installRun npm test in the command lineYou will see the number of passing and failing tests you 100% of passing tests is equal to 100p in scoreSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (human-readable-number)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using are any of the features which are not supported by v12, the score won't be submitted.Each of your test case is limited to 30 sec."
60,memochou1993/gpt-ai-assistant,https://github.com/memochou1993/gpt-ai-assistant/blob/main/README.md,JavaScript,"GPT AI Assistant GPT AI Assistant is an application that is implemented using the OpenAI API and LINE Messaging API. Through the installation process, you can start chatting with your own AI assistant using the LINE mobile app.News2023-05-03: The 4.6 version now support gpt-4 OpenAI model. 🔥2023-03-05: The 4.1 version now support the audio message of LINE and  whisper-1 OpenAI model. 🔥2023-03-02: The 4.0 version now support gpt-3.5-turbo OpenAI model. 🔥DemoDocumentations中文EnglishCreditsjayer95 - Debugging and testingkkdai - Idea of sum commandDayu0815 - Idea of search commandmics8128 - Implementing new featuresAll other contributorsContactIf there is any question, please contact me at memochou1993@gmail.com. Thank you.ChangelogDetailed changes for each release are documented in the release notes.LicenseMIT"
61,sahat/hackathon-starter,https://github.com/sahat/hackathon-starter/blob/master/README.md,JavaScript,"Hackathon StarterLive Demo: LinkJump to What's new?A boilerplate for Node.js web applications.If you have attended any hackathons in the past, then you know how much time it takes to get a project started: decide on what to build, pick a programming language, pick a web framework, pick a CSS framework. A while later, you might have an initial project up on GitHub, and only then can other team members start contributing. Or how about doing something as simple as Sign in with Facebook authentication? You can spend hours on it if you are not familiar with how OAuth 2.0 works.When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases of hackathon web apps, without being too specific. In the worst case, you can use this as a learning guide for your projects, if for example you are only interested in Sign in with Google authentication and nothing else.Testimonials“Nice! That README alone is already gold!”— Adrian Le Bas“Awesome. Simply awesome.”— Steven Rueter“I'm using it for a year now and many projects, it's an awesome boilerplate and the project is well maintained!”— Kevin Granger“Small world with Sahat's project. We were using his hackathon starter for our hackathon this past weekend and got some prizes. Really handy repo!”— Interview candidate for one of the companies I used to work with.Modern ThemeFlatly Bootstrap ThemeAPI ExamplesTable of ContentsFeaturesPrerequisitesGetting StartedObtaining API KeysProject StructureList of PackagesUseful Tools and ResourcesRecommended Design ResourcesRecommended Node.js LibrariesRecommended Client-side LibrariesPro TipsFAQHow It WorksCheatsheetsES6JavaScript DateMongoose CheatsheetDeploymentDockerProductionChangelogContributingLicenseFeaturesLoginLocal Authentication using Email and PasswordOAuth 2.0 Authentication: Sign in with Google, Facebook, Twitter, LinkedIn, Twitch, Github, SnapchatUser Profile and Account ManagementGravatarProfile DetailsChange PasswordForgot PasswordReset PasswordVerify EmailLink multiple OAuth strategies to one accountDelete AccountContact Form (powered by SMTP via Sendgrid, Mailgun, AWS SES, etc.)File uploadAPI ExamplesFacebook, Foursquare, Tumblr, Pinterest, Github, Steam, Quickbooks, Paypal, Stripe, Twilio (text messaging), Lob (USPS Mail), HERE Maps, Google Maps, Google Drive, Google Sheets, Alpha Vantage (stocks and finance info) with ChartJS, Last.fm, New York Times, Web Scraping,Flash notificationsreCaPTCHA and rate limit protectionCSRF protectionMVC Project StructureNode.js clusters supportHTTPS Proxy support (via ngrok, Cloudflare, etc.)Sass stylesheets (auto-compiled via middleware)Bootstrap 5\""Go to production\"" checklistPrerequisitesMongoDB (local install OR hosted)Local Install: MongoDBHosted: No need to install, see the MongoDB Atlas sectionNode.js 18+Command Line Tools Mac OS X: Xcode (or OS X 10.9+: xcode-select --install) Windows: Visual Studio Code + Windows Subsystem for Linux - Ubuntu OR Visual Studio Ubuntu /  Linux Mint: sudo apt-get install build-essential Fedora: sudo dnf groupinstall \""Development Tools\"" OpenSUSE: sudo zypper install --type pattern devel_basisNote: If you are new to Node or Express, you may find Node.js & Express From Scratch series helpful for learning the basics of Node and Express. Alternatively, here is another great tutorial for complete beginners - Getting Started With Node.js, Express, MongoDB.Getting StartedStep 1: The easiest way to get started is to clone the repository:# Get the latest snapshotgit clone https://github.com/sahat/hackathon-starter.git myproject# Change directorycd myproject# Install NPM dependenciesnpm install# Then simply start your appnode app.jsNote: I highly recommend installing Nodemon. It watches for any changes in your  node.js app and automatically restarts the server. Once installed, instead of node app.js use nodemon app.js. It willsave you a lot of time in the long run, because you won't need to manually restart the server each time you make a small change in code. To install, run sudo npm install -g nodemon.Step 2: Obtain API Keys and change configs if neededAfter completing step 1 and locally installing MongoDB, you should be able to access the application through a web browser and use local user accounts. However, certain functions like API integrations may not function correctly until you obtain specific keys from service providers. The keys provided in the project serve as placeholders, and you can retain them for features you are not currently utilizing. To incorporate the acquired keys into the application, you have two options:Set environment variables in your console session: Alternatively, you can set the keys as environment variables directly through the command prompt. For instance, in bash, you can use the export command like this: export FACEBOOK_SECRET=xxxxxx. This method is considered a better practice as it reduces the risk of accidentally including your secrets in a code repository.Replace the keys in the .env.example file: Open the .env.example file and update the placeholder keys with the newly acquired ones. This method has the risk of accidental checking-in of your secrets to code repos.What to get and configure:SMTPFor user workflows for reset password and verify emailFor contact form processingreCAPTCHAFor contact form submissionOAuth for social logins (Sign in with / Login with)Depending on your application need, obtain keys from Google, Facebook, Twitter, LinkedIn, Twitch, GitHub, Snapchat.  You don't have to obtain valid keys for any provider that you don't need. Just remove the buttons and links in the login and account pug views before your demo.API keys for service providers in the API Examples if you are planning to use them.MongoDB AtlasIf you are using MongoDB Atlas instead of a local db, set the MONGODB_URI to your db URI (including your db user/password).Email addressSet SITE_CONTACT_EMAIL as your incoming email address for messages sent to you thru the contact form.Set TRANSACTION_EMAIL as the \""From\"" address for emails sent to users thru the lost password or email verification emails to users.  You may set this to the same address as SITE_CONTACT_EMAIL.ngrok and HTTPSIf you want to use some API that needs HTTPS to work (for example Pinterest or Facebook),you will need to download ngrok. Start ngrok, set your BASE_URL to the forwarding address  (i.e  https://3ccb-1234-abcd.ngrok-free.app ), and use the forwarding address to access your application.  If you are using a proxy like ngrok, you may get a CSRF mismatch error if you try to access the app at http://localhost:8080 instead of the https://...ngrok-free.app address.After installing or downloading the standalone ngrok client you can start ngrok to intercept the data exchanged on port 8080 with ./ngrok http 8080 in Linux or ngrok http 8080 in Windows.Step 3: Develop your application and customize the experienceCheck out How It WorksStep 4: Optional - deploy to productionSee:Deploymentprod-checklist.mdObtaining API KeysYou will need to obtain appropriate credentials (Client ID, Client Secret, API Key, or Username & Password) for API and service provides which you need.  See Step 2 in the Getting started section for more info.SMTPObtain SMTP credentials from a provider for transactional emails.  Set the SMTP_USER, SMTP_PASSWORD, and SMTP_HOST environment variables accordingly.  When picking the smtp host, keep in mind that the app is configured to use secure SMTP transmissions over port 465 out of the box.  You have the flexibility to select any provider that suits your needs or take advantage of one of the following providers, each offering a free tier for your convenience.ProviderFree TierWebsiteSendGrid100 emails/day for freehttps://sendgrid.comSMTP2Go1000 emails/month for freehttps://www.smtp2go.comBrevo300 emails/day for freehttps://www.brevo.comVisit Google reCAPTCHA Admin ConsoleEnter your application's name as the LabelChoose reCAPTCHA v2, \""I'm not a robot\"" CheckboxEnter localhost as the domain.  You can have other domains added in addition to localhostAccept the terms and submit the formCopy the Site Key and the Secret key into .env.  These keys will be accessible under Settings, reCAPTCHA keys drop down if you need them again laterVisit Google Cloud ConsoleClick on the Create Project buttonEnter Project Name, then click on Create buttonThen click on APIs & auth in the sidebar and select API tabClick on Google+ API under Social APIs, then click Enable APIClick on Google Drive API under G Suite, then click Enable APIClick on Google Sheets API under G Suite, then click Enable APINext, under APIs & auth in the sidebar click on Credentials tabClick on Create new Client ID buttonSelect Web Application and click on Configure Consent ScreenFill out the required fields then click on SaveIn the Create Client ID modal dialog:Application Type: Web ApplicationAuthorized Javascript origins: set to your BASE_URL value (i.e. http://localhost:8080, etc)Authorized redirect URI: set to your BASE_URL value followed by /auth/google/callback (i.e. http://localhost:8080/auth/google/callback )Click on Create Client ID buttonCopy and paste Client ID and Client secret keys into .envVisit Snap Kit Developer PortalClick on the + button to create an appEnter a name for your appEnable the scopes that you will want to use in your appClick on the Continue buttonFind the Kits section and make sure that Login Kit is enabledFind the Redirect URLs section, click the + Add button, and enter your BASE_URL value followed by /auth/snapchat/callback (i.e. http://localhost:8080/auth/snapchat/callback )Find the Development Environment section. Click the Generate button next to the Confidential OAuth2 Client heading within it.Copy and paste the generated Private Key and OAuth2 Client ID keys into .envNote: OAuth2 Client ID is SNAPCHAT_ID, Private Key is SNAPCHAT_SECRET in .envTo prepare the app for submission, fill out the rest of the required fields: Category, Description, Privacy Policy Url, and App IconVisit Facebook DevelopersClick My Apps, then select *Add a New App from the dropdown menuEnter a new name for your appClick on the Create App ID buttonFind the Facebook Login Product and click on Facebook LoginInstead of going through their Quickstart, click on Settings for your app in the top left cornerCopy and paste App ID and App Secret keys into .envNote: App ID is FACEBOOK_ID, App Secret is FACEBOOK_SECRET in .envEnter localhost under App DomainsChoose a Category that best describes your appClick on + Add Platform and select WebsiteEnter your BASE_URL value (i.e. http://localhost:8080, etc) under Site URLClick on the Settings tab in the left nav under Facebook LoginEnter your BASE_URL value followed by /auth/facebook/callback (i.e. http://localhost:8080/auth/facebook/callback ) under Valid OAuth redirect URIsNote: After a successful sign-in with Facebook, a user will be redirected back to the home page with appended hash #_=_ in the URL. It is not a bug. See this Stack Overflow discussion for ways to handle it.Go to Account SettingsSelect Developer settings from the sidebarThen click on OAuth Apps and then on Register new applicationEnter Application Name and Homepage URL. Enter your BASE_URL value (i.e. http://localhost:8080, etc) as the homepage URL.For Authorization Callback URL: your BASE_URL value followed by /auth/github/callback (i.e. http://localhost:8080/auth/github/callback )Click Register applicationNow copy and paste Client ID and Client Secret keys into .env fileSign in at https://apps.twitter.comClick Create a new applicationEnter your application name, website and description. Set the website as your BASE_URL value (i.e. http://localhost:8080, etc).For Callback URL: your BASE_URL value followed by /auth/twitter/callback (i.e. http://localhost:8080/auth/twitter/callback )Go to Settings tabUnder Application Type select Read and Write accessCheck the box Allow this application to be used to Sign in with TwitterClick Update this Twitter's applications settingsCopy and paste Consumer Key and Consumer Secret keys into .env fileSign in at LinkedIn Developer NetworkFrom the account name dropdown menu select API KeysIt may ask you to sign in once againClick + Add New Application buttonFill out all the required fieldsOAuth 2.0 Redirect URLs: your BASE_URL value followed by /auth/linkedin/callback (i.e. http://localhost:8080/auth/linkedin/callback )JavaScript API Domains: your BASE_URL value (i.e. http://localhost:8080, etc).For Default Application Permissions make sure at least the following is checked:r_basicprofileFinish by clicking Add Application buttonCopy and paste API Key and Secret Key keys into .env fileAPI Key is your clientIDSecret Key is your clientSecretSign up or log into your dashboardClick on your profile and click on Account SettingsThen click on API KeysCopy the Secret Key. and add this into .env fileVisit PayPal DeveloperLog in to your PayPal accountClick Applications > Create App in the navigation barEnter Application Name, then click Create appCopy and paste Client ID and Secret keys into .env fileApp ID is client_id, App Secret is client_secretChange host to api.paypal.com if you want to test against production and use the live credentialsGo to Foursquare for DevelopersClick on My Apps in the top menuClick the Create A New App buttonEnter App Name, Welcome page url,For Redirect URI: your BASE_URL value followed by /auth/foursquare/callback (i.e. http://localhost:8080/auth/foursquare/callback )Click Save ChangesCopy and paste Client ID and Client Secret keys into .env fileGo to http://www.tumblr.com/oauth/appsOnce signed in, click +Register applicationFill in all the detailsFor Default Callback URL: your BASE_URL value followed by /auth/tumblr/callback (i.e. http://localhost:8080/auth/tumblr/callback )Click ✔RegisterCopy and paste OAuth consumer key and OAuth consumer secret keys into .env fileGo to http://steamcommunity.com/dev/apikeySign in with your existing Steam accountEnter your Domain Name based on your BASE_URL, then and click RegisterCopy and paste Key into .env fileVisit the Twitch developer dashboardIf prompted, authorize the dashboard to access your twitch accountIn the Console, click on Register Your ApplicationEnter the name of your applicationUse OAuth Redirect URLs enter your BASE_URL value followed by /auth/twitch/callback (i.e. http://localhost:8080/auth/twitch/callback )Set Category to Website Integration and press the Create buttonAfter the application has been created, click on the Manage buttonCopy and paste Client ID into .envIf there is no Client Secret displayed, click on the New Secret button and then copy and paste the Client secret into .envGo to https://developer.here.comSign up and create a Freemium projectCreate JAVASCRIPT/REST credentials. Copy and paste the APP_ID and APP into .env file.Note that these credentials are available on the client-side, and you need to create a domain whitelist for your app credentials when you are publicly launching the app.Go to https://www.twilio.com/try-twilioSign up for an account.Once logged into the dashboard, expand the link 'show api credentials'Copy your Account Sid and Auth TokenGo to https://developer.intuit.com/app/developer/qbo/docs/get-startedUse the Sign Up option in the upper right corner of the screen (navbar) to get a free developer account and a sandbox company.Create a new app by going to your Dashboard using the My Apps option in the top nav bar or by going to https://developer.intuit.com/app/developer/myappsIn your App, under Development, Keys & OAuth (right nav), find the Client ID and Client Secret for your .env fileProject StructureNameDescriptionconfig/passport.jsPassport Local and OAuth strategies, plus login middleware.controllers/api.jsController for /api route and all api examples.controllers/contact.jsController for contact form.controllers/home.jsController for home page (index).controllers/user.jsController for user account management.models/User.jsMongoose schema and model for User.public/Static assets (fonts, css, js, img).public/js/application.jsSpecify client-side JavaScript dependencies.public/js/app.jsPlace your client-side JavaScript here.public/css/main.scssMain stylesheet for your app.views/account/Templates for login, password reset, signup, profile.views/api/Templates for API Examples.views/partials/flash.pugError, info and success flash notifications.views/partials/header.pugNavbar partial template.views/partials/footer.pugFooter partial template.views/layout.pugBase template.views/home.pugHome page template..dockerignoreFolder and files ignored by docker usage..env.exampleYour API keys, tokens, passwords and database URI..eslintrcRules for eslint linter..gitignoreFolder and files ignored by git.app.jsThe main application file.docker-compose.ymlDocker compose configuration file.DockerfileDocker configuration file.package.jsonNPM dependencies.package-lock.jsonContains exact versions of NPM dependencies in package.json.Note: There is no preference for how you name or structure your views.You could place all your templates in a top-level views directory withouthaving a nested folder structure if that makes things easier for you.Just don't forget to update extends ../layout  and correspondingres.render() paths in controllers.List of PackagesPackageDescription@fortawesome/fontawesome-freeSymbol and Icon library.@googleapis/driveGoogle Drive API integration library.@googleapis/sheetsGoogle Sheets API integration library.@ladjs/bootstrap-socialSocial buttons library.@lob/lob-typescript-sdkLob (USPS mailing / physical mailing service) library.@node-rs/bcryptLibrary for hashing and salting user passwords.@octokit/restGitHub API library.@passport-js/passport-twitterTwitter login support (OAuth 2).@popperjs/coreFrontend js library for poppers and tooltips.axiosHTTP client.body-parserNode.js body parsing middleware.bootstrapCSS Framework.chaiBDD/TDD assertion library.cheerioScrape web pages using jQuery-style syntax.compressionNode.js compression middleware.connect-mongoMongoDB session store for Express.dotenvLoads environment variables from .env file.errorhandlerDevelopment-only error handler middleware.eslintLinter JavaScript.eslint-config-airbnb-baseConfiguration eslint by airbnb.eslint-plugin-chai-friendlyMakes eslint friendly towards Chai.js 'expect' and 'should' statements.eslint-plugin-importESLint plugin with rules that help validate proper imports.expressNode.js web framework.express-flashProvides flash messages for Express.express-rate-limitRate limiting middleware for abuse protection.express-sessionSimple session middleware for Express.huskyGit hook manager to automate tasks with git.jqueryFront-end JS library to interact with HTML elements.lastfmLast.fm API library.lint-stageUtility to lint files staged by git.lobLob API library.lodashA utility library for working with arrays, numbers, objects, strings.luscaCSRF middleware.mailcheckerVerifies that an email address is valid and not a disposable address.mochaTest framework.momentParse, validate, compute dates and times.mongodbMemoryServerMongoDB in memory (for running tests without a running db).mongooseMongoDB ODM.morganHTTP request logger middleware for node.js.multerNode.js middleware for handling multipart/form-data.nodemailerNode.js library for sending emails.nycCoverage test.passportSimple and elegant authentication library for node.js.passport-facebookSign-in with Facebook plugin.passport-github2Sign-in with GitHub plugin.passport-google-oauthSign-in with Google plugin.passport-linkedin-oauth2Sign-in with LinkedIn plugin.passport-localSign-in with Username and Password plugin.passport-oauthAllows you to set up your own OAuth 1.0a and OAuth 2.0 strategies.passport-oauth2-refreshA library to refresh OAuth 2.0 access tokens using refresh tokens.passport-snapchatSign-in with Snapchat plugin.passport-steam-openidOpenID 2.0 Steam plugin.patch-packageFix broken node modules ahead of fixes by maintainers.paypal-rest-sdkPayPal APIs library.pugTemplate engine for Express.sassSass compiler to generate CSS with superpowerssinonTest spies, stubs and mocks for JavaScript.stripeOffical Stripe API library.supertestHTTP assertion library.twilioTwilio API library.twitch-passportSign-in with Twitch plugin.validatorA library of string validators and sanitizers.Useful Tools and ResourcesJavaScripting - The Database of JavaScript LibrariesHTML to Pug converter - HTML to PUG is a free online converter helping you to convert HTML files to pug syntax in real-time.JavascriptOO - A directory of JavaScript libraries with examples, CDN links, statistics, and videos.Favicon Generator - Generate favicons for PC, Android, iOS, Windows 8.Recommended Design ResourcesCode Guide - Standards for developing flexible, durable, and sustainable HTML and CSS.Bootsnipp - Code snippets for Bootstrap.Bootstrap Zero - Free Bootstrap templates themes.Google Bootstrap - Google-styled theme for Bootstrap.Font Awesome Icons - It's already part of the Hackathon Starter, so use this page as a reference.Colors - A nicer color palette for the web.Creative Button Styles - awesome button styles.Creative Link Effects - Beautiful link effects in CSS.Medium Scroll Effect - Fade in/out header background image as you scroll.GeoPattern - SVG background pattern generator.Trianglify - SVG low-poly background pattern generator.Recommended Node.js LibrariesNodemon - Automatically restart Node.js server on code changes.geoip-lite - Geolocation coordinates from IP address.Filesize.js - Pretty file sizes, e.g. filesize(265318); // \""265.32 kB\"".Numeral.js - Library for formatting and manipulating numbers.sharp - Node.js module for resizing JPEG, PNG, WebP and TIFF images.Recommended Client-side LibrariesFramework7 - Full Featured HTML Framework For Building iOS7 Apps.InstantClick - Makes your pages load instantly by pre-loading them on mouse hover.NProgress.js - Slim progress bars like on YouTube and Medium.Hover - Awesome CSS3 animations on mouse hover.Magnific Popup - Responsive jQuery Lightbox Plugin.Offline.js - Detect when user's internet connection goes offline.Alertify.js - Sweet looking alerts and browser dialogs.selectize.js - Styleable select elements and input tags.drop.js -  Powerful Javascript and CSS library for creating dropdowns and other floating displays.scrollReveal.js - Declarative on-scroll reveal animations.Pro TipsNeed to find a specific object inside an Array? Use _.find function from Lodash. For example, this is how you would retrieve a Twitter token from database: var token = _.find(req.user.tokens, { kind: 'twitter' });, where 1st parameter is an array, and a 2nd parameter is an object to search for.FAQWhy do I get 403 Error: Forbidden when submitting a form?You need to add the following hidden input element to your form. This has been added in the pull request #40 as part of the CSRF protection.input(type='hidden', name='_csrf', value=_csrf)Note: It is now possible to whitelist certain URLs. In other words, you can specify a list of routes that should bypass the CSRF verification check.Note 2: To whitelist dynamic URLs use regular expression tests inside the CSRF middleware to see if req.originalUrl matches your desired pattern.I am getting MongoDB Connection Error, how do I fix it?That's a custom error message defined in app.js to indicate that there was a problem connecting to MongoDB:mongoose.connection.on('error', (err) => {  console.error(err);  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('✗'));  process.exit();});You need to have a MongoDB server running before launching app.js. You can download MongoDB here, or install it via a package manager.Windows users, read Install MongoDB on Windows.Tip: If you are always connected to the internet, you could just use MongoDB Atlas instead of downloading and installing MongoDB locally. You will only need to update database credentials in .env file.I get an error when I deploy my app, why?Chances are you haven't changed the Database URI in .env. If MONGODB is set to localhost, it will only work on your machine as long as MongoDB is running. When you deploy to Render, OpenShift, or some other provider, you will not have MongoDB running on localhost. You need to create an account with MongoDB Atlas, then create a free tier database.See Deployment for more information on how to set up an account and a new database step-by-step with MongoDB Atlas.Why do you have all routes defined in app.js?For the sake of simplicity. While there might be a better approach, such as passing app context to each controller as outlined in this blog, I find such a style to be confusing for beginners. It took me a long time to grasp the concept of exports and module.exports, let alone having a global app reference in other files. Tha to me is backward thinking.The app.js is the \""heart of the app\"", it should be the one referencing models, routes, controllers, etc.When working solo on small projects, I prefer to have everything inside app.js as is the case with this REST API server.How It Works (mini guides)This section is intended for giving you a detailed explanation of how a particular functionality works. Maybe you are just curious about how it works, or perhaps you are lost and confused while reading the code, I hope it provides some guidance to you.Custom HTML and CSS Design 101HTML5 UP has many beautiful templates that you can download for free.When you download the ZIP file, it will come with index.html, images, CSS and js folders. So, how do you integrate it with Hackathon Starter? Hackathon Starter uses the Bootstrap CSS framework, but these templates do not.Trying to use both CSS files at the same time will likely result in undesired effects.Note: Using the custom templates approach, you should understand that you cannot reuse any of the views I have created: layout, the home page, API browser, login, signup, account management, contact. Those views were built using Bootstrap grid and styles. You will have to manually update the grid using a different syntax provided in the template. Having said that, you can mix and match if you want to do so: Use Bootstrap for the main app interface, and a custom template for a landing page.Let's start from the beginning. For this example I will use Escape Velocity template:Note: For the sake of simplicity I will only consider index.html, and skip left-sidebar.html,no-sidebar.html, right-sidebar.html.Move all JavaScript files from html5up-escape-velocity/js to public/js. Then move all CSS files from html5up-escape-velocity/css to public/css. And finally, move all images from html5up-escape-velocity/images to public/images. You could move it to the existing img folder, but that would require manually changing every img reference. Grab the contents of index.html and paste it into HTML To Pug.Note: Do not forget to update all the CSS and JS paths accordingly.Create a new file escape-velocity.pug and paste the Pug markup in views folder.Whenever you see the code res.render('account/login') - that means it will search for views/account/login.pug file.Let's see how it looks. Create a new controller escapeVelocity inside controllers/home.js:exports.escapeVelocity = (req, res) => {  res.render('escape-velocity', {    title: 'Landing Page'  });};And then create a route in app.js. I placed it right after the index controller:app.get('/escape-velocity', homeController.escapeVelocity);Restart the server (if you are not using nodemon); then you should see the new template at http://localhost:8080/escape-velocityI will stop right here, but if you would like to use this template as more than just a single page, take a look at how these Pug templates work: layout.pug - base template, index.pug - home page, partials/header.pug - Bootstrap navbar, partials/footer.pug - sticky footer. You will have to manually break it apart into smaller pieces. Figure out which part of the template you want to keep the same on all pages - that's your new layout.pug.Then, each page that changes, be it index.pug, about.pug, contact.pugwill be embedded in your new layout.pug via block content. Use existing templates as a reference.This is a rather lengthy process, and templates you get from elsewhere might have yet another grid system. That's why I chose Bootstrap for the Hackathon Starter.Many people are already familiar with Bootstrap, plus it's easy to get started with it if you have never used Bootstrap.You can also buy many beautifully designed Bootstrap themes at Themeforest, and use them as a drop-in replacement for Hackathon Starter. However, if you would like to go with a completely custom HTML/CSS design, this should help you to get started!How do flash messages work in this project?Flash messages allow you to display a message at the end of the request and access it on the next request and only the next request. For instance, on a failed login attempt, you would display an alert with some error message, but as soon as you refresh that page or visit a different page and come back to the login page, that error message will be gone. It is only displayed once.This project uses express-flash module for flash messages. And that module is built on top of connect-flash, which is what I used in this project initially. With express-flash you don't have to explicitly send a flash message to every view inside res.render().All flash messages are available in your views via messages object by default, thanks to express-flash.Flash messages have a two-step process. You use req.flash('errors', { msg: 'Error messages goes here' }to create a flash message in your controllers, and then display them in your views:if messages.errors  .alert.alert-danger.fade.in    for error in messages.errors      div= error.msgIn the first step, 'errors' is the name of a flash message, which should match the name of the property on messages object in your views. You place alert messages inside if message.errors because you don't want to show them flash messages are present.The reason why you pass an error like { msg: 'Error message goes here' } instead of just a string - 'Error message goes here', is for the sake of consistency.To clarify that, express-validator module which is used for validating and sanitizing user's input, returns all errors as an array of objects, where each object has a msg property with a message why an error has occurred. Here is a more general example of what express-validator returns when there are errors present:[  { param: \""name\"", msg: \""Name is required\"", value: \""<received input>\"" },  { param: \""email\"", msg: \""A valid email is required\"", value: \""<received input>\"" }]To keep consistent with that style, you should pass all flash messages as { msg: 'My flash message' } instead of a string. Otherwise, you will see an alert box without an error message. That is because in partials/flash.pug template it will try to output error.msg (i.e. \""My flash message\"".msg), in other words, it will try to call a msg method on a String object, which will return undefined. Everything I just mentioned about errors, also applies to \""info\"" and \""success\"" flash messages, and you could even create a new one yourself, such as:Data Usage Controller (Example)req.flash('warning', { msg: 'You have exceeded 90% of your data usage' });User Account Page (Example)if messages.warning  .alert.alert-warning.fade.in    for warning in messages.warning      div= warning.msgpartials/flash.pug is a partial template that contains how flash messages are formatted. Previously, flash messages were scattered throughout each view that used flash messages (contact, login, signup, profile), but now, thankfully it uses a DRY approach.The flash messages partial template is included in the layout.pug, along with footer and navigation.body    include partials/header    .container      include partials/flash      block content    include partials/footerIf you have any further questions about flash messages, please feel free to open an issue, and I will update this mini-guide accordingly, or send a pull request if you would like to include something that I missed.How do I create a new page?A more correct way to say this would be \""How do I create a new route?\"" The main file app.js contains all the routes.Each route has a callback function associated with it. Sometimes you will see three or more arguments for a route. In a case like that, the first argument is still a URL string, while middle arguments are what's called middleware. Think of middleware as a door. If this door prevents you from continuing forward, you won't get to your callback function. One such example is a route that requires authentication.app.get('/account', passportConfig.isAuthenticated, userController.getAccount);It always goes from left to right. A user visits /account page. Then isAuthenticated middleware checks if you are authenticated:exports.isAuthenticated = (req, res, next) => {  if (req.isAuthenticated()) {    return next();  }  res.redirect('/login');};If you are authenticated, you let this visitor pass through your \""door\"" by calling return next();. It then proceeds to thenext middleware until it reaches the last argument, which is a callback function that typically renders a template on GET requests or redirects on POST requests. In this case, if you are authenticated, you will be redirected to the Account Management page; otherwise, you will be redirected to the Login page.exports.getAccount = (req, res) => {  res.render('account/profile', {    title: 'Account Management'  });};Express.js has app.get, app.post, app.put, app.delete, but for the most part, you will only use the first two HTTP verbs, unless you are building a RESTful API.If you just want to display a page, then use GET, if you are submitting a form, sending a file then use POST.Here is a typical workflow for adding new routes to your application. Let's say we are building a page that lists all books from the database.Step 1. Start by defining a route.app.get('/books', bookController.getBooks);Note: As of Express 4.x you can define your routes like so:app.route('/books')  .get(bookController.getBooks)  .post(bookController.createBooks)  .put(bookController.updateBooks)  .delete(bookController.deleteBooks)And here is how a route would look if it required an authentication and an authorization middleware:app.route('/api/twitter')  .all(passportConfig.isAuthenticated)  .all(passportConfig.isAuthorized)  .get(apiController.getTwitter)  .post(apiController.postTwitter)Use whichever style makes sense to you. Either one is acceptable. I think that chaining HTTP verbs on app.route is a very clean and elegant approach, but on the other hand, I can no longer see all my routes at a glance when you have one route per line.Step 2. Create a new schema and a model Book.js inside the models directory.const mongoose = require('mongoose');const bookSchema = new mongoose.Schema({  name: String});const Book = mongoose.model('Book', bookSchema);module.exports = Book;Step 3. Create a new controller file called book.js inside the controllers directory./** * GET /books * List all books. */const Book = require('../models/Book.js');exports.getBooks = (req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });};Step 4. Import that controller in app.js.const bookController = require('./controllers/book');Step 5. Create books.pug template.extends layoutblock content  .page-header    h3 All Books  ul    for book in books      li= book.nameThat's it! I will say that you could have combined Step 1, 2, 3 as following:app.get('/books',(req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });});Sure, it's simpler, but as soon as you pass 1000 lines of code in app.js it becomes a little challenging to navigate the file.I mean, the whole point of this boilerplate project was to separate concerns, so you could work with your teammates without running into MERGE CONFLICTS. Imagine you have four developers working on a single app.js, I promise you it won't be fun resolving merge conflicts all the time.If you are the only developer, then it's okay. But as I said, once it gets up to a certain LoC size, it becomes difficult to maintain everything in a single file.That's all there is to it. Express.js is super simple to use.Most of the time you will be dealing with other APIs to do the real work:Mongoose for querying database, socket.io for sending and receiving messages over WebSockets, sending emails via Nodemailer, form validation using validator.js library, parsing websites using Cheerio, etc.How do I use Socket.io with Hackathon Starter?Dan Stroot submitted an excellent pull request that adds a real-time dashboard with socket.io.And as  much as I'd like to add it to the project, I think it violates one of the main principles of the Hackathon Starter:When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases ofhackathon web apps, without being too specific.When I need to use socket.io, I really need it, but most of the time - I don't. But more importantly, WebSockets support is still experimental on most hosting providers.Due to past provider issues with WebSockets, I have not include socket.io as part of the Hackathon Starter. For now...If you need to use socket.io in your app, please continue reading.First, you need to install socket.io:npm install socket.ioReplace const app = express(); with the following code:const app = express();const server = require('http').Server(app);const io = require('socket.io')(server);I like to have the following code organization in app.js (from top to bottom): module dependencies,import controllers, import configs, connect to database, express configuration, routes,start the server, socket.io stuff. That way I always know where to look for things.Add the following code at the end of app.js:io.on('connection', (socket) => {  socket.emit('greet', { hello: 'Hey there browser!' });  socket.on('respond', (data) => {    console.log(data);  });  socket.on('disconnect', () => {    console.log('Socket disconnected');  });});One last thing left to change:app.listen(app.get('port'), () => {toserver.listen(app.get('port'), () => {At this point, we are done with the back-end.You now have a choice - to include your JavaScript code in Pug templates or have all your client-side JavaScript in a separate file - in app.js. I admit, when I first started with Node.js and JavaScript in general, I placed all JavaScript code inside templates because I have access to template variables passed in from Express right then and there. It's the easiest thing you can do, but also the least efficient and harder to maintain. Since then I almost never include inline JavaScript inside templates anymore.But it's also understandable if you want to take the easier road. Most of the time you don't even care about performance during hackathons, you just want to \""get shit done\"" before the time runs out. Well, either way, use whichever approach makes more sense to you. At the end of the day, it's what you build that matters, not how you build it.If you want to stick all your JavaScript inside templates, then in layout.pug - your main template file, add this to head block.script(src='/socket.io/socket.io.js')script.    let socket = io.connect(window.location.href);    socket.on('greet', function (data) {      console.log(data);      socket.emit('respond', { message: 'Hey there, server!' });    });Note: Notice the path of the socket.io.js, you don't actually have to have socket.io.js file anywhere in your project; it will be generated automatically at runtime.If you want to have JavaScript code separate from templates, move that inline script code into app.js, inside the $(document).ready() function:$(document).ready(function() {  // Place JavaScript code here...  let socket = io.connect(window.location.href);  socket.on('greet', function (data) {    console.log(data);    socket.emit('respond', { message: 'Hey there, server!' });  });});And we are done!Cheatsheets ES6 CheatsheetDeclarationsDeclares a read-only named constant.const name = 'yourName';Declares a block scope local variable.let index = 0;Template StringsUsing the `${}` syntax, strings can embed expressions.const name = 'Oggy';const age = 3;console.log(`My cat is named ${name} and is ${age} years old.`);ModulesTo import functions, objects, or primitives exported from an external module. These are the most common types of importing.const name = require('module-name');const { foo, bar } = require('module-name');To export functions, objects, or primitives from a given file or module.module.exports = { myFunction };module.exports.name = 'yourName';module.exports = myFunctionOrClass;Spread OperatorThe spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.myFunction(...iterableObject);<ChildComponent {...this.props} />PromisesA Promise is used in asynchronous computations to represent an operation that hasn't completed yet but is expected in the future.var p = new Promise(function(resolve, reject) { });The catch() method returns a Promise and deals with rejected cases only.p.catch(function(reason) { /* handle rejection */ });The then() method returns a Promise. It takes two arguments: callback for the success & failure cases.p.then(function(value) { /* handle fulfillment */ }, function(reason) { /* handle rejection */ });The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved or rejects with the reason of the first passed promise that rejects.Promise.all([p1, p2, p3]).then(function(values) { console.log(values) });Arrow FunctionsArrow function expression. Shorter syntax & lexically binds the this value. Arrow functions are anonymous.singleParam => { statements }() => { statements }(param1, param2) => expressionconst arr = [1, 2, 3, 4, 5];const squares = arr.map(x => x * x);ClassesThe class declaration creates a new class using prototype-based inheritance.class Person {  constructor(name, age, gender) {    this.name   = name;    this.age    = age;    this.gender = gender;  }  incrementAge() {    this.age++;  }}🎁 Credits: DuckDuckGo and @DrkSephy.🔝 back to top JavaScript Date CheatsheetUnix Timestamp (seconds)Math.floor(Date.now() / 1000);moment().unix();Add 30 minutes to a Date objectvar now = new Date();now.setMinutes(now.getMinutes() + 30);moment().add(30, 'minutes');Date Formatting// DD-MM-YYYYvar now = new Date();var DD = now.getDate();var MM = now.getMonth() + 1;var YYYY = now.getFullYear();if (DD < 10) {  DD = '0' + DD;}if (MM < 10) {  MM = '0' + MM;}console.log(MM + '-' + DD + '-' + YYYY); // 03-30-2016console.log(moment(new Date(), 'MM-DD-YYYY'));// hh:mm (12 hour time with am/pm)var now = new Date();var hours = now.getHours();var minutes = now.getMinutes();var amPm = hours >= 12 ? 'pm' : 'am';hours = hours % 12;hours = hours ? hours : 12;minutes = minutes < 10 ? '0' + minutes : minutes;console.log(hours + ':' + minutes + ' ' + amPm); // 1:43 amconsole.log(moment(new Date(), 'hh:mm A'));Next week Date objectvar today = new Date();var nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);moment().add(7, 'days');Yesterday Date objectvar today = new Date();var yesterday = date.setDate(date.getDate() - 1);moment().add(-1, 'days');🔝 back to topMongoose CheatsheetFind all users:User.find((err, users) => {  console.log(users);});Find a user by email:let userEmail = 'example@gmail.com';User.findOne({ email: userEmail }, (err, user) => {  console.log(user);});Find 5 most recent user accounts:User  .find()  .sort({ _id: -1 })  .limit(5)  .exec((err, users) => {    console.log(users);  });Get the total count of a field from all documents:Let's suppose that each user has a votes field and you would like to count the total number of votes in your database across all users. One very inefficient way would be to loop through each document and manually accumulate the count. Or you could use MongoDB Aggregation Framework instead:User.aggregate({ $group: { _id: null, total: { $sum: '$votes' } } }, (err, votesCount)  => {  console.log(votesCount.total);});🔝 back to topDockerYou will need docker and docker-compose installed to build the application.Docker installationCommon problems setting up dockerAfter installing docker, start the application with the following commands :# To build the project for the first time or when you add dependenciesdocker-compose build web# To start the application (or to restart after making changes to the source code)docker-compose up webTo view the app, find your docker IP address + port 8080 ( this will typically be http://localhost:8080/ ).  To use a port other than 8080, you would need to modify the port in app.js, Dockerfile, and docker-compose.yml.DeploymentOnce you are ready to deploy your app, you will need to create an account with a cloud platform to host it. These are not the only choices, but they are my top picks.  Additionally, you can create an account with MongoDB Atlas and then pick one of the providers below. Again, there are plenty of other choices, and you are not limited to just the ones listed below.Deployment to RenderRender provides free nodejs hosting for repos on Github and Gitlab.Sign up for a free Individual account at https://render.comLink your Github accountCreate a Web ServiceAdd your repo and add your environment variables under the Advanced settings.Note 1: The automated deployments may not work, and you may need to manually trigger deployments after your commits.Hosted MongoDB AtlasGo to https://www.mongodb.com/cloud/atlasClick the green Get started free buttonFill in your information then hit Get started freeYou will be redirected to Create New Cluster page.Select a Cloud Provider and Region (such as AWS and a free tier region)Select cluster Tier to Free forever Shared ClusterGive Cluster a name (default: Cluster0)Click on green ⚡Create Cluster buttonNow, to access your database you need to create a DB user. To create a new MongoDB user, from the Clusters view, select the Security tabUnder the MongoDB Users tab, click on +Add New UserFill in a username and password and give it either Atlas Admin User PrivilegeNext, you will need to create an IP address whitelist and obtain the connection URI.  In the Clusters view, under the cluster details (i.e. SANDBOX - Cluster0), click on the CONNECT button.Under section (1) Check the IP Whitelist, click on ALLOW ACCESS FROM ANYWHERE. The form will add a field with 0.0.0.0/0.  Click SAVE to save the 0.0.0.0/0 whitelist.Under section (2) Choose a connection method, click on Connect Your ApplicationIn the new screen, select Node.js as Driver and version 3.6 or later.Finally, copy the URI connection string and replace the URI in MONGODB_URI of .env.example with this URI string.  Make sure to replace the  with the db User password that you created under the Security tab.Note that after some of the steps in the Atlas UI, you may see a banner stating We are deploying your changes.  You will need to wait for the deployment to finish before using the DB in your application.OpenShift**NOTE** *These instructions might be out of date due to changes in OpenShift. Render is currently a good free alternative.  If you know the new process, please feel free to help us update this page*First, install this Ruby gem: sudo gem install rhc 💎Run rhc login and enter your OpenShift credentialsFrom your app directory run rhc app create MyApp nodejs-0.10Note: MyApp is the name of your app (no spaces)Once that is done, you will be provided with URL, SSH and Git Remote linksVisit provided URL, and you should see the Welcome to your Node.js application on OpenShift pageCopy and paste Git Remote into git remote add openshift YOUR_GIT_REMOTEBefore you push your app, you need to do a few modifications to your codeAdd these two lines to app.js, just place them anywhere before app.listen():var IP_ADDRESS = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';var PORT = process.env.OPENSHIFT_NODEJS_PORT || 8080;Then change app.listen() to:app.listen(PORT, IP_ADDRESS,() => {  console.log(`Express server listening on port ${PORT} in ${app.settings.env} mode`);});Add this to package.json, after name and version. This is necessary because, by default, OpenShift looks for server.js file. And by specifying supervisor app.js it will automatically restart the server when node.js process crashes.\""main\"": \""app.js\"",\""scripts\"": {  \""start\"": \""supervisor app.js\""},Finally, you can now push your code to OpenShift by running git push -f openshift masterNote: The first time you run this command, you have to pass -f (force) flag because OpenShift creates a dummy server with the welcome page when you create a new Node.js app. Passing -f flag will override everything with your Hackathon Starter project repository. Do not run git pull as it will create unnecessary merge conflicts.And you are done!Azure**NOTE** *Beyond the initial 12 month trial of Azure, the platform does not seem to offer a free tier for hosting NodeJS apps.  If you are looking for a free tier service to host your app, Render might be a better choice at this point*Login to Windows Azure Management PortalClick the + NEW button on the bottom left of the portalClick COMPUTE, then WEB APP, then QUICK CREATEEnter a name for URL and select the datacenter REGION for your web siteClick on CREATE WEB APP buttonOnce the web site status changes to Running, click on the name of the web site to access the DashboardAt the bottom right of the Quickstart page, select Set up a deployment from source controlSelect Local Git repository from the list, and then click the arrowTo enable Git publishing, Azure will ask you to create a user name and passwordOnce the Git repository is ready, you will be presented with a GIT URLInside your Hackathon Starter directory, run git remote add azure [Azure Git URL]To push your changes run git push azure masterNote: You will be prompted for the password you created earlierOn Deployments tab of your Windows Azure Web App, you will see the deployment historyIBM Bluemix Cloud PlatformNOTE At this point it appears that Bluemix's free tier to host NodeJS apps is limited to 30 days.  If you are looking for a free tier service to host your app, Render might be a better choice at this pointCreate a Bluemix AccountSign up for Bluemix, or use an existing account.Download and install the Cloud Foundry CLI to push your applications to Bluemix.Create a manifest.yml file in the root of your application.applications:- name:      <your-app-name>  host:      <your-app-host>  memory:    128M  services:  - myMongo-db-nameThe host you use will determinate your application URL initially, e.g. <host>.mybluemix.net.The service name 'myMongo-db-name' is a declaration of your MongoDB service.  If you are using other services like Watson for example, then you would declare them the same way.Connect and login to Bluemix via the Cloud-foundry CLI$ cf login -a https://api.ng.bluemix.netCreate a MongoDB service$ cf create-service mongodb 100 [your-service-name]Note: this is a free and experiment verion of MongoDB instance.Use the MongoDB by Compose instance for production applications:$ cf create-service compose-for-mongodb Standard [your-service-name]'Push the application$ cf push$ cf env <your-app-name >(To view the *environment variables* created for your application)Done, now go to the staging domain (<host>.mybluemix.net) and see your app running.More Bluemix samplesSimple ToDo app in a programming language of your choiceIBM WatsonBe sure to check out the full list of Watson services to forwarder enhance your application functionality with a little effort. Watson services are easy to get going; it is simply a RESTful API call. Here is an example of a Watson Toner Analyzer to understand the emotional context of a piece of text that you send to Watson.Watson catalog of servicesVirtual Assistant -    Deliver consistent and intelligent customer care across all channels and touchpoints with conversational AI.Natural Language Understanding - Analyze text to extract meta-data from content such as concepts, entities, keywords and more.Discovery - Accelerate business decisions and processes with an AI-powered intelligent document understanding and content analysis platform.Orchestrate - Hand off tedious tasks to Watson and never work the same way again.List of Watson Services.Google Cloud PlatformDownload and install Node.jsSelect or create a Google Cloud Platform Console projectEnable billing for your project (there's a $300 free trial)Install and initialize the Google Cloud SDKCreate an app.yaml file at the root of your hackathon-starter folder with the following contents:runtime: nodejsenv: flexmanual_scaling:  instances: 1Make sure you've set MONGODB_URI in .env.exampleRun the following command to deploy the hackathon-starter app:gcloud app deployMonitor your deployed app in the Cloud ConsoleView the logs for your app in the Cloud ConsoleProductionIf you are starting with this boilerplate to build an application for prod deployment, or if after your hackathon you would like to get your project hardened for production use, see prod-checklist.md.ChangelogYou can find the changelog for the project in: CHANGELOG.mdContributingIf something is unclear, confusing, or needs to be refactored, please let me know.Pull requests are always welcome, but due to the opinionated nature of this project, I cannot accept every pull request. Please open an issue before submitting a pull request. This project uses Airbnb JavaScript Style Guide with a few minor exceptions. If you are submitting a pull request that involves Pug templates, please make sure you are using spaces, not tabs.LicenseThe MIT License (MIT)Copyright (c) 2014-2023 Sahat YalkabovPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \""Software\""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
62,microsoft/Windows-universal-samples,https://github.com/microsoft/Windows-universal-samples/blob/main/README.md,JavaScript,"Universal Windows Platform (UWP) app samplesThis repo contains the samples that demonstrate the API usage patterns for the Universal Windows Platform (UWP) in the Windows Software Development Kit (SDK) for Windows 10. These code samples were created with the Universal Windows Platform templates available in Visual Studio, and are designed to run on desktop, mobile, and future devices that support the Universal Windows Platform.Note: If you are unfamiliar with Git and GitHub, you can download the entire collection as aZIP file, but besure to unzip everything to access shared dependencies. For more info on working with the ZIP file,the samples collection, and GitHub, see Get the UWP samples from GitHub.For more samples, see the Samples portal on the Windows Dev Center.Universal Windows Platform developmentThese samples require Visual Studio and the Windows Software Development Kit (SDK) for Windows 10.Get a free copy of Visual Studio Community Edition with support for building Universal Windows Platform appsAdditionally, to stay on top of the latest updates to Windows and the development tools, become a Windows Insider by joining the Windows Insider Program.Become a Windows InsiderUsing the samplesThe easiest way to use these samples without using Git is to download the zip file containing the current version (using the following link or by clicking the \""Download ZIP\"" button on the repo page). You can then unzip the entire archive and use the samples in Visual Studio.Download the samples ZIPNotes:Before you unzip the archive, right-click it, select Properties, and then select Unblock.Be sure to unzip the entire archive, and not just individual samples. The samples all depend on the SharedContent folder in the archive.In Visual Studio, the platform target defaults to ARM, so be sure to change that to x64 or x86 if you want to test on a non-ARM device.The samples use Linked files in Visual Studio to reduce duplication of common files, including sample template files and image assets. These common files are stored in the SharedContent folder at the root of the repository, and are referred to in the project files using links.Reminder: If you unzip individual samples, they will not build due to references to other portions of the ZIP file that were not unzipped. You must unzip the entire archive if you intend to build the samples.For more info about the programming models, platforms, languages, and APIs demonstrated in these samples, please refer to the guidance, tutorials, and reference topics provided in the Windows 10 documentation available in the Windows Developer Center. These samples are provided as-is in order to indicate or demonstrate the functionality of the programming models and feature APIs for Windows.ContributionsThese samples are direct from the feature teams and we welcome your input on issues and suggestions for new samples. At this time we are not accepting new samples from the public, but check back here as we evolve our contribution model.This project has adopted the Microsoft Open Source Code of Conduct.For more information, see the Code of Conduct FAQor contact opencode@microsoft.com with any additional questions or comments.See alsoFor additional Windows samples, see Windows on GitHub.Samples by categoryApp settings   App package information  Application data  Store Audio, video, and camera   360-degree video playback  Adaptive streaming  Advanced capture    Advanced casting  Audio categories  Audio graphs    Background media playback  Basic camera app  Basic face detection    Basic face tracking  Basic media casting  Camera face detection    Camera frames  Camera preview frame  Camera profiles    Camera resolution  Camera stream coordinate mapper  Camera stream correlation    DASH streaming  Direct2D photo adjustment  Media editing    Media import  Media transport controls  MIDI    Playlists  PlayReady  Processing frames with OpenCV    Simple imaging  Spatial audio  System media transport controls    Transcoding media  Video playback  Video playback synchronization    Video stabilization  Windows audio session (WASAPI) Communications   Bluetooth RFCOMM chat  Real-time communication  SMS send and receive Contacts and calendar   Appointment calendar  Contact cards  Contact panel    Contact picker  UserDataAccountManager Controls, layout, and text   3D Printing  3D Printing from Unity  Bottom-up list (XAML)    Clipboard  Colored glyphs (DirectWrite)  Commanding    Context menu  Context menu (XAML)  Custom text edit control    Data virtualization  Display orientation  Downloadable fonts (DirectWrite)    Downloadable fonts (XAML)  Drag and drop  Focus visuals    Full screen mode  Gamepad-style navigation (XAML)  Line spacing (DirectWrite)    ListView and GridView  Lock screen apps  Message dialog    Multiple views  OCR  Printing    Scaling according to DPI  Secondary windows  Splash screen    State triggers  Tailored multiple views  Title bar    UI basics (XAML)  User interaction mode  WebView control (XAML)    Window resizing Custom user interactions   Basic input  Complex inking  Ink analysis    Low latency input  Pen haptics  Simple inking    Touch keyboard  Touch keyboard text input Data   Compression  Content indexer  Logging    PDF document  Serializing and deserializing data  x:Bind    x:DeferLoadStrategy  XML DOM  XmlLite Deep links and app-to-app communication   App services  Jump list customization  Remote systems    Sharing content source app  Sharing content target app  User activities Devices and sensors   Accelerometer  Activity detection sensor  AllJoyn consumer experiences    AllJoyn producer experiences  Altimeter  Background sensors    Barcode scanner  Barcode scanner provider  Barometer    Bluetooth advertisement  Bluetooth Low Energy  Cash drawer    Compass  Custom HID device  Custom sensors    Custom serial device  Custom USB device  Device enumeration and pairing    General Purpose Input/Output (GPIO)  Gyrometer  Presence sensor    Inclinometer  Inter-Integrated Circuit (I2C)  Lamp device    Light sensor  Line display  Magnetometer    Magnetic stripe reader  Near field communication (NFC)  NFC enterprise provisioner    Orientation sensor  Pedometer  POS printer    Proximity sensor  Radial controller  Relative inclinometer    Serial Arduino  Serial Peripheral Interface (SPI)  Simple orientation sensor Files, folders, and libraries   File access  File and folder thumbnail  File picker    File picker provider  File search  Folder enumeration    Library management  Semantic text query Gaming   Direct3D game  DirectX and XAML game Globalization and localization   Application resources and localization  Calendar  Date and time formatting    Globalization preferences  Japanese phonetic analysis  Language font mapping    Linguistic services  Number formatting and parsing  Text segmentation    Text suggestions  Unicode string processing Graphics and animation   Animated GIF playback (XAML)  Animation metrics  Composition visual without framework    Direct2D advanced color image rendering  Direct2D custom image effects  Direct2D gradient mesh    Direct2D SVG image rendering  Transform3D animations Holographic   Basic hologram  Holographic face tracking  Holographic mixed reality capture    Holographic spatial mapping  Holographic spatial stage  Holographic voice input    Spatial interaction source  Tag-along hologram    Mixed Reality Model Identity, security, and encryption   Credential locker  Client Device Information  Credential picker    Disabling screen capture  Enterprise data protection  KeyCredentialManager    Lock screen personalization  Microsoft Passport and Windows Hello  Smart cards    User information  UserCertificateStore  UserConsentVerifier    Web account management  WebAuthenticationBroker Launching and background tasks   Association launching  Background activation  Background task    Extended execution  Multi-instance apps  Suspend and resume Maps and location   Geolocation  Geotag  MapControl Navigation   Back Button  Master/detail  Pivot    Projection Networking and web services   Background transfer  DatagramSocket  HttpClient    JSON  Mobile broadband  Network connectivity    On-Demand Wi-Fi hotspot  Radios  Socket activity trigger stream socket    StreamSocket  Syndication  USSD protocol    WebSocket  Wi-Fi Direct  Wi-Fi Direct services    Wi-Fi hotspot authentication  Wi-Fi scanning Platform architecture   Capabilities  Custom capabilities  In-process component authoring    In-process component authoring  Out-of-process component authoring  Version adaptive code Speech and Cortana   Cortana voice command  Speech recognition and synthesis Tiles, toasts, and notifications   Notifications  Secondary tiles "
63,SheetJS/sheetjs,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
64,leonardomso/33-js-concepts,https://github.com/leonardomso/33-js-concepts/blob/master/README.md,JavaScript,"          33 Concepts Every JavaScript Developer Should Know  IntroductionThis repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by Stephen Curtis and you can read it here.🚀 Considered by GitHub as one of the top open source projects of 2018!CommunityFeel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.All the translations for this repo will be listed below:(Arabic) — Amr Elsekilly汉语 (Chinese) — Re TianPortuguês do Brasil (Brazilian Portuguese) — Tiago Boeing한국어 (Korean) — Suin LeeEspañol (Spanish) — Adonis MendozaTürkçe (Turkish) — İlker Demirрусский язык (Russian) — Mihail GumenniiTiếng Việt (Vietnamese) — Nguyễn Trần ChungPolski (Polish) — Dawid Lipinskiفارسی (Persian) — Majid AlavizadehBahasa Indonesia (Indonesian) — Rijdzuan SampoernaFrançais (French) — Robin Métralहिन्दी (Hindi) — Vikas ChauhanΕλληνικά (Greek) — Dimitris Zarachanis日本語 (Japanese) — oimo23Deutsch (German) — burhannnукраї́нська мо́ва (Ukrainian) — Andrew Savetchukසිංහල (Sinhala) — Udaya ShamendraItaliano (Italian) — Gianluca Fioreภาษาไทย (Thai) — Arif WaramCatalà (Catalan) — Mario Estradaខ្មែរ (Khmer) — Chrea Chanchhunnengአማርኛ (Ethiopian) - Miniyahil Kebede(ምንያህል ከበደ)Беларуская мова (Belarussian) — Dzianis YafimauTable of ContentsCall StackPrimitive TypesValue Types and Reference TypesImplicit, Explicit, Nominal, Structuring and Duck Typing== vs === vs typeofFunction Scope, Block Scope and Lexical ScopeExpression vs StatementIIFE, Modules and NamespacesMessage Queue and Event LoopsetTimeout, setInterval and requestAnimationFrameJavaScript EnginesBitwise Operators, Type Arrays and Array BuffersDOM and Layout TreesFactories and Classesthis, call, apply and bindnew, Constructor, instanceof and InstancesPrototype Inheritance and Prototype ChainObject.create and Object.assignmap, reduce, filterPure Functions, Side Effects, State Mutation and Event PropagationClosuresHigh Order FunctionsRecursionCollections and GeneratorsPromisesasync/awaitData StructuresExpensive Operation and Big O NotationAlgorithmsInheritance, Polymorphism and Code ReuseDesign PatternsPartial Applications, Currying, Compose and PipeClean Code1. Call StackReference📜 Call Stack — MDNArticles📜 Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia📜 Understanding the JavaScript Call Stack — Charles Freeborn📜 Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi📜 What is the JS Event Loop and Call Stack? — Jess Telford📜 Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora📜 How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov📜 How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin RajbharVideos🎥 Javascript: the Call Stack explained — Coding Blocks India🎥 The JS Call Stack Explained In 9 Minutes — Colt Steele🎥 What is the Call Stack? — Eric Traub🎥 The Call Stack — Kevin Drumm🎥 Understanding JavaScript Execution — Codesmith🎥 The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis🎥 What the heck is the event loop anyway? — Philip Roberts🎥 La PILA DE EJECUCIÓN (Call Stack) de JavaScript — La Cocina del Código🎥 How JavaScript Code is executed? ❤️& Call Stack — Akshay Saini⬆ Back to Top2. Primitive TypesReference📜 JavaScript data types and data structures — MDNArticles📜 Primitive and Non-primitive data-types in JavaScript - GeeksforGeeks📜 Javascript variables (Beginner thinking)📜 How numbers are encoded in JavaScript — Dr. Axel Rauschmayer📜 What You Need to Know About JavaScript Number Type — Max Wizard K📜 What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy📜 The Secret Life of JavaScript Primitives — Angus Croll📜 Primitive Types — Flow📜 (Not) Everything in JavaScript is an Object — Daniel Li📜 JavaScript data types and data structures — MDN📜 Diving Deeper in JavaScripts Objects — Arfat Salman📜 The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji📜 Object to primitive conversion — JavaScript.infoVideos🎥 JavaScript Reference vs Primitive Types — Academind🎥 JavaScript Primitive Types — Simon Sez IT🎥 Value Types and Reference Types in JavaScript — Programming with Mosh🎥 JavaScript Primitive Data Types — Avelx🎥 Everything you never wanted to know about JavaScript numbers — Bartek Szopka🎥 What are variables in Javascript? — JS For Everyone🎥 TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código⬆ Back to Top3. Value Types and Reference TypesArticles📜 Explaining Value vs. Reference in Javascript — Arnav Aggarwal📜 Primitive Types & Reference Types in JavaScript — Bran van der Meer📜 Value Types, Reference Types and Scope in JavaScript — Ben Aston📜 Back to roots: JavaScript Value vs Reference — Miro Koczka📜 Grasp “By Value” and “By Reference” in JavaScript — Léna Faure📜 JavaScript Reference and Copy Variables — Vítor Capretz📜 JavaScript Primitive vs Reference Values📜 JavaScript by Reference vs. by Value — nrabinowitz📜 JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin📜 JavaScript map vs. forEach: When to Use Each One - Sajal SoniVideos🎥 Javascript Pass by Value vs Pass by Reference — techsith🎥 JavaScript Value vs Reference Types — Programming with Mosh🎥 VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código🎥 JavaScript - Reference vs Primitive Values/ Types - Academind⬆ Back to Top4. Implicit, Explicit, Nominal, Structuring and Duck TypingArticles📜 What you need to know about Javascript's Implicit Coercion — Promise Tochi📜 JavaScript Type Coercion Explained — Alexey Samoshkin📜 Javascript Coercion Explained — Ben Garrison📜 What exactly is Type Coercion in Javascript? - Stack OverflowVideos🎥 == ? === ??? ...#@^% - Shirmung Bielefeld🎥 Coercion in Javascript - Hitesh Choudhary🎥 JavaScript Questions: What is Coercion? - Steven Hancock🎥 Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse🎥 EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del CódigoBooksYou Don't Know JS, 1st Edition: Types & Grammar — Kyle Simpson⬆ Back to Top5. == vs === vs typeofArticles📜 JavaScript Double Equals vs. Triple Equals — Brandon Morelli📜 Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki📜 == vs === JavaScript: Double Equals and Coercion — AJ Meyghani📜 Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris📜 What is the difference between == and === in JavaScript? — Craig Buckler📜 Why javascript's typeof always return \""object\""? — Stack Overflow📜 Checking Types in Javascript — Toby Ho📜 How to better check data types in JavaScript — Webbjocke📜 Checking for the Absence of a Value in JavaScript — Tomer Aberbach📜 Difference between == and === in JavaScript — GeeksforGeeks📜 === vs == Comparision in JavaScript — FreeCodeCampVideos🎥 JavaScript - The typeof operator — Java Brains🎥 Javascript typeof operator — DevDelight🎥 JavaScript \""==\"" VS \""===\"" — Web Dev Simplified⬆ Back to Top6. Function Scope, Block Scope and Lexical ScopeBooksYou Don't Know JS Yet, 2nd Edition: Scope & Closures — Kyle SimpsonArticles📜 JavaScript Functions — Understanding The Basics — Brandon Morelli📜 Var, Let, and Const – What's the Difference?📜 Functions in JavaScript - Deepa Pandey📜 Emulating Block Scope in JavaScript — Josh Clanton📜 The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo📜 Function Scopes and Block Scopes in JavaScript — Samer Buna📜 Understanding Scope and Context in JavaScript — Ryan Morr📜 JavaScript Scope and Closures — Zell Liew📜 Understanding Scope in JavaScript — Wissam Abirached📜 Understanding Scope in JavaScript ― Hammad Ahmed📜 When to use a function declaration vs. a function expression ― Amber Wilkie📜 A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this” ― Alexandra Fren📜 Functions / Function scope ― MDNVideos🎥 What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy🎥 Variable Scope in JavaScript — Kirupa Chinnathambi🎥 JavaScript Block Scope and Function Scope — mmtuts🎥 What the Heck is Lexical Scope? — NWCalvank🎥 Variable Scope — Steve Griffith🎥 Javascript Tutorials for Beginners — Mosh Hemadani⬆ Back to Top7. Expression vs StatementArticles📜 All you need to know about Javascript's Expressions, Statements and Expression Statements — Promise Tochi📜 Function Expressions vs Function Declarations — Paul Wilkins📜 JavaScript Function — Declaration vs Expression — Ravi Roshan📜 Function Declarations vs. Function Expressions — Mandeep Singh📜 Function Declarations vs. Function Expressions — Anguls CrollVideos🎥 Expressions vs. Statements in JavaScript — Hexlet🎥 The difference between an expression and a statement in JavaScript⬆ Back to Top8. IIFE, Modules and NamespacesArticles📜 Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju📜 Do ES6 Modules make the case of IIFEs obsolete?📜 A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere📜 Modules ― Exploring JS📜 ES modules: A cartoon deep-dive — Lin Clark📜 Understanding ES6 Modules — Craig Buckler📜 An overview of ES6 Modules in JavaScript — Brent Graham📜 ES6 Modules in Depth — Nicolás Bevacqua📜 ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno📜 JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy📜 Using JavaScript modules on the web — Addy Osmani & Mathias Bynens📜 IIFE: Immediately Invoked Function Expressions — Parwinder📜 Javascript Module Bundlers — Vanshu HassijaVideos🎥 Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp🎥 Understanding JavaScript IIFE — Sheo Narayan🎥 JavaScript Modules: ES6 Import and Export — Kyle Robinson🎥 ES6 - Modules — Ryan Christiani🎥 ES6 Modules in the Real World — Sam Thorogood🎥 ES6 Modules — TempleCoding🎥 JavaScript IIFE (Immediately Invoked Function Expressions) — Steve Griffith⬆ Back to Top9. Message Queue and Event LoopArticles📜 JavaScript Event Loop Explained — Anoop Raveendran📜 The JavaScript Event Loop: Explained — Erin Sweson-Healey📜 Understanding JS: The Event Loop — Alexander Kondov📜 Understanding the JavaScript Event Loop — Ashish Gupta📜 The JavaScript Event Loop — Flavio Copes📜 How JavaScript works: Event loop — Alexander Zlatkov📜 Tasks, microtasks, queues and schedules — Jake Archibald📜 Visualising the JavaScript Event Loop with a Pizza Restaurant analogy — Priyansh Jain📜 JavaScript Visualized: Event Loop — Lydia HallieVideos🎥 What the heck is the event loop anyway? | JSConf EU — Philip Roberts🎥 JavaScript Event Loop — ComScience Simplified🎥 I'm stuck in an Event Loop — Philip Roberts🎥 In The Loop - Jake Archibald | JSConf.Asia 2018🎥 Desmitificando el Event Loop (Spanish)🎥 Callbacks, Sincrono, Assíncrono e Event Loop (PT-BR)⬆ Back to Top10. setTimeout, setInterval and requestAnimationFrameArticles📜 Javascript setTimeout - All you need to know📜 setTimeout and setInterval — JavaScript.Info📜 Why not to use setInterval — Akanksha Sharma📜 setTimeout VS setInterval — Develoger📜 Using requestAnimationFrame — Chris Coyier📜 Understanding JavaScript's requestAnimationFrame() — JavaScript Kit📜 Handling time intervals in JavaScript - Amit MerchantVideos🎥 Javascript: How setTimeout and setInterval works — Coding Blocks India🎥 setTimeout and setInterval in JavaScript — techsith🎥 JavaScript Timers — Steve Griffith🎥 JavaScript setTimeOut and setInterval Explained — Theodore Anderson⬆ Back to Top11. JavaScript EnginesArticles📜 Is javascript compiled or interpreted language?📜 JavaScript Engines — Jen Looper📜 Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead📜 Understanding V8’s Bytecode — Franziska Hinkelmann📜 A Brief History of Google’s V8 Javascript Engine — Clair Smith📜 JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp📜 JavaScript engine fundamentals: Shapes and Inline Caches📜 JavaScript engine fundamentals: optimizing prototypes📜 How V8 optimizes array operationsVideos🎥 JavaScript Engines: The Good Parts™ — Mathias Bynens & Benedikt Meurer🎥 JS Engine EXPOSED 🔥 Google's V8 Architecture 🚀 | Namaste JavaScript Ep. 16 - Akshay Saini🎥 How JavaScript Code is executed? How Javascript works behind the scenes🎥 Understanding the V8 JavaScript Engine - freeCodeCamp Talks⬆ Back to Top12. Bitwise Operators, Type Arrays and Array BuffersArticles📜 Programming with JS: Bitwise Operations — Alexander Kondov📜 Using JavaScript’s Bitwise Operators in Real Life — ian m📜 JavaScript Bitwise Operators — w3resource📜 Bitwise Operators in Javascript — Joe Cha📜 A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown📜 How can I understand Bitwise operation in JavaScript?Videos🎥 JavaScript Bitwise Operators — Programming with Mosh🎥 Bitwise Operators and WHY we use them — Alex Hyett🎥 JS Bitwise Operators and Binary Numbers — Steve Griffith - Prof3ssorSt3v3🎥 Deep Dive into Blobs, Files, and ArrayBuffers — Steve Griffith - Prof3ssorSt3v3⬆ Back to Top13. DOM and Layout TreesBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 14 - The Document Object ModelArticles📜 How To Understand and Modify the DOM in JavaScript — Tania Rascia📜 What’s the Document Object Model, and why you should know how to use it — Leonardo Maldonado📜 JavaScript DOM Tutorial with Example — Guru99📜 What is the DOM? — Chris Coyier📜 Traversing the DOM with JavaScript — Zell Liew📜 DOM Tree📜 How to traverse the DOM in Javascript — Vojislav Grujić📜 Render Tree Construction — Ilya Grigorik📜 What exactly is the DOM?Videos🎥 JavaScript DOM — The Net Ninja🎥 JavaScript DOM Crash Course — Traversy Media⬆ Back to Top14. Factories and ClassesArticles📜 How To Use Classes in JavaScript — Tania Rascia📜 Javascript Classes — Under The Hood — Majid📜 Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke📜 Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal📜 Factory Functions in JavaScript — Josh Miller📜 The Factory Pattern in JS ES6 — SnstsDev📜 Class vs Factory function: exploring the way forward — Cristi Salcescu📜 How ES6 classes really work and how to build your own — Robert Grosse📜 Understanding super in JavaScript📜 An Easy Guide To Understanding Classes In JavaScriptVideos🎥 JavaScript Factory Functions — Programming with Mosh🎥 Factory Functions in JavaScript — Fun Fun Function🎥 Javascript Tutorial Function Factories — Crypto Chan⬆ Back to Top15. this, call, apply and bindReference📜 call() — MDN📜 bind() — MDN📜 apply() — MDNArticles📜 Grokking call(), apply() and bind() methods in JavaScript — Aniket Kudale📜 How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta📜 JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell📜 Javascript: call(), apply() and bind() — Omer Goldberg📜 The difference between call / apply / bind — Ivan Sifrim📜 What the hack is call, apply, bind in JavaScript — Ritik📜 Mastering 'this' in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow📜 JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko📜 How AND When to use bind, call, and apply in Javascript — Eigen X📜 Let me explain to you what is this. (Javascript) — Jason Yu📜 Understanding the “this” Keyword in JavaScript — Pavan📜 How to understand the keyword this and context in JavaScript — Lukas Gisder-Dubé📜 What the heck is this in Javascript? — Hridayesh Sharma📜 This and Bind In Javascript — Brian Barbour📜 3 Techniques for Maintaining Your Sanity Using \""This\"" in JavaScript — Carl📜 Mastering the JavaScript \""this\"" Keyword — Aakash Srivastav📜 This binding in JavaScript – 4. New binding — Spyros Argalias📜 A quick intro to 'this' in JavaScript — Natalie Smith📜 Explaining JavaScript 'this' to my cat — Andrey K📜 A conversation with the 'this' keyword in Javascript — Karen Efereyan📜 What are call(), apply() and bind() in JavaScript — Amitav Mishra📜 Understanding 'this' binding in JavaScript — Yasemin CidemVideos🎥 JavaScript call, apply and bind — techsith🎥 JavaScript Practical Applications of Call, Apply and Bind functions— techsith🎥 JavaScript (call, bind, apply) — curious aatma🎥 Understanding Functions and 'this' In The World of ES2017 — Bryan Hughes🎥 bind and this - Object Creation in JavaScript - FunFunFunction🎥 JS Function Methods call(), apply(), and bind() — Steve Griffith⬆ Back to Top16. new, Constructor, instanceof and InstancesArticles📜 JavaScript For Beginners: the ‘new’ operator — Brandon Morelli📜 Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee📜 Constructor, operator \""new\"" — JavaScript.Info📜 Understanding JavaScript Constructors — Faraz Kelhini📜 Use Constructor Functions — Openclassrooms📜 Beyond typeof and instanceof: simplifying dynamic type checks — Dr. Axel Rauschmayer📜 What Is the Instanceof Operator in JavaScript — appendTo📜 Function and Object, instances of each other — Kiro Risk⬆ Back to Top17. Prototype Inheritance and Prototype ChainReference📜 Inheritance and the prototype chain — MDNArticles📜 Javascript : Prototype vs Class — Valentin PARSY📜 JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens📜 JavaScript Prototype — NC Patro📜 Prototype in Javascript — Sandeep Ranjan📜 Prototypes in JavaScript — Rupesh Mishra📜 Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal📜 Understanding JavaScript: Prototype and Inheritance — Alexander Kondov📜 Understanding Classes (ES5) and Prototypal Inheritance in JavaScript — Hridayesh Sharma📜 prototype, proto and Prototypal inheritance in JavaScript — Varun Dey📜 Prototypal Inheritance — JavaScript.Info📜 How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia📜 Master JavaScript Prototypes & Inheritance — Arnav Aggarwal📜 JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail📜 Prototypal Inheritance in JavaScript — Jannis Redmann📜 Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro📜 Intro To Prototypal Inheritance — Dharani Jayakanthan📜 Let’s Build Prototypal Inheritance in JS — var-che📜 Objects, Prototypes and Classes in JavaScript — Atta📜 The magical world of JavaScript prototypes — Belén📜 Understanding Prototypal Inheritance In JavaScript — Lawrence Eagles📜 Objects and Prototypes in JavaScript — Irena PopovaVideos🎥 Javascript Prototype Inheritance — Avelx🎥 JavaScript Prototype Inheritance Explained pt. I — techsith🎥 JavaScript Prototype Inheritance Explained pt. II — techsith🎥 JavaScript Prototype Inheritance Explained — Kyle Robinson🎥 Advanced Javascript - Prototypal Inheritance In 1 Minute🎥 An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode🎥 Object Oriented JavaScript - Prototype — The Net Ninja🎥 Prototype in JavaScript — kudvenkat🎥 JavaScript Using Prototypes — O'Reilly🎥 A Beginner's Guide to Javascript's Prototype — Tyler Mcginnis🎥 Prototypes in Javascript - p5.js Tutorial — The Coding TrainBooksYou Don't Know JS, 1st Edition: this & Object Prototypes — Kyle Simpson⬆ Back to Top18. Object.create and Object.assignReference📜 Object.create() — MDN📜 Object.assign() — MDNArticles📜 Object.create in JavaScript — Rupesh Mishra📜 Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle📜 Basic Inheritance with Object.create — Joshua Clanton📜 Object.create() In JavaScript — GeeksforGeeks📜 Understanding the difference between Object.create() and the new operator — Jonathan Voxland📜 JavaScript Object Creation: Patterns and Best Practices — Jeff Mott📜 Copying Objects in JavaScript ― Orinami Olatunji📜 JavaScript: Object.assign() — Thiago S. Adriano📜 How to deep clone a JavaScript Object — Flavio Copes📜 Object.create(): When and Why to Use — VZingVideos🎥 Object.assign() explained — Aaron Writes Code🎥 Object.assign() Method — techsith⬆ Back to Top19. map, reduce, filterArticles📜 JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac📜 Learn map, filter and reduce in Javascript — João Miguel Cunha📜 JavaScript’s Map, Reduce, and Filter — Dan Martensen📜 How to Use Map, Filter, & Reduce in JavaScript — Peleke Sengstacke📜 JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli📜 Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta📜 Understanding map, filter and reduce in Javascript — Luuk Gruijs📜 Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg📜 JavaScript: Map, Filter, Reduce — William S. Vincent📜 Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell📜 JavaScript: Arrow Functions for Beginners — Brandon Morelli📜 When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee📜 JavaScript — Learn & Understand Arrow Functions — Brandon Morelli📜 (JavaScript )=> Arrow functions — sigu📜 Javascript.reduce() — Paul Anderson📜 Why you should replace forEach with map and filter in JavaScript — Roope Hakulinen📜 Simplify your JavaScript – Use .map(), .reduce(), and .filter() — Etienne Talbot📜 JavaScript’s Reduce Method Explained By Going On a Diet — Kevin Kononenko📜 Difference between map, filter and reduce in JavaScript — Amirata Khodaparast📜 Map⇄Filter⇄Reduce↻ — ashay mandwarya📜 Finding Your Way With .map() — Brandon Wozniewicz📜 How to write your own map, filter and reduce functions in JavaScript — Hemand Nair📜 How to Manipulate Arrays in JavaScript — Bolaji Ayodeji📜 How to simplify your codebase with map(), reduce(), and filter() in JavaScript — Alex Permyakov📜 .map(), .filter(), and .reduce() — Andy Pickle📜 Map/Filter/Reduce Crash Course — Chris Achard📜 Map, Filter and Reduce – Animated — JavaScript Teacher📜 Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard — Mauro Bono📜 How to Use JavaScript’s .map, .filter, and .reduce — Avery Duffin📜 Javascript performance test - for vs for each vs (map, reduce, filter, find) — Deepak Gupta📜 Using .map(), .filter() and .reduce() properly — Sasanka Kudagoda📜 Mastering the JavaScript Reduce method ✂️ — sanderdebr📜 JavaScript Map – How to Use the JS .map() Function (Array Method) — FreeCodeCampVideos🎥 Map, Filter and Reduce — Lydia Hallie🎥 Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson🎥 JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata🎥 JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata🎥 JavaScript Higher Order Functions - Filter, Map, Sort & Reduce — Epicop🎥 [Array Methods 2/3] .filter + .map + .reduce — CodeWithNick🎥 Arrow functions in JavaScript - What, Why and How — Fun Fun Function🎥 Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf🎥 Map - Parte 2 JavaScript - Fun Fun Function🎥 Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function🎥 Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function🎥 reduce Array Method | JavaScript Tutorial - Florin Pop🎥 map Array Method | JavaScript Tutorial - Florin Pop🎥 Different array methods in 1 minute | Midudev (Spanish)⬆ Back to Top20. Pure Functions, Side Effects, State Mutation and Event PropagationArticles📜 Javascript and Functional Programming — Pure Functions — Omer Goldberg📜 Master the JavaScript Interview: What is a Pure Function? — Eric Elliott📜 JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery📜 Pure functions in JavaScript — @nicoespeon📜 Functional Programming: Pure Functions — Arne Brasseur📜 Pure Functions In Javascript — Krunal📜 Making your JavaScript Pure — Jack Franklin📜 Arrays, Objects and Mutations — Federico Knüssel📜 The State of Immutability — Maciej Sikora📜 Hablemos de Inmutabilidad — Kike Sanchez📜 How to deal with dirty side effects in your pure functional JavaScript — James Sinclair📜 Preventing Side Effects in JavaScript — David Walsh📜 Wielding Pure Functions in JavaScript and Function Composition — Peleke Sengstacke📜 JavaScript: Pure Functions — William S. Vincent📜 Functional programming paradigms in modern JavaScript: Pure functions — Alexander Kondov📜 Understanding Javascript Mutation and Pure Functions — Chidume Nnamdi📜 Functional-ish JavaScript — Daniel Brain📜 Event Propagation — MDN📜 Event Propagation — Bubbling and capturingVideos🎥 Pure Functions — Hexlet🎥 Pure Functions - Functional Programming in JavaScript — Paul McBride🎥 JavaScript Pure Functions — Seth Alexander🎥 JavaScript Pure vs Impure Functions Explained — Theodore Anderson🎥 Pure Functions - Programação Funcional: Parte 1 - Fun Fun Function🎥 Event Propagation - JavaScript Event Bubbling and Propagation - Steve Griffith⬆ Back to Top21. ClosuresReference📜 Closures — MDN📜 Closure — JavaScript.InfoArticles📜 I never understood JavaScript closures — Olivier De Meulder📜 Understand JavaScript Closures With Ease — Richard Bovell📜 Understanding JavaScript Closures — Codesmith📜 Understand Closures in JavaScript — Brandon Morelli📜 A simple guide to help you understand closures in JavaScript — Prashant Ram📜 Understanding JavaScript Closures: A Practical Approach — Paul Upendo📜 Understanding JavaScript: Closures — Alexander Kondov📜 How to use JavaScript closures with confidence — Léna Faure📜 JavaScript closures by example — tyler📜 JavaScript — Closures and Scope — Alex Aitken📜 Discover the power of closures in JavaScript — Cristi Salcescu📜 Getting Closure — RealLifeJS📜 Closure, Currying and IIFE in JavaScript — Ritik📜 Understanding Closures in JavaScript — Sukhjinder Arora📜 A basic guide to Closures in JavaScript — Parathan Thiyagalingam📜 Closures: Using Memoization — Brian Barbour📜 A Brief Introduction to Closures and Lexical Scoping in JavaScript — Ashutosh K Singh📜 Demystify Closures — stereobooster📜 Scopes and Closures - JavaScript Concepts — Agney Menon📜 Understanding Closures in JavaScript — Matt Popovich📜 whatthefuck.is · A Closure - Dan Abramov📜 Closures in JavaScript can... - Brandon LeBoeuf📜 Do you know Closures - Mohamed KhaledVideos🎥 JavaScript The Hard Parts: Closure, Scope & Execution Context - Codesmith🎥 Javascript Closure — techsith🎥 Closures — Fun Fun Function🎥 Closures in JavaScript — techsith🎥 JavaScript Closures 101: What is a closure? — JavaScript Tutorials🎥 Closures — freeCodeCamp🎥 JavaScript Closures — CodeWorkr🎥 Closures in JS - Akshay Saini🎥 CLOSURES en JavaScript: Qué son y cómo funcionan - Carlos Azaustre🎥 Learn Closures In 7 Minutes - Web Dev Simplified⬆ Back to Top22. High Order FunctionsBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 5 - Higher-order FunctionsArticles📜 Higher-Order Functions in JavaScript — M. David Green📜 Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz📜 First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco📜 Higher Order Functions in JavaScript — John Hannah📜 Just a reminder on how to use high order functions — Pedro Filho📜 Understanding Higher-Order Functions in JavaScript — Sukhjinder Arora📜 Higher Order Functions - A pragmatic approach — emmanuel ikwuomaVideos🎥 JavaScript Higher Order Functions & Arrays — Traversy Media🎥 Higher Order Functions — Fun Fun Function🎥 Higher Order Functions in Javascript — Raja Yogan🎥 Higher Order Iterators in JavaScript — Fun Fun Function🎥 Higher Order Functions in JavaScript — The Coding Train🎥 Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith🎥 Part 2: Understanding Why We Need Higher Order Functions - Codesmith🎥 Higher-Order Functions ft. Functional Programming - Akshay Saini⬆ Back to Top23. RecursionArticles📜 Recursion in JavaScript — Kevin Ennis📜 Understanding Recursion in JavaScript — Zak Frisch📜 Learn and Understand Recursion in JavaScript — Brandon Morelli📜 Recursion in Functional JavaScript — M. David Green📜 Programming with JS: Recursion — Alexander Kondov📜 Anonymous Recursion in JavaScript — simo📜 Recursion, iteration and tail calls in JS — loverajoel📜 Intro to Recursion — Brad Newman📜 Accio Recursion!: Your New Favorite JavaScript Spell — Leanne Cabey📜 Recursion Explained (with Examples) — ChristinaVideos🎥 Recursion In JavaScript — techsith🎥 Recursion — Fun Fun Function🎥 Recursion and Recursive Functions — Hexlet🎥 Recursion: Recursion() — JS Monthly — Lucas da Costa🎥 Recursive Function in JavaScript — kudvenkat🎥 What on Earth is Recursion? — Computerphile🎥 Javascript Tutorial 34: Introduction To Recursion — codedamn🎥 Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 — Anjana Vakil🎥 Recursion crash course - Colt Steele⬆ Back to Top24. Collections and GeneratorsReference📜 Generator — MDN web docsArticles📜 ES6 In Depth: Collections — Jason Orendorff📜 ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell📜 ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua📜 Map, Set, WeakMap and WeakSet — JavaScript.Info📜 Maps in ES6 - A Quick Guide — Ben Mildren📜 ES6 — Set vs Array — What and when? — Maya Shavin📜 ES6 — Map vs Object — What and when? — Maya Shavin📜 ES6: Working with Sets in JavaScript — Dead Code Rising📜 Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu📜 How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones📜 What You Should Know About ES6 Maps — Just Chris📜 ES6 Maps in Depth — Nicolás Bevacqua📜 What are JavaScript Generators and how to use them — Vladislav Stepanov📜 Understanding JavaScript Generators With Examples — Arfat Salman📜 The Basics of ES6 Generators — Kyle Simpson📜 An Introduction to JavaScript Generators — Alice KallaugherVideos🎥 JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media🎥 The Differences between ES6 Maps and Sets — Steve Griffith🎥 Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy⬆ Back to Top25. PromisesReference📜 Promise — MDNArticles📜 JavaScript Promises for Dummies ― Jecelyn Yeen📜 Understanding promises in JavaScript — Gokul N K📜 Master the JavaScript Interview: What is a Promise? — Eric Elliott📜 An Overview of JavaScript Promises — Sandeep Panda📜 How to use Promises in JavaScript — Prashant Ram📜 Implementing Promises In JavaScript — Maciej Cieslar📜 JavaScript: Promises explained with simple real life analogies — Shruti Kapoor📜 Promises for Asynchronous Programming — Exploring JS📜 JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko📜 ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan📜 A Simple Guide to ES6 Promises — Brandon Morelli📜 The ES6 Promises — Manoj Singh Negi📜 ES6 Promises in Depth — Nicolás Bevacqua📜 Playing with Javascript Promises: A Comprehensive Approach — Rajesh Babu📜 How to Write a JavaScript Promise — Brandon Wozniewicz📜 A Coding Writer’s Guide: An Introduction To ES6 Promises — Andrew Ly📜 Understanding Promises in JavaScript — Chris Noring📜 Converting callbacks to promises — Zell Liew📜 JavaScript Promises: Zero To Hero Plus Cheat Sheet — Joshua Saunders📜 Promises - JavaScript concepts — Agney Menon📜 Javascript Promise 101 — Igor Irianto📜 Simplify JavaScript Promises — Sunny Singh📜 The Lowdown on Promises — Aphinya Dechalert📜 JavaScript Visualized: Promises & Async/Await — Lydia Hallie📜 Promises in JavaScript — Peter Klingelhofer📜 Best Practices for ES6 Promises — Basti Ortiz📜 Lo que debemos saber de EScript 2020 — Kike Sanchez📜 Promise Basics - javascript.info📜 The Complete JavaScript Promise GuideVideos🎥 Let's Learn ES6 - Promises — Ryan Christiani🎥 JavaScript ES6 / ES2015 Promises — Traversy Media🎥 Promises — Fun Fun Function🎥 Error Handling Promises in JavaScript — Fun Fun Function🎥 Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train🎥 JavaScript Promise in 100 Seconds🎥 JavaScript Promise in 9 Minutes🎥 JavaScript Promises In 10 Minutes — Web Dev Simplified ⬆ Back to Top26. async/awaitReference📜 async/await — JavaScript.InfoBooks📜 Eloquent JavaScript, 3rd Edition: Ch. 11 - Asynchronous Programming📜 Exploring JS: Asynchronous ProgrammingArticles📜 Understanding async/await in Javascript — Gokul N K📜 Asynchronous Javascript using async/await — Joy Warugu📜 Modern Asynchronous JavaScript with async/await — Flavio Copes📜 Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic📜 Javascript — ES8 Introducing async/await Functions — Ben Garrison📜 How to escape async/await hell — Aditya Agarwal📜 Understanding JavaScript’s async await — Nicolás Bevacqua📜 JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij📜 From JavaScript Promises to Async/Await: why bother? — Chris Nwamba📜 Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler📜 JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons📜 How to improve your asynchronous Javascript code with async and await — Indrek Lasn📜 Making Fetches Easy With Async Await — Mickey Sheridan📜 7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises — Mostafa Gaafar📜 Asynchronous Operations in JavaScript — Jscrambler📜 JavaScript: Promises or async-await — Gokul N K📜 Async / Await: From Zero to Hero — Zhi Yuan📜 JavaScript Visualized: Promises & Async/Await — Lydia Hallie📜 Making asynchronous programming easier with async and await — MDN📜 JavaScript Async/Await Tutorial – Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream📜 Better Than Promises - JavaScript Async/AwaitVideos🎥 Async + Await — Wes Bos🎥 Asynchrony: Under the Hood — Shelley Vohr🎥 async/await in JavaScript - What, Why and How — Fun Fun Function🎥 async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train🎥 async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train🎥 Complete Guide to JS Async & Await ES2017/ES8 — Colt Steele🎥 Tips for using async/await in JavaScript — James Q Quick🎥 JavaScript Async Await — Web Dev Simplified⬆ Back to Top27. Data StructuresArticles📜 Data Structures in JavaScript — Thon Ly📜 Algorithms and Data Structures in JavaScript — Oleksii Trekhleb📜 Data Structures: Objects and Arrays ― Chris Nwamba📜 Data structures in JavaScript — Benoit Vallon📜 Playing with Data Structures in Javascript — Anish K.📜 The Little Guide of Queue in JavaScript — Germán Cutraro📜 All algorithms writing with JavaScript in the book 'Algorithms Fourth Edition'📜 Collection of classic computer science paradigms in JavaScript📜 All the things you didn't know you wanted to know about data structures📜 JavaScript Data Structures: 40 Part Series — miku86📜 Data Structures: Understanding Graphs — Rachel Hawa📜 Data Structures Two Ways: Linked List (Pt 1) — Freddie Duffield📜 Data Structures Two Ways: Linked List (Pt 2) — Freddie Duffield📜 Graph Data Structures Explained in JavaScript — Adrian MejiaVideos🎥 Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions🎥 Data Structures and Algorithms in JavaScript — freeCodeCamp🎥 Learning JavaScript Data Structures and Algorithms: Sorting — Packt Video🎥 JavaScript Data Structures: Getting Started — Academind⬆ Back to Top28. Expensive Operation and Big O NotationArticles📜 Big O Notation in Javascript — César Antón Dorantes📜 Time Complexity/Big O Notation — Tim Roberts📜 Big O in JavaScript — Gabriela Medina📜 Big O Search Algorithms in JavaScript — Bradley Braithwaite📜 Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola📜 An Introduction to Big O Notation — Joseph TrettevikVideos🎥 JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub🎥 Essential Big O for JavaScript Developers — Dave Smith🎥 Big O Notation - Time Complexity Analysis — WebTunings⬆ Back to Top29. AlgorithmsArticles📜 Data Structures and Algorithms using ES6📜 Algorithms and data structures implemented in JavaScript with explanations and links to further readings📜 JS: Interview Algorithm📜 Algorithms in JavaScript — Thon Ly📜 JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov📜 Atwood's Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript📜 Data Structures and Algorithms library in JavaScript📜 Collection of computer science algorithms and data structures written in JavaScript📜 Algorithms and Data Structures in JavaScript — Oleksii Trekhleb⬆ Back to Top30. Inheritance, Polymorphism and Code ReuseReference📜 Inheritance in JavaScript — MDN📜 Class inheritance, super — JavaScript.InfoArticles📜 Inheritance in JavaScript — Rupesh Mishra📜 Simple Inheritance with JavaScript — David Catuhe📜 JavaScript — Inheritance, delegation patterns and Object linking — NC Patro📜 Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs📜 Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson📜 Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff MottVideos🎥 Inheritance in JavaScript — kudvenkat🎥 JavaScript ES6 Classes and Inheritance — Traversy Media🎥 Polymorphism in JavaScript — kudvenkat⬆ Back to Top31. Design PatternsBooks📜 Learning JavaScript Design Patterns — Addy OsmaniArticles📜 4 JavaScript Design Patterns You Should Know — Devan Patel📜 JavaScript Design Patterns – Beginner's Guide to Mobile Web Development — Soumyajit Pathak📜 JavaScript Design Patterns — Akash Pal📜 Javascript Design Patterns: What They Are & How To Use Them — Patrick Simpson📜 JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora📜 All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline📜 The Power of the Module Pattern in JavaScript — jsmanifest📜 Design Patterns for Developers using JavaScript pt. I — Oliver Mensah📜 Design Patterns for Developers using JavaScript pt. II — Oliver Mensah📜 Design patterns in modern JavaScript development📜 Understanding Design Patterns: Iterator using Dev.to and Medium social networks! — Carlos Caballero📜 JavaScript Design Patterns - Factory Pattern — KristijanFištrek📜 JavaScript Design Pattern — Module Pattern - Factory Pattern — Moon📜 Design Patterns: Null Object - Carlos Caballero📜 Strategy Pattern - Francesco Ciulla📜 Adapter Pattern - Francesco Ciulla📜 The Power of Composite Pattern in JavaScript - jsmanifest📜 In Defense of Defensive Programming - Adam Nathaniel DavisVideos🎥 JavaScript Design Patterns — Udacity🎥 JavaScript Patterns for 2017 — Scott Allen⬆ Back to Top32. Partial Applications, Currying, Compose and PipeBooks📜 Functional-Light JavaScript: Ch. 3 - Managing Function Inputs — Kyle SimpsonArticles📜 Use function composition in JavaScript — Rémi📜 Currying in JavaScript ES6 — Adam Bene📜 Composition and Currying Elegance in JavaScript — Pragyan Das📜 Functional JavaScript: Function Composition For Every Day Use — Joel Thoms📜 Functional Composition: compose() and pipe() — Anton Paras📜 Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif📜 A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair📜 Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao📜 Function Composition in JavaScript with Pipe — Andy Van Slaars📜 Practical Functional JavaScript with Ramda — Andrew D'Amelio, Yuri Takhteyev📜 The beauty in Partial Application, Currying, and Function Composition — Joel Thoms📜 Curry or Partial Application? — Eric Elliott📜 Partial Application in JavaScript — Ben Alman📜 Partial Application of Functions — Functional Reactive Ninja📜 Currying vs Partial Application — Deepak Gupta📜 Partial Application in ECMAScript 2015 — Ragan Wald📜 Functional Composition in Javascript — Joe Cortopassi📜 So You Want to be a Functional Programmer pt. I — Charles Scalfani📜 So You Want to be a Functional Programmer pt. II — Charles Scalfani📜 So You Want to be a Functional Programmer pt. III — Charles Scalfani📜 So You Want to be a Functional Programmer pt. IV — Charles Scalfani📜 So You Want to be a Functional Programmer pt. V — Charles Scalfani📜 An introduction to the basic principles of Functional Programming — TK📜 Concepts of Functional Programming in Javascript — TK📜 An Introduction to Functional Programming Style in JavaScript — JavaScript Teacher📜 A practical guide to writing more functional JavaScript — Nadeesha Cabral📜 A simple explanation of functional pipe in JavaScript — Ben LeshVideos🎥 Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios🎥 JavaScript Functional Programing: Compose — Theodore Anderson🎥 Function Composition - Functional JavaScript — NWCalvank🎥 JavaScript Function Composition Explained — Theodore Anderson🎥 Let's code with function composition — Fun Fun Function🎥 Partial Application vs. Currying — NWCalvank🎥 JavaScript Partial Application — Theodore Anderson🎥 call, apply and bind method in JavaScript⬆ Back to Top33. Clean CodeArticles📜 Clean Code Explained – A Practical Introduction to Clean Coding for Beginners — freeCodeCamp📜 Clean Code concepts adapted for JavaScript — Ryan McDermott📜 Clean Code Practice: How to write clean code — Tirth Bodawala📜 Function parameters in JavaScript Clean Code — Kevin Peters📜 Keeping your code clean — Samuel James📜 Best Practices for Using Modern JavaScript Syntax — M. David Green📜 best practices for cross node/web development - Jimmy Wärting📜 Writing Clean Code - Dylan Paulus📜 Writing Clean Code and The Practice of Programming - Nityesh Agarwal📜 Clean code, dirty code, human code - Daniel Irvine📜 Practical Ways to Write Better JavaScript - Ryland G📜 The Must-Know Clean Code Principles - Kesk on Medium📜 The Clean Code Book - Robert C MartinVideos🎥 JavaScript Pro Tips - Code This, NOT That🎥 Clean Code playlist - Beau teaches⬆ Back to Top"
65,adobe/brackets,https://github.com/adobe/brackets/blob/master/README.md,JavaScript,"⚠️ On September 1, 2021, Adobe will end support for Brackets. If you would like to continue using, maintaining, and improving Brackets, you may fork the project on GitHub. Through Adobe’s partnership with Microsoft, we encourage users to migrate to Visual Studio Code, Microsoft’s free code editor built on open source.Welcome to Brackets! Brackets is a modern open-source code editor for HTML, CSSand JavaScript that's built in HTML, CSS and JavaScript.What makes Brackets different from other web code editors?Tools shouldn't get in your way. Instead of cluttering up your codingenvironment with lots of panels and icons, the Quick Edit UI in Brackets putscontext-specific code and tools inline.Brackets is in sync with your browser. With Live Preview, Bracketsworks directly with your browser to push code edits instantly and jumpback and forth between your real source code and the browser view.Do it yourself. Because Brackets is open source, and built with HTML, CSSand JavaScript, you can help build the best code editor for the web.Brackets may have reached version 1, but we're not stopping there. We have many feature ideas on ourtrello board that we're anxious to add and otherinnovative web development workflows that we're planning to build into Brackets.So take Brackets out for a spin and let us know how we can make it your favorite editor.You can see somescreenshots of Bracketson the wiki, intro videos on YouTube, and news on the Brackets blog.How to install and run BracketsDownloadInstallers for the latest stable build for Mac, Windows and Linux (Debian/Ubuntu) can be downloaded here.UsageBy default, Brackets opens a folder containing some simple \""Getting Started\"" content.You can choose a different folder to edit using File > Open Folder.Most of Brackets should be pretty self-explanatory, but for information on howto use its unique features, like Quick Edit and Live Preview, please readHow to Use Brackets.Also, see the release notesfor a list of new features and known issues in each build.In addition to the core features built into Brackets, there is a large and growingcommunity of developers building extensions that add all sorts of useful functionality.See the Brackets Extension Registryfor a list of available extensions. For installation instructions,see the extensions wiki page.Need help?Having problems starting Brackets the first time, or not sure how to use Brackets?  Pleasereview Troubleshooting, which helpsyou to fix common problems and find extra help if needed.Helping BracketsI found a bug!If you found a repeatable bug, and troubleshootingtips didn't help, then be sure to search existing issues first.Include steps to consistently reproduce the problem, actual vs. expected results, screenshots, and your OS andBrackets version number. Disable all extensions to verify the issue is a core Brackets bug.Read more guidelines for filing good bugs.I have a new suggestion, but don't know how to program!For feature requests please first check our Trello board tosee if it's already there; you can upvote it if so. If not, feel free to file it as an issue as above; we'llmove it to the feature backlog for you.I want to help with the code!Awesome! There are lots of ways you can help. First readCONTRIBUTING.md,then learn how to pull the repo and hack on Brackets.The text editor inside Brackets is based onCodeMirror—thanks to Marijn fortaking our pull requests, implementing feature requests and fixing bugs! SeeNotes on CodeMirrorfor info on how we're using CodeMirror.Although Brackets is built in HTML/CSS/JS, it currently runs as a desktopapplication in a thin native shell, so that it can access your local files.(If you just try to open the index.html file in a browser, it won't work yet.)The native shell for Brackets lives in a separate repo,adobe/brackets-shell.I want to keep track of how Brackets is doing!Not sure you needed the exclamation point there, but we like your enthusiasm.What's Brackets working on next?In our feature backlog, the columns to the right(starting from \""Development\"") list the features that we're currently working on.\""Ready\"" shows what we'll be working on next.Watch our GitHub activity stream.Watch our Waffle Kanban board: Work items in  are next. The entire development process is outlined in the Developer Guide.Contact infoE-mail: admin@brackets.ioSlack: Brackets on Slack (You can join by sending a mail to admin@brackets.io with the subject line slack registration request specifying the email addresses you would like to register).Developers mailing list: http://groups.google.com/group/brackets-devTwitter: @bracketsBlog: http://blog.brackets.io/IRC: #brackets on freenodePlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms."
66,learn-co-curriculum/phase-0-html-experiencing-html-lab,https://github.com/learn-co-curriculum/phase-0-html-experiencing-html-lab/blob/master/README.md,JavaScript,"Experiencing HTML LabLearning GoalsCreate an ordered HTML listCreate an unordered HTML listIntroductionHow do we go about writing text for the web? How is that different from the textthat we write in a text file? We're going to experience for ourselves how thesethings are different in this lab.You don't need any prior knowledge of HTML for this lab. We're going to tell youwhat to type. Don't focus on specific commands or taking notes. Everything willbe covered thoroughly later. Instead, the goal of this exercise is to feel thejoy of editing a file and seeing the change \""out there.\""NOTE: We don't expect you to know markup, content, source text, orrendered text yet. We'll be defining them in this lab.Getting StartedIf you haven't already, fork and clone this lesson into your localenvironment. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Create an Ordered HTML ListThink of a collection of things united by theme: Pokémon, Old-school MC's, PrimeMinisters of New Zealand, Magical Beasts and Where to Find Them, etc. We'regoing to walk through how to create a list of things marked up with HTML.Create a Text File with ContentIn your terminal, while still inside of this labs directory, create a new filecalled my_list.txt by running touch my_list.txt. The file extension suggeststo humans and operating systems that it contains text. Open the file in VS Codeby typing code my_list.txt; you will do all editing for this lesson in VSCode.Below is a collection of plant names.Copy and paste the plants into your my_list.txt file.\""Monstera Deliciosa\""\""Fiddle Leaf Fig\""\""Pilea\""\""Golden Pothos\""\""Peace Lily\""The material we typed into the file is called the content. It's the thingwe're trying to communicate.Content as a List in a Text FileA problem with our content is that it doesn't explicitly state anywhere thatit's a list. In the example, we see a list of plants. But a browser doesn't knowwhat a \""list\"" is.We need to help the browser know what a list is. The secret is to add\""notes\"" or \""breadcrumbs\"" to the content that tell the browser that it has listitems and that these items \""go together\"" in a list. To add these \""notes\"" wesurround the content with bits of markup, with bits of HTML.We will take the text content from our text file, paste it into a new HTML fileand then we will add markup so that a browser \""sees\"" a list. Let's write anHTML file!Text Inside an HTML FileNow we're going to create an HTML list together.Create a new file called my_list.html.Copy the contents of my_list.txt and paste them into my_list.html.Save the my_list.html file.Open the my_list.html file in the browser. For Mac users, you can do thiswith open my_list.html. For Windows users, you can do this in your Ubuntuapp with explorer.exe my_list.html. Make sure you'veset Chrome as your default browser.Hit enter to run the command.Once you've opened the file in the browser, you should see:As noted above, the browser doesn't know that items on new lines means \""items ina list.\"" Browsers ignore when HTML is split onto new lines. We cover why alittle later in this README. Since the browser doesn't know we intend this to bea list and since browsers ignore when content is split onto differentlines, it displays all the content on one line. Not what we wanted.A Text Not-Really-A-List Into a Real-HTML-ListREMEMBER: This lab will provide you what to type. Subsequent labs willdeeply examine details of HTML markup. However, our goal here is to show howslight changes to markup can quickly alter the browser's display of content. Ifyou're fuzzy on a detail that's fine.Marking-Up List ItemsOK, we've reached the critical moment. We're going to tell the browser thatthese bits of letters represent list items. To do so we \""wrap\"" each linewith <li> and </li>:<li>\""Monstera deliciosa\""</li><li>\""Fiddle Leaf Fig\""</li><li>\""Pilea\""</li><li>\""Golden Pothos\""</li><li>\""Peace Lily\""</li>Flip back to the viewing tab and refresh the page. You should see somethinglike the following:AWESOME.In this step we added some HTML markup:The <li> is an HTML list item opening tagThe </li> is an HTML closing tagWe would call this pair of opening and closing tags an \""li tag\""The whole length of text of opening markup plus \""wrapped\"" content plusclosing markup (<li>...content...</li>) is called \""an HTML element;\"" or,more exactly, an li elementAgain, you don't need to memorize these terms yet, but we want to help youdevelop an intuition for how these words are used. You will be using these termswhen speaking with other developers and HTML authors.It may not seem like we did much work, but the idea of a method for \""marking up\""content and linking it is the foundation of the web. It's what made TimBerners-Lee's reputation. And you just experienced Sir Tim's great insight.AWESOME.Let's work with additional HTML tags to see how we tweak our HTML a bit more.Let's tell the browser \""Hey! These list items, they go together!\""Indicating that List Items Are ConnectedWrap the entire set of <li> items with an <ol> and </ol> like so:<ol>  <li>\""Monstera deliciosa\""</li>  <li>\""Fiddle Leaf Fig\""</li>  <li>\""Pilea\""</li>  <li>\""Golden Pothos\""</li>  <li>\""Peace Lily\""</li></ol>Save the file and refresh the viewing tab. It should display:We told the browser that this set of list items that we \""wrapped\"" in theordered list tag go together as a list. Because we told the browser thatthe list is ordered it decided to be helpful and put numbers next to thelist items for us.Wrapping and IndentationWith all these angle-brackets of markup and content mixed together, HTMLauthors like to use indentation to make HTML easier to read. Here's how mostHTML authors would expect our code from the previous section to be arranged:<ol>  <li>\""Monstera deliciosa\""</li>  <li>\""Fiddle Leaf Fig\""</li>  <li>\""Pilea\""</li>  <li>\""Golden Pothos\""</li>  <li>\""Peace Lily\""</li></ol>Update your document. Save it and refresh your viewing tab.Remember earlier when the browser ignored that content was on separate lines?Cleaning up your code requires splitting lines, adding spaces, and adding tabs.Browsers ignore those characters that humans use to make their HTMLreader-friendly.Create an Unordered HTML ListLet's change our ordered list to be unordered. If <ol> means orderedlist, you might guess that <ul> means unordered list. Make the changeand refresh your viewing tab.Here we return to a \""bulleted\"" unordered list.ASIDE: If you've been following along closely, you might be wondering, if wedidn't have a <ul> tag around our <li> items earlier, how did the browserknow to treat those <li> as if they were in a <ul>? When browsers detectproblematic HTML they guess! This can lead to some very strange results when youmake an error, but if you write invalid HTML, they try to recover. HTMLvalidity will be discussed further soon!Add a Description ParagraphLet's introduce our list by adding some background:<p>Some of my favorite plants!</p><ul>  <li>\""Monstera deliciosa\""</li>  <li>\""Fiddle Leaf Fig\""</li>  <li>\""Pilea\""</li>  <li>\""Golden Pothos\""</li>  <li>\""Peace Lily\""</li></ul>Take a look at your \""rendered page\"" and verify the result is to your liking.Put a Header on ItLastly, let's put a \""heading\"" on the top of our document. Add an h1 elementwith an appropriate title inside.<h1>My Plant List</h1>Here's the full example code:<h1>My Plant List</h1><p>Some of my favorite plants!</p><ul>  <li>\""Monstera deliciosa\""</li>  <li>\""Fiddle Leaf Fig\""</li>  <li>\""Pilea\""</li>  <li>\""Golden Pothos\""</li>  <li>\""Peace Lily\""</li></ul>When you're done, it is time to run this assignment's tests. Make sure that youhave your HTML content in a file called my_list.html in order to pass thecheck. Type npm test and verify that your tests pass. As always, don't forgetyou need to run npm install before running the tests, and to push up your codeand submit it using CodeGrade once everything is passing.ConclusionIn this lab, you have done the job of an HTML author. You receive raw content,you mark it up to create source text. You test, tweak and adjust yoursource text until the rendered text displayed in the browser is to yourliking.In upcoming lessons, we will learn additional tags which provide us more ways todescribe our content. We might be starting with lists today, but soon we'll beusing HTML in even more exciting ways!Welcome to the community of web page creators!"
67,yankouskia/additional_5,https://github.com/yankouskia/additional_5/blob/master/README.md,JavaScript,"BracketsTaskImplement function check(str, bracketsConfig), that for given brackets sequence will return true if it is correct and false otherwiseIn the second param there is bracketsConfig - the array of pairs open-closed brackets. Each subarray includes only 2 elements - opening and closing bracketcheck('()', [['(', ')']]) // -> truecheck('((()))()', [['(', ')']]) // -> truecheck('())(', [['(', ')']]) // -> falsecheck('([{}])', [['(', ')'], ['[', ']'], ['{', '}']]) // -> truecheck('[(])', [['(', ')'], ['[', ']']]) // -> falsecheck('[]()', [['(', ')'], ['[', ']']]) // -> truecheck('[]()(', [['(', ')'], ['[', ']']]) // -> false// special case: opening and closing bracket can be the same :)check('||', [['|', '|']]) // -> truecheck('|()|', [['(', ')'], ['|', '|']]) // -> truecheck('|(|)', [['(', ')'], ['|', '|']]) // -> falsecheck('|()|(||)||', [['(', ')'], ['|', '|']]) // -> trueWrite your code in src/index.js"
68,linuxacademy/cicd-pipeline-train-schedule-git,https://github.com/linuxacademy/cicd-pipeline-train-schedule-git/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gitThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
69,impress/impress.js,https://github.com/impress/impress.js/blob/master/README.md,JavaScript,"impress.jsIt's a presentation framework based on the power of CSS3 transforms andtransitions in modern browsers and inspired by the idea behind prezi.com.WARNINGimpress.js may not help you if you have nothing interesting to say ;)HOW TO USE ITGetting Started GuideCheck out our new Getting Started guide if you want a quick introduction to the project!Direct download link to only impress.jsYou can include this link directly inside of your HTML file in its header. If you want to learn how to do this, you can find a how-to in the Getting Started guide.V2.0.0: https://cdn.jsdelivr.net/gh/impress/impress.js@2.0.0/js/impress.jsV1.1.0: https://cdn.jsdelivr.net/gh/impress/impress.js@1.1.0/js/impress.jsSource: https://cdn.jsdelivr.net/gh/impress/impress.js/js/impress.jsGetting Started GuideCheck out our new Getting Started guide if you want a quick introduction to the project!Checking out and initializing the git repositorygit clone --recursive https://github.com/impress/impress.js.gitcd impress.jsNote: For a minimal checkout, omit the --recursive option. This will leave out extra plugins.Stable releasesNew features and fixes are continuously merged into the master branch, which is what the above command will check out. For the latest stable release, see the Github Releases page.DocumentationReference documentation of core impress.js features and API you can find it in DOCUMENTATION.md.The HTML source code of the official impress.js demo serves as a good example usage and contains comments explaining various features of impress.js. For more information about styling you can look into CSS code which shows how classes provided by impress.js can be used. Last but not least JavaScript code of impress.js has some useful comments if you are interested in how everything works. Feel free to explore!Official demoimpress.js demo by @bartazExamples and demosThe Classic Slides demo is targeted towards beginners, or can be used as a template for presentations that look like the traditional PowerPoint slide deck. Over time, it also grew into the example presentation that uses most of the features and addons available.More examples and demos can be found on Examples and demos wiki page.Feel free to add your own example presentations (or websites) there.Other tutorials and learning resourcesIf you want to learn even more there is a list of tutorials and other learning resourceson the wiki, too.There is also a book available about Building impressive presentations with impress.js by Rakhitha Nimesh Ratnayake.You may want to check out the sibling project Impressionist: a 3D GUI editor that can help you in creating impress.js presentations.Mailing listYou're welcome to ask impress.js related questions on the impressionist-presentations mailing list.REPOSITORY STRUCTUREindex.html: This is the official impress.js demo, showcasing all of the features of the original impress.js, as well as some new plugins as we add them.As already mentioned, this file is well commented and acts as the official tutorial.examples/: Contains several demos showcasing additional features available.Classic Slides is a simple demo that you can use as template if you want to create very simple, rectangular, PowerPoint-like presentations.src/: The main file is src/impress.js. Additional functionality is implemented as plugins in src/plugins/.See src/plugins/README.md for information about the plugin API and how to write plugins.test/: Contains QUnit and Syn libraries that we use for writing tests, as well as some test coverage for core functionality. (Yes, more tests are much welcome.) Tests for plugins are in the directory of each plugin.js/: Contains js/impress.js, which contains a concatenation of the core src/impress.js and all the plugins. Traditionally this is the file that you'll link to in a browser. In fact both the demo and test files do exactly that.css/: Contains a CSS file used by the demo. This file is not required for using impress.js in your own presentations. Impress.js creates the CSS it needs dynamically.extras/ contains plugins that for various reasons aren't enabled by default. You have to explicitly add them with their own script element to use them.build.js: Simple build file that creates js/impress.js. It also creates a minified version impress.min.js, but that one is not included in the github repository.package.json: An NPM package specification. This was mainly added so you can easily install buildify and run node build.js. Other than the build process, which is really just doing roughly cat src/impress.js src/plugins/*/*.js > js/impress.js, and testing, impress.js itself doesn't depend on Node or any NPM modules.WANT TO CONTRIBUTE?For developers, once you've made changes to the code, you should run these commands for testing:npm installnpm run allNote that running firefox qunit_test_runner.html is usually more informative than running karma with npm run test. They both run the same tests.More info about the src/ directory can be found in src/plugins/README.md.Requirements>= node 7.6npmABOUT THE NAMEimpress.js name is courtesy of @skuzniak.It's an (un)fortunate coincidence that a Open/LibreOffice presentation tool is called Impress ;)Reference APISee the Reference APIBROWSER SUPPORTThe design goal for impress.js has been to showcase awesome CSS3 features as found in modern browser versions. We also use some new DOM functionality, and specifically do not use jQuery or any other JavaScript libraries, nor our own functions, to support older browsers. In general, recent versions of Firefox and Chrome are known to work well. Reportedly IE now works too.The typical use case for impress.js is to create presentations that you present from your own laptop, with a browser version you know works well. Some people also use impress.js successfully to embed animations or presentations in a web page, however, be aware that in this some of your visitors may not see the presentation correctly, or at all.In particular, impress.js makes use of the following JS and CSS features:DataSet APIClassList APICSS 3D TransformsCSS TransitionsCOPYRIGHT AND LICENSECopyright 2011-2012 Bartek Szopka (@bartaz), 2016-2023 Henrik Ingo (@henrikingo) and 70+ other contributorsReleased under the MIT License"
70,learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Intro to Functions LabObjectivesPractice writing functionsExplain basics of working with stringsExplain the difference between return and loggingPractice using return and console.log()IntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.Even if you've walked through some of this material before, it's a good idea toreview as we code-along — we're writing functions now, after all.Code-AlongFor now, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require('expect');const babel = require('babel-core');const jsdom = require('jsdom');const path = require('path');This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run your tests. A library is code that someone else(usually multiple someone elses) wrote for our use. Note that require won'twork out of the box in the browser. We're actually running our tests in adifferent environment.If you go to test/index-test.js, you'll seedescribe('shout(string)', function(){  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe('shout(string)', function(){  it('receives one argument and returns it in all caps', function() {    // we'll get to this in a sec  })})These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout('hello')).toEqual('HELLO')which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, run learn test in the terminal in your Learn IDE. The firstoutput you'll see will look like> java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) calls console.log() its one argument in all caps  logWhisper(string)    4) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  0 passing (99ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/index-test.js:4:5)      at processImmediate (internal/timers.js:456:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  3) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  4) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  7) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hm, seven failed tests. Let's see if we can get that first test topass. Open up index.js.When we write our code, we follow the guidance of the tests. Remember the line,describe('shout(string)', function() { ... }). Well, we know that we need afunction called shout that accepts an argument — let's add that first. Inindex.js:function shout(string) {}And what should that function do? Well, the it() description tells us that it\""receives one argument and returns it in all caps\"".Okay, so with that information, we know that our function should look like this:function shout(string) {  return string}But how do we make string all caps? JavaScript has a method for that! It'scalled toUpperCase(). We can call it on any string:'Hello!'.toUpperCase() // 'HELLO!'So let's try it with our shout() function:function shout(string) {  return string.toUpperCase()}And run our tests again:learn testshout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  logShout(string)    2) calls console.log() its one argument in all caps  logWhisper(string)    3) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    4) returns \""I can't hear you!\"" if `string` is lowercase    5) returns \""YES INDEED!\"" if `string` is uppercase    6) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  1 passing (108ms)  6 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  2) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  3) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  4) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hey! We got one to pass! Six left.Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!In this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing becasue whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.The next two tests are checking to see if a specific string is logged when afunction is called. You will still need to use the .toUpperCase() and.toLowerCase() methods for logShout(string) and logWhisper(string). Keep inmind though that these tests are not looking for return values, only logs.The final function you need to create is sayHiToGrandma(). Grandma is a bithard of hearing, so whispering can be a bit difficult, but she'll always hearyou if you say, \""I love you, Grandma.\"" This time, you will need to returndifferent strings depending on the string passed into the function.Note: Although there are 3 tests for sayHiToGrandma(), you only need towrite one function. This function should be able to handle all three testconditions:If the string that is passed into the function is all lowercase, thefunction should return \""I can't hear you!\""If the string that is passed into the function is all uppercase, thefunction should return \""YES INDEED!\""If the string that is passed into the function is equal to \""I love you,Grandma.\"", the function should return \""I love you, too.\""How do we check if a string is all lowercase or all uppercase?var uppercase = \""HELLO!\""uppercase.toUpperCase() === uppercase // truevar lowercase = 'hello!'lowercase.toLowerCase() === lowercase // truevar mixedCase = 'Hi there!'mixedCase.toLowerCase() === mixedCase // falsemixedCase.toUpperCase() === mixedCase // falseWe can simply check whether the string is the same when we convert it touppercase or lowercase! (The lines with the === comparisons are the ones thatcheck). If it's the same, then it was already in that case; if not, then it'seither in the other case or it's mixed case. Now that we know how to comparestrings, how can we use these comparisons to conditionally return differentstrings?Remember that punctuation is important! Humans might be able to understand that\""I love you Grandma\"" is close enough to \""I love you, Grandma.\"" and means thesame thing but JavaScript will not consider these equal!Good luck! When all tests are passing, be sure to run learn submit!View Intro to Functions Lab on Learn.co and start learning to code for free."
71,learn-co-curriculum/phase-0-intro-to-js-2-objects-lab,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/blob/master/README.md,JavaScript,"Objects LabLearning GoalsCreate an ObjectPerform operations on an ObjectIntroductionWe covered the concepts of Objects in JavaScript. Now it's time to put theconcepts into practice.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.InstructionsFollow the steps below, running npm test as you go to get additionalinformation from the tests. Don't forget to run npm install first!Let's say we are working on a program that will keep track of a company'semployees. We want to store each employee as an Object. We're startingsmall, so to begin with we'll only keep track of the employee's name and streetaddress.To start, assign an employee variable to an Object containingname and streetAddress keys; you can use whatever values you like. Useliteral syntax to create your Object. Various updates will be applied to thisvariable (destructively and non-destructively) in this lab.Once you've initialized the employee Object, you'll need to create thefollowing four functions:updateEmployeeWithKeyAndValue(): this function should take in threearguments: an employee Object, a key and a value. This function shouldnot mutate the employee; it should return a new Object that has anupdated value for the key passed in. Hint: use the spread operator!destructivelyUpdateEmployeeWithKeyAndValue(): this function should work thesame as updateEmployeeWithKeyAndValue() but it should mutate theemployee Object passed in.deleteFromEmployeeByKey(): this function should take in a employeeObject and a key. It should delete the property with that key from theemployee Object. This should not mutate the original employee Object;it should return a new Object that doesn't include the identifiedkey-value pair. Hint: use the spread operator!destructivelyDeleteFromEmployeeByKey(): this function should work the sameas deleteFromEmployeeByKey() but it should mutate the employee Object.As you work on your functions, be sure to think about when to use dot notationvs. bracket notation.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade.ConclusionIn this lab, we practiced creating an Object and performing operations on it.ResourcesMDN: Object"
72,strapi/strapi,https://github.com/strapi/strapi/blob/main/README.md,JavaScript,"                API creation made simple, secure and fast.The most advanced open-source headless CMS to build powerful APIs with no effort.Cloud · Try live demo                                        Strapi is a free and open-source headless CMS delivering your content anywhere you need.Keep control over your data. With Strapi, you know where your data is stored, and you keep full control at all times.Self-hosted. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.Database agnostic. Strapi works with SQL databases. You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.Customizable. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.Getting StartedRead the Getting Started tutorial or follow the steps below:⏳ InstallationInstall Strapi with this Quickstart command to create a Strapi project instantly:(Use yarn to install the Strapi project (recommended). Install yarn with these docs.)yarn create strapi-app my-project --quickstartor(Use npm/npx to install the Strapi project.)npx create-strapi-app my-project --quickstartThis command generates a brand new project with the default features (authentication, permissions, content management, content type builder & file upload). The Quickstart command installs Strapi using a SQLite database which is used for prototyping in development.Enjoy 🎉🖐 RequirementsComplete installation requirements can be found in the documentation under Installation Requirements.Supported operating systems:Ubuntu LTS/Debian 9.xCentOS/RHEL 8macOS MojaveWindows 10Docker(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)Node:Strapi only supports maintenance and LTS versions of Node.js. Please refer to the Node.js release schedule for more information. NPM versions installed by default with Node.js are supported. Generally it's recommended to use yarn over npm where possible.Strapi VersionRecommendedMinimum4.11.0 and up18.x16.x4.3.9 to 4.10.x18.x14.x4.0.x to 4.3.816.x14.xDatabase:DatabaseRecommendedMinimumMySQL8.05.7.8MariaDB10.610.3PostgreSQL14.011.0SQLite33We recommend always using the latest version of Strapi stable to start your new projects.FeaturesModern Admin Panel: Elegant, entirely customizable and a fully extensible admin panel.Secure by default: Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.Plugins Oriented: Install the auth system, content management, custom plugins, and more, in seconds.Blazing Fast: Built on top of Node.js, Strapi delivers amazing performance.Front-end Agnostic: Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.Powerful CLI: Scaffold projects and APIs on the fly.SQL databases: Works with PostgreSQL, MySQL, MariaDB, and SQLite.See more on our website.ContributingPlease read our Contributing Guide before submitting a Pull Request to the project.Community supportFor general help using Strapi, please refer to the official Strapi documentation. For additional help, you can use one of these channels to ask a question:Discord (For live discussion with the Community and Strapi team)GitHub (Bug reports, Contributions)Community Forum (Questions and Discussions)Feedback section (Roadmap, Feature requests)Twitter (Get the news fast)FacebookYouTube Channel (Learn from Video Tutorials)MigrationFollow our migration guides on the documentation to keep your projects up-to-date.RoadmapCheck out our roadmap to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.DocumentationSee our dedicated repository for the Strapi documentation, or view our documentation live:Developer docsUser guideTry live demoSee for yourself what's under the hood by getting access to a hosted Strapi project with sample data.LicenseSee the LICENSE file for licensing information."
73,learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/blob/master/README.md,JavaScript,"Testing with JavaScript LabLearning GoalsRunning testsReading test resultsRunning TestsYou understand how to read tests; now it's time to run the tests.Recall that in the previous lesson, the tests were commented out. Be sure to forkand clone this lab into your local environment so you have the version of the testfile that is not commented out. (Return to the previous lesson if you need a reminderof how to do this.)Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code. (If you are using a different text editor, the commandwill be different.) Finally, run npm install to install the lab'sdependencies.What exactly do we mean by installing dependencies? Open the package.json fileand scroll down to the bottom. You'll see a list of 'DevDependencies'. What'slisted here are JavaScript packages: files or sets of files full of existing,reusable code. They are designed to be shared, allowing many developers to usethe same code in their own projects. The packages you see listed inpackage.json make it possible to run the lab's tests. In order to use thepackages, we have to install them; npm install does that for us.If you take a look at index.js and indexTest.js, you should see the samecode as in the previous lesson. The only difference is that the test code inindexTest.js is no longer commented out.Important: You should never need to make changes to test files unless alab's instructions specifically tell you to do so.To run the tests, run npm test in the terminal. That's it!The next step is learning how to read the results that the tests give you.Reading Results of TestsThe first time you run npm test, you should see something that looks likethis:> js-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40 and greater than 0    Message      ✓ gives the name and height  1 passing (552ms)  2 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)npm ERR! Test failed.  See above for more details.Note: If you also get an error that ends with \""unexpected character (after) at line 1, column 1 [parse.c:769] (Oj::ParseError)\"", make sure you've cloneddown the files for this lab, and are not running the tests on the files fromthe previous lesson.Let's break this down a bit. If you look about a third of the way down in theoutput, you'll see a summary of how the tests went:  1 passing (552ms)  2 failingGreat! We've already got one test passing! Now let's see how we failed the othertwo tests.  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)While there is no hard and fast rule, and there will be exceptions, it is mostoften best to address your test errors in order. So let's take a look at ourfirst error:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:456:21)Here is the specific error:      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +SusanIt tells us what the test is expecting (Expected 'Joe' to equal 'Susan') andthen gives us details about the expected and actual values. This shows youexactly how the value your code is returning (the actual value) differs fromwhat the test is looking for. Make sure you understand what this is telling you— it will come in handy in later labs!This error makes sense because we have the name variable set equal to \""Joe\"" inour index.js file. Let's change that line of code to set name equal to\""Susan\"" instead. Run the tests again by typing npm test in the terminal'scommand line (don't forget to save the file first!), and you should see thatwe are now passing 2 of the 3 tests!  what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40 and greater than 0    Message      ✓ gives the name and height  2 passing (736ms)  1 failing  1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)Woot! You passed another one. Now go ahead and try to pass the remaining test onyour own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Variable Not DefinedReferenceError: name is not definedThat one says that the name variable is not defined. That makes no sense! Weinitialized the name variable in index.js! What that actually means is thatthe test couldn't find the variable name. You'll get this error if the name ofone of your variables is different than the test is expecting. Check to makesure you used the correct variable names and look carefully for typos.Unexpected Identifier/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1cnst name = \""Susan\"";     ^^^^SyntaxError: Unexpected identifier    at wrapSafe (internal/modules/cjs/loader.js:979:16)    at Module._compile (internal/modules/cjs/loader.js:1027:27)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/indexTest.js:1:15)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36    at Array.forEach (<anonymous>)    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)    at internal/main/run_main_module.js:17:47npm ERR! Test failed.  See above for more details.Whoa! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake. It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to thecnst name = \""Susan\"" line of code. Take a look and read very carefully:const is misspelled. Whoops! Once we fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine-toothed comb... and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test isgiving us a unique message because it recognizes a problem. If we look at thistest in test/indexTest.js, we see this:describe(\""Height\"", () => {    it(\""is less than 40 and greater than 0\"", () => {      expect(height).toBeMoreThan(0)      expect(height).toBeLessThan(40);    });  });We can see that the word \""actual\"" in this case is referring to the heightvariable. The error message is telling us that height must be a number. Ifyou're seeing this, make sure that you have set the height variable to anumber that's less than 40 (e.g. 39), not a string (\""39\""). The testwill interpret the value as a string due to the quotation marks wrapping it.Optional Mocha ConfigurationIn this lab, we only had three tests to pass, but as you continue through thecurriculum you will encounter labs with many more tests. You can imagine thatthe test output could get very long, making it more difficult to focus in on howto fix a particular error.To help with this issue, there is some very simple setup you can put in place inMocha that will cause the tests to stop as soon as the first failing test isencountered.To implement this, open up the package.json file and find the test script. Itshould look something like this:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\""Add the --bail flag to the end of the line, inside the quotes:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""That's it!Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theComplete Your First Software Engineering Assignmentlesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.Note about the git push commandYou may recall from the Complete Your First Software EngineeringAssignment lesson that a different form of the git pushcommand was used:$ git push <remote> <branch>where remote is the \""alias\"" for the repo's url on GitHub, and branch is therepo's default branch (generally main for newer repos and master for olderones). For this lab, therefore, the full command would be:$ git push origin masterThis command tells git to push the code in the master branch of the local repoto the master branch of the remote repo identified by the origin alias.So why didn't you need to run that command?When you use the git clone command to clone down a repo from GitHub, gitautomatically assigns the \""origin\"" alias to the url you clone from, and usesthe default branch for that repo.As you work through the labs in this program, you should always:fork the lab's repo to your GitHub account, andclone that fork down to your local machine.As long as you always fork before you clone, it should be safe to run git push without specifying the remote and branch.If you want to verify that you're pushing to the right repo, you can use thegit remote command and include the -v flag:$ git remote -vorigin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (fetch)origin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (push)Here you can see that the origin alias points to your fork of the repo, soit's safe to run the shorter command, git push.ConclusionNow that you've gotten all your tests passing and submitted your work (andlearned a bit more about git push), you're ready to move on. Congratulations!You've solved your first JavaScript tests!"
74,NARKOZ/hacker-scripts,https://github.com/NARKOZ/hacker-scripts/blob/master/README.md,JavaScript,"English | 简体中文Hacker ScriptsBased on a truestory:xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.xxx: So we're sitting here, looking through his, uhm, \""legacy\""xxx: You're gonna love thisxxx: smack-my-bitch-up.sh - sends a text message \""late at work\"" to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.xxx: kumar-asshole.sh - scans the inbox for emails from \""Kumar\"" (a DBA at our clients). Looks for keywords like \""help\"", \""trouble\"", \""sorry\"" etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply \""no worries mate, be careful next time\"".xxx: hangover.sh - another cron-job that is set to specific dates. Sends automated emails like \""not feeling well/gonna work from home\"" etc. Adds a random \""reason\"" from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.xxx: (and the oscar goes to) fucking-coffee.sh - this one waits exactly 17 seconds (!), then opens a telnet session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has a TCP socket up and running) and sends something like sys brew. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.xxx: holy sh*t I'm keeping thoseOriginal: http://bash.im/quote/436725 (in Russian)  (Archive.org link)Pull requests with other implementations (Python, Perl, Shell, etc) are welcome.UsageYou need these environment variables:# used in `smack-my-bitch-up` and `hangover` scriptsTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy# used in `kumar_asshole` scriptGMAIL_USERNAME=admin@example.orgGMAIL_PASSWORD=passwordFor Ruby scripts you need to install gems:gem install dotenv twilio-ruby gmailCron jobs# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh >> /path/to/smack-my-bitch-up.log 2>&1# Runs `hangover.sh` monday to friday at 8:45 am.45 8 * * 1-5 /path/to/scripts/hangover.sh >> /path/to/hangover.log 2>&1# Runs `kumar-asshole.sh` every 10 minutes.*/10 * * * * /path/to/scripts/kumar-asshole.sh# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.shCode is released under WTFPL."
75,typicode/json-server,https://github.com/typicode/json-server/blob/master/README.md,JavaScript,"JSON Server Get a full fake REST API with zero coding in less than 30 seconds (seriously)Created with <3 for front-end developers who need a quick back-end for prototyping and mocking.Egghead.io free video tutorial - Creating demo APIs with json-serverJSONPlaceholder - Live running versionMy JSON Server - no installation required, use your own dataSee also:🐶 husky - Git hooks made easy🦉 lowdb - local JSON database✅ xv - a beautifully simple and capable test runner Gold sponsors 🥇                    Silver sponsors 🥈           Become a sponsor and have your company logo hereSponsorPlease help me build OSS 👉 GitHub Sponsors ❤️Table of contentsGetting startedRoutesPlural routesSingular routesFilterPaginateSortSliceOperatorsFull-text searchRelationshipsDatabaseHomepageExtrasStatic file serverAlternative portAccess from anywhereRemote schemaGenerate random dataHTTPSAdd custom routesAdd middlewaresCLI usageModuleSimple exampleCustom routes exampleAccess control exampleCustom output exampleRewriter exampleMounting JSON Server on another endpoint exampleAPIDeploymentLinksVideoArticlesThird-party toolsLicenseGetting startedInstall JSON Servernpm install -g json-serverCreate a db.json file with some data{  \""posts\"": [    { \""id\"": 1, \""title\"": \""json-server\"", \""author\"": \""typicode\"" }  ],  \""comments\"": [    { \""id\"": 1, \""body\"": \""some comment\"", \""postId\"": 1 }  ],  \""profile\"": { \""name\"": \""typicode\"" }}Start JSON Serverjson-server --watch db.jsonNow if you go to http://localhost:3000/posts/1, you'll get{ \""id\"": 1, \""title\"": \""json-server\"", \""author\"": \""typicode\"" }Also when doing requests, it's good to know that:If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to db.json using lowdb.Your request body JSON should be object enclosed, just like the GET output. (for example {\""name\"": \""Foobar\""})Id values are not mutable. Any id value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.A POST, PUT or PATCH request should include a Content-Type: application/json header to use the JSON in the request body. Otherwise it will return a 2XX status code, but without changes being made to the data.RoutesBased on the previous db.json file, here are all the default routes. You can also add other routes using --routes.Plural routesGET    /postsGET    /posts/1POST   /postsPUT    /posts/1PATCH  /posts/1DELETE /posts/1Singular routesGET    /profilePOST   /profilePUT    /profilePATCH  /profileFilterUse . to access deep propertiesGET /posts?title=json-server&author=typicodeGET /posts?id=1&id=2GET /comments?author.name=typicodePaginateUse _page and optionally _limit to paginate returned data.In the Link header you'll get first, prev, next and last links.GET /posts?_page=7GET /posts?_page=7&_limit=2010 items are returned by defaultSortAdd _sort and _order (ascending order by default)GET /posts?_sort=views&_order=ascGET /posts/1/comments?_sort=votes&_order=ascFor multiple fields, use the following format:GET /posts?_sort=user,views&_order=desc,ascSliceAdd _start and _end or _limit (an X-Total-Count header is included in the response)GET /posts?_start=20&_end=30GET /posts/1/comments?_start=20&_end=30GET /posts/1/comments?_start=20&_limit=10Works exactly as Array.slice (i.e. _start is inclusive and _end exclusive)OperatorsAdd _gte or _lte for getting a rangeGET /posts?views_gte=10&views_lte=20Add _ne to exclude a valueGET /posts?id_ne=1Add _like to filter (RegExp supported)GET /posts?title_like=serverFull-text searchAdd qGET /posts?q=internetRelationshipsTo include children resources, add _embedGET /posts?_embed=commentsGET /posts/1?_embed=commentsTo include parent resource, add _expandGET /comments?_expand=postGET /comments/1?_expand=postTo get or create nested resources (by default one level, add custom routes for more)GET  /posts/1/commentsPOST /posts/1/commentsDatabaseGET /dbHomepageReturns default index file or serves ./public directoryGET /ExtrasStatic file serverYou can use JSON Server to serve your HTML, JS and CSS, simply create a ./public directoryor use --static to set a different static files directory.mkdir publicecho 'hello world' > public/index.htmljson-server db.jsonjson-server db.json --static ./some-other-dirAlternative portYou can start JSON Server on other ports with the --port flag:$ json-server --watch db.json --port 3004Access from anywhereYou can access your fake API from anywhere using CORS and JSONP.Remote schemaYou can load remote schemas.$ json-server http://example.com/file.json$ json-server http://jsonplaceholder.typicode.com/dbGenerate random dataUsing JS instead of a JSON file, you can create data programmatically.// index.jsmodule.exports = () => {  const data = { users: [] }  // Create 1000 users  for (let i = 0; i < 1000; i++) {    data.users.push({ id: i, name: `user${i}` })  }  return data}$ json-server index.jsTip use modules like Faker, Casual, Chance or JSON Schema Faker.HTTPSThere are many ways to set up SSL in development. One simple way is to use hotel.Add custom routesCreate a routes.json file. Pay attention to start every route with /.{  \""/api/*\"": \""/$1\"",  \""/:resource/:id/show\"": \""/:resource/:id\"",  \""/posts/:category\"": \""/posts?category=:category\"",  \""/articles?id=:id\"": \""/posts/:id\""}Start JSON Server with --routes option.json-server db.json --routes routes.jsonNow you can access resources using additional routes./api/posts # → /posts/api/posts/1  # → /posts/1/posts/1/show # → /posts/1/posts/javascript # → /posts?category=javascript/articles?id=1 # → /posts/1Add middlewaresYou can add your middlewares from the CLI using --middlewares option:// hello.jsmodule.exports = (req, res, next) => {  res.header('X-Hello', 'World')  next()}json-server db.json --middlewares ./hello.jsjson-server db.json --middlewares ./first.js ./second.jsCLI usagejson-server [options] <source>Options:  --config, -c       Path to config file           [default: \""json-server.json\""]  --port, -p         Set port                                    [default: 3000]  --host, -H         Set host                             [default: \""localhost\""]  --watch, -w        Watch file(s)                                     [boolean]  --routes, -r       Path to routes file  --middlewares, -m  Paths to middleware files                           [array]  --static, -s       Set static files directory  --read-only, --ro  Allow only GET requests                           [boolean]  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]  --snapshots, -S    Set snapshots directory                      [default: \"".\""]  --delay, -d        Add delay to responses (ms)  --id, -i           Set database id property (e.g. _id)         [default: \""id\""]  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)                                                                 [default: \""Id\""]  --quiet, -q        Suppress log messages from output                 [boolean]  --help, -h         Show help                                         [boolean]  --version, -v      Show version number                               [boolean]Examples:  json-server db.json  json-server file.js  json-server http://example.com/db.jsonhttps://github.com/typicode/json-serverYou can also set options in a json-server.json configuration file.{  \""port\"": 3000}ModuleIf you need to add authentication, validation, or any behavior, you can use the project as a module in combination with other Express middlewares.Simple example$ npm install json-server --save-dev// server.jsconst jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()server.use(middlewares)server.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})$ node server.jsThe path you provide to the jsonServer.router function  is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:const path = require('path')const router = jsonServer.router(path.join(__dirname, 'db.json'))For an in-memory database, simply pass an object to jsonServer.router().To add custom options (eg. foreginKeySuffix) pass in an object as the second argument to jsonServer.router('db.json', { foreginKeySuffix: '_id' }).Please note also that jsonServer.router() can be used in existing Express projects.Custom routes exampleLet's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.const jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()// Set default middlewares (logger, static, cors and no-cache)server.use(middlewares)// Add custom routes before JSON Server routerserver.get('/echo', (req, res) => {  res.jsonp(req.query)})// To handle POST, PUT and PATCH you need to use a body-parser// You can use the one used by JSON Serverserver.use(jsonServer.bodyParser)server.use((req, res, next) => {  if (req.method === 'POST') {    req.body.createdAt = Date.now()  }  // Continue to JSON Server router  next()})// Use default routerserver.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})Access control exampleconst jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()server.use(middlewares)server.use((req, res, next) => { if (isAuthorized(req)) { // add your authorization logic here   next() // continue to JSON Server router } else {   res.sendStatus(401) }})server.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})Custom output exampleTo modify responses, overwrite router.render method:// In this example, returned resources will be wrapped in a body propertyrouter.render = (req, res) => {  res.jsonp({    body: res.locals.data  })}You can set your own status code for the response:// In this example we simulate a server side error responserouter.render = (req, res) => {  res.status(500).jsonp({    error: \""error message here\""  })}Rewriter exampleTo add rewrite rules, use jsonServer.rewriter():// Add this before server.use(router)server.use(jsonServer.rewriter({  '/api/*': '/$1',  '/blog/:resource/:id/show': '/:resource/:id'}))Mounting JSON Server on another endpoint exampleAlternatively, you can also mount the router on /api.server.use('/api', router)APIjsonServer.create()Returns an Express server.jsonServer.defaults([options])Returns middlewares used by JSON Server.optionsstatic path to static fileslogger enable logger middleware (default: true)bodyParser enable body-parser middleware (default: true)noCors disable CORS (default: false)readOnly accept only GET requests (default: false)jsonServer.router([path|object], [options])Returns JSON Server router.options (see CLI usage)DeploymentYou can deploy JSON Server. For example, JSONPlaceholder is an online fake API powered by JSON Server and running on Heroku.LinksVideoCreating Demo APIs with json-server on egghead.ioArticlesNode Module Of The Week - json-serverng-admin: Add an AngularJS admin GUI to any RESTful APIFast prototyping using Restangular and Json-serverCreate a Mock REST API in Seconds for Prototyping your FrontendNo API? No Problem! Rapid Development via Mock APIsZero Code REST With json-serverThird-party toolsGrunt JSON ServerDocker JSON ServerJSON Server GUIJSON file generatorJSON Server extensionLicenseMITSupporters ✨"
76,dcloudio/mui,https://github.com/dcloudio/mui/blob/master/README.md,JavaScript,mui性能和体验的差距，一直是mobile app开发者放弃HTML5的首要原因。 浏览器天生的切页白屏、不忍直视的转页动画、浮动元素的抖动、无法流畅下拉刷新等问题，这些都让HTML5开发者倍感挫败，尤其拿到Android低端机运行，摔手机的心都有； 另一方面，浏览器默认控件样式又少又丑，制作一个漂亮的控件非常麻烦，也有一些制作简单的ui框架但性能低下。mui框架有效的解决了这些问题，这是一个可以方便开发出高性能App的框架，也是目前最接近原生App效果的框架。赞助我们一个手艺人需要3万个粉丝养活，希望你能成为其中之一，前往赞助参考文档mui官网文档使用Jekyll 构建，立即查看。快速体验在线下载或扫描如下二维码下载Hello MUI，可在手机上体验MUI的控件UI及能力展示；在线交流若你在使用过程中有任何经验、想法、疑惑，都可以在问答社区 发起文章，和其它mui用户一起交流；Licensemui遵循MIT License；开发工具mui组件已被封装成HBuilder代码块，只需要简单几个字符，就可以快速生成各个组件对应的HTML代码，因此和Hbuilder两个一起用，效果会更好；
77,learn-co-curriculum/phase-0-javascript-events-event-listening-lab,https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/blob/master/README.md,JavaScript,"JavaScript Event Listeners LabLearning GoalsCreate event listeners on DOM nodes using addEventListener()IntroductionIn this lab we will learn how to teach nodes to \""listen\"" for an event usingaddEventListener().If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create Event Listeners on DOM Nodes with addEventListener()In order for JavaScript to handle an event, we first need to tell it to listenfor that event. We do this by calling the addEventListener() method on theelement we want to add the listener to, and passing it two arguments:the name of the event to listen for, anda callback function to \""handle\"" the eventOpen up index.html in the browser. When you click in the <input> area,nothing happens. Let's set up some event handling. Specifically, let's add anevent listener for the click event on the input#button element inindex.html.Try out the following in the Chrome DevTools console:const input = document.getElementById('button');input.addEventListener('click', function() {  alert('I was clicked!');});Now when you click inside of input#button, you will get an alert box.Let's review what's happening in this code.First, we grab the element that we want to add the event listener to and save areference to it in the input variable.Next, we call addEventListener() on that element to tell JavaScript to listenfor the event. We pass two arguments to addEventListener(): the name of theevent to listen for (in this case, click) and a callback function that willbe executed when the event is \""heard.\""According to MDN:A callback function is a function passed into another function as an argument,which is then invoked inside the outer function to complete some kind ofroutine or action.That's exactly what's happening here: we're passing a callback function as thesecond argument to the addEventListener() function; the callback will beinvoked as soon as the event occurs.Let's pull out that second argument and take a look at it:function() {  alert('I was clicked!');}This function has all the components of functions we've seen before (thefunction keyword, a pair of parentheses, and the body of the function enclosedin curly braces) except one: it doesn't have a name assigned to it. This iswhat's called an anonymous function. Because it doesn't have a name, it can'tbe invoked directly. But the event listener knows to execute whatever functionis passed as the second argument when it detects the event, so it doesn't needto be named.If we are only calling our callback function in that one place, using ananonymous function makes sense. However, what if we wanted to use that samealert message on a bunch of elements? In that case, it would make more sense tocreate a separate, named function that could be called by all of our eventlisteners. With this approach, we would pass the function name as the secondargument to addEventListener() rather than the function itself:const input = document.getElementById('button');function clickAlert() {  alert('I was clicked!');}input.addEventListener('click', clickAlert);We could then attach our clickAlert to as many elements as we'd like. Just aswe did for the input element, we would first use our CSS selector skills tograb the desired element and save it to a variable, then add the click eventlistener to that element. Give it a try!With this approach, even if we're using our clickAlert with a whole bunch ofelements, if we decide later that we want to change the text of the alert to\""Hee hee, that tickles!\"" instead, we would only need to make that change in oneplace: inside our clickAlert() function.Note: we pass clickAlert as the argument, not clickAlert(). This isbecause we don't want to invoke the function in this line of code. Instead, wewant to pass a reference to the function to addEventListener() so it cancall the function when the time comes.Refresh your browser and try out the latest version of the code in the consoleto verify that it works. Also try passing clickAlert() as the second argumentrather than clickAlert and see what happens.Passing the TestsNow let's set up index.js to do the same thing so we can get our test passing.To do that, simply copy the code into the index.js file'saddingEventListener() function and run the test. Either version should passthe test — just make sure that the code creating the event listener is insidethe addingEventListener() function.Checking the Code in the BrowserWe know that the code works in the console and passes the test, but we shouldalso check our changes to index.js in the browser. Because you've added theaddEventListener() function inside the addingEventListener() function,recall that you will need to call the outer function in index.js to executeaddEventListener() and activate the event listener. Be sure to refresh thepage to load the new code in index.js.ResourcesMDN - Web Events"
78,phonegap/phonegap-start,https://github.com/phonegap/phonegap-start/blob/master/README.md,JavaScript,"Hello World PhoneGap Application A Hello World application built with PhoneGapGetting Help with PhoneGapIf you are looking for help with PhoneGap please visit thePhoneGap Forums.UsageDesktopIn your browser, open the file:/www/index.htmlPhoneGap CLIThis repository is automatically downloaded by phonegap-cliwhen you create a new application.PhoneGap BuildCreate a new app with the following repository:https://github.com/phonegap/phonegap-start.gitContributorsUpdating the ApplicationThe application is based on the Apache Cordova Hello World app.1. Update the Sourcecp cordova-app-hello-world/www www/Do not replace www/config.xml.Do not replace www/img/logo.png.2. Update index.htmlReplace <h1>Apache Cordova</h1> with <h1>PhoneGap</h1>.3. Update PhoneGap Version<preference name=\""phonegap-version\"" value=\""x.x.x\"" />4. Commit$ git commit -am \""Version x.x.x\""5. Tag$ git tag x.x.x"
79,learn-co-curriculum/phase-0-css-rainbow-lab,https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/blob/master/README.md,JavaScript,"My Little RainbowLearning GoalsReview HTML basicsReview CSS basicsSpecify hexadecimal color values with CSSIntroductionIn this lab, we're going to make a rainbow with HTML <div> elements. And whilewe do it we're going to learn about HTML elements, CSS styling, CSS selectors,how color works in CSS and importing style sheets.Before we start, here's some basic info about HTML and CSS. Skip toMake a CSS Rainbow if you feel comfortable enough with HTMLand CSS.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you work to see your test progress.Review HTML BasicsHyper Text Markup Language, or HTML, is a way to structure a document withdifferent parts. Each section of content is marked by elements (using tags).Each element has its own special meaning that the browser uses to render theHTML document. Use this cheat sheet on HTMLelements for guidance.ElementsAll begin with < and end with >, e.g., <div> (this last part is a tag).Most have an opening tag such as <div> and a closing tag </div>.The / indicates to the browser that that tag is a closing tag.The element is everything between the tags and the tags themselves.Some tags are self-closing like the line break element <br>.Elements can have IDs and classes to aid the browser in finding specific tags.Must begin with a letter A-Z or a-z.Can be followed by: letters (A-Za-z), digits (0-9), hyphens (-), andunderscores (_).IDs can only be used once per page. E.g.:<div id=\""this-special-div\""></div>.Classes can be used as many times as you want. E.g.:<div class=\""a-less-special-div\""></div>.Elements nested inside other elements are called children.Children inherit attributes from their parents.Don't nest everything.Elements next to one another are siblings.Siblings do not inherit from one another but are important for selecting inCSS.Here is an example of element relations:<div>  <!-- the parent element -->  <p></p>  <!-- the first sibling element/the first child-->  <p></p>  <!-- the second sibling element/the second child --></div>Review CSS BasicsCascading Style Sheets, or CSS, is a language created to style HTML documents bytelling the browser how specific elements should look. CSS does this byselecting elements based on their tag, ids, classes, or all of the above. Thereason for CSS is the separation of concerns. We want HTML to focus on thestructure and meaning of our content. We let CSS worry about how to make thatinformation appear clear and engaging.CSS selectorsThey select elements to assign them styles.* (wildcard) selects every element.An element, such as div, will select all elements of that type.They select an id like #some-idClasses are selected like this .some-classTo select all children elements of a parent do something like this div pTo select multiple different elements separate them by commas like thisdiv, p, aHere's an example of CSS styling:* {  color: red; /* color in CSS refers to font color */} /* all elements will have red font */ Make a CSS RainbowIn the directory, you'll see three files: index.html, main.css, and thisfile, README.md. Open index.html.If everything is working correctly, you should see a white page.Good job!Making the Divs VisibleIf you look at the file in your text editor or use the inspector, you'll seethat the basic HTML structure is present in index.html. So why can't we seeanything?Well, divs are structural elements. They're used to invisibly group othervisible elements together. But the style sheet that would tell our divs to dosomething a little different hasn't been linked yet!Let's fix this by adding the style sheet to the head:<head>  <title>My Little Rainbow</title>  <link rel=\""stylesheet\"" type=\""text/css\"" href=\""./main.css\"" /></head>Link is a self-closing tag that will create a relative path with the hrefattribute. A relative path ./main.css means the browser knows that themain.css file is in the same place as index.html. The head is a hiddenpart of the page that tells the browser where to find any other files it needsto display the page correctly, the title for the tab, and any other possibleimportant information.Now if you refresh the index.html page in your browser you should see aperfectly solid-black rainbow.We got the basic outline because in the main.css all the div elements wereselected and given a border whose color is #000, \""black.\"" While we could setborder-top-color: red;, we will have more colors available if we define colorswithout words.Instead of red, green, or the exotic tomato, professionals prefer a set ofnumbers with a base pair of 16 rather than a base pair of 10 like we use everyday. These numbers are called \""hexadecimal\"" and we can use them to make a widerange of colors.Some Stuff You Should Know About Hex Colors (and Web Colors in General)Hex colors begin with # and are followed by, generally, 6 numbers, but some ofthese numbers are actually letters. The lowest single digit number in hex is 0and the highest single digit number is f. This table might help to visualizewhat we mean by this.Decimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16Hexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10Hex colors work by creating Red, Green, Blue (RGB) values. Traditional RGBcolors are on a scale of 0 to 255 for each of the three colors in the spectrum.Hex colors are considered true colors since they can represent ~16 millioncolors—but your eye can only see 10 million of those. So #000000 translates toblack since 0 reds, 0 green, 0 blues represents the absence of all colors, and#ffffff makes white since 255 reds, 255 greens, and 255 blues is the maximumof each of the colors.Hex colors can be shortened to just three numbers when each RGB value is thesame for each digit. So #11dd99 can be written as #1d9.Coloring the RainbowTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: #f00;Orange: #ffa500; Yellow: #ff0; Green: #00bc3f; Blue: #06f; Indigo:#8a2be2; Violet: #d300c9All we have to do next is select each div individually and apply each of thosecolors. That is a perfect use for ids since they're meant to style one specificelement only. We need to add an id for each div so a logical name for each divwould be the color that they have to be. It could be something random, but goodnames make for semantic code. So let's give the outermost div the id red.<div id=\""red\"">...</div>To give that id some CSS attributes we'll go into main.css, select the id, andmark its color as red.#red {  /* this selects any elements with the red id */  border-top-color: #f00;}To make sure the rainbow isn't so monochromatic you now need to repeat the abovesteps with the final six colors, and when you do you should have a complete,colorful rainbow.Moving OnWhen you're done with this lab type npm test to confirm you've passed all thetests.ConclusionAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. Welinked our style sheet to our HTML page and added ids to our HTML elements. Wethen created CSS rules, using hexadecimal color values, for those elements todisplay all the colors on our completed HTML page."
80,angular-ui/bootstrap,https://github.com/angular-ui/bootstrap/blob/master/README.md,JavaScript,"Project Status (please read)Due to Angular's continued adoption, our creation of the Angular version of this library, and the the project maintainers' moving on to other things, this project is considered feature-complete and is no longer being maintained.We thank you for all your contributions over the years and hope you've enjoyed using this library as much as we've had developing and maintaining it.  It would not have been successful without them.UI Bootstrap - AngularJS directives specific to BootstrapQuick linksDemoAngular 2InstallationNPMBowerNuGetCustomManualWebpack / JSPMSupportFAQCode of ConductPREFIX MIGRATION GUIDESupported browsersNeed help?Found a bug?Contributing to the projectDevelopment, meeting minutes, roadmap and more.DemoDo you want to see directives in action? Visit https://angular-ui.github.io/bootstrap/!Angular 2Are you interested in Angular 2? We are on our way! Check out ng-bootstrap.InstallationInstallation is easy as UI Bootstrap has minimal dependencies - only the AngularJS and Twitter Bootstrap's CSS are required.Notes:Since version 0.13.0, UI Bootstrap depends on ngAnimate for transitions and animations, such as the accordion, carousel, etc. Include ngAnimate in the module dependencies for your app in order to enable animation.UI Bootstrap depends on ngTouch for swipe actions. Include ngTouch in the module dependencies for your app in order to enable swiping.Angular RequirementsUI Bootstrap 1.0 and higher requires Angular 1.4.x or higher and it has been tested with Angular 1.4.8.UI Bootstrap 0.14.3 is the last version that supports Angular 1.3.x.UI Bootstrap 0.12.0 is the last version that supports Angular 1.2.x.Bootstrap RequirementsUI Bootstrap requires Bootstrap CSS version 3.x or higher and it has been tested with Bootstrap CSS 3.3.6.UI Bootstrap 0.8 is the last version that supports Bootstrap CSS 2.3.x.Install with NPM$ npm install angular-ui-bootstrapThis will install AngularJS and Bootstrap NPM packages.Install with Bower$ bower install angular-bootstrapNote: do not install 'angular-ui-bootstrap'.  A separate repository - bootstrap-bower - hosts the compiled javascript file and bower.json.Install with NuGetTo install AngularJS UI Bootstrap, run the following command in the Package Manager ConsolePM> Install-Package Angular.UI.BootstrapCustom buildHead over to https://angular-ui.github.io/bootstrap/ and hit the Custom build button to create your own custom UI Bootstrap build, just the way you like it.Manual downloadAfter downloading dependencies (or better yet, referencing them from your favorite CDN) you need to download build version of this project. All the files and their purposes are described here:https://github.com/angular-ui/bootstrap/tree/gh-pages#build-filesDon't worry, if you are not sure which file to take, opt for ui-bootstrap-tpls-[version].min.js.Adding dependency to your projectWhen you are done downloading all the dependencies and project files the only remaining part is to add dependencies on the ui.bootstrap AngularJS module:angular.module('myModule', ['ui.bootstrap']);Webpack / JSPMTo use this project with webpack, follow the NPM instructions.Now, if you want to use only the accordion, you can do:import accordion from 'angular-ui-bootstrap/src/accordion';angular.module('myModule', [accordion]);You can import all the pieces you need in the same way:import accordion from 'angular-ui-bootstrap/src/accordion';import datepicker from 'angular-ui-bootstrap/src/datepicker';angular.module('myModule', [accordion, datepicker]);This will load all the dependencies (if any) and also the templates (if any).Be sure to have a loader able to process css files like css-loader.If you would prefer not to load your css through your JavaScript file loader/bundler, you can choose to import the index-nocss.js file instead, which is available for the modules:carouseldatepickerdatepickerPopupdropdownmodalpopoverpositiontimepickertooltiptypeaheadThe other modules, such as accordion in the example below, do not have CSS resources to load, so you should continue to import them as normal:import accordion from 'angular-ui-bootstrap/src/accordion';import typeahead from 'angular-ui-bootstrap/src/typeahead/index-nocss.js';angular.module('myModule', [accordion, typeahead]);VersioningPre-2.0.0 does not follow a particular versioning system. 2.0.0 and onwards follows semantic versioning. All release changes can be viewed on our changelog.SupportFAQhttps://github.com/angular-ui/bootstrap/wiki/FAQCode of ConductTake a moment to read our Code of ConductPREFIX MIGRATION GUIDEIf you're updating your application to use prefixes, please check the migration guide.Supported browsersDirectives from this repository are automatically tested with the following browsers:Chrome (stable and canary channel)FirefoxIE 9 and 10OperaSafariModern mobile browsers should work without problems.Need help?Need help using UI Bootstrap?Live help in the IRC (#angularjs channel at the freenode network). Use this webchat or your own IRC client.Ask a question in StackOverflow under the angular-ui-bootstrap tag.Please do not create new issues in this repository to ask questions about using UI BootstrapFound a bug?Please take a look at CONTRIBUTING.md and submit your issue here.Contributing to the projectWe are always looking for the quality contributions! Please check the CONTRIBUTING.md for the contribution guidelines.Development, meeting minutes, roadmap and more.Head over to the Wiki for notes on development for UI Bootstrap, meeting minutes from the UI Bootstrap team, roadmap plans, project philosophy and more."
81,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
82,linuxacademy/cicd-pipeline-train-schedule-jenkins,https://github.com/linuxacademy/cicd-pipeline-train-schedule-jenkins/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-jenkinsThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appYou need a Java JDK 7 or later to run the build. You can run the build like this:./gradlew buildYou can run the app with:./gradlew npm_startOnce it is running, you can access it in a browser at http://localhost:3000"
83,freeCodeCamp/boilerplate-npm,https://github.com/freeCodeCamp/boilerplate-npm/blob/main/README.md,JavaScript,Backend Challenges boilerplate - package.json
84,modood/Administrative-divisions-of-China,https://github.com/modood/Administrative-divisions-of-China/blob/master/README.md,JavaScript,"Administrative-divisions-of-China中华人民共和国行政区划（五级）：省级、地级、县级、乡级和村级。数据来源民政部、国家统计局：中华人民共和国民政部-中华人民共和国行政区划代码中华人民共和国国家统计局-统计用区划和城乡划分代码中华人民共和国国家统计局-统计用区划代码和城乡划分代码编制规则本项目已更新至：2022年统计用区划代码和城乡划分代码（截止时间：2022-10-31，发布时间：2022-12-29）数据下载文件列表JSONCSV省级（省份、直辖市、自治区）provinces.jsonprovinces.csv地级（城市）cities.jsoncities.csv县级（区县）areas.jsonareas.csv乡级（乡镇、街道）streets.jsonstreets.csv村级（村委会、居委会）villages.jsonvillages.csv文件列表普通带编码“省份、城市” 二级联动数据pc.jsonpc-code.json“省份、城市、区县” 三级联动数据pca.jsonpca-code.json“省份、城市、区县、乡镇” 四级联动数据pcas.jsonpcas-code.json“省份、城市、区县、乡镇、村庄” 五级联动数据--提示：需要打包下载全部文件，请看 Releases。数据库支持目前本项目数据保存在 sqlite3，数据文件下载：data.sqlite。可以自己将数据迁移到其他数据库管理系统中（MySQL, Oracle, MSSQL 等）。省级数据预览codename13河北省14山西省15内蒙古自治区45广西壮族自治区地级数据预览codenameprovinceCode1301石家庄市131401太原市141525锡林郭勒盟154503桂林市45县级数据预览codenamecityCodeprovinceCode130111栾城区130113140121清徐县140114152527太仆寺旗152515450305七星区450345乡级数据预览codenameareaCodecityCodeprovinceCode130111200南高乡130111130113140121102东于镇140121140114152527201贡宝拉格苏木152527152515450305004漓东街道办事处450305450345村级数据预览codenamestreetCodeareaCodecityCodeprovinceCode130111200201南高村委会130111200130111130113140121102001东于社区居委会140121102140121140114152527201206敦达乌苏嘎查152527201152527152515450305004006横塘社区450305004450305450345"
85,learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Intro to Functions LabObjectivesPractice writing functionsExplain basics of working with stringsExplain the difference between return and loggingPractice using return and console.log()IntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.Even if you've walked through some of this material before, it's a good idea toreview as we code-along — we're writing functions now, after all.Code-AlongFor now, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require('expect');const babel = require('babel-core');const jsdom = require('jsdom');const path = require('path');This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run your tests. A library is code that someone else(usually multiple someone elses) wrote for our use. Note that require won'twork out of the box in the browser. We're actually running our tests in adifferent environment.If you go to test/index-test.js, you'll seedescribe('shout(string)', function(){  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe('shout(string)', function(){  it('receives one argument and returns it in all caps', function() {    // we'll get to this in a sec  })})These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout('hello')).toEqual('HELLO')which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, run learn test in the terminal in your Learn IDE. The firstoutput you'll see will look like> java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) calls console.log() its one argument in all caps  logWhisper(string)    4) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  0 passing (99ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/index-test.js:4:5)      at processImmediate (internal/timers.js:456:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  3) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  4) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  7) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hm, seven failed tests. Let's see if we can get that first test topass. Open up index.js.When we write our code, we follow the guidance of the tests. Remember the line,describe('shout(string)', function() { ... }). Well, we know that we need afunction called shout that accepts an argument — let's add that first. Inindex.js:function shout(string) {}And what should that function do? Well, the it() description tells us that it\""receives one argument and returns it in all caps\"".Okay, so with that information, we know that our function should look like this:function shout(string) {  return string}But how do we make string all caps? JavaScript has a method for that! It'scalled toUpperCase(). We can call it on any string:'Hello!'.toUpperCase() // 'HELLO!'So let's try it with our shout() function:function shout(string) {  return string.toUpperCase()}And run our tests again:learn testshout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  logShout(string)    2) calls console.log() its one argument in all caps  logWhisper(string)    3) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    4) returns \""I can't hear you!\"" if `string` is lowercase    5) returns \""YES INDEED!\"" if `string` is uppercase    6) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  1 passing (108ms)  6 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  2) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  3) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  4) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hey! We got one to pass! Six left.Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!In this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing becasue whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.The next two tests are checking to see if a specific string is logged when afunction is called. You will still need to use the .toUpperCase() and.toLowerCase() methods for logShout(string) and logWhisper(string). Keep inmind though that these tests are not looking for return values, only logs.The final function you need to create is sayHiToGrandma(). Grandma is a bithard of hearing, so whispering can be a bit difficult, but she'll always hearyou if you say, \""I love you, Grandma.\"" This time, you will need to returndifferent strings depending on the string passed into the function.Note: Although there are 3 tests for sayHiToGrandma(), you only need towrite one function. This function should be able to handle all three testconditions:If the string that is passed into the function is all lowercase, thefunction should return \""I can't hear you!\""If the string that is passed into the function is all uppercase, thefunction should return \""YES INDEED!\""If the string that is passed into the function is equal to \""I love you,Grandma.\"", the function should return \""I love you, too.\""How do we check if a string is all lowercase or all uppercase?var uppercase = \""HELLO!\""uppercase.toUpperCase() === uppercase // truevar lowercase = 'hello!'lowercase.toLowerCase() === lowercase // truevar mixedCase = 'Hi there!'mixedCase.toLowerCase() === mixedCase // falsemixedCase.toUpperCase() === mixedCase // falseWe can simply check whether the string is the same when we convert it touppercase or lowercase! (The lines with the === comparisons are the ones thatcheck). If it's the same, then it was already in that case; if not, then it'seither in the other case or it's mixed case. Now that we know how to comparestrings, how can we use these comparisons to conditionally return differentstrings?Remember that punctuation is important! Humans might be able to understand that\""I love you Grandma\"" is close enough to \""I love you, Grandma.\"" and means thesame thing but JavaScript will not consider these equal!Good luck! When all tests are passing, be sure to run learn submit!View Intro to Functions Lab on Learn.co and start learning to code for free."
86,learn-co-curriculum/phase-0-intro-to-js-2-objects-lab,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-objects-lab/blob/master/README.md,JavaScript,"Objects LabLearning GoalsCreate an ObjectPerform operations on an ObjectIntroductionWe covered the concepts of Objects in JavaScript. Now it's time to put theconcepts into practice.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.InstructionsFollow the steps below, running npm test as you go to get additionalinformation from the tests. Don't forget to run npm install first!Let's say we are working on a program that will keep track of a company'semployees. We want to store each employee as an Object. We're startingsmall, so to begin with we'll only keep track of the employee's name and streetaddress.To start, assign an employee variable to an Object containingname and streetAddress keys; you can use whatever values you like. Useliteral syntax to create your Object. Various updates will be applied to thisvariable (destructively and non-destructively) in this lab.Once you've initialized the employee Object, you'll need to create thefollowing four functions:updateEmployeeWithKeyAndValue(): this function should take in threearguments: an employee Object, a key and a value. This function shouldnot mutate the employee; it should return a new Object that has anupdated value for the key passed in. Hint: use the spread operator!destructivelyUpdateEmployeeWithKeyAndValue(): this function should work thesame as updateEmployeeWithKeyAndValue() but it should mutate theemployee Object passed in.deleteFromEmployeeByKey(): this function should take in a employeeObject and a key. It should delete the property with that key from theemployee Object. This should not mutate the original employee Object;it should return a new Object that doesn't include the identifiedkey-value pair. Hint: use the spread operator!destructivelyDeleteFromEmployeeByKey(): this function should work the sameas deleteFromEmployeeByKey() but it should mutate the employee Object.As you work on your functions, be sure to think about when to use dot notationvs. bracket notation.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade.ConclusionIn this lab, we practiced creating an Object and performing operations on it.ResourcesMDN: Object"
87,strapi/strapi,https://github.com/strapi/strapi/blob/main/README.md,JavaScript,"                API creation made simple, secure and fast.The most advanced open-source headless CMS to build powerful APIs with no effort.Cloud · Try live demo                                        Strapi is a free and open-source headless CMS delivering your content anywhere you need.Keep control over your data. With Strapi, you know where your data is stored, and you keep full control at all times.Self-hosted. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.Database agnostic. Strapi works with SQL databases. You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.Customizable. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.Getting StartedRead the Getting Started tutorial or follow the steps below:⏳ InstallationInstall Strapi with this Quickstart command to create a Strapi project instantly:(Use yarn to install the Strapi project (recommended). Install yarn with these docs.)yarn create strapi-app my-project --quickstartor(Use npm/npx to install the Strapi project.)npx create-strapi-app my-project --quickstartThis command generates a brand new project with the default features (authentication, permissions, content management, content type builder & file upload). The Quickstart command installs Strapi using a SQLite database which is used for prototyping in development.Enjoy 🎉🖐 RequirementsComplete installation requirements can be found in the documentation under Installation Requirements.Supported operating systems:Ubuntu LTS/Debian 9.xCentOS/RHEL 8macOS MojaveWindows 10Docker(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)Node:Strapi only supports maintenance and LTS versions of Node.js. Please refer to the Node.js release schedule for more information. NPM versions installed by default with Node.js are supported. Generally it's recommended to use yarn over npm where possible.Strapi VersionRecommendedMinimum4.11.0 and up18.x16.x4.3.9 to 4.10.x18.x14.x4.0.x to 4.3.816.x14.xDatabase:DatabaseRecommendedMinimumMySQL8.05.7.8MariaDB10.610.3PostgreSQL14.011.0SQLite33We recommend always using the latest version of Strapi stable to start your new projects.FeaturesModern Admin Panel: Elegant, entirely customizable and a fully extensible admin panel.Secure by default: Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.Plugins Oriented: Install the auth system, content management, custom plugins, and more, in seconds.Blazing Fast: Built on top of Node.js, Strapi delivers amazing performance.Front-end Agnostic: Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.Powerful CLI: Scaffold projects and APIs on the fly.SQL databases: Works with PostgreSQL, MySQL, MariaDB, and SQLite.See more on our website.ContributingPlease read our Contributing Guide before submitting a Pull Request to the project.Community supportFor general help using Strapi, please refer to the official Strapi documentation. For additional help, you can use one of these channels to ask a question:Discord (For live discussion with the Community and Strapi team)GitHub (Bug reports, Contributions)Community Forum (Questions and Discussions)Feedback section (Roadmap, Feature requests)Twitter (Get the news fast)FacebookYouTube Channel (Learn from Video Tutorials)MigrationFollow our migration guides on the documentation to keep your projects up-to-date.RoadmapCheck out our roadmap to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.DocumentationSee our dedicated repository for the Strapi documentation, or view our documentation live:Developer docsUser guideTry live demoSee for yourself what's under the hood by getting access to a hosted Strapi project with sample data.LicenseSee the LICENSE file for licensing information."
88,learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/blob/master/README.md,JavaScript,"Testing with JavaScript LabLearning GoalsRunning testsReading test resultsRunning TestsYou understand how to read tests; now it's time to run the tests.Recall that in the previous lesson, the tests were commented out. Be sure to forkand clone this lab into your local environment so you have the version of the testfile that is not commented out. (Return to the previous lesson if you need a reminderof how to do this.)Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code. (If you are using a different text editor, the commandwill be different.) Finally, run npm install to install the lab'sdependencies.What exactly do we mean by installing dependencies? Open the package.json fileand scroll down to the bottom. You'll see a list of 'DevDependencies'. What'slisted here are JavaScript packages: files or sets of files full of existing,reusable code. They are designed to be shared, allowing many developers to usethe same code in their own projects. The packages you see listed inpackage.json make it possible to run the lab's tests. In order to use thepackages, we have to install them; npm install does that for us.If you take a look at index.js and indexTest.js, you should see the samecode as in the previous lesson. The only difference is that the test code inindexTest.js is no longer commented out.Important: You should never need to make changes to test files unless alab's instructions specifically tell you to do so.To run the tests, run npm test in the terminal. That's it!The next step is learning how to read the results that the tests give you.Reading Results of TestsThe first time you run npm test, you should see something that looks likethis:> js-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40 and greater than 0    Message      ✓ gives the name and height  1 passing (552ms)  2 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)npm ERR! Test failed.  See above for more details.Note: If you also get an error that ends with \""unexpected character (after) at line 1, column 1 [parse.c:769] (Oj::ParseError)\"", make sure you've cloneddown the files for this lab, and are not running the tests on the files fromthe previous lesson.Let's break this down a bit. If you look about a third of the way down in theoutput, you'll see a summary of how the tests went:  1 passing (552ms)  2 failingGreat! We've already got one test passing! Now let's see how we failed the othertwo tests.  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)While there is no hard and fast rule, and there will be exceptions, it is mostoften best to address your test errors in order. So let's take a look at ourfirst error:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:456:21)Here is the specific error:      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +SusanIt tells us what the test is expecting (Expected 'Joe' to equal 'Susan') andthen gives us details about the expected and actual values. This shows youexactly how the value your code is returning (the actual value) differs fromwhat the test is looking for. Make sure you understand what this is telling you— it will come in handy in later labs!This error makes sense because we have the name variable set equal to \""Joe\"" inour index.js file. Let's change that line of code to set name equal to\""Susan\"" instead. Run the tests again by typing npm test in the terminal'scommand line (don't forget to save the file first!), and you should see thatwe are now passing 2 of the 3 tests!  what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40 and greater than 0    Message      ✓ gives the name and height  2 passing (736ms)  1 failing  1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)Woot! You passed another one. Now go ahead and try to pass the remaining test onyour own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Variable Not DefinedReferenceError: name is not definedThat one says that the name variable is not defined. That makes no sense! Weinitialized the name variable in index.js! What that actually means is thatthe test couldn't find the variable name. You'll get this error if the name ofone of your variables is different than the test is expecting. Check to makesure you used the correct variable names and look carefully for typos.Unexpected Identifier/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1cnst name = \""Susan\"";     ^^^^SyntaxError: Unexpected identifier    at wrapSafe (internal/modules/cjs/loader.js:979:16)    at Module._compile (internal/modules/cjs/loader.js:1027:27)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/indexTest.js:1:15)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36    at Array.forEach (<anonymous>)    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)    at internal/main/run_main_module.js:17:47npm ERR! Test failed.  See above for more details.Whoa! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake. It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to thecnst name = \""Susan\"" line of code. Take a look and read very carefully:const is misspelled. Whoops! Once we fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine-toothed comb... and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test isgiving us a unique message because it recognizes a problem. If we look at thistest in test/indexTest.js, we see this:describe(\""Height\"", () => {    it(\""is less than 40 and greater than 0\"", () => {      expect(height).toBeMoreThan(0)      expect(height).toBeLessThan(40);    });  });We can see that the word \""actual\"" in this case is referring to the heightvariable. The error message is telling us that height must be a number. Ifyou're seeing this, make sure that you have set the height variable to anumber that's less than 40 (e.g. 39), not a string (\""39\""). The testwill interpret the value as a string due to the quotation marks wrapping it.Optional Mocha ConfigurationIn this lab, we only had three tests to pass, but as you continue through thecurriculum you will encounter labs with many more tests. You can imagine thatthe test output could get very long, making it more difficult to focus in on howto fix a particular error.To help with this issue, there is some very simple setup you can put in place inMocha that will cause the tests to stop as soon as the first failing test isencountered.To implement this, open up the package.json file and find the test script. Itshould look something like this:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\""Add the --bail flag to the end of the line, inside the quotes:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""That's it!Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theComplete Your First Software Engineering Assignmentlesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.Note about the git push commandYou may recall from the Complete Your First Software EngineeringAssignment lesson that a different form of the git pushcommand was used:$ git push <remote> <branch>where remote is the \""alias\"" for the repo's url on GitHub, and branch is therepo's default branch (generally main for newer repos and master for olderones). For this lab, therefore, the full command would be:$ git push origin masterThis command tells git to push the code in the master branch of the local repoto the master branch of the remote repo identified by the origin alias.So why didn't you need to run that command?When you use the git clone command to clone down a repo from GitHub, gitautomatically assigns the \""origin\"" alias to the url you clone from, and usesthe default branch for that repo.As you work through the labs in this program, you should always:fork the lab's repo to your GitHub account, andclone that fork down to your local machine.As long as you always fork before you clone, it should be safe to run git push without specifying the remote and branch.If you want to verify that you're pushing to the right repo, you can use thegit remote command and include the -v flag:$ git remote -vorigin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (fetch)origin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (push)Here you can see that the origin alias points to your fork of the repo, soit's safe to run the shorter command, git push.ConclusionNow that you've gotten all your tests passing and submitted your work (andlearned a bit more about git push), you're ready to move on. Congratulations!You've solved your first JavaScript tests!"
