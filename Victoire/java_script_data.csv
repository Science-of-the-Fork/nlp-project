,repo_name,url,language,readme_content
0,nightscout/cgm-remote-monitor,https://github.com/nightscout/cgm-remote-monitor/blob/master/README.md,JavaScript,"Nightscout Web Monitor (a.k.a. cgm-remote-monitor) This acts as a web-based CGM (Continuous Glucose Monitor) to allowmultiple caregivers to remotely view a patient's glucose data inreal time.  The server reads a MongoDB which is intended to be datafrom a physical CGM, where it sends new SGV (sensor glucose values) asthe data becomes available.  The data is then displayed graphicallyand blood glucose values are predicted 0.5 hours ahead using anautoregressive second order model.  Alarms are generated for high andlow values, which can be cleared by any watcher of the data.Looking for documentation?End user?Nightscout documentation is currently split to two locations. This page lists all the configuration options inNightscout and is useful for users who've already gone through the installation process. IF you're lookingfor the documentation that looks like it's written for non-programmers, that's located at nightscout.github.io.Older documentation is available at nightscout.info.Developer?See CONTRIBUTING.md#WeAreNotWaiting and this is why.Table of ContentsInstallSupported configurations:Recommended minimum browser versions for using Nightscout:Windows installation software requirements:Installation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Installation notes for Microsoft Azure, Windows:DevelopmentUsageUpdating my version?Configure my uploader to matchNightscout APIExample QueriesEnvironmentRequiredFeaturesAlarmsCorePredefined values for your browser settings (optional)Predefined values for your server settings (optional)ViewsPluginsDefault Pluginsdelta (BG Delta)direction (BG Direction)upbat (Uploader Battery)timeago (Time Ago)devicestatus (Device Status)errorcodes (CGM Error Codes)ar2 (AR2 Forecasting)simplealarms (Simple BG Alarms)profile (Treatment Profile)Advanced Plugins:careportal (Careportal)boluscalc (Bolus Wizard)food (Custom Foods)rawbg (Raw BG)iob (Insulin-on-Board)cob (Carbs-on-Board)bwp (Bolus Wizard Preview)cage (Cannula Age)sage (Sensor Age)iage (Insulin Age)bage (Battery Age)treatmentnotify (Treatment Notifications)basal (Basal Profile)bolus (Bolus Rendering)bridge (Share2Nightscout bridge)mmconnect (MiniMed Connect bridge)pump (Pump Monitoring)openaps (OpenAPS)loop (Loop)override (Override Mode)xdripjs (xDrip-js)alexa (Amazon Alexa)googlehome (Google Home/DialogFLow)speech (Speech)cors (CORS)Extended SettingsPushoverIFTTT MakerTreatment ProfileSetting environment variablesVagrant installMore questions?Browser testing suite provided byLicenseInstallSupported configurations:If you plan to use Nightscout, we recommend using Heroku as this is free and easy to use.We used to recommend hostig at Azure, but the resource needs of Nightscout have grown over the years and Azure won't comfortably run Nightscoutanymore in the free tier. If you're hosting in Azure and looking to update your site, we recommend youswitch from Azure to Herokuas you're likely to hit issues in the process of updating the site.Nightscout Setup with Heroku (recommended)While you can install Nightscout on a virtual server or a Raspberry Pi, we do not recommend this unless you have at least someexperience hosting Node applications and development using the toolchain in use with Nightscout. Heroku automates all of thehosting for you and even many of the dvelopers run their production sites in Heroku due to convenience.If you're a hosting provider and want to provide our users additional free hosting options,you're welcome to issue a documentation pull request with instructions on how to setup Nightscout on your system.Recommended minimum browser versions for using Nightscout:Older versions of the browsers might work, but are untested.Android 4iOS 6Chrome 35Edge 17Firefox 61Opera 12.1Safari 6 (macOS 10.7)Internet Explorer: not supportedSome features may not work with devices/browsers on the older end of these requirements.Windows installation software requirements:Node.js Latest Node 12 LTS. Node versions that do not have the latest security patches will not work. Use Install instructions for Node or use bin/setup.sh)MongoDB 3.x or later. MongoDB 2.4 is only supported for Raspberry Pi.As a non-root user clone this repo then install dependencies into the root of the project:$ npm installInstallation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Your site redirects insecure connections to https by default. If you use a reverse proxy like nginx or Apache to handle the connection security for you, make sure it sets the X-Forwarded-Proto header. Otherwise nightscout will be unable to know if it was called through a secure connection and will try to redirect you to the https version. If you're unable to set this Header, you can change the INSECURE_USE_HTTP setting in nightscout to true in order to allow insecure connections without being redirected.In case you use a proxy. Do not use an external network interfaces for hosting Nightscout. Make sure the unsecure port is not available from a remote network connectionHTTP Strict Transport Security (HSTS) headers are enabled by default, use settings SECURE_HSTS_HEADER and SECURE_HSTS_HEADER_*See Predefined values for your server settings for more detailsInstallation notes for Microsoft Azure, Windows:If deploying the software to Microsoft Azure, you must set ** in the app settings for WEBSITE_NODE_DEFAULT_VERSION and SCM_COMMAND_IDLE_TIMEOUT before you deploy the latest Nightscout or the site deployment will likely fail. Other hosting environments do not require this setting. Additionally, if using the Azure free hosting tier, the installation might fail due to resource constraints imposed by Azure on the free hosting. Please set the following settings to the environment in Azure:WEBSITE_NODE_DEFAULT_VERSION=10.15.2SCM_COMMAND_IDLE_TIMEOUT=300See install MongoDB, Node.js, and Nightscouton a single Windows system. if you want to host your Nightscout outside of the cloud. Although the instructions are intended for Windows Server the procedure is compatible with client versions of Windows such as Windows 7 and Windows 10.If you deploy to Windows and want to develop or test you need to install Cygwin (use setup-x86_64.exe and make sure to install build-essential package. Test your configuration by executing make and check if all tests are ok.DevelopmentWant to help with development, or just see how Nightscout works? Great! See CONTRIBUTING.md for development-related documentation.UsageThe data being uploaded from the server to the client is from a MongoDB server such as [MongoDB Atlas][https://www.mongodb.com].Updating my version?The easiest way to update your version of cgm-remote-monitor to the latest version is to use the update tool. A step-by-step guide is available [here][http://www.nightscout.info/wiki/welcome/how-to-update-to-latest-cgm-remote-monitor-aka-cookie].To downgrade to an older version, follow [this guide][http://www.nightscout.info/wiki/welcome/how-to-deploy-an-older-version-of-nightscout].Configure my uploader to matchUse the autoconfigure tool to sync an uploader to your config.Nightscout APIThe Nightscout API enables direct access to your data without the need for Mongo access.You can find CGM data in /api/v1/entries, Care Portal Treatments in /api/v1/treatments, and Treatment Profiles in /api/v1/profile.The server status and settings are available from /api/v1/status.json.By default the /entries and /treatments APIs limit results to the the most recent 10 values from the last 2 days.You can get many more results, by using the count, date, dateString, and created_at parameters, depending on the type of data you're looking for.Once you've installed Nightscout, you can access API documentation by loading /api-docs/ URL in your instance.Example Queries(replace http://localhost:1337 with your own URL)100's: http://localhost:1337/api/v1/entries.json?find[sgv]=100Count of 100's in a month: http://localhost:1337/api/v1/count/entries/where?find[dateString][$gte]=2016-09&find[dateString][$lte]=2016-10&find[sgv]=100BGs between 2 days: http://localhost:1337/api/v1/entries/sgv.json?find[dateString][$gte]=2015-08-28&find[dateString][$lte]=2015-08-30Juice Box corrections in a year: http://localhost:1337/api/v1/treatments.json?count=1000&find[carbs]=15&find[eventType]=Carb+Correction&find[created_at][$gte]=2015Boluses over 2U: http://localhost:1337/api/v1/treatments.json?find[insulin][$gte]=2The API is Swagger enabled, so you can generate client code to make working with the API easy.To learn more about the Nightscout API, visit https://YOUR-SITE.com/api-docs/ or review swagger.yaml.EnvironmentVARIABLE (default) - descriptionRequiredMONGODB_URI - The connection string for your Mongo database. Something like mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout.API_SECRET - A secret passphrase that must be at least 12 characters long.MONGODB_COLLECTION (entries) - The Mongo collection where CGM entries are stored.DISPLAY_UNITS (mg/dl) - Options are mg/dl or mmol/L (or just mmol).  Setting to mmol/L puts the entire server into mmol/L mode by default, no further settings needed.FeaturesENABLE - Used to enable optional features, expects a space delimited list, such as: careportal rawbg iob, see plugins belowDISABLE - Used to disable default features, expects a space delimited list, such as: direction upbat, see plugins belowBASE_URL - Used for building links to your site's API, i.e. Pushover callbacks, usually the URL of your Nightscout site.AUTH_DEFAULT_ROLES (readable) - possible values readable, denied, or any valid rolename.  When readable, anyone can view Nightscout without a token.Setting it to denied will require a token from every visit, using status-only will enable api-secret based login.IMPORT_CONFIG - Used to import settings and extended settings from a url such as a gist.  Structure of file should be something like: {\""settings\"": {\""theme\"": \""colors\""}, \""extendedSettings\"": {\""upbat\"": {\""enableAlerts\"": true}}}TREATMENTS_AUTH (on) - possible values on or off. Deprecated, if set to off the careportal role will be added to AUTH_DEFAULT_ROLESAlarmsThese alarm setting affect all delivery methods (browser, Pushover, IFTTT, etc.). Values and settings entered here will be the defaults for new browser views, but will be overridden if different choices are made in the settings UI.ALARM_TYPES (simple if any BG_* ENV's are set, otherwise predict) - currently 2 alarm types are supported, and can be used independently or combined.  The simple alarm type only compares the current BG to BG_ thresholds above, the predict alarm type uses highly tuned formula that forecasts where the BG is going based on it's trend.  predict DOES NOT currently use any of the BG_* ENV'sBG_HIGH (260) - the high BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)BG_TARGET_TOP (180) - the top of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_TARGET_BOTTOM (80) - the bottom of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_LOW (55) - the low BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)ALARM_URGENT_HIGH (on) - possible values on or offALARM_URGENT_HIGH_MINS (30 60 90 120) - Number of minutes to snooze urgent high alarms, space separated for options in browser, first used for pushoverALARM_HIGH (on) - possible values on or offALARM_HIGH_MINS (30 60 90 120) - Number of minutes to snooze high alarms, space separated for options in browser, first used for pushoverALARM_LOW (on) - possible values on or offALARM_LOW_MINS (15 30 45 60) - Number of minutes to snooze low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_LOW (on) - possible values on or offALARM_URGENT_LOW_MINS (15 30 45) - Number of minutes to snooze urgent low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_MINS (30 60 90 120) - Number of minutes to snooze urgent alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverALARM_WARN_MINS (30 60 90 120) - Number of minutes to snooze warning alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverCoreMONGO_TREATMENTS_COLLECTION (treatments) -The collection used to store treatments entered in the Care Portal, see the ENABLE env var aboveMONGO_DEVICESTATUS_COLLECTION(devicestatus) - The collection used to store device status information such as uploader batteryMONGO_PROFILE_COLLECTION(profile) - The collection used to store your profilesMONGO_FOOD_COLLECTION(food) - The collection used to store your food databaseMONGO_ACTIVITY_COLLECTION(activity) - The collection used to store activity dataPORT (1337) - The port that the node.js application will listen on.HOSTNAME - The hostname that the node.js application will listen on, null by default for any hostname for IPv6 you may need to use ::.SSL_KEY - Path to your ssl key file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to your privkey.pem file (private key).SSL_CERT - Path to your ssl cert file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to fullchain.pem file (cert + ca).SSL_CA - Path to your ssl ca file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to chain.pem file (chain).HEARTBEAT (60)  - Number of seconds to wait in between database checksDEBUG_MINIFY (true)  - Debug option, setting to false will disable bundle minification to help tracking down error and speed up developmentDE_NORMALIZE_DATES(true) - The Nightscout REST API normalizes all entered dates to UTC zone. Some Nightscout clients have broken date deserialization logic and expect to received back dates in zoned formats. Setting this variable to true causes the REST API to serialize dates sent to Nightscout in zoned format back to zoned format when served to clients over REST.Predefined values for your browser settings (optional)TIME_FORMAT (12)- possible values 12 or 24DAY_START (7.0) - time for start of day (0.0 - 24.0) for features using day time / night time optionsDAY_END (21.0) - time for end of day (0.0 - 24.0) for features using day time / night time optionsNIGHT_MODE (off) - possible values on or offSHOW_RAWBG (never) - possible values always, never or noiseCUSTOM_TITLE (Nightscout) - Title for the main viewTHEME (colors) - possible values default, colors, or colorblindfriendlyALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmSHOW_PLUGINS - enabled plugins that should have their visualizations shown, defaults to all enabledSHOW_FORECAST (ar2) - plugin forecasts that should be shown by default, supports space delimited values such as \""ar2 openaps\""LANGUAGE (en) - language of Nightscout. If not available english is usedCurrently supported language codes are: bg (Български), cs (Čeština), de (Deutsch), dk (Dansk), el (Ελληνικά), en (English), es (Español), fi (Suomi), fr (Français), he (עברית), hr (Hrvatski), hu (magyar), it (Italiano), ko (한국어), nb (Norsk (Bokmål)), nl (Nederlands), pl (Polski), pt (Português (Brasil)), ro (Română), ru (Русский), sk (Slovenčina), sv (Svenska), tr (Turkish), zh_cn (中文（简体)), zh_tw (中文（繁體))SCALE_Y (log) - The type of scaling used for the Y axis of the charts system wide.The default log (logarithmic) option will let you see more detail towards the lower range, while still showing the full CGM range.The linear option has equidistant tick marks; the range used is dynamic so that space at the top of chart isn't wasted.The log-dynamic is similar to the default log options, but uses the same dynamic range and the linear scale.EDIT_MODE (on) - possible values on or off. Enables the icon allowing for editing of treatments in the main view.Predefined values for your server settings (optional)INSECURE_USE_HTTP (false) - Redirect unsafe http traffic to https. Possible values false, or true. Your site redirects to https by default. If you don't want that from Nightscout, but want to implement that with a Nginx or Apache proxy, set INSECURE_USE_HTTP to true. Note: This will allow (unsafe) http traffic to your Nightscout instance and is not recommended.SECURE_HSTS_HEADER (true) - Add HTTP Strict Transport Security (HSTS) header. Possible values false, or true.SECURE_HSTS_HEADER_INCLUDESUBDOMAINS (false) - includeSubdomains options for HSTS. Possible values false, or true.SECURE_HSTS_HEADER_PRELOAD (false) - ask for preload in browsers for HSTS. Possible values false, or true.SECURE_CSP (false) - Add Content Security Policy headers. Possible values false, or true.SECURE_CSP_REPORT_ONLY (false) - If set to true allows to experiment with policies by monitoring (but not enforcing) their effects. Possible values false, or true.ViewsNightscout allows to create custom, simplified views using a predefined set of elements. This option is available under [+] link in the main menu.List of available items:SGV - Sensor Glucose ValueSGV age - time since the last SGV readSGV delta - change of SGV in the last 5 minutesTrend arrow - icon of the SG trendTime - current timeLine break - invisible item that will move following items to the next line (by default all are showing on the same level)All visible items have Size property which allows to customize the view even more. Also, all items may appear multiple times on the view.Apart from adding items, it is possible to customize other aspects of the views, like selecting Color or Black background. The first one will indicate current BG threshold (green = in range; blue = below range; yellow = above range; red = urgent below/above).Show SGV age option will make SGV age item appear Always or only if the predefined threshold is reached: Only after threshold. Breaching SGV age threshold will also make Color background turn grey and strike through SGV.Clock view configurator will generate an URL (available under Open my clock view! link) that could be bookmarked.There are a few default views available from the main menu:Clock - Shows current BG, trend arrow, and time of day. Grey text on a black background.Color - Shows current BG and trend arrow. White text on a color background.Simple - Shows current BG. Grey text on a black background.If you launch one of these views in a fullscreen view in iOS, you can use a left-to-right swipe gesture to exit the view.Split ViewSome users will need easy access to multiple Nightscout views at the same time. We have a special view for this case, accessed on /split path on your Nightscout URL. The view supports any number of sites between 1 to 8 way split, where the content for the screen can be loaded from multiple Nightscout instances. Note you still need to host separate instances for each Nightscout being monitored including the one that hosts the split view page - these variables only add the ability to load multiple views into one browser page. To set the URLs from which the content is loaded, set:FRAME_URL_1 - URL where content is loaded, for the first view (increment the number up to 8 to get more views)FRAME_NAME_1 - Name for the first split view portion of the screen (increment the number to name more views)PluginsPlugins are used extend the way information is displayed, how notifications are sent, alarms are triggered, and more.The built-in/example plugins that are available by default are listed below.  The plugins may still need to be enabled by adding to the ENABLE environment variable.Default PluginsThese can be disabled by adding them to the DISABLE variable, for example DISABLE=\""direction upbat\""delta (BG Delta)Calculates and displays the change between the last 2 BG values.direction (BG Direction)Displays the trend direction.upbat (Uploader Battery)Displays the most recent battery status from the uploader phone. . Use these extended setting to adjust behavior:UPBAT_ENABLE_ALERTS (false) - Set to true to enable uploader battery alarms via Pushover and IFTTT.UPBAT_WARN (30) - Minimum battery percent to trigger warning.UPBAT_URGENT (20) - Minimum battery percent to trigger urgent alarm.timeago (Time Ago)Displays the time since last CGM entry. Use these extended setting to adjust behavior:TIMEAGO_ENABLE_ALERTS (false) - Set to true to enable stale data alarms via Pushover and IFTTT.ALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmdevicestatus (Device Status)Used by upbat and other plugins to display device status info.  Supports the DEVICESTATUS_ADVANCED=\""true\"" extended setting to send all device statuses to the client for retrospective use and to support other plugins.errorcodes (CGM Error Codes)Generates alarms for CGM codes 9 (hourglass) and 10 (???).Use extended settings to adjust what errorcodes trigger notifications and alarms:ERRORCODES_INFO (1 2 3 4 5 6 7 8) - By default the needs calibration (blood drop) and other codes below 9 generate an info level notification, set to a space separate list of number or off to disableERRORCODES_WARN (off) - By default there are no warning configured, set to a space separate list of numbers or off to disableERRORCODES_URGENT (9 10) - By default the hourglass and ??? generate an urgent alarm, set to a space separate list of numbers or off to disablear2 (AR2 Forecasting)Generates alarms based on forecasted values. See Forecasting using AR2 algorithmEnabled by default if no thresholds are set OR ALARM_TYPES includes predict.Use extended settings to adjust AR2 behavior:AR2_CONE_FACTOR (2) - to adjust size of cone, use 0 for a single line.simplealarms (Simple BG Alarms)Uses BG_HIGH, BG_TARGET_TOP, BG_TARGET_BOTTOM, BG_LOW thresholds to generate alarms.Enabled by default if 1 of these thresholds is set OR ALARM_TYPES includes simple.profile (Treatment Profile)Add link to Profile Editor and allow to enter treatment profile settings. Also uses the extended setting:PROFILE_HISTORY (off) - possible values on or off. Enable/disable NS ability to keep history of your profiles (still experimental)PROFILE_MULTIPLE (off) - possible values on or off. Enable/disable NS ability to handle and switch between multiple treatment profilesAdvanced Plugins:careportal (Careportal)An optional form to enter treatments.boluscalc (Bolus Wizard)food (Custom Foods)An option plugin to enable adding foods from database in Bolus Wizard and enable .rawbg (Raw BG)Calculates BG using sensor and calibration records from and displays an alternate BG values and noise levels. Defaults that can be adjusted with extended settingDISPLAY (unsmoothed) - Allows the user to control which algorithm is used to calculate the displayed raw BG values using the most recent calibration record.unfiltered - Raw BG is calculated by applying the calibration to the glucose record's unfiltered value.filtered - Raw BG is calculated by applying the calibration to the glucose record's filtered value. The glucose record's filtered values are generally produced by the CGM by a running average of the unfiltered values to produce a smoothed value when the sensor noise is high.unsmoothed - Raw BG is calculated by first finding the ratio of the calculated filtered value (the same value calculated by the filtered setting) to the reported glucose value. The displayed raw BG value is calculated by dividing the calculated unfiltered value (the same value calculated by the unfiltered setting) by the ratio.  The effect is to exagerate changes in trend direction so the trend changes are more noticeable to the user. This is the legacy raw BG calculation algorithm.iob (Insulin-on-Board)Adds the IOB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with insulin doses and the dia and sens fields from the treatment profile.cob (Carbs-on-Board)Adds the COB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with carb doses and the carbs_hr, carbratio, and sens fields from the treatment profile.bwp (Bolus Wizard Preview)This plugin in intended for the purpose of automatically snoozing alarms when the CGM indicates high blood sugar but there is also insulin on board (IOB) and secondly, alerting to user that it might be beneficial to measure the blood sugar using a glucometer and dosing insulin as calculated by the pump or instructed by trained medicare professionals. The values provided by the plugin are provided as a reference based on CGM data and insulin sensitivity you have configured, and are not intended to be used as a reference for bolus calculation. The plugin calculates the bolus amount when above your target, generates alarms when you should consider checking and bolusing, and snoozes alarms when there is enough IOB to cover a high BG. Uses the results of the iob plugin and sens, target_high, and target_low fields from the treatment profile. Defaults that can be adjusted with extended settingBWP_WARN (0.50) - If BWP is > BWP_WARN a warning alarm will be triggered.BWP_URGENT (1.00) - If BWP is > BWP_URGENT an urgent alarm will be triggered.BWP_SNOOZE_MINS (10) - minutes to snooze when there is enough IOB to cover a high BG.BWP_SNOOZE - (0.10) If BG is higher then the target_high and BWP < BWP_SNOOZE alarms will be snoozed for BWP_SNOOZE_MINS.cage (Cannula Age)Calculates the number of hours since the last Site Change treatment that was recorded.CAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming cannula change.CAGE_INFO (44) - If time since last Site Change matches CAGE_INFO, user will be warned of upcoming cannula changeCAGE_WARN (48) - If time since last Site Change matches CAGE_WARN, user will be alarmed to to change the cannulaCAGE_URGENT (72) - If time since last Site Change matches CAGE_URGENT, user will be issued a persistent warning of overdue change.CAGE_DISPLAY (hours) - Possible values are 'hours' or 'days'. If 'days' is selected and age of canula is greater than 24h number is displayed in days and hourssage (Sensor Age)Calculates the number of days and hours since the last Sensor Start and Sensor Change treatment that was recorded.SAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming sensor change.SAGE_INFO (144) - If time since last sensor event matches SAGE_INFO, user will be warned of upcoming sensor changeSAGE_WARN (164) - If time since last sensor event matches SAGE_WARN, user will be alarmed to to change/restart the sensorSAGE_URGENT (166) - If time since last sensor event matches SAGE_URGENT, user will be issued a persistent warning of overdue change.iage (Insulin Age)Calculates the number of days and hours since the last Insulin Change treatment that was recorded.IAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming insulin reservoir change.IAGE_INFO (44) - If time since last Insulin Change matches IAGE_INFO, user will be warned of upcoming insulin reservoir changeIAGE_WARN (48) - If time since last Insulin Change matches IAGE_WARN, user will be alarmed to to change the insulin reservoirIAGE_URGENT (72) - If time since last Insulin Change matches IAGE_URGENT, user will be issued a persistent warning of overdue change.bage (Battery Age)Calculates the number of days and hours since the last Pump Battery Change treatment that was recorded.BAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming pump battery change.BAGE_DISPLAY (days) - Set to hours to display time since last Pump Battery Change in hours only.BAGE_INFO (312) - If time since last Pump Battery Change matches BAGE_INFO hours, user will be warned of upcoming pump battery change (default of 312 hours is 13 days).BAGE_WARN (336) - If time since last Pump Battery Change matches BAGE_WARN hours, user will be alarmed to to change the pump battery (default of 336 hours is 14 days).BAGE_URGENT (360) - If time since last Pump Battery Change matches BAGE_URGENT hours, user will be issued a persistent warning of overdue change (default of 360 hours is 15 days).treatmentnotify (Treatment Notifications)Generates notifications when a treatment has been entered and snoozes alarms minutes after a treatment.TREATMENTNOTIFY_SNOOZE_MINS (10) - Number of minutes to snooze notifications after a treatment is enteredTREATMENTNOTIFY_INCLUDE_BOLUSES_OVER (0) - U value over which the bolus will trigger a notification and snooze alarmsbasal (Basal Profile)Adds the Basal pill visualization to display the basal rate for the current time.  Also enables the bwp plugin to calculate correction temp basal suggestions.  Uses the basal field from the treatment profile. Also uses the extended setting:BASAL_RENDER (none) - Possible values are none, default, or icicle (inverted)bolus (Bolus Rendering)Settings to configure Bolus renderingBOLUS_RENDER_OVER (0) - U value over which the bolus labels use the format defined in BOLUS_RENDER_FORMAT. This value can be an integer or a float, e.g. 0.3, 1.5, 2, etc.BOLUS_RENDER_FORMAT (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).BOLUS_RENDER_FORMAT_SMALL (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).bridge (Share2Nightscout bridge)Glucose reading directly from the Dexcom Share service, uses these extended settings:BRIDGE_USER_NAME - Your username for the Share service.BRIDGE_PASSWORD - Your password for the Share service.BRIDGE_INTERVAL (150000 2.5 minutes) - The time (in milliseconds) to wait between each update.BRIDGE_MAX_COUNT (1) - The number of records to attempt to fetch per update.BRIDGE_FIRST_FETCH_COUNT (3) - Changes max count during the very first update only.BRIDGE_MAX_FAILURES (3) - How many failures before giving up.BRIDGE_MINUTES (1400) - The time window to search for new data per update (the default value is one day in minutes).BRIDGE_SERVER (``) - The default blank value is used to fetch data from Dexcom servers in the US. Set to (EU) to fetch from European servers instead.mmconnect (MiniMed Connect bridge)Transfer real-time MiniMed Connect data from the Medtronic CareLink server into Nightscout (read more)MMCONNECT_USER_NAME - Your user name for CareLink Connect.MMCONNECT_PASSWORD - Your password for CareLink Connect.MMCONNECT_INTERVAL (60000 1 minute) - Number of milliseconds to wait between requests to the CareLink server.MMCONNECT_MAX_RETRY_DURATION (32) - Maximum number of total seconds to spend retrying failed requests before giving up.MMCONNECT_SGV_LIMIT (24) - Maximum number of recent sensor glucose values to send to Nightscout on each request.MMCONNECT_VERBOSE - Set this to \""true\"" to log CareLink request information to the console.MMCONNECT_STORE_RAW_DATA - Set this to \""true\"" to store raw data returned from CareLink as type: \""carelink_raw\"" database entries (useful for development).MMCONNECT_SERVER - Set this to EU if you're using the European Medtronic servicespump (Pump Monitoring)Generic Pump Monitoring for OpenAPS, MiniMed Connect, RileyLink, t:slim, with more on the wayRequires DEVICESTATUS_ADVANCED=\""true\"" to be setPUMP_ENABLE_ALERTS (false) - Set to true to enable notifications for Pump battery and reservoir.PUMP_WARN_ON_SUSPEND (false) - Set to true to get an alarm when the pump is suspended.PUMP_FIELDS (reservoir battery) - The fields to display by default.  Any of the following fields: reservoir, battery, clock, status, and devicePUMP_RETRO_FIELDS (reservoir battery clock) - The fields to display in retro mode. Any of the above fields.PUMP_WARN_CLOCK (30) - The number of minutes ago that needs to be exceed before an alert is triggered.PUMP_URGENT_CLOCK (60) - The number of minutes ago that needs to be exceed before an urgent alarm is triggered.PUMP_WARN_RES (10) - The number of units remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_RES (5) - The number of units remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_P (30) - The % of the pump battery remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_P (20) - The % of the pump battery remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_V (1.35) - The voltage (if percent isn't available) of the pump battery, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_V (1.30) - The  voltage (if percent isn't available) of the pump battery, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_QUIET_NIGHT (false) - Do not generate battery alarms at night.openaps (OpenAPS)Integrated OpenAPS loop monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setOPENAPS_ENABLE_ALERTS (false) - Set to true to enable notifications when OpenAPS isn't looping.  If OpenAPS is going to offline for a period of time, you can add an OpenAPS Offline event for the expected duration from Careportal to avoid getting alerts.OPENAPS_WARN (30) - The number of minutes since the last loop that needs to be exceed before an alert is triggeredOPENAPS_URGENT (60) - The number of minutes since the last loop that needs to be exceed before an urgent alarm is triggeredOPENAPS_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display by default.  Any of the following fields: status-symbol, status-label, iob, meal-assist, freq, and rssiOPENAPS_RETRO_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display in retro mode. Any of the above fields.OPENAPS_PRED_IOB_COLOR (#1e88e5) - The color to use for IOB prediction lines. Colors can be in #RRGGBB format, but other CSS color units may be used as well.OPENAPS_PRED_COB_COLOR (#FB8C00) - The color to use for COB prediction lines. Same format as above.OPENAPS_PRED_ACOB_COLOR (#FB8C00) - The color to use for ACOB prediction lines. Same format as above.OPENAPS_PRED_ZT_COLOR (#00d2d2) - The color to use for ZT prediction lines. Same format as above.OPENAPS_PRED_UAM_COLOR (#c9bd60) - The color to use for UAM prediction lines. Same format as above.OPENAPS_COLOR_PREDICTION_LINES (true) - Enables / disables the colored lines vs the classic purple color.Also see Pushover and IFTTT Maker.loop (Loop)iOS Loop app monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setLOOP_ENABLE_ALERTS (false) - Set to true to enable notifications when Loop isn't looping.LOOP_WARN (30) - The number of minutes since the last loop that needs to be exceeded before an alert is triggeredLOOP_URGENT (60) - The number of minutes since the last loop that needs to be exceeded before an urgent alarm is triggeredAdd loop to SHOW_FORECAST to show forecasted BG.For remote overrides, the following extended settings must be configured:LOOP_APNS_KEY - Apple Push Notifications service (APNs) Key, created in the Apple Developer website.LOOP_APNS_KEY_ID - The Key ID for the above key.LOOP_DEVELOPER_TEAM_ID - Your Apple developer team ID.LOOP_PUSH_SERVER_ENVIRONMENT - (optional) Set this to production if you are using a provisioning profile that specifies production aps-environment, such as when distributing builds via TestFlight.override (Override Mode)Additional monitoring for DIY automated insulin delivery systems to display real-time overrides such as Eating Soon or Exercise Mode:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setxdripjs (xDrip-js)Integrated xDrip-js monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setXDRIPJS_ENABLE_ALERTS (false) - Set to true to enable notifications when CGM state is not OK or battery voltages fall below threshold.XDRIPJS_STATE_NOTIFY_INTRVL (0.5) - Set to number of hours between CGM state notificationsXDRIPJS_WARN_BAT_V (300) - The voltage of either transmitter battery, a warning will be triggered when dropping below this threshold.alexa (Amazon Alexa)Integration with Amazon Alexa, detailed setup instructionsgooglehome (Google Home/DialogFLow)Integration with Google Home (via DialogFlow), detailed setup instructionsspeech (Speech)Speech synthesis plugin. When enabled, speaks out the blood glucose values, IOB and alarms. Note you have to set the LANGUAGE setting on the server to get all translated alarms.cors (CORS)Enabled CORS so other websites can make request to your Nightscout site, uses these extended settings:CORS_ALLOW_ORIGIN (*) - The list of sites that are allow to make requestsdbsize (Database Size)Show size of Nightscout Database, as a percentage of declared available space or in MiB.Many deployments of Nightscout use free tier of MongoDB Atlas on Heroku, which is limited in size. After some time, as volume of stored data grows, it may happen that this limit is reached and system is unable to store new data. This plugin provides pill that indicates size of Database and shows (when configured) alarms regarding reaching space limit.IMPORTANT: This plugin can only check how much space database already takes, but cannot infer max size available on server for it. To have correct alarms and realistic percentage, DBSIZE_MAX need to be properly set - according to your mongoDB hosting configuration.NOTE: This plugin rely on db.stats() for reporting logical size of database, which may be different than physical size of database on server. It may work for free tier of MongoDB on Atlas, since it calculate quota according to logical size too, but may fail for other hostings or self-hosted database with quota based on physical size.NOTE: MongoDB Atlas quota is for all databases in cluster, while each instance will get only size of its own database only. It is ok when you only have one database in cluster (most common scenario) but will not work for multiple parallel databases. In such case, spliting known quota equally beetween databases and setting DBSIZE_MAX to that fraction may help, but wont be precise.All sizes are expressed as integers, in Mebibytes 1 MiB == 1024 KiB == 1024*1024 BDBSIZE_MAX (496) - Maximal allowed size of database on your mongoDB server, in MiB. You need to adjust that value to match your database hosting limits - default value is for standard Heroku mongoDB free tier.DBSIZE_WARN_PERCENTAGE (60) - Threshold to show first warning about database size. When database reach this percentage of DBSIZE_MAX size - pill will show size in yellow.DBSIZE_URGENT_PERCENTAGE (75) - Threshold to show urgent warning about database size. When database reach this percentage of DBSIZE_MAX size, it is urgent to do backup and clean up old data. At this percentage info pill turns red.DBSIZE_ENABLE_ALERTS (false) - Set to true to enable notifications about database size.DBSIZE_IN_MIB (false) - Set to true to display size of database in MiB-s instead of default percentage.This plugin should be enabled by default, if needed can be diasabled by adding dbsize to the list of disabled plugins, for example: DISABLE=\""dbsize\"".Extended SettingsSome plugins support additional configuration using extra environment variables.  These are prefixed with the name of the plugin and a _.  For example setting MYPLUGIN_EXAMPLE_VALUE=1234 would make extendedSettings.exampleValue available to the MYPLUGIN plugin.Plugins only have access to their own extended settings, all the extended settings of client plugins will be sent to the browser.DEVICESTATUS_ADVANCED (true) - Defaults to true. Users who only have a single device uploading data to Nightscout can set this to false to reduce the data use of the site.DEVICESTATUS_DAYS (1) - Defaults to 1, can optionally be set to 2. Users can use this to show 48 hours of device status data for in retro mode, rather than the default 24 hours. Setting this value to 2 will roughly double the bandwidth usage of nightscout, so users with a data cap may not want to update this setting.PushoverIn addition to the normal web based alarms, there is also support for Pushover based alarms and notifications.To get started install the Pushover application on your iOS or Android device and create an account.Using that account login to Pushover, in the top left you’ll see your User Key, you’ll need this plus an application API Token/Key to complete this setup.You’ll need to Create a Pushover Application.  You only need to set the Application name, you can ignore all the other settings, but setting an Icon is a nice touch.  Maybe you'd like to use this one?Pushover is configured using the following Environment Variables:* `ENABLE` - `pushover` should be added to the list of plugin, for example: `ENABLE=\""pushover\""`.* `PUSHOVER_API_TOKEN` - Used to enable pushover notifications, this token is specific to the application you create from in [Pushover](https://pushover.net/), ***[additional pushover information](#pushover)*** below.* `PUSHOVER_USER_KEY` - Your Pushover user key, can be found in the top left of the [Pushover](https://pushover.net/) site, this can also be a pushover delivery group key to send to a group rather than just a single user.  This also supports a space delimited list of keys.  To disable `INFO` level pushes set this to `off`.* `PUSHOVER_ALARM_KEY` - An optional Pushover user/group key, will be used for system wide alarms (level > `WARN`).  If not defined this will fallback to `PUSHOVER_USER_KEY`.  A possible use for this is sending important messages and alarms to a CWD that you don't want to send all notification too.  This also support a space delimited list of keys.  To disable Alarm pushes set this to `off`.* `PUSHOVER_ANNOUNCEMENT_KEY` - An optional Pushover user/group key, will be used for system wide user generated announcements.  If not defined this will fallback to `PUSHOVER_USER_KEY` or `PUSHOVER_ALARM_KEY`.  This also support a space delimited list of keys. To disable Announcement pushes set this to `off`.* `BASE_URL` - Used for pushover callbacks, usually the URL of your Nightscout site, use https when possible.* `API_SECRET` - Used for signing the pushover callback request for acknowledgments.If you never want to get info level notifications (treatments) use `PUSHOVER_USER_KEY=\""off\""`If you never want to get an alarm via pushover use `PUSHOVER_ALARM_KEY=\""off\""`If you never want to get an announcement via pushover use `PUSHOVER_ANNOUNCEMENT_KEY=\""off\""`If only `PUSHOVER_USER_KEY` is set it will be used for all info notifications, alarms, and announcementsFor testing/development try [localtunnel](http://localtunnel.me/).IFTTT MakerIn addition to the normal web based alarms, and pushover, there is also integration for IFTTT Webhooks.With Maker you are able to integrate with all the other IFTTT Services.  For example you can send a tweet when there is an alarm, change the color of hue light, send an email, send and sms, and so much more.Setup IFTTT account: login or create an accountFollow the  Detailed IFTTT setup InstructionsConfigure Nightscout by setting these webpage environment variables:ENABLE - maker should be added to the list of plugins, for example: ENABLE=\""maker\"".MAKER_KEY - Set this to your secret key (see  [Detailed Instructions ) MAKER_KEY=\""abcMyExampleabc123defjt1DeNSiftttmak-XQb69p\"" This also supports a space delimited list of keys.MAKER_ANNOUNCEMENT_KEY - An optional Maker key, will be used for system wide user generated announcements.  If not defined this will fallback to MAKER_KEY.  A possible use for this is sending important messages and alarms to another device that you don't want to send all notification too.  This also support a space delimited list of keys.Plugins can create custom events, but all events sent to IFTTT webhooks will be prefixed with ns-.  The core events are:ns-event - This event is sent to the maker service for all alarms and notifications.  This is good catch all event for general logging.ns-allclear - This event is sent to the maker service when an alarm has been ack'd or when the server starts up without triggering any alarms.  For example, you could use this event to turn a light to green.ns-info - Plugins that generate notifications at the info level will cause this event to also be triggered.  It will be sent in addition to ns-event.ns-warning - Alarms at the warning level with cause this event to also be triggered.  It will be sent in addition to ns-event.ns-urgent - Alarms at the urgent level with cause this event to also be triggered.  It will be sent in addition to ns-event.see the full list of eventsTreatment ProfileSome of the plugins make use of a treatment profile that can be edited using the Profile Editor, see the link in the Settings drawer on your site.Treatment Profile Fields:timezone (Time Zone) - time zone local to the patient. Should be set.units (Profile Units) - blood glucose units used in the profile, either \""mg/dl\"" or \""mmol\""dia (Insulin duration) - value should be the duration of insulin action to use in calculating how much insulin is left active. Defaults to 3 hours.carbs_hr (Carbs per Hour) - The number of carbs that are processed per hour, for more information see #DIYPS.carbratio (Carb Ratio) - grams per unit of insulin.sens (Insulin sensitivity) How much one unit of insulin will normally lower blood glucose.basal The basal rate set on the pump.target_high - Upper target for correction boluses.target_low - Lower target for correction boluses.Some example profiles are here.Setting environment variablesEasy to emulate on the commandline:    echo 'MONGO_CONNECTION=mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout' >> my.env    echo 'MONGO_COLLECTION=entries' >> my.envFrom now on you can run using    $ (eval $(cat my.env | sed 's/^/export /') && PORT=1337 node server.js)Your hosting provider probably has a way to set these through their GUI.Vagrant installOptionally, use Vagrant with theincluded Vagrantfile and bin/setup.sh to install OS and node packages toa virtual machine.host$ vagrant uphost$ vagrant sshvm$ ./bin/setup.shThe setup script will install OS packages then run npm install.The Vagrant VM serves to your host machine only on 192.168.33.10, you can accessthe web interface on http://192.168.33.10:1337More questions?Feel free to post an issue, but read the wiki first.Browser testing suite provided byLicensecgm-remote-monitor - web app to broadcast cgm readingsCopyright (C) 2017 Nightscout contributors.  See the COPYRIGHT fileat the root directory of this distribution and athttps://github.com/nightscout/cgm-remote-monitor/blob/master/COPYRIGHTThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU Affero General Public License as publishedby the Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU Affero General Public License for more details.You should have received a copy of the GNU Affero General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>."
1,trekhleb/javascript-algorithms,https://github.com/trekhleb/javascript-algorithms/blob/master/README.ar-AR.md,JavaScript,"جافا سكريبت خوارزميات  وهياكل البياناتتحتوي هذا مقالة على أمثلة عديدة تستند إلى الخوارزميات الشائعة وهياكل البيانات في الجافا سكريبت.كل خوارزمية وهياكل البيانات لها برنامج README منفصل خاص بهامع التفسيرات والروابط ذات الصلة لمزيد من القراءة (بما في ذلك تلكإلى مقاطع فيديو YouTube).اقرأ هذا في لغات أخرى:简体中文,繁體中文,한국어,日本語,Polski,Français,Español,Português,Русский,Türk,Italiana,Tiếng Việt,Deutsch☝ ملاحضة هذا المشروع مخصص للاستخدام لأغراض التعلم والبحثفقط ، و ** ليست ** معدة للاستخدام في الإنتاجهياكل البياناتهياكل البيانات هي طريقة خاصة لتنظيم البيانات وتخزينها في جهاز الكمبيوتر بحيثيمكن الوصول إليها وتعديلها بكفاءة. بتعبير أدق ، هيكل البيانات هو مجموعة من البياناتالقيم والعلاقات فيما بينها والوظائف أو العمليات التي يمكن تطبيقها عليهاالبيانات.B - مبتدئ, A - المتقدمةB قائمة مرتبطةB قائمة مرتبطة بشكل مضاعفB طابور, QueueB كومةB جدول التجزئةB كومة -الحد الأقصى والحد الأدنى من إصدارات الكومةB طابور الأولويةA تريA شجرةA شجرة البحث الثنائيةA شجرة AVLA شجرة الأحمر والأسودA شجرة القطعة - مع أمثلة على استفسارات النطاق الأدنى / الأقصى / المجموعA شجرة فينويك (شجرة ثنائية مفهرسة)A Graph (كلاهما موجه وغير موجه)A مجموعة منفصلةA مرشح بلومالخوارزمياتالخوارزمية هي تحديد لا لبس فيه لكيفية حل فئة من المشاكل. أنهمجموعة من القواعد التي تحدد بدقة تسلسل العمليات.B - مبتدئ ، A - متقدمالخوارزميات حسب الموضوعرياضياتB معالجة البتB عامليB رقم فيبوناتشي - الإصدارات الكلاسيكية والمغلقةB اختبار البدائية (طريقة تقسيم المحاكمة)B الخوارزمية الإقليدية - احسب القاسم المشترك الأكبر (GCD)B أقل مضاعف مشترك (LCM)B منخل إراتوستينس - إيجاد جميع الأعداد الأولية حتى أي حد معينB هي قوة اثنين - تحقق مما إذا كان الرقم هو قوة اثنين (الخوارزميات الساذجة والبتية)B مثلث باسكالB عدد مركب - الأعداد المركبة والعمليات الأساسية معهمB راديان ودرجة - راديان لدرجة التحويل والعكسB تشغيل سريعB طريقة هورنر - تقييم متعدد الحدودA قسم صحيحA الجذر التربيعي - طريقة نيوتنA خوارزمية ليو هوي π - π حسابات تقريبية على أساس N-gonsA تحويل فورييه المنفصل - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهامجموعاتB المنتج الديكارتي - منتج من مجموعات متعددةB فيشر ييتس شافل - التقليب العشوائي لتسلسل محدودA مجموعة الطاقة - جميع المجموعات الفرعية للمجموعة (حلول البت والتتبع التراجعي)A التباديل (مع وبدون التكرار)A مجموعات (مع وبدون التكرار)A أطول نتيجة مشتركة (LCS)A أطول زيادة متتاليةA أقصر تسلسل فائق مشترك (SCS)A مشكلة حقيبة الظهر - \""0/1\"" و \""غير منضم\""A الحد الأقصى من Subarray -إصدارات \""القوة الغاشمة\"" و \""البرمجة الديناميكية\"" (كادان)A مجموع الجمع - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًاسلاسلB مسافة هامنج - عدد المواقف التي تختلف فيها الرموزA المسافة ليفنشتاين - الحد الأدنى لمسافة التحرير بين تسلسلينA خوارزمية كنوث - موريس - برات (خوارزمية KMP) - بحث السلسلة الفرعية (مطابقة النمط)A خوارزمية Z - بحث سلسلة فرعية (مطابقة النمط)A خوارزمية رابين كارب - بحث السلسلة الفرعيةA أطول سلسلة فرعية مشتركةA مطابقة التعبير العاديعمليات البحثB البحث الخطيB بحث سريع (أو حظر البحث) - ابحث في مصفوفة مرتبةB بحث ثنائي - البحث في مجموعة مرتبةB بحث الاستيفاء - البحث في مجموعة مرتبة موزعة بشكل موحدفرزB Bubble SortB Selection SortB Insertion SortB Heap SortB Merge SortB Quicksort - عمليات التنفيذ في المكان وغير في المكانB ShellsortB Counting SortB Radix Sortالقوائم المرتبطةB Straight TraversalB Reverse TraversalالأشجارB Depth-First Search (DFS)B Breadth-First Search (BFS)الرسوم البيانيةB Depth-First Search (DFS)B Breadth-First Search (BFS)B Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Dijkstra Algorithm -إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Bellman-Ford Algorithm - إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Detect Cycle - لكل من الرسوم البيانية الموجهة وغير الموجهة (الإصدارات القائمة على DFS و Disjoint Set)A Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Topological Sorting - طريقة البحث العمق الأول (DFS)A Articulation Points - خوارزمية تارجان (تعتمد على DFS)A Bridges - خوارزمية تعتمد على DFSA Eulerian Path and Eulerian Circuit - خوارزمية فلوري - قم بزيارة كل حافة مرة واحدة بالضبطA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA Strongly Connected Components - خوارزمية KosarajuA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصلية**التشفيرB Polynomial Hash - المتداول دالة التجزئة على أساس متعدد الحدودB Caesar Cipher - استبدال بسيط للشفراتالتعلم الاليB NanoNeuron - 7 وظائف JS بسيطة توضح كيف يمكن للآلات أن تتعلم بالفعل (الانتشار إلى الأمام / الخلف)غير مصنفB Tower of HanoiB Square Matrix Rotation - خوارزمية في المكانB Jump Game - التراجع ، البرمجة الديناميكية (من أعلى إلى أسفل + من أسفل إلى أعلى) والأمثلة الجشعةB Unique Paths - التراجع والبرمجة الديناميكية والأمثلة القائمة على مثلث باسكالB Rain Terraces - محاصرة مشكلة مياه الأمطار (البرمجة الديناميكية وإصدارات القوة الغاشمة)B Recursive Staircase - احسب عدد الطرق للوصول إلى القمة (4 حلول)A N-Queens ProblemA Knight's Tourالخوارزميات حسب النموذجالنموذج الحسابي هو طريقة أو نهج عام يكمن وراء تصميم الفصلمن الخوارزميات. إنه تجريد أعلى من مفهوم الخوارزمية ، تمامًا مثلالخوارزمية هي تجريد أعلى من برنامج الكمبيوتر.القوة الغاشمة - انظر في جميع الاحتمالات وحدد الحل الأفضلB Linear SearchB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Maximum SubarrayA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصليةA Discrete Fourier Transform - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهاجشع - اختر الخيار الأفضل في الوقت الحالي ، دون أي اعتبار للمستقبلB Jump GameA Unbound Knapsack ProblemA Dijkstra Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهفرق تسد - قسّم المشكلة إلى أجزاء أصغر ثم حل تلك الأجزاءB Binary SearchB Tower of HanoiB Pascal's TriangleB Euclidean Algorithm - حساب القاسم المشترك الأكبر (GCD)B Merge SortB QuicksortB Tree Depth-First Search (DFS)B Graph Depth-First Search (DFS)B Jump GameB Fast PoweringA Permutations (مع التكرار وبدونه)A Combinations (مع التكرار وبدونه)البرمجة الديناميكية - بناء حل باستخدام الحلول الفرعية التي تم العثور عليها مسبقًاB Fibonacci NumberB Jump GameB Unique PathsB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Levenshtein Distance - الحد الأدنى لمسافة التحرير بين تسلسلينA Longest Common Subsequence (LCS)A Longest Common SubstringA Longest Increasing SubsequenceA Shortest Common SupersequenceA 0/1 Knapsack ProblemA Integer PartitionA Maximum SubarrayA Bellman-Ford Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Regular Expression Matchingالتراجع - على غرار القوة الغاشمة ، حاول إنشاء جميع الحلول الممكنة ، ولكن في كل مرة تقوم فيها بإنشاء الحل التالي الذي تختبرهإذا استوفت جميع الشروط ، وعندها فقط استمر في إنشاء الحلول اللاحقة. خلاف ذلك ، تراجع ، واذهب إلىطريق مختلف لإيجاد حل. عادةً ما يتم استخدام اجتياز DFS لمساحة الدولة.B Jump GameB Unique PathsB Power Set - جميع المجموعات الفرعية للمجموعةA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA N-Queens ProblemA Knight's TourA Combination Sum - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًا** Branch & Bound ** - تذكر الحل الأقل تكلفة الموجود في كل مرحلة من مراحل التراجعالبحث ، واستخدام تكلفة الحل الأقل تكلفة الموجود حتى الآن بحد أدنى لتكلفةالحل الأقل تكلفة للمشكلة ، من أجل تجاهل الحلول الجزئية بتكاليف أكبر منتم العثور على حل بأقل تكلفة حتى الآن. اجتياز BFS عادةً بالاشتراك مع اجتياز DFS لمساحة الحالةيتم استخدام الشجرة.كيفية استخدام هذا المستودعتثبيت كل التبعياتnpm installقم بتشغيل ESLintقد ترغب في تشغيله للتحقق من جودة الكود.npm run lintقم بإجراء جميع الاختباراتnpm testقم بإجراء الاختبارات بالاسمnpm test -- 'LinkedList'ملعبيمكنك اللعب بهياكل البيانات والخوارزميات في ملف . /src/playground/playground.js والكتابةاختبارات لها في ./src/playground/__test__/playground.test.js.ثم قم ببساطة بتشغيل الأمر التالي لاختبار ما إذا كان كود الملعب الخاص بك يعمل كما هو متوقع:npm test -- 'playground'معلومات مفيدةالمراجع▶ هياكل البيانات والخوارزميات على موقع يوتيوبBig O Notationيتم استخدام Big O notation لتصنيف الخوارزميات وفقًا لكيفية نمو متطلبات وقت التشغيل أو المساحة مع نمو حجم الإدخال.قد تجد في الرسم البياني أدناه الأوامر الأكثر شيوعًا لنمو الخوارزميات المحددة في تBig O notation.مصدر: Big O Cheat Sheet.فيما يلي قائمة ببعض رموز Big O notation الأكثر استخدامًا ومقارنات أدائها مقابل أحجام مختلفة من بيانات الإدخال.Big O NotationComputations for 10 elementsComputations for 100 elementsComputations for 1000 elementsO(1)111O(log N)369O(N)101001000O(N log N)306009000O(N^2)100100001000000O(2^N)10241.26e+291.07e+301O(N!)36288009.3e+1574.02e+2567تعقيد عمليات بنية البياناتData StructureAccessSearchInsertionDeletionCommentsArray1nnnStacknn11Queuenn11Linked Listnn1nHash Table-nnnفي حالة وجود تكاليف دالة تجزئة مثالية ستكون O (1)Binary Search Treennnnفي حالة توازن تكاليف الشجرة ستكون O (log (n))B-Treelog(n)log(n)log(n)log(n)Red-Black Treelog(n)log(n)log(n)log(n)AVL Treelog(n)log(n)log(n)log(n)Bloom Filter-11-الإيجابيات الكاذبة ممكنة أثناء البحثتعقيد خوارزميات فرز الصفيفNameBestAverageWorstMemoryStableCommentsBubble sortnn2n21نعمInsertion sortnn2n21نعمSelection sortn2n2n21لاHeap sortn log(n)n log(n)n log(n)1لاMerge sortn log(n)n log(n)n log(n)nنعمQuick sortn log(n)n log(n)n2log(n)Noعادةً ما يتم إجراء الفرز السريع في مكانه مع مساحة مكدس O (log (n))Shell sortn log(n)depends on gap sequencen (log(n))21لاCounting sortn + rn + rn + rn + rYesr - أكبر رقم في المجموعةRadix sortn * kn * kn * kn + kYesك - طول أطول مفتاحمؤيدو المشروعيمكنك دعم هذا المشروع عبر ❤️️ GitHub أو ❤️️ Patreon.الناس الذين يدعمون هذا المشروع ∑ = 0ℹ️ A few more projects and articles about JavaScript and algorithms on trekhleb.dev"
2,angular/angular.js,https://github.com/angular/angular.js/blob/master/README.closure.md,JavaScript,"Using AngularJS with the Closure CompilerThe Closure Compiler project contains definitions for the AngularJS JavaScriptin its contrib/externs directory.The definitions contain externs for use with the Closure compiler (akaJSCompiler). Passing these files to the --externs parameter of a compilerpass allows using type annotations for AngularJS objects. For example,AngularJS's $scope objects can be annotated as:/** @type {angular.Scope} */var scope = $scope;This allows JSCompiler to type check accesses to scope, give warnings aboutmissing methods or incorrect arguments, and also prevents renaming of propertyaccesses with advanced compilation.The externs are incomplete and maintained on an as-needed basis, but strive tobe correct. Externs for individual modules should be added in separate files.See https://developers.google.com/closure/compiler/"
3,TheOdinProject/javascript-exercises,https://github.com/TheOdinProject/javascript-exercises/blob/main/README.md,JavaScript,"JavaScript ExercisesThese JavaScript exercises are intended to complement the JavaScript content on The Odin Project (TOP). They should only be done when instructed during the course of the curriculum.Note: The generator-exercise file is not actually an exercise; it is a script that generates exercises. It was created to help efficiently write these exercises.ContributingIf you have a suggestion to improve an exercise, an idea for a new exercise, or notice an issue with an exercise, please feel free to open an issue after thoroughly reading our contributing guide.How To Use These ExercisesFork and clone this repository. To learn how to fork a repository, see the GitHub documentation on how to fork a repo.Copies of repositories on your machine are called clones. If you need help cloning to your local environment you can learn how from the GitHub documentation on cloning a repository.Before you start working on any exercises, you should first ensure you have the following installed:NPM. You should have installed NPM already in our Installing Node.js lesson. Just in case you need to check, type npm --version in your terminal. If you get back Command 'npm' not found, but can be installed with:, do not follow the instructions in the terminal to install with apt-get as this causes permission issues. Instead, go back to the installation lesson and install Node with NVM by following the instructions there.Jest. After cloning this repository to your local machine and installing NPM, go into the newly created directory (cd javascript-exercises) and run npm install. This will install Jest and set up the testing platform based on our preconfigured settings.Each exercise includes the following:A markdown file with a description of the task, an empty (or mostly empty) JavaScript file, and a set of tests.A solutions directory that contains a solution and the same test file with all of the tests unskipped.To complete an exercise, you'll need to go to the exercise directory with cd exerciseName in the terminal and run npm test exerciseName.spec.js. This should run the test file and show you the output. When you first run a test, it will fail. This is by design! You must open the exercise file and write the code needed to get the test to pass.Some of the exercises have test conditions defined in their spec file as test.skip compared to test. This is purposeful. After you pass one test, you will change the next test.skip to test and test your code again. You'll do this until all conditions are satisfied. All tests must pass at the same time, and you should not have any test.skip instances by the time you finish an exercise.Once you successfully finish an exercise, check the solutions directory within each exercise to compare it with yours.You should not be checking the solution for an exercise until you finish it!Keep in mind that TOP's solution is not the only solution. Generally as long as all of the tests pass, your solution should be fine.Do not submit your solutions to this repo, as any PRs that do so will be closed without merging.Note: Due to the way Jest handles failed tests, it may return an exit code of 1 if any tests fail. NPM will interpret this as an error and you may see some npm ERR! messages after Jest runs. You can ignore these, or run your test with npm test exerciseName.spec.js --silent to supress the errors.The first exercise, helloWorld, will walk you through the process in-depth.DebuggingTo debug functions, you can run the tests in the Visual Studio Code debugger terminal. You can open this by clicking the \""Run and Debug\"" icon on the left or pressing Ctrl + Shift + D, then clicking JavaScript Debug Terminal. You will be able to set breakpoints as you would in the Chrome DevTools debugger. You can run npm test exerciseName.spec.js to then execute your code up until your breakpoint and step through your code as necessary. NOTE: To take advantage of the debugger, you MUST run the script in the debugger terminal, not the bash or zsh terminal."
4,jquery/jquery,https://github.com/jquery/jquery/blob/main/README.md,JavaScript,"jQuery — New Wave JavaScriptMeetings are currently held on the matrix.org platform.Meeting minutes can be found at meetings.jquery.org.Contribution GuidesIn the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:Getting InvolvedCore Style GuideWriting Code for jQuery Foundation ProjectsReferences to issues/PRsGitHub issues/PRs are usually referenced via gh-NUMBER, where NUMBER is the numerical ID of the issue/PR. You can find such an issue/PR under https://github.com/jquery/jquery/issues/NUMBER.jQuery has used a different bug tracker - based on Trac - in the past, available under bugs.jquery.com. It is being kept in read only mode so that referring to past discussions is possible. When jQuery source references one of those issues, it uses the pattern trac-NUMBER, where NUMBER is the numerical ID of the issue. You can find such an issue under https://bugs.jquery.com/ticket/NUMBER.Environments in which to use jQueryBrowser supportjQuery also supports Node, browser extensions, and other non-browser environments.What you need to build your own jQueryTo build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.For Windows, you have to download and install git and Node.js.macOS users should install Homebrew. Once Homebrew is installed, run brew install git to install git,and brew install node to install Node.js.Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from sourceif you swing that way. Easy-peasy.How to build your own jQueryFirst, clone the jQuery git repo.Then, enter the jquery directory and run the build script:cd jquery && npm run buildThe built version of jQuery will be put in the dist/ subdirectory, along with the minified copy and associated map file.If you want to create custom build or help with jQuery development, it would be better to install grunt command line interface as a global package:npm install -g grunt-cliMake sure you have grunt installed by testing:grunt -VNow by running the grunt command, in the jquery directory, you can build a full version of jQuery, just like with an npm run build command:gruntThere are many other tasks available for jQuery Core:grunt -helpModulesSpecial builds can be created that exclude subsets of jQuery functionality.This allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.For example, an app that only used JSONP for $.ajax() and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.Any module may be excluded except for core, and selector. To exclude a module, pass its path relative to the src folder (without the .js extension).Some example modules that can be excluded are:ajax: All AJAX functionality: $.ajax(), $.get(), $.post(), $.ajaxSetup(), .load(), transports, and ajax event shorthands such as .ajaxStart().ajax/xhr: The XMLHTTPRequest AJAX transport only.ajax/script: The <script> AJAX transport only; used to retrieve scripts.ajax/jsonp: The JSONP AJAX transport only; depends on the ajax/script transport.css: The .css() method. Also removes all modules depending on css (including effects, dimensions, and offset).css/showHide:  Non-animated .show(), .hide() and .toggle(); can be excluded if you use classes or explicit .css() calls to set the display property. Also removes the effects module.deprecated: Methods documented as deprecated but not yet removed.dimensions: The .width() and .height() methods, including inner- and outer- variations.effects: The .animate() method and its shorthands such as .slideUp() or .hide(\""slow\"").event: The .on() and .off() methods and all event functionality.event/trigger: The .trigger() and .triggerHandler() methods.offset: The .offset(), .position(), .offsetParent(), .scrollLeft(), and .scrollTop() methods.wrap: The .wrap(), .wrapAll(), .wrapInner(), and .unwrap() methods.core/ready: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with jQuery() will simply be called immediately. However, jQuery(document).ready() will not be a function and .on(\""ready\"", ...) or similar will not be triggered.deferred: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. Note that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (grunt custom:-deferred,-ajax,-effects,-core/ready).exports/global: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.exports/amd: Exclude the AMD definition.As a special case, you may also replace the full jQuery selector module by using a special flag grunt custom:-selector.selector: The full jQuery selector engine. When this module is excluded, it is replaced by a rudimentary selector engine based on the browser's querySelectorAll method that does not support jQuery selector extensions or enhanced semantics. See the selector-native.js file for details.Note: Excluding the full selector module will also exclude all jQuery selector extensions (such as effects/animatedSelector and css/hiddenVisibleSelectors).The build process shows a message for each dependent module it excludes or includes.AMD nameAs an option, you can set the module name for jQuery's AMD definition. By default, it is set to \""jquery\"", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply pass it to the --amd parameter:grunt custom --amd=\""custom-name\""Or, to define anonymously, set the name to an empty string.grunt custom --amd=\""\""File nameThe default name for the built jQuery file is jquery.js; it is placed under the dist/ directory. It's possible to change the file name using the --filename parameter:grunt custom:slim --filename=\""jquery.slim.js\""This would create a slim version of jQuery and place it under dist/jquery.slim.js. In fact, this is exactly the command we use to generate the slim jQuery during the release process.ECMAScript Module (ESM) modeBy default, jQuery generates a regular script JavaScript file. You can also generate an ECMAScript module exporting jQuery as the default export using the --esm parameter:grunt custom --esmThe default is script but you can also pass it explicitly via --no-esm:grunt custom --no-esmCustom Build ExamplesTo create a custom build, first check out the version:git pull; git checkout VERSIONWhere VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:npm installCreate the custom build using the grunt custom option, listing the modules to be excluded.Exclude all ajax functionality:grunt custom:-ajaxExcluding css removes modules depending on CSS: effects, offset, dimensions.grunt custom:-cssExclude a bunch of modules:grunt custom:-ajax/jsonp,-css,-deprecated,-dimensions,-effects,-offset,-wrapThere is also a special alias to generate a build with the same configuration as the official jQuery Slim build is generated:grunt custom:slimFor questions or requests regarding custom builds, please start a thread on the Developing jQuery Core section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process.Running the Unit TestsMake sure you have the necessary dependencies:npm installStart grunt watch or npm start to auto-build jQuery as you work:grunt watchRun the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the \""test\"" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:Windows: WAMP downloadMac: MAMP downloadLinux: Setting up LAMPMongoose (most platforms)Building to a different directoryTo copy the built jQuery files from /dist to another directory:grunt && grunt dist:/path/to/special/location/With this example, the output files would be:/path/to/special/location/jquery.js/path/to/special/location/jquery.min.jsTo add a permanent copy destination, create a file in dist/ called \"".destination.json\"". Inside the file, paste and customize the following:{  \""/Absolute/path/to/other/destination\"": true}Additionally, both methods can be combined.Essential GitAs the source code is handled by the Git version control system, it's useful to know some features used.CleaningIf you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):git reset --hard upstream/maingit clean -fdxRebasingFor feature/topic branches, you should always use the --rebase flag to git pull, or if you are usually handling many temporary \""to be in a github pull request\"" branches, run the following to automate this:git config branch.autosetuprebase local(see man git-config for more information)Handling merge conflictsIf you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the featuregit mergetool. Even though the default tool xxdiff looks awful/old, it's rather useful.The following are some commands that can be used there:Ctrl + Alt + M - automerge as much as possibleb - jump to next merge conflicts - change the order of the conflicted linesu - undo a mergeleft mouse button - mark a block to be the winnermiddle mouse button - mark a line to be the winnerCtrl + S - saveCtrl + Q - quitQUnit ReferenceTest methodsexpect( numAssertions );stop();start();Note: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.Test assertionsok( value, [message] );equal( actual, expected, [message] );notEqual( actual, expected, [message] );deepEqual( actual, expected, [message] );notDeepEqual( actual, expected, [message] );strictEqual( actual, expected, [message] );notStrictEqual( actual, expected, [message] );throws( block, [expected], [message] );Test Suite Convenience Methods Reference (See test/data/testinit.js)Returns an array of elements with the given IDsq( ... );Example:q(\""main\"", \""foo\"", \""bar\"");=> [ div#main, span#foo, input#bar ]Asserts that a selection matches the given IDst( testName, selector, [ \""array\"", \""of\"", \""ids\"" ] );Example:t(\""Check for something\"", \""//[a]\"", [\""foo\"", \""bar\""]);Fires a native DOM event without going through jQueryfireNative( node, eventType )Example:fireNative( jQuery(\""#elem\"")[0], \""click\"" );Add random number to url to stop cachingurl( \""some/url\"" );Example:url(\""index.html\"");=> \""data/index.html?10538358428943\""url(\""mock.php?foo=bar\"");=> \""data/mock.php?foo=bar&10538358345554\""Run tests in an iframeSome tests may require a document other than the standard test fixture, andthese can be run in a separate iframe. The actual test code and assertionsremain in jQuery's main test files; only the minimal test fixture markupand setup code should be placed in the iframe file.testIframe( testName, fileName,  function testCallback(      assert, jQuery, window, document,\t  [ additional args ] ) {\t...  } );This loads a page, constructing a url with fileName \""./data/\"" + fileName.The iframed page determines when the callback occurs in the test byincluding the \""/test/data/iframeTest.js\"" script and callingstartIframeTest( [ additional args ] ) when appropriate. Often thiswill be after either document ready or window.onload fires.The testCallback receives the QUnit assert object created by testIframefor this test, followed by the global jQuery, window, and document fromthe iframe. If the iframe code passes any arguments to startIframeTest,they follow the document argument.Questions?If you have any questions, please feel free to ask on theDeveloping jQuery Core forum or in #jquery on libera."
5,scutan90/DeepLearning-500-questions,https://github.com/scutan90/DeepLearning-500-questions/blob/master/README.md,JavaScript,京东售卖链接：https://item.jd.com/12785031.html京东商城100多家书店有现货。深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著内容简介本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。作者简介谈继勇 主编南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。郭子钊 副主编四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。李剑 副主编同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。佃松宜 副主编日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。王晋东 特邀编委中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。王超锋上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。郭晓锋中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。黄伟华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。陈方杰（Amusi）上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。李元伟国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。陈琳北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。目录第1章 数学基础 11.1 向量和矩阵 11.1.1 标量、向量、矩阵和张量 11.1.2 张量与矩阵的区别 21.1.3 矩阵和向量相乘的结果 21.1.4 向量和矩阵的范数归纳 21.1.5 判断一个矩阵是否为正定矩阵 41.2 导数和偏导数 51.2.1 导数偏导计算 51.2.2 导数和偏导数的区别 61.3 特征值和特征向量 61.3.1 特征值分解 61.3.2 奇异值和特征值的关系 61.4 概率分布与随机变量 71.4.1 机器学习为什么要使用概率 71.4.2 变量与随机变量的区别 71.4.3 随机变量与概率分布的联系 81.4.4 离散型随机变量和概率质量函数 81.4.5 连续型随机变量和概率密度函数 81.4.6 举例理解条件概率 91.4.7 联合概率与边缘概率的区别和联系 91.4.8 条件概率的链式法则 101.4.9 独立性和条件独立性 101.5 常见概率分布 111.5.1 伯努利分布 111.5.2 高斯分布 111.5.3 何时采用正态分布 121.5.4 指数分布 121.5.5 Laplace分布 131.5.6 Dirac分布和经验分布 131.6 期望、方差、协方差、相关系数 131.6.1 期望 131.6.2 方差 141.6.3 协方差 141.6.4 相关系数 15第2章 机器学习基础 162.1 基本概念 162.1.1 大话机器学习本质 162.1.2 什么是神经网络 162.1.3 各种常见算法图示 172.1.4 计算图的导数计算 172.1.5 理解局部最优与全局最优 182.1.6 大数据与深度学习之间的关系 192.2 机器学习的学习方式 202.2.1 监督学习 202.2.2 非监督学习 202.2.3 半监督学习 202.2.4 弱监督学习 202.2.5 监督学习模型的搭建步骤 212.3 分类算法 222.3.1 常用分类算法的优缺点 222.3.2 分类算法的评估方法 232.3.3 正确率能否很好地评估分类算法 252.3.4 什么样的分类器是最好的 262.4 逻辑回归 262.4.1 回归的种类 262.4.2 逻辑回归适用性 272.4.3 逻辑回归与朴素贝叶斯的区别 272.4.4 线性回归与逻辑回归的区别 272.5 代价函数 282.5.1 为什么需要代价函数 282.5.2 代价函数作用原理 282.5.3 常见代价函数 302.5.4 为什么代价函数要非负 312.5.5 为什么用交叉熵代替二次代价函数 312.6 损失函数 322.6.1 什么是损失函数 322.6.2 常见的损失函数 322.6.3 逻辑回归为什么使用对数损失函数 342.6.4 对数损失函数如何度量损失 342.7 梯度下降法 352.7.1 梯度下降法的作用 362.7.2 梯度下降法的直观理解 362.7.3 梯度下降法算法描述 372.7.4 梯度下降法的缺点 382.7.5 如何对梯度下降法进行调优 382.7.6 随机梯度下降和批量梯度下降的区别 382.7.7 各种梯度下降法性能比较 402.8 线性判别分析 402.8.1 LDA思想总结 402.8.2 图解LDA核心思想 412.8.3 二类LDA算法原理 412.8.4 LDA算法流程总结 422.8.5 LDA和PCA的异同 432.8.6 LDA的优缺点 432.9 主成分分析 432.9.1 图解PCA核心思想 432.9.2 PCA算法推理 442.9.3 PCA算法流程总结 452.9.4 PCA思想总结 462.9.5 PCA算法的优缺点 462.9.6 降维的必要性及目的 462.9.7 KPCA与PCA的区别 472.10 模型评估 472.10.1 模型评估常用方法 482.10.2 误差、偏差和方差的区别和联系 482.10.3 为什么使用标准差 492.10.4 经验误差与泛化误差 502.10.5 图解欠拟合与过拟合 502.10.6 如何解决欠拟合与过拟合 522.10.7 交叉验证的主要作用 522.10.8 理解K折交叉验证 532.10.9 理解混淆矩阵 532.10.10 理解查准率与查全率 532.10.11 理解ROC与AUC 542.10.12 如何绘制ROC曲线 552.10.13 如何计算TPR和FPR 562.10.14 如何计算AUC 582.10.15 直观理解AUC 582.10.16 ROC评估分类器 602.10.17 代价敏感错误率与代价曲线 602.10.18 比较检验方法 612.11 决策树 612.11.1 决策树的基本原理 622.11.2 决策树的生成过程 622.11.3 决策树学习基本算法步骤 622.11.4 决策树算法的优缺点 632.11.5 决策树和熵的联系 632.11.6 熵的概念及定义 632.11.7 理解信息增益 642.11.8 决策树中熵、条件熵和信息增益的联系 642.11.9 决策树算法中剪枝的作用及策略 652.12 支持向量机（SVM） 652.12.1 什么是SVM 652.12.2 SVM能解决的问题 662.12.3 核函数特点及其作用 672.12.4 SVM为什么引入对偶问题 672.12.5 如何理解SVM中的对偶问题 672.12.6 常见的核函数 692.12.7 SVM的主要特点 692.12.8 SVM的主要缺点 702.12.9 逻辑回归与SVM的异同 702.13 贝叶斯分类器 722.13.1 贝叶斯分类器的基本原理 722.13.2 朴素贝叶斯分类器 722.13.3 举例理解朴素贝叶斯分类器 732.13.4 半朴素贝叶斯分类器 752.13.5 极大似然估计和贝叶斯估计的联系与区别 752.13.6 极大似然估计原理 762.13.7 图解极大似然估计 762.14 EM算法 772.14.1 EM算法的基本思想 772.14.2 EM算法推导 772.14.3 图解EM算法 782.14.4 EM算法流程 792.15 降维和聚类 792.15.1 图解为什么会产生维数灾难 792.15.2 怎样避免维数灾难 832.15.3 聚类和降维 832.15.4 聚类算法优劣的衡量标准 842.15.5 聚类和分类 852.15.6 聚类算法的性能比较 852.15.7 4种常用聚类方法比较 85第3章 深度学习基础 893.1 基本概念 893.1.1 神经网络的类型 893.1.2 神经网络的常用模型结构 923.1.3 深度学习和机器学习的区别与联系 933.1.4 为什么使用深层表示 933.1.5 深度学习架构分类 943.1.6 如何选择深度学习开发平台 943.2 神经网络计算 953.2.1 前向传播和反向传播 953.2.2 如何计算神经网络的输出 963.2.3 如何计算卷积神经网络输出值 973.2.4 如何计算池化层输出值 1003.2.5 反向传播实例 1013.2.6 神经网络更“深”的意义 1043.3 激活函数 1043.3.1 为什么需要激活函数 1043.3.2 为什么激活函数需要非线性函数 1053.3.3 常见的激活函数及其图像 1053.3.4 常见激活函数的导数计算 1073.3.5 激活函数有哪些性质 1083.3.6 如何选择激活函数 1083.3.7 为什么tanh收敛速度比sigmoid快 1093.3.8 Relu激活函数的优点 1093.3.9 理解Relu激活函数的稀疏激活性 1093.3.10 什么时候可以用线性激活函数 1093.3.11 softmax函数的定义及作用 1103.3.12 softmax函数如何应用于多分类 1103.4 BATCH SIZE 1123.4.1 为什么需要Batch Size 1123.4.2 如何选择Batch Size值 1123.4.3 调节Batch Size对训练效果的影响 1133.4.4 在合理范围内增大Batch Size的好处 1133.4.5 盲目增大Batch Size的坏处 1143.5 归一化 1143.5.1 理解归一化含义 1143.5.2 归一化和标准化的联系与区别 1143.5.3 为什么要归一化或标准化 1153.5.4 图解为什么要归一化 1153.5.5 为什么归一化能提高求最优解速度 1153.5.6 归一化有哪些类型 1163.5.7 局部响应归一化作用 1163.5.8 局部响应归一化原理 1173.5.9 什么是批归一化 1183.5.10 批归一化的优点 1183.5.11 批归一化算法流程 1183.5.12 批归一化和组归一化比较 1193.5.13 权重归一化和批归一化比较 1193.5.14 批归一化适用范围 1203.5.15 BN、LN、IN和GN的对比 1203.6 参数初始化 1213.6.1 参数初始化应满足的条件 1213.6.2 常用的几种初始化方式 1213.6.3 全0初始化带来的问题 1213.6.4 全都初始化为同样的值 1223.6.5 初始化为小的随机数 1233.6.6 用 校准方差 1233.7 预训练与微调 1233.7.1 什么是预训练和微调 1233.7.2 预训练和微调的作用 1243.7.3 预训练模型的复用 1243.7.4 预训练和迁移学习 1253.7.5 微调时网络参数是否更新 1253.7.6 微调模型的三种状态 1253.7.7 为什么深层神经网络难以训练 1253.8 超参数 1273.8.1 超参数有哪些 1273.8.2 参数和模型的关系 1273.8.3 参数和超参数的区别 1273.8.4 如何寻找超参数的最优值 1283.8.5 超参数搜索的一般过程 1283.9 学习率 1293.9.1 学习率的作用 1293.9.2 学习率衰减的常用参数 1293.9.3 常用的学习率衰减方法 1293.10 正则化 1333.10.1 为什么要正则化 1333.10.2 常见正则化方法 1333.10.3 图解L1和L2正则化 1343.10.4 Dropout具体工作流程 1353.10.5 为什么Dropout可以解决过拟合问题 1373.10.6 Dropout的缺点
6,cyclic-software/starter-express-api,https://github.com/cyclic-software/starter-express-api/blob/main/README.md,JavaScript,starter-express-apiThis is the simplest possible nodejs api using express that responds to any request with:Yo!Deploy it in 7 seconds:
7,Binaryify/NeteaseCloudMusicApi,https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/README.MD,JavaScript,"网易云音乐 API网易云音乐 Node.js API service灵感来自disoul/electron-cloud-musicdarknessomi/musicboxsqaiyan/netmusic-nodegreats3an/pyncm环境要求需要 NodeJS 14+ 环境安装$ git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install或者$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install运行调用前务必阅读文档的调用前须知$ node app.js服务器启动默认端口为 3000,若不想使用 3000 端口,可使用以下命令: Mac/Linux$ PORT=4000 node app.jswindows 下使用 git-bash 或者 cmder 等终端执行以下命令:$ set PORT=4000 && node app.jsVercel 部署v4.0.8 加入了 Vercel 配置文件,可以直接在 Vercel 下部署了,不需要自己的服务器操作方法fork 此项目在 Vercel 官网点击 New Project点击 Import Git Repository 并选择你 fork 的此项目并点击import点击 PERSONAL ACCOUNT 的 select直接点ContinuePROJECT NAME自己填,FRAMEWORK PRESET 选 Other 然后直接点 Deploy 接着等部署完成即可腾讯云 serverless 部署因 Vercel 在国内访问太慢,在此提供腾讯云 serverless 部署方法(注意:腾讯云 serverless 并不是免费的,前三个月有免费额度,之后收费)操作方法fork 此项目在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击新建应用顶部创建方式选择 Web 应用选择 Express框架,点击底部下一步按钮输入应用名,上传方式选择代码仓库,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目启动文件填入:#!/bin/bashexport PORT=9000/var/lang/node16/bin/node app.js点击完成,等待部署完成,点击资源列表的 API网关 里的 URL,正常情况会打开文档地址,点击文档例子可查看接口调用效果可以在Node.js调用v3.31.0后支持Node.js调用,导入的方法为module内的文件名,返回内容包含status和body,status为状态码,body为请求返回内容,参考module_example 文件夹下的 test.jsconst { login_cellphone, user_cloud } = require('NeteaseCloudMusicApi')async function main() {  try {    const result = await login_cellphone({      phone: '手机号',      password: '密码'    })    console.log(result)    const result2 = await user_cloud({      cookie: result.body.cookie // 凭证    })    console.log(result2.body)        } catch (error) {    console.log(error)  }}main()支持 TypeScript// test.tsimport { banner } from 'NeteaseCloudMusicApi'banner({ type:0 }).then(res=>{  console.log(res)})使用文档文档地址文档地址2功能特性登录刷新登录发送验证码校验验证码注册(修改密码)获取用户信息 , 歌单，收藏，mv, dj 数量获取用户歌单获取用户电台获取用户关注列表获取用户粉丝列表获取用户动态获取用户播放记录获取精品歌单获取歌单详情搜索搜索建议获取歌词歌曲评论收藏单曲到歌单专辑评论歌单评论mv 评论电台节目评论banner获取歌曲详情获取专辑内容获取歌手单曲获取歌手 mv获取歌手专辑获取歌手描述获取相似歌手获取相似歌单相似 mv获取相似音乐获取最近 5 个听了这首歌的用户获取每日推荐歌单获取每日推荐歌曲私人 FM签到喜欢音乐垃圾桶歌单 ( 网友精选碟 )新碟上架热门歌手最新 mv推荐 mv推荐歌单推荐新音乐推荐电台推荐节目独家放送mv 排行获取 mv 数据播放 mv/视频排行榜歌手榜云盘电台 - 推荐电台 - 分类电台 - 分类推荐电台 - 订阅电台 - 详情电台 - 节目给评论点赞获取动态热搜列表(简略)发送私信发送私信歌单新建歌单收藏/取消收藏歌单歌单分类收藏的歌手列表订阅的电台列表相关歌单推荐付费精选接口音乐是否可用检查接口登录状态获取视频播放地址发送/删除评论热门评论视频评论退出登录所有榜单所有榜单内容摘要收藏视频收藏 MV视频详情相关视频关注用户新歌速递喜欢音乐列表(无序)收藏的 MV 列表获取最新专辑听歌打卡获取视频标签/分类下的视频已收藏专辑列表获取动态评论歌单收藏者列表云盘歌曲删除热门话题电台 - 推荐类型电台 - 非热门类型电台 - 今日优选心动模式/智能播放转发动态删除动态分享歌曲、歌单、mv、电台、电台节目到动态通知-私信通知-评论通知-@我通知-通知设置云盘数据详情私信内容我的数字专辑batch批量请求接口获取视频标签列表全部mv网易出品mv收藏/取消收藏专辑专辑动态信息热搜列表(详细)更换绑定手机检测手机号码是否已注册初始化昵称更新歌单描述更新歌单名更新歌单标签默认搜索关键词删除歌单电台banner用户电台热门电台电台 - 节目详情电台 - 节目榜电台 - 新晋电台榜/热门电台榜类别热门电台云村热评电台24小时节目榜电台24小时主播榜电台最热主播榜电台主播新人榜电台付费精品榜歌手热门50首歌曲购买数字专辑获取 mv 点赞转发评论数数据获取视频点赞转发评论数数据调整歌单顺序调整歌曲顺序独家放送列表获取推荐视频获取视频分类列表获取全部视频列表接口获取历史日推可用日期列表获取历史日推详细数据国家编码列表首页-发现首页-发现-圆形图标入口列表数字专辑-全部新碟数字专辑-热门新碟数字专辑&数字单曲-榜单数字专辑-语种风格馆数字专辑详情更新头像歌单封面上传楼层评论歌手全部歌曲精品歌单标签列表用户等级信息电台个性推荐用户绑定信息用户绑定手机新版评论点赞过的视频收藏视频到视频歌单删除视频歌单里的视频最近播放的视频音乐日历电台订阅者列表云贝签到信息云贝签到云贝所有任务云贝todo任务云贝今日签到信息云贝完成任务云贝收入云贝支出云贝账户信息账号信息最近联系人私信音乐抱一抱评论评论抱一抱列表收藏的专栏关注歌手新歌关注歌手新MV歌手详情云盘上传二维码登录话题详情话题详情热门动态歌单详情动态绑定手机一起听状态用户历史评论云盘歌曲信息匹配纠正云贝推歌云贝推歌历史记录已购单曲获取mlog播放地址将mlog id转为视频idvip成长值vip成长值获取记录vip任务领取vip成长值歌手粉丝数字专辑详情数字专辑销量音乐人数据概况音乐人播放趋势音乐人任务账号云豆数领取云豆获取 VIP 信息音乐人签到发送文本动态获取客户端歌曲下载 url获取歌单所有歌曲乐签信息最近播放-歌曲最近播放-视频最近播放-声音最近播放-歌单最近播放-专辑最近播放-播客签到进度重复昵称检测歌手粉丝数量音乐人任务(新)内部版本接口歌单更新播放量黑胶时光机音乐百科 - 简要信息乐谱列表乐谱内容曲风列表曲风偏好曲风详情曲风-歌曲曲风-专辑曲风-歌单曲风-歌手更新日志changelog单元测试$ npm testSDK语言作者地址类型JavaJackuXLhttps://github.com/JackuXL/NeteaseCloudMusicApi-SDK第三方Java1015770492https://github.com/1015770492/yumbo-music-utils第三方贡献者LicenseThe MIT License (MIT)"
8,tastejs/todomvc,https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/README.MD,JavaScript,"网易云音乐 API网易云音乐 Node.js API service灵感来自disoul/electron-cloud-musicdarknessomi/musicboxsqaiyan/netmusic-nodegreats3an/pyncm环境要求需要 NodeJS 14+ 环境安装$ git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install或者$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install运行调用前务必阅读文档的调用前须知$ node app.js服务器启动默认端口为 3000,若不想使用 3000 端口,可使用以下命令: Mac/Linux$ PORT=4000 node app.jswindows 下使用 git-bash 或者 cmder 等终端执行以下命令:$ set PORT=4000 && node app.jsVercel 部署v4.0.8 加入了 Vercel 配置文件,可以直接在 Vercel 下部署了,不需要自己的服务器操作方法fork 此项目在 Vercel 官网点击 New Project点击 Import Git Repository 并选择你 fork 的此项目并点击import点击 PERSONAL ACCOUNT 的 select直接点ContinuePROJECT NAME自己填,FRAMEWORK PRESET 选 Other 然后直接点 Deploy 接着等部署完成即可腾讯云 serverless 部署因 Vercel 在国内访问太慢,在此提供腾讯云 serverless 部署方法(注意:腾讯云 serverless 并不是免费的,前三个月有免费额度,之后收费)操作方法fork 此项目在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击新建应用顶部创建方式选择 Web 应用选择 Express框架,点击底部下一步按钮输入应用名,上传方式选择代码仓库,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目启动文件填入:#!/bin/bashexport PORT=9000/var/lang/node16/bin/node app.js点击完成,等待部署完成,点击资源列表的 API网关 里的 URL,正常情况会打开文档地址,点击文档例子可查看接口调用效果可以在Node.js调用v3.31.0后支持Node.js调用,导入的方法为module内的文件名,返回内容包含status和body,status为状态码,body为请求返回内容,参考module_example 文件夹下的 test.jsconst { login_cellphone, user_cloud } = require('NeteaseCloudMusicApi')async function main() {  try {    const result = await login_cellphone({      phone: '手机号',      password: '密码'    })    console.log(result)    const result2 = await user_cloud({      cookie: result.body.cookie // 凭证    })    console.log(result2.body)        } catch (error) {    console.log(error)  }}main()支持 TypeScript// test.tsimport { banner } from 'NeteaseCloudMusicApi'banner({ type:0 }).then(res=>{  console.log(res)})使用文档文档地址文档地址2功能特性登录刷新登录发送验证码校验验证码注册(修改密码)获取用户信息 , 歌单，收藏，mv, dj 数量获取用户歌单获取用户电台获取用户关注列表获取用户粉丝列表获取用户动态获取用户播放记录获取精品歌单获取歌单详情搜索搜索建议获取歌词歌曲评论收藏单曲到歌单专辑评论歌单评论mv 评论电台节目评论banner获取歌曲详情获取专辑内容获取歌手单曲获取歌手 mv获取歌手专辑获取歌手描述获取相似歌手获取相似歌单相似 mv获取相似音乐获取最近 5 个听了这首歌的用户获取每日推荐歌单获取每日推荐歌曲私人 FM签到喜欢音乐垃圾桶歌单 ( 网友精选碟 )新碟上架热门歌手最新 mv推荐 mv推荐歌单推荐新音乐推荐电台推荐节目独家放送mv 排行获取 mv 数据播放 mv/视频排行榜歌手榜云盘电台 - 推荐电台 - 分类电台 - 分类推荐电台 - 订阅电台 - 详情电台 - 节目给评论点赞获取动态热搜列表(简略)发送私信发送私信歌单新建歌单收藏/取消收藏歌单歌单分类收藏的歌手列表订阅的电台列表相关歌单推荐付费精选接口音乐是否可用检查接口登录状态获取视频播放地址发送/删除评论热门评论视频评论退出登录所有榜单所有榜单内容摘要收藏视频收藏 MV视频详情相关视频关注用户新歌速递喜欢音乐列表(无序)收藏的 MV 列表获取最新专辑听歌打卡获取视频标签/分类下的视频已收藏专辑列表获取动态评论歌单收藏者列表云盘歌曲删除热门话题电台 - 推荐类型电台 - 非热门类型电台 - 今日优选心动模式/智能播放转发动态删除动态分享歌曲、歌单、mv、电台、电台节目到动态通知-私信通知-评论通知-@我通知-通知设置云盘数据详情私信内容我的数字专辑batch批量请求接口获取视频标签列表全部mv网易出品mv收藏/取消收藏专辑专辑动态信息热搜列表(详细)更换绑定手机检测手机号码是否已注册初始化昵称更新歌单描述更新歌单名更新歌单标签默认搜索关键词删除歌单电台banner用户电台热门电台电台 - 节目详情电台 - 节目榜电台 - 新晋电台榜/热门电台榜类别热门电台云村热评电台24小时节目榜电台24小时主播榜电台最热主播榜电台主播新人榜电台付费精品榜歌手热门50首歌曲购买数字专辑获取 mv 点赞转发评论数数据获取视频点赞转发评论数数据调整歌单顺序调整歌曲顺序独家放送列表获取推荐视频获取视频分类列表获取全部视频列表接口获取历史日推可用日期列表获取历史日推详细数据国家编码列表首页-发现首页-发现-圆形图标入口列表数字专辑-全部新碟数字专辑-热门新碟数字专辑&数字单曲-榜单数字专辑-语种风格馆数字专辑详情更新头像歌单封面上传楼层评论歌手全部歌曲精品歌单标签列表用户等级信息电台个性推荐用户绑定信息用户绑定手机新版评论点赞过的视频收藏视频到视频歌单删除视频歌单里的视频最近播放的视频音乐日历电台订阅者列表云贝签到信息云贝签到云贝所有任务云贝todo任务云贝今日签到信息云贝完成任务云贝收入云贝支出云贝账户信息账号信息最近联系人私信音乐抱一抱评论评论抱一抱列表收藏的专栏关注歌手新歌关注歌手新MV歌手详情云盘上传二维码登录话题详情话题详情热门动态歌单详情动态绑定手机一起听状态用户历史评论云盘歌曲信息匹配纠正云贝推歌云贝推歌历史记录已购单曲获取mlog播放地址将mlog id转为视频idvip成长值vip成长值获取记录vip任务领取vip成长值歌手粉丝数字专辑详情数字专辑销量音乐人数据概况音乐人播放趋势音乐人任务账号云豆数领取云豆获取 VIP 信息音乐人签到发送文本动态获取客户端歌曲下载 url获取歌单所有歌曲乐签信息最近播放-歌曲最近播放-视频最近播放-声音最近播放-歌单最近播放-专辑最近播放-播客签到进度重复昵称检测歌手粉丝数量音乐人任务(新)内部版本接口歌单更新播放量黑胶时光机音乐百科 - 简要信息乐谱列表乐谱内容曲风列表曲风偏好曲风详情曲风-歌曲曲风-专辑曲风-歌单曲风-歌手更新日志changelog单元测试$ npm testSDK语言作者地址类型JavaJackuXLhttps://github.com/JackuXL/NeteaseCloudMusicApi-SDK第三方Java1015770492https://github.com/1015770492/yumbo-music-utils第三方贡献者LicenseThe MIT License (MIT)"
9,OpenZeppelin/openzeppelin-contracts,https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/README.md,JavaScript,"WarningVersion 5.0 is under active development. The code in this branch is not recommended for use.A library for secure smart contract development. Build on a solid foundation of community-vetted code.Implementations of standards like ERC20 and ERC721.Flexible role-based permissioning scheme.Reusable Solidity components to build custom contracts and complex decentralized systems.🧙 Not sure how to get started? Check out Contracts Wizard — an interactive smart contract generator.🏗️ Want to scale your decentralized application? Check out OpenZeppelin Defender — a secure platform for automating and monitoring your operations.OverviewInstallationHardhat, Truffle (npm)$ npm install @openzeppelin/contractsOpenZeppelin Contracts features a stable API, which means that your contracts won't break unexpectedly when upgrading to a newer minor version.Foundry (git)Warning When installing via git, it is a common error to use the master branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the master branch does not guarantee.Warning Foundry installs the latest version initially, but subsequent forge update commands will use the master branch.$ forge install OpenZeppelin/openzeppelin-contractsAdd @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/ in remappings.txt.UsageOnce installed, you can use the contracts in the library by importing them:pragma solidity ^0.8.20;import {ERC721} from \""@openzeppelin/contracts/token/ERC721/ERC721.sol\"";contract MyCollectible is ERC721 {    constructor() ERC721(\""MyCollectible\"", \""MCO\"") {    }}If you're new to smart contract development, head to Developing Smart Contracts to learn about creating a new project and compiling your contracts.To keep your system secure, you should always use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.Learn MoreThe guides in the documentation site will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:Access Control: decide who can perform each of the actions on your system.Tokens: create tradeable assets or collectives, and distribute them via Crowdsales.Utilities: generic useful tools including non-overflowing math, signature verification, and trustless paying systems.The full API is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts's development in the community forum.Finally, you may want to take a look at the guides on our blog, which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.The Hitchhiker’s Guide to Smart Contracts in Ethereum will help you get an overview of the various tools available for smart contract development, and help you set up your environment.A Gentle Introduction to Ethereum Programming, Part 1 provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.For a more in-depth dive, you may read the guide Designing the Architecture for Your Ethereum Application, which discusses how to better structure your application and its relationship to the real world.SecurityThis project is maintained by OpenZeppelin with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.The OpenZeppelin Contracts Security Center contains more details about the secure development process.The security policy is detailed in SECURITY.md as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a bug bounty program on Immunefi to reward the responsible disclosure of vulnerabilities.The engineering guidelines we follow to promote project quality can be found in GUIDELINES.md.Past audits can be found in audits/.Smart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.OpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.ContributeOpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the contribution guide!LicenseOpenZeppelin Contracts is released under the MIT License.LegalYour use of this Project is governed by the terms found at www.openzeppelin.com/tos (the \""Terms\"")."
10,learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/blob/master/README.md,JavaScript,"Testing with JavaScript LabLearning GoalsRunning testsReading test resultsRunning TestsYou understand how to read tests; now it's time to run the tests.Recall that in the previous lesson, the tests were commented out. Be sure to forkand clone this lab into your local environment so you have the version of the testfile that is not commented out. (Return to the previous lesson if you need a reminderof how to do this.)Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code. (If you are using a different text editor, the commandwill be different.) Finally, run npm install to install the lab'sdependencies.What exactly do we mean by installing dependencies? Open the package.json fileand scroll down to the bottom. You'll see a list of 'DevDependencies'. What'slisted here are JavaScript packages: files or sets of files full of existing,reusable code. They are designed to be shared, allowing many developers to usethe same code in their own projects. The packages you see listed inpackage.json make it possible to run the lab's tests. In order to use thepackages, we have to install them; npm install does that for us.If you take a look at index.js and indexTest.js, you should see the samecode as in the previous lesson. The only difference is that the test code inindexTest.js is no longer commented out.Important: You should never need to make changes to test files unless alab's instructions specifically tell you to do so.To run the tests, run npm test in the terminal. That's it!The next step is learning how to read the results that the tests give you.Reading Results of TestsThe first time you run npm test, you should see something that looks likethis:> js-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40 and greater than 0    Message      ✓ gives the name and height  1 passing (552ms)  2 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)npm ERR! Test failed.  See above for more details.Note: If you also get an error that ends with \""unexpected character (after) at line 1, column 1 [parse.c:769] (Oj::ParseError)\"", make sure you've cloneddown the files for this lab, and are not running the tests on the files fromthe previous lesson.Let's break this down a bit. If you look about a third of the way down in theoutput, you'll see a summary of how the tests went:  1 passing (552ms)  2 failingGreat! We've already got one test passing! Now let's see how we failed the othertwo tests.  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)While there is no hard and fast rule, and there will be exceptions, it is mostoften best to address your test errors in order. So let's take a look at ourfirst error:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:456:21)Here is the specific error:      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +SusanIt tells us what the test is expecting (Expected 'Joe' to equal 'Susan') andthen gives us details about the expected and actual values. This shows youexactly how the value your code is returning (the actual value) differs fromwhat the test is looking for. Make sure you understand what this is telling you— it will come in handy in later labs!This error makes sense because we have the name variable set equal to \""Joe\"" inour index.js file. Let's change that line of code to set name equal to\""Susan\"" instead. Run the tests again by typing npm test in the terminal'scommand line (don't forget to save the file first!), and you should see thatwe are now passing 2 of the 3 tests!  what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40 and greater than 0    Message      ✓ gives the name and height  2 passing (736ms)  1 failing  1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)Woot! You passed another one. Now go ahead and try to pass the remaining test onyour own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Variable Not DefinedReferenceError: name is not definedThat one says that the name variable is not defined. That makes no sense! Weinitialized the name variable in index.js! What that actually means is thatthe test couldn't find the variable name. You'll get this error if the name ofone of your variables is different than the test is expecting. Check to makesure you used the correct variable names and look carefully for typos.Unexpected Identifier/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1cnst name = \""Susan\"";     ^^^^SyntaxError: Unexpected identifier    at wrapSafe (internal/modules/cjs/loader.js:979:16)    at Module._compile (internal/modules/cjs/loader.js:1027:27)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/indexTest.js:1:15)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36    at Array.forEach (<anonymous>)    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)    at internal/main/run_main_module.js:17:47npm ERR! Test failed.  See above for more details.Whoa! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake. It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to thecnst name = \""Susan\"" line of code. Take a look and read very carefully:const is misspelled. Whoops! Once we fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine-toothed comb... and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test isgiving us a unique message because it recognizes a problem. If we look at thistest in test/indexTest.js, we see this:describe(\""Height\"", () => {    it(\""is less than 40 and greater than 0\"", () => {      expect(height).toBeMoreThan(0)      expect(height).toBeLessThan(40);    });  });We can see that the word \""actual\"" in this case is referring to the heightvariable. The error message is telling us that height must be a number. Ifyou're seeing this, make sure that you have set the height variable to anumber that's less than 40 (e.g. 39), not a string (\""39\""). The testwill interpret the value as a string due to the quotation marks wrapping it.Optional Mocha ConfigurationIn this lab, we only had three tests to pass, but as you continue through thecurriculum you will encounter labs with many more tests. You can imagine thatthe test output could get very long, making it more difficult to focus in on howto fix a particular error.To help with this issue, there is some very simple setup you can put in place inMocha that will cause the tests to stop as soon as the first failing test isencountered.To implement this, open up the package.json file and find the test script. Itshould look something like this:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\""Add the --bail flag to the end of the line, inside the quotes:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""That's it!Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theComplete Your First Software Engineering Assignmentlesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.Note about the git push commandYou may recall from the Complete Your First Software EngineeringAssignment lesson that a different form of the git pushcommand was used:$ git push <remote> <branch>where remote is the \""alias\"" for the repo's url on GitHub, and branch is therepo's default branch (generally main for newer repos and master for olderones). For this lab, therefore, the full command would be:$ git push origin masterThis command tells git to push the code in the master branch of the local repoto the master branch of the remote repo identified by the origin alias.So why didn't you need to run that command?When you use the git clone command to clone down a repo from GitHub, gitautomatically assigns the \""origin\"" alias to the url you clone from, and usesthe default branch for that repo.As you work through the labs in this program, you should always:fork the lab's repo to your GitHub account, andclone that fork down to your local machine.As long as you always fork before you clone, it should be safe to run git push without specifying the remote and branch.If you want to verify that you're pushing to the right repo, you can use thegit remote command and include the -v flag:$ git remote -vorigin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (fetch)origin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (push)Here you can see that the origin alias points to your fork of the repo, soit's safe to run the shorter command, git push.ConclusionNow that you've gotten all your tests passing and submitted your work (andlearned a bit more about git push), you're ready to move on. Congratulations!You've solved your first JavaScript tests!"
11,RedHatTraining/DO101-apps,https://github.com/RedHatTraining/DO101-apps/blob/main/README.md,JavaScript,DO101-appsApps for the DO101 course.
12,aws-samples/aws-elastic-beanstalk-express-js-sample,https://github.com/aws-samples/aws-elastic-beanstalk-express-js-sample/blob/main/README.md,JavaScript,"AWS Elastic Beanstalk Node.js Sample AppThis repository contains a sample Node.js web application built using Express, meant to be used as part of the AWS DevOps Learning Path.SecuritySee CONTRIBUTING for more information.LicenseThis library is licensed under the MIT-0 License. See the LICENSE file."
13,learn-co-curriculum/phase-0-css-kitten-lab,https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/blob/master/README.md,JavaScript,"BONUS: CSS Kitten WheelbarrowLearning GoalsPosition elements absolutelyPractice using CSS selectorsIntroductionOh no! All of our kittens have escaped from the wheelbarrow and we need to getthem back in. Help collect all the kittens and put them into the wheelbarrowusing CSS selectors and absolute positioning.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Position Elements AbsolutelyThere are a few different ways we can use CSS to position elements in our webpages. Absolute positioning means placing the element in its containingelement in a certain location that will stay the same no matter where otherelements are placed. We can use absolute positioning to specify exactly wherein the document layout we want an element to be placed:Here's an example of what absolute positioning looks like in CSS:.parent-element {  position: relative;}.child-element {  position: absolute;  top: 50px;  left: 50px;}Note When using position: absolute, the browser calculates the positionusing top/left from the closest parent element that has a position specified —that's why in the example, we're specifying position: relative for theparent element. Check out the resources on positioning for more info on thisif you're interested!For this lab, we've done the work of calculating the absolute positions andcreating CSS rules for a bunch of different kitten image elements. It's your jobto use CSS selectors to apply the correct positioning to each of these elements.To get started with this lab, open the index.html file in the browser. Use thecomments in css/place-kitty.css to write the correct selectors to move eachkitty into the wheelbarrow.ConclusionNice work getting practice with more CSS selectors, and learning about absolutepositioning along the way! Now that you've seen absolute positioning in action,you'll have a better sense of when you might need to use it to build morecomplex CSS layouts in the future.ResourcesMozilla Developer Network: CSS SelectorsW3 CSS Selector ReferenceMozilla Developer Network: Positioning"
14,learn-co-curriculum/phase-0-pac-3-arithmetic-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/blob/master/README.md,JavaScript,"JavaScript Calculator Challenge LabLearning GoalsPractice doing math with JavaScriptPractice writing functions that do things with numbersPractice parsing strings as numbersIntroductionIn this lab, we're going to practice writing functions and manipulating numbersin JavaScript. First, though, we need to review some basic math. In this lab,we're going to learn about various arithmetic operators. What's an operator, yousay? It's a symbol that operates on one or more (usually two) objects —+ is a good example. The + operator says \""add what's to the left of + andwhat's to the right of + together.\""If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)As you read through this lesson, you're going to be adding your solutions toindex.js. You'll write a total of eight functions. Use the results of runningnpm test to guide you towards the right function names and functionality.Remember to run npm install first to install the dependencies.Basic MathThe most fundamental math operations work as one might expect in JavaScript: +adds two numbers; - subtracts one number from another; * multiplies twonumbers; and / divides one number by another.Give it a try: type each of the following math examples into the REPL console.You can use the embedded console below or open replit in a separate windowif you prefer.1 + 80; //=> 8160 - 40; //=> 202 * 3.4; //=> 6.85.0 / 2.5; //=> 2<iframe height=\""400px\"" width=\""100%\"" src=\""https://replit.com/@lizbur10/Sandbox?embed=true\"" scrolling=\""no\"" frameborder=\""no\"" allowtransparency=\""true\"" allowfullscreen=\""true\"" sandbox=\""allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\""></iframe>Go ahead and run npm test and take a look at the first failing test:  1) basic math functions       'add()' is a valid function:     ReferenceError: add is not defined      at Context.<anonymous> (test/indexTest.js:10:12)      at processImmediate (node:internal/timers:464:21)The description of the test, 'add()' is a valid function, along with the errormessage, referenceError: add is not defined, tells us that we need to define afunction add(). Go ahead and create the add() function in index.js. Thistest is only looking for the function to exist, so we can leave the code blockempty for now:function add() {  // we'll fill this in shortly}Once you've added the empty function, run npm test again; the first testshould be passing. Go ahead and get the next three tests passing as well beforemoving on.Once you have the first four tests passing, the first error you get should looksimilar to this:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected undefined to equal 1078      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Note: the test document is randomly creating numbers to pass as arguments tothe functions in this lab, so the specific values you see in your errors willbe different from what's shown in this lesson, and will be different each timeyou run the tests!The tests have found our add() function, getting us past the first test, andnow we need to write the code inside the function to return what the test isexpecting. Let's break down the information from our error:add(a, b) adds two numbers and returns the result:Error: Expected undefined to equal 1078The first line tells us what our function needs to do, and the second line tellsus the specific error that is being thrown. Any time you see the error \""Expectedundefined to equal\"" something, that means the test is expecting your function toreturn a value but it's currently not returning anything (undefined). Let'ssee if we can just get that specific error cleared. We won't worry about exactlywhat we're returning just yet:function add() {  return \""something\"";}Running the tests now we get:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected 'something' to equal 853      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Great! So now our function is returning \""something\"" instead of nothing! So thenext step is to look more closely at the test's description of the function tofigure out what should be returned:add(a, b) adds two numbers and returns the resultThe add(a, b) tells us the test is trying to pass two arguments to ourfunction, so let's get that set up:function add(a, b) {  return \""something\"";}The rest of the description tells us we need to add the two arguments togetherand return that value:function add(a, b) {  return a + b;}With this code, both tests for the add() function should now be passing!A Quick Note about Hard CodingThink back to the errors we were getting above, e.g., Expected undefined to equal 1078. One thing that might be tempting to do when addressing an errorlike this is to explicitly return exactly what the test is looking for:function add(a, b) {  return 1078;}This is what's known as hard coding and is virtually never what you shoulddo! If you think about it, it doesn't really make sense. We've created anadd() function that can take any two numbers as arguments but will alwaysreturn 1078. This makes it a pretty useless function. Instead, we want to createfunctions that will return the correct answer for whatever argument or argumentswe pass in.Go ahead and tackle the next three tests on your own. You should follow aprocess very similar to what we did above. Once you have those passing, continueto the next section.Math + AssignmentRecall that we can increment (++) and decrement (--) a number if it'sassigned to a variable. Don't forget to follow along in the REPL console.let number = 5;number++; //=> 5... hmmmmnumber; //=> 6 -- the number was incremented after it was evaluatednumber--; //=> 6number; //=> 5We can also put the increment and decrement operators before the number, inwhich case the number is evaluated after the operator is executed:--number; //=> 4number; //=> 4++number; //=> 5number; //=> 5But generally, you will see them placed after the number (and we recommendthat that's where you put them). If you're interested in the difference, take alook at the MDN documentation.And, while we're on the subject, you'll usually only want to use theseincrementors and decrementors when the shorthand makes what you're writingeasier to read (more on when exactly in a later lesson). Instead, it's best touse the basic arithmetic operators combined with =.Follow along in the REPL console. You can pick up where we left off with theprevious examples. Start by setting number equal to 5.+= modifies the value to the operator's left by adding to it the value tothe operator's right:number += 3; //=> 8-= modifies the value to the operator's left by subtracting from it thevalue to the operator's right:number -= 2; //=> 6*= modifies the value to the operator's left by multiplying it by the valueto the operator's right:number *= 10; //=> 60/= modifies the value to the operator's left by dividing it by the value tothe operator's right:number /= 5; //=> 12Note that these methods modify the variable in place. So, if we have twofunctions that depend on the same external variable, the order in which they arecalled matters. Follow along in the console://reset numbernumber = 10;function add5() {  return (number += 5);}function divideBy3() {  return (number /= 3);}divideBy3(); //=> 3.3333333333333335add5(); //=> 8.333333333333334// reset numbernumber = 10;add5(); //=> 15divideBy3(); //=> 5Because these methods are more explicit, we prefer += to ++ and -= to-- (usually).Okay, now we're ready to write solutions for the next two functions:increment(n) and decrement(n). As indicated by the tests, these methodsshould take a number as an argument, increment/decrement the provided value byone, and return the result.Parsing NumbersSometimes, we'll receive a number wrapped in quotes. We recognize it as anumber, but JavaScript will think it's a string. Luckily, JavaScript gives ustools to turn these strings into proper numbers (that is, numbers thatJavaScript understands).parseInt()The first such tool is the function parseInt(), which accepts two arguments:the value to parse and the base of the value being parsed (called the radix).Usually you will want to work with base 10, so a typical call to parseInt()looks like:parseInt(\""2\"", 10); //=> 2What happens if we pass a representation of a non-integer to parseInt()? Let'stry it:parseInt(\""2.2222\"", 10);If we enter the above in the REPL console, we will see that parseInt() forcesthe parsed number to be an integer — which makes sense when we think about it,right?What happens, though, if we pass utter nonsense to parseInt()? Go ahead andtry it — something like:parseInt(\""nonsense!\"", 10);What did it return? NaN? What is that?NaN stands for \""Not a Number\"" — pretty handy, right? This is the number (inthe JavaScript sense) that JavaScript returns when it can't determine a validvalue for a numeric operation.Note: You may see parseInt() used without a radix specified. In mostcases, the radix will default to 10, but not always! To be safe, you shouldalways specify a radix.parseFloat()Above, we saw that parseInt() lops off everything after the decimal point andonly returns integers. If we want to preserve decimals, we'll need to useparseFloat().Unlike parseInt(), parseFloat() accepts only a single argument, the thing tobe parsed. We can use it like so:parseFloat(\""80.123999\""); // 80.123999You now have the information you need to write the final two functions,makeInt(string) and preserveDecimal(string). makeInt(string) should takein a string, parse it into a base 10 integer and return it.preserveDecimal(string) should take in a string, parse it into a float andreturn it.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process.ResourcesMDN - parseInt()MDN - parseFloat()"
15,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
16,learn-co-students/js-if-else-files-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
17,learn-co-curriculum/phase-0-css-issue-bot-9000,https://github.com/learn-co-curriculum/phase-0-css-issue-bot-9000/blob/master/README.md,JavaScript,"CSS Validation Lab: Issue Bot 9000Learning GoalsChange invalid CSS to valid CSSIntroductionAlthough today's browsers are becoming more capable of handing errors in CSS,some errors are not always caught gracefully. This variable can make itextremely difficult to apply style or layout consistently. What can be done toquickly scan our CSS documents for issues? Let's practice using the W3C's CSSValidator!Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Change Invalid CSS to Valid CSSIn this lesson, we will be taking the invalid CSS in css/style.css andchanging it to valid.Open index.html in your browser. Notice how our styles don't look quiteright?Open css/style.css in your text editor.Visit the W3C CSS validatorhttp://jigsaw.w3.org/css-validator/#validate_by_input.If not already selected, click on the tab labeled \""By direct input\"".Copy the code from css/style.css and paste it into the text area. Click the\""Check\"" button.Use the error messages to correct the CSS.Repeat steps 3-5 until your readout states \""Congratulations! No ErrorFound.\"".Remember to check your progress in index.html in your browser!ConclusionWith a CSS validator, you can work your way through cleaning up errors in a CSSdocument and reduce the likelihood of display errors across platforms. Using theW3C CSS validator will help you quickly and efficiently troubleshoot your CSS.ResourcesW3C CSS Validator - Validate Direct Input"
18,learn-co-curriculum/phase-1-javascript-functions-continued,https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued/blob/master/README.md,JavaScript,"Functions: ContinuedLearning GoalsDefine a function using a function declarationDefine hoistingDefine function expressionDefine anonymous functionDefine a function using a function expressionDefine an IIFE: Immediately-Invoked Function ExpressionDefine function-level scopeDefine scope chainDefine closureIntroductionThis lab describes some more advanced concepts related to JavaScript functions.Be sure to take time to experiment or read up on a concept if you're notcomfortable with the idea before moving on. If you're struggling here, theremainder of this module will be challenging. Fix any gaps now before moving on.We also recommend that you complete the lab as you read through the sections.Reinforcing what you read by physically typing in the code will help make surethe concepts are locked in. We'll prompt you when it's a good time to shiftmodes from \""reading along\"" to coding.Getting StartedIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Define a Function Using Function DeclarationIn JavaScript, the most common way to define functions is with a functiondeclaration:function razzle() {  console.log(\""You've been razzled!\"");}The word razzle becomes a pointer to some stored, potential,not-yet-actually-run bit of work (the function). We use the pointer to callor invoke the function. We call the function by adding () after thepointer.function razzle() {  console.log(\""You've been razzled!\"");}razzle();//=> \""You've been razzled!\""Interestingly, you can write function declarations after you call them:razzle(); //=> \""You've been razzled!\""function razzle() {  console.log(\""You've been razzled!\"");}Functions can be passed arguments, given default arguments, etc. Here's abrief code synopsis:function razzle(lawyer = \""Billy\"", target = \""'em\"") {  console.log(`${lawyer} razzle-dazzles ${target}!`);}razzle(); //=> Billy razzle-dazzles 'em!razzle(\""Methuselah\"", \""T'challah\""); //=> Methuselah razzle-dazzles T'challah!LAB: Implement a function called saturdayFun. It should return a Stringlike \""This Saturday, I want to ....!\"" Fill in the ... with the activitythat's passed in as the first parameter. If nothing is passed in, default to\""roller-skate\"". Run npm test to verify you've gotten the first set oftests passing before continuing with the lesson.Define HoistingJavaScript's ability to call functions before they appear in the code iscalled hoisting. For hoisting to work, the function must be defined using afunction declaration.Define Function ExpressionWe've learned that programming languages feature expressions: arrangements ofconstants, variables, and symbols that, when interpreted by the language,produce a value. To review, open up your browser console and type in theseexamples:1 + 1; //=> 2\""Razzle \"" + \""dazzle!\""; //=> \""Razzle dazzle!\""The examples above are expressions that return primitive values, butJavaScript also has function expressions that look like this:function() {  console.log(\""Yet more razzling\"");}The value returned by this expression is the function itself. Go ahead andenter the above into the browser console; you should see the following:Uncaught SyntaxError: Function statements require a function nameThe problem is that, when the function expression appears by itself as shownabove, JavaScript does not recognize it as a function expression; it insteadinterprets it as a function declaration that's missing its name. One way to tellthe JavaScript engine that it's a function expression is to use thegrouping operator () to wrap the entire thing:(function () {  console.log(\""Yet more razzling\"");});Recall that the grouping operator is usually used in arithmetic operations totell the JavaScript engine to evaluate the value that's inside it first. It'sserving a similar purpose in this case: it's telling JavaScript to interpretwhat's inside the parentheses as a value. With the grouping operator in place,the JavaScript engine recognizes our function as a function expression. Enterthe function into your console again, this time using the grouping operator. Youshould see the following:ƒ () {  console.log(\""Yet more razzling\"");}JavaScript now correctly shows us the return value of our function expression: afunction (indicated by the ƒ ()) storing the work of logging our message.Define Anonymous FunctionAn anonymous function is, quite simply, a function that doesn't have a name:function() {  console.log(\""Yet more razzling\"");}Unlike a function declaration, there's no function name in front of the ().Note, however, that if we don't assign a name to the function, we have no way tocall it. We lose access to our function immediately after it's created. So howcan we invoke an anonymous function? We've seen one way before: we can use it asa callback function. For example, you'll often see anonymous functions passed asan argument to an event listener:const button = document.getElementById(\""button\"");button.addEventListener(\""click\"", function () {  console.log(\""Yet more razzling\"");});Our anonymous function is being passed as an argument to addEventListener. TheJavaScript engine \""stores it away\"" as work to be executed later, when the buttonis clicked.Define a Function Using a Function ExpressionAnother way we can solve the problem of accessing an anonymous function is bydeclaring a variable and assigning the function as its value. Recall that anyexpression can be assigned to a variable; this includes function expressions:const fn = function () {  console.log(\""Yet more razzling\"");};The code above defines our function using a function expression. If we askJavaScript what's in fn, it tells us:fn; //=> ƒ () { console.log(\""Yet more razzling\"") }Here, fn is a pointer to the stored block of work that hasn't yet beeninvoked. Just as with function declaration, to actually do the work, we needto invoke or call the function. We do this by adding () to the end of our\""pointer\"", the variable name:const fn = function () {  console.log(\""Yet more razzling\"");}; //=> undefinedfn; //=> ƒ () { console.log(\""Yet more razzling\"") }fn(); // \""Yet more razzling\""Also as with a function declaration, if we need to pass arguments to thefunction, we would include those in the parentheses when we call the function.We now know how to define a function as a function expression. Very importantly,function expressions are not hoisted. The same is true for any variableassignment: if we assign a String or the result of an arithmetic expression toa variable, those assignments are not hoisted either.LAB: Implement a function expression called mondayWork. The functionshould return a String like \""This Monday, I will ... .\"" Fill in the ...with the activity that's passed in as the first parameter. If nothing is passedin, default to \""go to the office\"". Run npm test to verify you've gottenthis set of tests passing before continuing with the lesson.Define an IIFE: Immediately-Invoked Function ExpressionAnother way to invoke an anonymous function is by creating what's known as animmediately-invoked function expression (IIFE).As a thought experiment, consider what happens here:(function (baseNumber) {  return baseNumber + 3;})(2); //=> ???We recognize the first () as the grouping operator that tells the JavaScriptengine to interpret the contents as a value — in this case, a functionexpression. What this means is that, in the IIFE statement, the value returnedby the first set of parentheses is an anonymous function, which can be invoked(immediately).The second () are the () of function invocation. When we put themimmediately after the first set of parentheses, we're invoking the function thatthose parentheses return immediately after defining it. Try it out in thebrowser console:(function (baseNumber) {  return baseNumber + 3;})(2); //=> 5Interestingly, any variables, functions, Arrays, etc. that are definedinside of the function expression's body can't be seen outside of theIIFE. To see this, check the value of baseNumber in the console. It's likeopening up a micro-dimension, a bubble-universe, doing all the work you couldever want to do there, and then closing the space-time rift. We'll see some ofthe practical power of \""hiding things\"" in IIFEs a little later in this lesson.Define Function-Level ScopeJavaScript exhibits \""function-level\"" scope. This means that if a function isdefined inside another function, the inner function has access to all theparameters of, as well as any variables defined in, the outer function. Thisworks recursively: if we nest a third function inside the inner function, itwill have access to all the variables of both the inner and outer enclosingfunctions. Each of the enclosing parents' scopes are made available via thescope chain. We will define the scope chain a bit later in this lesson. Let'sstart by seeing it in action.ASIDE: This is where people really start to get awed by JavaScript.Consider this code:function outer(greeting, msg = \""It's a fine day to learn\"") {  // 2  const innerFunction = function (name, lang = \""Python\"") {    // 3    return `${greeting}, ${name}! ${msg} ${lang}`; // 4  };  return innerFunction(\""student\"", \""JavaScript\""); // 5}outer(\""Hello\""); // 1//=> \""Hello, student! It's a fine day to learn JavaScript\""Let's break this down:We call outer, passing \""Hello\"" as an argument.The argument (\""Hello\"") is saved in outer's greeting parameter. Theother parameter, msg, is set to a default value.Here's our old friend the function expression. It expects two arguments, tobe stored in the parameters name and lang, and lang is assigned thedefault value of \""Python\"". The function expression itself is saved in thelocal variable innerFunction.Inside innerFunction we make use of its parameters, name and lang,as well as the greeting and msg parameters defined ininnerFunction's containing (parent) function, outer. innerFunction hasaccess to those variables via the scope chain.Finally, inside outer, we invoke innerFunction, passing arguments thatget stored in innerFunction's name and lang parameters.This might look a little bit weird, but it generally makes sense to ourintuition about scopes: inner things can see their parent outer things.Note that currently, the values of the arguments being passed to innerFunctionare part of the definition of outer. In order to change those values wehave to modify the outer function. This is not ideal.With a simple change, something miraculous can happen. Rather than having outerreturn the result of calling innerFunction, let's have it return the functionitself:function outer(greeting, msg = \""It's a fine day to learn\"") {  const innerFunction = function (name, lang = \""Python\"") {    return `${greeting}, ${name}! ${msg} ${lang}`;  };  return innerFunction;}The return value of outer is now an anonymous function. To invoke it, weupdate the function call as follows:outer(\""Hello\"")(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""The function call is processed by the JavaScript engine from left to right.First, outer is called with the argument \""Hello.\"" The return value of callingouter(\""Hello\"") is itself a function and, therefore, can itself be called. Wedo this by chaining on the second set of parentheses. This is basically the sameconcept as assigning a function expression to a variable and using the variablename followed by () to invoke the function. You can almost think ofouter(\""Hello\"") as the \""name\"" of the function that's returned by outer. It'sthe same as if we did this:const storedFunction = outer(\""Hello\"");storedFunction(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""Note that we are no longer calling innerFunction from inside outer.Amazingly, the code works exactly the same: it still has access tothose parent function's variables. It's like a little wormhole in space-time tothe outer's scope!We can tighten this code up a bit more: instead of assigning the functionexpression to innerFunction and returning that, let's just return the functionexpression.function outer(greeting, msg = \""It's a fine day to learn\"") {  return function (name, lang = \""Python\"") {    return `${greeting}, ${name}! ${msg} ${lang}`;  };}outer(\""Hello\"")(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""To review: we first called outer, passing in the argument \""Hello\"". outerreturned an anonymous function inside which the default value of msg andthe passed-in value of greeting have now been set. It's almost as if outerreturned:function(name, lang=\""Python\"") { // The \""inner\"" function  return `Hello, ${name}! It's a fine day to learn ${lang}`}We invoked this returned \""inner\"" function\"" by adding the second set ofparentheses and passing the arguments \""student\"" and \""JavaScript\"", which werestored in name and lang. This filled in the final two values inside of thetemplate string and returned:\""Hello, student! It's a fine day to learn JavaScript\"";Define ClosureIn the previous example, we could call the \""inner\"" function, the anonymousfunction, a \""closure.\"" It \""encloses\"" the function-level scope of its parent.And, like a backpack, it can carry out the knowledge that it saw — even whenyou're out of the parent's scope.Recall the IIFE discussion. Since what's inside an IIFE can't be seen, if wewanted to let just tiny bits of information leak back out, we might want topass that information back out, through a closure.const array = (function (thingToAdd) {  const base = 3;  return [    function () {      return base + thingToAdd;    },    function () {      return base;    },  ];})(2);Note that the value on the right of the = in the first line is a functionexpression. That function takes a single argument and returns an array thatcontains two functions. The (2) after the function expression executes thatfunction (immediately), and the two inner functions are stored in the arrayvariable.Go ahead and copy the code above into your browser console and take a look at thevalues of the two elements of array. You should see the following:array[0]; //=> ƒ () { return base + thingToAdd; }array[1]; //=> ƒ () { return base; }However, if you try looking at the value of base in the console you'll get areference error: the value of base is not accessible outside the function it'sdefined in. Now go ahead and call the two returned functions; you should seethe following:array[0](); //=> 5array[1](); //=> 3The two functions being returned in array are closures; they have accessto the base variable because it's defined in their parent function. Whenthey're executed, they \""let out\"" the values of the sum and the original basenumber, allowing us to see them.Define Scope ChainThe mechanism behind all the cool stuff we just saw is the scope chain whichallows functions defined inside functions (inside functions) to access all theirparent (and grandparent) scopes' variables. Here's a simple example:function demoChain(name) {  const part1 = \""hi\"";  return function () {    const part2 = \""there\"";    return function () {      console.log(`${part1.toUpperCase()} ${part2} ${name}`);    };  };}demoChain(\""Dr. Stephen Strange\"")()(); //=> HI there Dr. Stephen StrangeWhen it is called, the innermost function has access to name, part1, andpart2 through the scope chain. As a result, when the console.log()statement is run, the string includes all three values. That's awesome wormhole,space-time magic!LAB:Implement a function called saturdayFun:It should define a function.It uses a default argument, 'roller-skate' when no arguments are passed.It allows the default argument to be overridden.Implement a function called mondayWork:It should define a function.It uses a default argument, 'go to the office' when no arguments are passed.It allows the default argument to be overridden.Implement a function called wrapAdjective:It should return a function. This \""inner\"" function should:take a single parameter that should default to \""special\"". Name ithowever you wish.return a String of the form \""You are ...!\"" where ... should be theadjective this function received wrapped in visual flair.It should take as parameter a String that will be used to create visual flair.You may call the parameter whatever you like, but its default value shouldbe \""*\"".Call example: const encouragingPromptFunction = wrapAdjective(\""!!!\"")Thus a total call should be:wrapAdjective(\""%\"")(\""a dedicated programmer\""); //=> \""You are %a dedicated programmer%!\""Run npm test to verify you've gotten this set of tests passing. Once you'redone, commit and push your changes up to GitHub, then submit your work to Canvasusing CodeGrade.ConclusionIn this lesson, we've covered the basics of function declaration, invocation,and function scope. As a refresher on your skills, we've provided a simple labto make sure that you're set for the new information coming up in the rest ofthis module.ResourcesWikipedia — First-class functionStackOverflow — What is meant by 'first class object'?Helephant — Functions are first class objects in javascript (Wayback Machine)2ality — Expressions versus statements in JavaScriptMDN — FunctionsMDN — Statements and declarations"
19,learn-co-students/js-what-is-a-test-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-what-is-a-test-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Running TestsYou understand how to read tests, now it's time to run the tests. We've made itfairly easy. In the same terminal that you used to write node tests.js ornode index.js now, you just need to write learn. That's it! No matter whatthe lab, our Learn command will figure out where you are and run the appropriatetests and give you results.Speaking of results... let's talk about how to read the results that tests giveyou.Reading Results of TestsIf we run learn in our terminal right now, you'll get a bunch of failed tests.It will look something like this:Output from running learn in Terminal> js-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/js-what-is-a-test-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40    Message      3) gives the name and height  0 passing (293ms)  3 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  3) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Joe'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Let's break this down a bit. If you look at about a third of the way down theoutput, you'll see a summary of how the tests went:  0 passing (293ms)  3 failingThat should be fairly obvious. You passed 0 tests and failed 3 tests. Not agreat start, but plenty of room for improvement. Let's see how we failed thethree tests.1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  3) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Joe'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)This is all three of the fails. If we break it down even further we can see justthe test for name:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)The tests expects name to return \""Susan\"". But if you look at theError: Expected 'Joe' to equal 'Susan' line you can see that it received Joeand expected Susan. That makes sense! In our index.js file we have thename variable equal \""Joe\"". If you change that line to be equal to \""Susan\""and then run the tests again by typing learn in the command line you shouldsee progress!what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40    Message      2) gives the name and height  1 passing (544ms)  2 failing  1) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Susan'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)Woot! You passed one. Now you can go ahead and try and pass all of the othertests on your own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Expected UndefinedError: Expected undefined to equal 'Susan'That one says that it expected undefined to equal Susan. That makes no sense!You didn't set the name variable to undefined. Why does it think that nameis equal to undefined? What that actually means is that the test couldn't findthe variable name. This can happen if you by accident rename the variable.Taking a look at index.js I made this mistake: var nae = \""Susan\"". Whoops! IfI change that back to name everything works. :)Unexpected Identifier/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/index.js:2vr name = \""Susan\""   ^^^^SyntaxError: Unexpected identifier    at createScript (vm.js:56:10)    at Object.runInThisContext (vm.js:97:10)    at Module._compile (module.js:542:28)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.require (module.js:497:17)    at require (internal/module.js:20:19)    at Object.<anonymous> (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/test/index-test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.require (module.js:497:17)    at require (internal/module.js:20:19)    at /Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:220:27    at Array.forEach (native)    at Mocha.loadFiles (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:217:14)    at Mocha.run (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:469:10)    at Object.<anonymous> (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/bin/_mocha:404:18)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3Woah! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake, It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to the vr name = \""Susan\"" line of code. Take a look and read very carefully. Imisspelled var. Whoops! If you fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine toothed comb...and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test is giving us a unique message because it recognizes a problem. If we look at this test in test/index-test.js, we see this:  describe('Height', () => {    it('is less than 40', () => {      expect(index.height).toBeLessThan(40)    })  })The word \""actual\"" is no where to be found - index.height is what is beingtested. The test expects index.height to be less than 40. The error messageis telling us that index.height must be a number. If you're seeing this,make sure that you have set index.height to be equal to the number 40,not the string \""40\"". Ruby will interpret the value as a string due to thequotation marks wrapping it.ConclusionOnce you have all three tests passing, run learn submit to register completion. Congratulations, you've solved your first tests! On to many more!"
20,linuxacademy/cicd-pipeline-train-schedule-git,https://github.com/linuxacademy/cicd-pipeline-train-schedule-git/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gitThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
21,hasura/imad-app,https://github.com/hasura/imad-app/blob/master/README.md,JavaScript,imad-appIMAD course application.
22,videojs/video.js,https://github.com/videojs/video.js/blob/main/README.md,JavaScript,"Video.js - HTML5 Video PlayerVideo.js is a web video player built from the ground up for an HTML5 world. It supports HTML5 video and Media Source Extensions, as well as other playback techs like YouTube and Vimeo (through plugins). It supports video playback on desktops and mobile devices. This project was started mid 2010, and the player is now used on over 50,000 100,000 200,000 400,000 700,000 websites.Table of ContentsQuick StartContributingCode of ConductLicenseQuick StartThanks to the awesome folks over at Fastly, there's a free, CDN hosted version of Video.js that anyone can use. Add these tags to your document's <head>:<link href=\""//vjs.zencdn.net/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""//vjs.zencdn.net/8.3.0/video.min.js\""></script>For the latest version of video.js and URLs to use, check out the Getting Started page on our website.Video.js version 7 (and newer) CDN builds do not send any data to Google Analytics.In older versions of Video.js (6 and earlier), in the vjs.zencdn.net CDN-hosted versions we include a stripped down Google Analytics pixel that tracks a random sampling (currently 1%) of players loaded from the CDN. This allows us to see (roughly) what browsers are in use in the wild, along with other useful metrics such as OS and device. If you'd like to disable analytics, you can simply include the following global before including Video.js via the free CDN:<script>window.HELP_IMPROVE_VIDEOJS = false;</script>Alternatively, you can include Video.js by getting it from npm, downloading from GitHub releases or by including it via unpkg or another JavaScript CDN like CDNjs. These releases do not include Google Analytics tracking at all.<!-- unpkg : use the latest version of Video.js --><link href=\""https://unpkg.com/video.js/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js/dist/video.min.js\""></script><!-- unpkg : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://unpkg.com/video.js@8.3.0/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js@8.3.0/dist/video.min.js\""></script><!-- cdnjs : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video.min.js\""></script>Next, using Video.js is as simple as creating a <video> element, but with an additional data-setup attribute. At a minimum, this attribute must have a value of '{}', but it can include any Video.js options - just make sure it contains valid JSON!<video    id=\""my-player\""    class=\""video-js\""    controls    preload=\""auto\""    poster=\""//vjs.zencdn.net/v/oceans.png\""    data-setup='{}'>  <source src=\""//vjs.zencdn.net/v/oceans.mp4\"" type=\""video/mp4\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.webm\"" type=\""video/webm\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.ogv\"" type=\""video/ogg\""></source>  <p class=\""vjs-no-js\"">    To view this video please enable JavaScript, and consider upgrading to a    web browser that    <a href=\""https://videojs.com/html5-video-support/\"" target=\""_blank\"">      supports HTML5 video    </a>  </p></video>When the page loads, Video.js will find this element and automatically setup a player in its place.If you don't want to use automatic setup, you can leave off the data-setup attribute and initialize a <video> element manually using the videojs function:var player = videojs('my-player');The videojs function also accepts an options object and a callback to be invokedwhen the player is ready:var options = {};var player = videojs('my-player', options, function onPlayerReady() {  videojs.log('Your player is ready!');  // In this context, `this` is the player that was created by Video.js.  this.play();  // How about an event listener?  this.on('ended', function() {    videojs.log('Awww...over so soon?!');  });});If you're ready to dive in, the Getting Started page and documentation are the best places to go for more information. If you get stuck, head over to our Slack channel!ContributingVideo.js is a free and open source library, and we appreciate any help you're willing to give - whether it's fixing bugs, improving documentation, or suggesting new features. Check out the contributing guide for more!Video.js uses BrowserStack for compatibility testing.Code of ConductPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.LicenseVideo.js is licensed under the Apache License, Version 2.0."
23,education/GitHubGraduation-2021,https://github.com/education/GitHubGraduation-2021/blob/main/README.md,JavaScript,"UpdatesFebruary 7, 2022Thank you all for your patience as swag ships! It's been fun to see your posts on social media as the cards arrive.Haven't received swag yet?We're so sorry to hear! Please fill out the trading card replacement form before March 1 and we'll re-ship your card by March 15, 2022.<3GitHub EducationDecember 2, 2021Swag has shipped! 🎉🎉🎉🎉🎉🎉🎉Keep an eye out for something fun in the mail. If you live in the United States, this means anytime from today through next week. If you live internationally, expect 3-4 weeks for shipments to arrive.If you have not received your swag by January 31, 2022, head back to this repository and we'll open a new form to replace lost or damaged shipments.Happy coding 💖GitHub EducationOctober 11, 2021First off, THANK YOU 🙌 all for your patience. Production and shipping around the world are still quite delayed, but we are getting closer. We are 3-weeks away from finishing printing trading cards. Once printed, we'll work hard to get everything into envelopes and shipped straight to you 💌. For international shipments, this can mean 2-3 additional weeks. Anyone in the United States can expect something in the mail within a week after printing.If you need to update your shipping information, we can for three more weeks. Please submit your updated address in the Notes section of the question form.Congrats again on your graduation 💖@elisemoe + @juanpfloresMay 27, 2021And that’s a wrap on the GitHub 2021 Yearbook ✨✅Submissions to the repository are closed as of 12:00pm PT. Yearbook will be live on Tuesday June 1. Check back here for updates!If you believe there has been a mistake with reviews, please let us know in an Issue. All Issues will be responded to before the event on June 5.Don’t forget to save the date and follow us on Twitch for notifications! See you on stage at graduation 👋May 14, 2021Hi Octograds!You all have made our week with your messages, pull requests, and support for each other 💖 We are honored to be a part of your graduation experience.We have merged 5,000 pull requests and swag eligibility is now closed. If your pull request is merged as of today (May 14), we will send you a custom holographic trading card in the mail. Please have patience. Swag production and shipping takes time and we will post updates to this repository as we have them. It is unlikely you will receive a shipment before the event.In the meantime, be sure to update your GitHub profile image and bio! We will use both to create your custom card.Our team is offline this weekend and will be back, on Monday (PT), to review pull requests to join the yearbook and \""walk\"" the stage at GitHub Graduation on June 5. Pull requests are no longer eligible for swag but we would love to have you a part of the ceremony🎓! We will review all pull requests submitted before May 27 at 12:00pm PT (May 28 at 12:30am IT) to join the event.Think there was a mistake? Send us a link to any relevant pull requests and Issues, along with a description of events. This does not include pull requests accidentally closed and recreated at a later time, or pull requests not eligible for merge before May 14 at 5:52pm PT (when the 5,000th pull request was merged). Use this form only for scenarios where you believe our bot or team made a mistake.Looking for more ways to support the Class of 2021? Here are a few ideas:👩‍💻 Continue providing feedback on pull requests to help your classmates get their pull request ready to merge. We appreciate your help and love seeing the magic of social coding.✍️ Share your message to a teacher or educator who has supported your journey as a student. Note: these submissions no longer qualify for swag but we would love to hear your stories nonetheless!📪 Have patience. Our team is working hard to get through your pull requests and provide everyone with the feedback needed to join the event. GitHub Actions saved our team an enormous amount of time managing reviews this year but, as much as we love our automations, this is still a manual process to ensure the Code of Conduct is followed and the event can be enjoyed by all.We can’t wait to see you “on stage” June 5! Follow us on Twitch for notification and save the date. In the words of @juanpflores, let’s make this AWESOME.❤️  @elisemoe + GitHub EducationThis repository contains the yearbook for GitHub Graduation 2021. By issuing a pull request to this repository, you can request to be added to the Class of 2021.The first 5,000 pull request successfully merged into the repository by May 27 will receive custom swag in the mail.Privacy Notice 👀Consider that all the information that you add to this repository will be publicly available.If you don't feel comfortable with displaying your full name, you can include a short name or nickname instead.Who can apply 📝We invite any student who has graduated, or plans to graduate, in 2021 to apply to the yearbook. This includes bootcamps, code camps, high school graduates, Master's graduates, Ph. D. Graduates, etc.The eligibility criteria are -You have been verified as a student with the GitHub Student Developer Pack. Not yet a part of the Pack? Apply here.You have not participated in a past GitHub Graduation event.How to join the Class of 2021Here are two steps to join graduation and receive swag in the mail.Fill out the swag shipment form. Note: the form needs to be done before creating your Pull Request and does not guarantee participation in the event. Your PR must be successfully merged to be included and only the first 5,000 merged PRs will receive swag.Submit a pull request with your profile information to join the Yearbook and be highlighted in the graduation event.(optional) Level up your swag and make an additional appearance at graduation by sharing a story of a teacher who has made an impact in your education. More info below!Save the date (Google calendar invite) and attend graduation 🥳1. Fill out the swag shipment form.Information submitted to the swag shipment form will only be used to ship swag for graduation. Submitting the form does not guarantee you will receive swag in the mail. Only the first 5,000 graduates to successfully merge their pull request to the Yearbook will receive a shipment.2. Add yourself to Yearbook 🏫Replace <YOUR-USERNAME> with your GitHub username in this guide.First, create the folder _data/YOUR-USERNAME/Fork this repository, create a new folder inside the _data folder, and name it with your username. It should look something like this _data/<YOUR-USERNAME>/. Ex._data/MonaTheOctocat/Second, add your profile informationCreate a markdown file in your folder following the convention <YOUR-USERNAME>.md. Ex._data/MonaTheOctocat/MonaTheOctocat.mdCopy the next template into your file, delete the boilerplate data and fill the information with yours.---name: FULLNAME-OR-NICKNAME # No longer than 28 charactersinstitution: INSTITUTION-NAME 🚩 # no longer than 58 charactersquote: YOUR-SENIOR-QUOTE # no longer than 100 characters, avoid using quotes(\"") to guarantee the format remains the same.github_user: YOUR-GITHUB-USERNAME---Do not use special characters in the template above.Third, submit your Pull RequestGo through the checklist on the pull request template to guarantee your submission is valid. The GitHub Education team will review your application, approve and merge your submission if everything is correct. Otherwise, you will get notified of the changes requested in the pull request comment section.3. Share your story of a teacher who made an impact 👩‍🏫👨‍🏫This year, we want to hear stories of teachers or educators who made a difference on your journey in 2021. Similar to last year's \""A Message to the Octograds\"" video, we're putting together a compilation of your stories. Every participant will level up their swag with an extra special design. To take part,Fill out the video release form.Record and submit your video message. (full instructions for recording)Not sure what to say? Even a \""thank-you teachers!\"" in your local language is appreciated to help us in honoring educators around the world.Share your message to teachers.A note on swag 🛍The first 5,000 successfully merged PRs will receive a custom holographic developer trading card with their GitHub status in the mail.What does this mean? We will use your public GitHub profile information to create a trading card. To ensure your trading card best reflects you, please make sure your GitHub profile picture and bio are up to date and what you would like shown on the card.Graduation Day 🎓Don't forget to watch the livestream!📆 Saturday, June 5, 2021⏰ 9:00am PT | 21:30 IST📍 Follow the GitHub Education Twitch Channel for notifications.📎 Add the event to your calendar (Google calendar invite)."
24,learn-co-curriculum/phase-0-pac-3-what-is-a-test,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test/blob/master/README.md,JavaScript,"Testing with JavaScriptLearning GoalsLearn about testing in JavaScriptIntroductionMany of the labs you will complete in this program use tests. Passing the testsverifies that the code you write behaves as desired and produces the expectedresults. But writing tests is also a way to provide specifics about exactly howthe code should function. In a common development strategy known as test-drivendevelopment (or TDD), programmers first write the test for a specificfunction of the code then write the code to make the tests pass. TDD isconsidered the most reliable methodology for delivering quality code.What this means is that the results of running the tests will be an importanttool in figuring out how to get those tests passing. Code testing can feel likean abstract concept at first, but it's worth starting to learn how it works.When you're having difficulty passing a test, being able to read and understandthe test output — and the tests themselves — can be an invaluable skill.Getting StartedThe lesson is set up as a code-along, so you'll first need to fork and cloneit to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. If necessary, select yourpersonal GitHub account as the Owner of the new fork. Click the Create forkbutton.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.Then, in your terminal:3. Make sure you're in Development/code/se-prep (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-0-pac-3-what-is-a-test.gitREMEMBER: Don't type the $. That's the universal symbol for a commandprompt. It's how technical documentation says \""Here's a thing for the shell toprocess.\""4. The previous command will create a folder in the se-prep foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-0-pac-3-what-is-a-test$ code .Open up index.js in your code editor. You are going to see mostly familiarthings:const name = \""Joe\"";const height = 74;const message = `${name} is ${height} inches tall`;module.exports = { name, height, message };This should all look familiar except for that last line. You don't need to worryabout it for now — just know that line of code makes the variables available tothe test file.Take a look at the message variable:const message = `${name} is ${height} inches tall`;We can use console.log to take a look at the value of the message variable.To do that, first type console.log(message); on the last line of index.jsand save the file. Next, navigate to the terminal, and type the followingcommand in the command line and hit enter (be sure you're still in the lab'sdirectory):$ node index.jsThe node command executes the code in whatever file you specify (in thiscase, index.js). You should see \""Joe is 74 inches tall\"" logged in theterminal.Top Tip: console.log is one of the debugging tools you can use as you'rewriting your code. Logging a variable and executing the code will allow you toverify that the value of the variable is what you're expecting.In the line of code above, we are using string interpolation to inject thevalues of the name and height variables into the message. Recall that, forthis to work, you have to wrap the entire string in backticks and wrap thevariables themselves in ${}. If you'd like a refresher, try leaving out the${}s or switching to a different type of quotes and run your code again to seewhat the value of message is. The backticks and the ${} tell Javascript tograb the value inside the variable, not just that variable name.The TestsWe have our code, now let's take a look at the tests. They are located in thetest folder inside a file named indexTest.js. In this lesson we'll getfamiliar with the tests, and then run them in the next lesson.const { name, height, message } = require(\""../index.js\"");/*describe('what-is-a-test', () => {  describe('Name', () => {    it('returns \""Susan\""', () => {      expect(name).toEqual('Susan')    })  })  describe('Height', () => {    it('is less than 40', () => {      expect(height).toBeLessThan(40)    })  })  describe('Message', () => {    it('gives the name and height', () => {      expect(message).toInclude(name)      expect(message).toInclude(height)    })  })})*/In the first line, we're enabling the tests to access the variables inindex.js. You don't need to worry about exactly how this works at this point —just know that the module.exports and require keywords allow us to accessvariables written in the index.js file from within the test file.The next thing to notice is that the test code itself is commented out using the/* and */ block commenting syntax. This is because, as mentioned above, wedon't actually want to run the tests yet. We will run the tests in the lab thatfollows this lesson; when you fork and clone that version of the files, you'llsee that the /* and */ have been removed.Next, note that the test code consists of three individual tests (each startingwith describe) nested inside a block for the tests as a whole (also startingwith describe).The first grouping is testing our name variable:describe(\""Name\"", () => {  it('returns \""Susan\""', () => {    expect(name).toEqual(\""Susan\"");  });});Take a look at the line that begins with expect. If we read it out loud, weget \""Expect name to equal Susan\"". That's exactly what it's saying! If wecontinue down to the Height section you'll see this code:describe(\""Height\"", () => {  it(\""is less than 40\"", () => {    expect(height).toBeLessThan(40);  });});Again, reading the line starting with expect out loud, we get \""Expect heightto be less than 40.\"" Again, this is just what the test is checking. Let's lookat the final one:describe(\""Message\"", () => {  it(\""gives the name and height\"", () => {    expect(message).toInclude(name);    expect(message).toInclude(height);  });});This one has two expect statements. If you read them out as English you'lldiscover that the tests expect the value of index.message to include bothindex.name and index.height.OK great. You now understand what the tests are saying. In the next lesson weare going to cover how to run them, and then you will solve the lab!Submitting the Code-AlongEven though you didn't need to write any code for this lesson, you'll still needto submit it using CodeGrade in order for it to be marked as complete in Canvas.Scroll to the bottom of this lesson page in Canvas and click the button labeled\""Load Testing With JavaScript in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories. Find the repo for this lesson and clickConnect. When you get the message that your repo has been connected, click onthe embedded link, then the \""AutoTest\"" tab. After a few moments, you should seethe green checkmark in the \""Pass\"" column, indicating that you've successfullysubmitted the lesson."
25,learn-co-curriculum/phase-0-html-images-lab,https://github.com/learn-co-curriculum/phase-0-html-images-lab/blob/master/README.md,JavaScript,"HTML ImagesLearning GoalsRecognize the img tagUse img tag attributesCreate imagesIntroductionImages are absolutely critical to making appealing and engaging websites. Canyou imagine the web without them? No cat memes. No animated dancing bananas! NoInstagram, at all. The internet would be a pretty boring and sad place!In this lesson, we will be discussing how to include images in your HTML, alongwith some important attributes of the tag. With images, you can make your webpages much more engaging and visually appealing.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize the img TagImages are inserted into HTML using the img tag. The tag can display a varietyof image types, including animated GIFs, bitmaps and vector graphics, thoughmost often, the images we see on the internet are JPEG and PNG files.The img tag is self closing, meaning it doesn't wrap around content or text.Instead, the relevant information is stored in attributes within the tag itself.There are two main attributes, src, the source of the image, and alt, thealternate text.Use the img Tag AttributesThe Image Source AttributeThe src attribute provides the relative path or URL to the image file we wantto display. The image file can be local; for example, if you're publishing awebsite and have your images stored in a folder within your file structure, yoursource may look like this:<img src=\""../images/my_company_logo.png\"" />However, it's very common, even when publishing your own websites, to haveimages hosted somewhere else on the internet. In these situations, we need toprovide a full URL as the source:<img src=\""https://i.imgur.com/H1qsYEl.png\"" />The src attribute is always necessary, as without it, the img tag would havenothing to display.The Image Alt AttributeThe alt attribute contains text relevant to the image we're displaying, andwill appear in its place if the image fails to load.Alt text is important for screen readers for the visually impaired, as the textwill be read out loud to the site visitor. Alt text also improves accessibilityfor non-disabled users, who will get a message if the image fails to load. It isespecially important if the image is used as additional content that expandsupon the written content.Alt text on a failed image will appear along with a small 'broken image' icon:To include an alt attribute, add it in along with the src attribute:<img  src=\""https://i.imgur.com/H1qsYEl.png\""  alt=\""comedic crow gets wholesome support\""/>Note that we've separated out each attribute on its own line in the HTML above.When an element gets too long for one line in your text editor, separating thecode as shown above will keep your HTML code more readable.Note: While alt text isn't required for the browser, adherence to theAmericans with Disabilities Act is often enforced through legislation. Yourbrowser will not throw an error if there is no alt text with an image, so itis up to you as the developer to adhere to best practices for accessibility.The Image Title AttributeOne additional attribute that can be useful is the title. Content added tothis attribute will display when we hover over the image with our mouse. If wewere creating an img tag with src, alt and title for a company logo, itmight look something like this:<img  src=\""../images/my_company_logo.png\""  alt=\""my company name\""  title=\""We're here to help you!\""/>When a visitor to your company site hovers over the logo, they'll see a messageappear saying 'We're here to help you!'The title attribute isn't necessary and is often left out, but can be a nicedetail to include.Create ImagesIts time to practice creating some images! For this challenge, feel free to useany images you'd like — the tests are looking for the correct tag andattributes, not the content. If you're not sure what to use, feel free to usethe following URL as your source:https://s3.amazonaws.com/ironboard-learn/lion.jpgYour challenge is to write three image tags:The first should have just a source attributeThe second should include an alt attribute, in addition to a sourceThe third should have both an alt and source attribute, as well as a titleattributeRun npm test and read the tests as you go.ConclusionWith images, we can fill our web pages with visual content in addition to text.Brand logos, animated instructional guides, personal artwork and photography, orpictures of you and your friends — you now have the ability to create visuallyappealing content of any type!"
26,learn-co-curriculum/phase-0-html-album-cover-lab,https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/blob/master/README.md,JavaScript,"HTML Album CoverLearning GoalsUse common HTML tags to produce a webpage based on a mock-upIntroductionLearning all the individual pieces that make up a web page is a necessary firststep in the process of learning HTML, but one of the best ways to solidify theconcepts we've learned is to apply concepts together. In this lab, your taskwill be to update index.html based on commented notes in the file, using whatwe've learned about text formatting and displaying images.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Apply Header, Paragraph, Image and Span TagsPharrell isn't quite happy, he needs some help coding the album cover for hishit song \""Happy.\"" His dev chops aren't quite as skilled as yours, so he's hiredyou to take care of business.Pharrell did provide us with a mock-up of what he would like to see for thedesign of the album cover:In the industry, front-end developers are typically given specs just like thisfrom the product team and then asked to write the code to make a website lookjust like the spec. Today, you're the developer and Pharrell is the productteam.Use SOURCE.mdPharrell has provided us with the text for the album and all the legalmumbo-jumbo to give credit where credit is due. You can find that text inSOURCE.md. Again, this is a typical industry standard workflow, where thedevelopers are given a copy for the site from the product team.Each line of text in this file corresponds to a note in index.html that willindicate where you'll need to add this information. It will be up to you to pickwhich HTML tags to use.DeliverablesWrite your code in index.html. Your job is to make sure the text fromSOURCE.md makes it into index.html surrounded by the appropriate HTML tags.You can see the images you'll be using in the 'images' folder, but you'll haveto write the correct URL paths (like http://..../image-name) in order for themto display correctly. The comments in the index.html will help you with this.You may not have encountered the span tag before, so if you are curious, takea moment to read up on some reference material to better understand its use.Open index.html in a separate browser tab to see your progress on the AlbumCover as you build it.Run npm test to make sure you've met all the deliverables and passed thetests.ConclusionA lot of the formatting in this lab is done using CSS, or Cascading StyleSheets, a language that defines styling for HTML. Before we can get to moreelaborate styling, though, it is important to have a strong understanding ofHTML fundamentals.In this lab, we've tested that understanding by having you practice applyingheaders, image, and paragraphs. Completing this lab means that you have a solidfoundation that we can build upon as we continue to learn about web development.Clap along if you feel you're getting the hang of HTML!"
27,layui/layui,https://github.com/layui/layui/blob/main/README.md,JavaScript,"        Layui  Classic modular front-end UI library                                  Layui 是一套开源免费的 Web UI 组件库，采用自身轻量级模块化规范，遵循原生态的 HTML/CSS/JavaScript 开发模式，极易上手，拿来即用。其风格简约轻盈，而内在雅致丰盈，甚至包括文档在内的每一处细节都经过精心雕琢，非常适合网页界面的快速构建。Layui 区别于一众主流的前端框架，却并非逆道而行，而是信奉返璞归真之道。确切地说，它更多是面向于追求简单的务实主义者，即无需涉足各类构建工具，只需面向浏览器本身，便可将页面所需呈现的元素与交互信手拈来。快速上手使用 Layui 只需在页面中引入核心文件即可：<!DOCTYPE html><html>  <head>    <meta charset=\""utf-8\"">    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1\"">    <title>Quick Start - Layui</title>    <link href=\""./layui/css/layui.css\"" rel=\""stylesheet\"">  </head>  <body>    <!-- HTML Content -->    <script src=\""./layui/layui.js\""></script>    <script>    // Usage    layui.use(function(){      var layer = layui.layer;      // Welcome      layer.msg('Hello World', {icon: 6});    });    </script>   </body></html>使用文档最新文档项目参与项目参与者破旧立新 🌱2016年10月14日，Layui 发布了 1.0.0 首版，此后多年被广泛应用于众多 Web 平台。2021年10月13日，Layui 发布了原官网下线的公告（导读），并将文档站点切换到了 Gitee Pages，社区及日常维护亦全面转移到了 Gitee 和 Github 平台，以此呼吁大家拥抱其他更好的主流框架，导致大家误以为 Layui 停更了。事实上，自那以后，Layui 仍然在 Github 和 Gitee 保持活跃，并不存在所谓的停止更新，从当时的 2.6.8 一直连续迭代到如今的最新版本。2023年4月24日，Layui 发布了 2.8.0 正式版，并上线了新的文档站点，这是一次朴实的回归，更是情怀的延续。 但我们仍然坚持两年前那则公告中的观点， 即仍然推荐大家去拥抱主流，始终保持对前沿技术的无限热爱，是开发者们都应具备的思维属性。 而 Layui 所做的，是为填补主流之外的那些略显狭小的空隙。Layui 虽不是前端主流，但也早已不是作者个人的 Layui，而是所有仍在坚持使用它的人的 Layui，它仍然支撑着许多项目，也代表着许多人的工作。作为开源创作者，应该要为这些坚持者而守望。未来，Layui 会持续陪伴着所有为之热爱的人们，共同去论证 Layui 开发模式的可行性。开源许可Layui 采用 MIT 许可发布。其他相关协议亦可参考《免责声明》。"
28,learn-co-curriculum/phase-0-css-intro-lab,https://github.com/learn-co-curriculum/phase-0-css-intro-lab/blob/master/README.md,JavaScript,"Introduction to CSS LabLearning GoalsImport a CSS file in our HTMLImplement CSS declarationsIntroductionHTML's role in our websites is to provide structure, content, and link resources(e.g. CSS files). Its role in describing the style (\""presentation\"") of contentis minimal. HTML's ability to style is pretty much limited to \""pretty good\""defaults.In order to further customize the style, appearance, and interactive behavior ofour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we willwork on implementing CSS declarations in our HTML.Writing HTML vs. Writing CSSHTMLCSSDeals with:Content layerPresentation layerConcerns:Structure, hierarchy & meaningAesthetic & displayQuestions:- Should the order of items within a list matter?- Should the layout of the text be in a single or double column?- Should we wrap a list of links inside a navigation tag?- Should we use a different font color for the header?- Is this the most important header in the HTML document?- How should the content appear on a desktop vs. a mobile device?Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Import a CSS File in Our HTMLFirst things first: we need to make sure our HTML is loading our style sheet.We have two options:Write CSS rules inside of a <style> tag (\""internal CSS\""), which tells HTML\""Hey, I want to define some CSS styling here.\""Write CSS rules in an external file that is specified with the <link> tag(\""external CSS\"").In our case, we want to provide a link to our style sheet, instead of writingall of our CSS code directly in the <style> tag. This allows us to only haveto write styles for the entire site once, instead of repeating every <style>element on every page. A common workflow is to see developers work on CSS insideof the <style> tag until their styling is done. At that point they move it totheir external file and remove the <style> element from the HTML page. Feelfree to try it out!In index.html, provide a <link> tag which correctly sources the CSS filelocated in this directory. The <link> tag will link to our file with an hrefattribute, like so:<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />The href attribute should point to the file style.css which is located inthis directory using a relative path. The rel attribute is used to note thatthe file which is being linked has a relation of being a \""stylesheet.\""Now, what is a relative path? You could write href=\""style.css\"" and the contentof style.css would change your index.html file. But we want to teach you torequire external resources (like CSS or JavaScript) by using relative paths.Relative paths make it crystal clear which file is being used. Relative pathsstart with ./ which means \""from the directory I am currently in.\"" So, when weuse link to associate with a style sheet and we write href=\""./style.css\""we're saying: \""From the directory in which I, the index.html file live, lookfor a file called style.css and use it. This pattern will help you and otherdevelopers remove any possible confusion.<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />Links to style sheets should go at the end of the <head> section! Make sureyou provide a relative path to the style sheet. Hint: Open index.html in thebrowser. You can test whether your link is working or not by the color of yourheadline. If it's red, it's working! If it's black, keep going - you'll get it.Implement CSS DeclarationsNow, we are going to create some CSS declarations and add styling to ourdocument! First, open index.html in the browser to get a good idea of whatour un-styled page page looks like.What we would really like is something a little more jazzed up! Let'swork towards that. Set the following properties to specific values. Makesure to, after each update, look at index.html in the browser to see how ithas changed:Set the background of the <body> element (whole document) to #00b3e6(light blue)Set the <div> elements:width to 700pxmargin to auto (centers our element)font-family to \""Helvetica Neue\""background to whitepadding to 30px (creates an invisible space around the element)Set the element with the id of #main-header to a font-size of 22pxSet the elements with the class of .perspective-questions to a font-styleof italicRun npm test to test your work. Remember to push and submit your work usingCodeGrade when you're done.ConclusionCSS allows us to easily separate our 'styling' logic into separate files thatfollow the 'cascading' rule set. This enables us to keep our HTML clean andsimple to read, without sacrificing the customization that we have come toexpect on websites.ResourcesW3 Introduction to CSS"
29,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
30,learn-co-curriculum/phase-0-the-dom-modifying-elements-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/blob/master/README.md,JavaScript,"Creating and Inserting DOM Nodes LabLearning GoalsCreate DOM elements programmaticallyAdd elements to the DOMUpdate elements using innerHTMLChange properties on DOM nodesRemove elements from the DOMIntroductionNow that you have an understanding of the DOM and powerful tools for selectingthe right elements, it's time to learn how to:Create new nodesDelete nodesUpdate node propertiesIf you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create DOM Elements Programmaticallydocument.createElement()Creating an element in JavaScript is an easy process. You simply calldocument.createElement('tagName'), where tagName is the name of any validHTML tag ('p', 'div', 'span', etc.).Open the index.html file in your browser and open up the browser's console. Inthe console, enter:const element = document.createElement(\""div\"");Then take a look at the Elements tab. The element doesn't show up on the page.Why not?Add Elements to the DOMTo get an element to appear in the DOM, we have to append() it to an existingDOM node. To go back to our tree metaphor, we have to glue our new leaf onto abranch that's already there. We can start as high up on the tree asdocument.body, or we can find a more specific element using any of the methodswe've learned for traversing the DOM.append()Let's append element to body to start:document.body.append(element);(Recall that element is a variable containing the div we created above.)Now if you look at the Elements tab, you'll see our new (empty) <div> nestedinside the body element.Next, let's create an unordered list:const ul = document.createElement(\""ul\"");To populate our unordered list, we'll use a for loop to create three li's,give them some content, and append them to the ul:for (let i = 0; i < 3; i++) {  const li = document.createElement(\""li\"");  li.textContent = (i + 1).toString();  ul.append(li);}In each iteration of our loop, we calculate the value i + 1 (an integer), turnit into a string using JavaScript's toString() method, and assign the resultas the value of the li's textContent attribute.Note: although the textContent attribute must be a string, the code wouldstill work even if we didn't use the toString() method — JavaScript willturn the value into a string for us. However, for clarity and completeness, itis best to set it to a string value explicitly.Finally, we'll append the ul to the div we created:element.append(ul);You should now see the unordered list rendered on the page, and see the newelements in the \""Elements\"" tab, like this:<div>  <ul>    <li>1</li>    <li>2</li>    <li>3</li>  </ul></div>Note that, each time we create a new element, we create a variable and save areference to it. That makes it quite easy to make additional updates and to addit to the DOM using append().Add Elements to the DOM via innerHTMLCreating elements and then appending them into the DOM is a multi-step process.It's also the safest and most reliable way to add content to the DOM. Mostrepeated code can be removed by using variables, functions and loops. It's TheRight Way.That said, however, there's another process that will also work, usingElement.innerHTML. Inside our loop above, we create an li element and setits textContent property to a simple number (expressed as a string) thatrepresents the current iteration through the loop. Once we append the li tothe ul and the ul to the document body, we see our unordered list in thebrowser window. This is a perfectly valid way to use textContent to addcontent to the DOM — essentially, textContent changes only what text shows upinside a DOM element:li.textContent = \""Hi there!\"";// => <li>Hi there!</li>console.log(li.textContent);// => \""Hi there!\""Imagine, however, that we want to add content that's more complicated.Assume our HTML includes a main element with an id of \""main.\"" We can grabthat element and set its innerHTML attribute to any HTML we like:const main = document.getElementById(\""main\"");main.innerHTML =  \""<h1>Poodles!</h1><h3>An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective</h3><p><em>By: Byron Q. Poodle, Esq., BA.</em></p>\"";Here we are using one big, long string, complete with multiple HTML tags, tocreate the following HTML in the DOM:<main id=\""main\"">  <h1>Poodles!</h1>  <h3>    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a    post-Frankfurt School Appropriationist Perspective  </h3>  <p><em>By: Byron Q. Poodle, Esq., BA.</em></p></main>This process works but it is not recommended for several reasons. First,it's more error-prone, and the errors can be difficult to find. Second, it cannegatively impact site performance. Finally, if you're inserting user-deriveddata (e.g., comments) into the DOM using innerHTML, you can expose your siteto the risk of users injecting malicious code.Programmatically creating and appending elements is safer and more efficient,and it results in code that's easier to read, easier to debug, and easier tomaintain.Change Properties on DOM NodesWe can change the appearance of a DOM node using its style attribute. Try thisout in the console:const element = document.getElementById(\""main\"");element.style.height = \""300px\"";element.style.backgroundColor = \""#27647B\"";You've changed what's on the screen!Feel free to set as many properties as you'd like — this is a good chance tolook around and explore different properties of DOM elements.Let's adjust the display. Add some text:element.textContent = \""You've changed what's on the screen!\"";Then change the style to see the effect:element.style.fontSize = \""24px\"";element.style.marginLeft = \""30px\"";element.style.lineHeight = 2;Perhaps the most common way to change how things appear in the DOM is bychanging an element's class attribute. As you know from CSS, we often changethe way a bit of rendered HTML appears by adding or removing a class.For example, we could create an alert class that turns the text red (using theCSS color attribute) and makes it big (using the CSS font-size attribute).We can then use JavaScript to first grab the element and then add the class byupdating the element's className property. This has the same effect as settingthe class property in the HTML. The className property expects a Stringwith one or more class names, separated by spaces:element.className = \""pet-listing dog\"";Check out the Elements tab to see the effect of this change:<main id=\""main\"" class=\""pet-listing dog\""></main>Another way to accomplish the same thing is by using the Element.classListproperty. This property has .add() and .remove() methods thatcan be used as follows:element.classList.remove(\""dog\"");element.classList.add(\""cat\"", \""sale\"");This approach allows you to easily add and remove classes programmatically,without having to create a long string of class names.<main id=\""main\"" class=\""pet-listing cat sale\""></main>Separation of ConcernsAn important thing to bear in mind is that we only want to use JavaScript tochange the appearance of an element when we need to make a change dynamically,i.e., in response to user actions. This goes back to a fundamental programmingconcept about separating concerns between technologies:HTML defines the structure of the website (not appearance or functionality)JavaScript defines functionality of the website (not structure or styling)CSS defines the visualization and style of the website (not structure orfunctionality)Defining the base CSS should still happen in the CSS files that are loaded intothe DOM when the page is opened.Remove Elements from the DOMWe know how to add elements and change their attributes. What if we want toremove an element from a page?removeChild()We use removeChild(), as you might guess, to remove a particular child of anelement:someElement.removeChild(someChildElement);Let's take a look at a more complex example:const ul = document.getElementsByTagName(\""ul\"")[0];const secondChild = ul.querySelector(\""li:nth-child(2)\"");ul.removeChild(secondChild);Here you can see the power of querySelector(): we can use it to find thesecond li element of ul. We then pass that element as the argument to ourremoveChild method, which removes the element from our ul.What if we want to remove the whole unordered list (ul)?element.remove()We can just call remove() on the element itself:ul.remove();And it's gone!InstructionsFrom this point forward, many of the labs will work a little differently fromones you've done before. Specifically, the tests will mock the process of 1)running JavaScript code in the browser and 2) seeing the results of that coderepresented in the DOM. Take a look at test/indexTest.js to see the tests'descriptions of the changes your code should be making to the DOM elements.Note that you do not need to create functions for this lab. Just create the lineor lines of JavaScript necessary to pass each test. As usual, you will writeyour code in the index.js file.One final note: the last test in the test/indexTest.js file is looking for thetext \""YOUR-NAME is the champion\"" (with your name — or whatever text you choose —in place of YOUR-NAME) inside your newly created DOM node. While there are anumber of ways you could accomplish this, you should use either thetextContent or innerHTML property to setthe text inside your DOM node. The innerText property would technically workas well; however, the tests won't pass if you use this approach, and generallyit's not a good practice to use innerText when setting the contents of anelement. This StackOverflow answer does a good job explaining somedifferences between these properties.Resourcesdocument.createElement()append()removeChild()element.remove()classList Property"
31,learn-co-students/js-if-else-files-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
32,learn-co-curriculum/phase-0-the-dom-editing-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/blob/master/README.md,JavaScript,"DOM Editing LabLearning GoalsIdentify that DOM nodes are written as HTMLIntroductionWe've started looking at the DOM and how it's created. Now it's time to see itsstructure.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Identify That DOM Nodes Are Written As HTMLIn the previous lesson, we learned that, when we load a web page in a browser,the content we see in the DOM is a representation of the underlying HTML, CSSand JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn howto do that shortly), we would see HTML that is a clone of the HTML found in thesource HTML file. As we learned earlier in the course, that HTML consists ofelements that in turn consist of HTML tags and their content.When we're working in the DOM, the structure is the same. We can access objectsin the DOM (called nodes) that consist of tags, just like the HTML elementsthat make up the base HTML. Nodes and elements are not the same thing —all elements in the DOM are nodes but not all nodes are HTML elements. However,when we're working in the DOM, the nodes we access and modify are virtuallyalways HTML elements.The Structure of DOM ContentWe'll start by going over how content in the DOM is structured using nodes. Theinformation below should be familiar from what you've learned about HTMLelements.DOM nodes most often have a starting tag and an ending tag. Examples include aparagraph:<p>I am a paragraph.</p>or a main section:<main></main>Because they have both starting and ending tags, we can nest other nodes insidethem. The inner node is called a child node, and the outer node is called aparent node. To nest items, we simply add the child node and its content betweenits parent's starting and ending tags:<body>  <main>    <p>I am a nested paragraph, inside the main element, inside the body!</p>  </main></body>Some nodes only have a starting tag. Those are called self-closing elements orvoid elements. Void elements do not have any content nested inside of them andcannot be parent nodes.An example of a self-closing tag is an image:<img  src=\""https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\""  alt=\""A cartoon gif\""/>In self-closing tags, the trailing / is optional. This is valid too:<img  src=\""https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\""  alt=\""A cartoon gif\"">Enough review, let's write some HTML!InstructionsStart by running the tests and taking a look through the errors. You'll see thatthe tests are looking for certain content to be present in the HTML file.Next, open the index.html file in the browser using the instructions in theprevious lesson for your development environment.Just to speed things up a bit, paste the following code into index.html:<!DOCTYPE html><html lang=\""en\"">  <head>    <meta charset=\""UTF-8\"" />    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"" />    <meta http-equiv=\""X-UA-Compatible\"" content=\""ie=edge\"" />    <title>Introduction to the DOM Lab</title>  </head>  <body>    <!--All our work for this lesson will go here-->  </body></html>Refresh the browser page to see the changes.Open the Google Developer Tools by clicking on the \""View\"" menu and selectingDeveloper -> Developer Tools. The Elements tab should be selected but, if itisn't, click on it. Here we have the DOM representation of the HTML sourceloaded by the browser. You should see the head and body elements nestedinside the html element. If the body element is collapsed, use thedisclosure triangle to expand it. You should see that the body element is,temporarily, child-less. Let's go ahead and start adding some content inindex.html.Note: thedisclosure triangle is thetriangle to the left of the <body> tag. When you first open the Elements tab,the nodes are generally collapsed, hiding their contents. You can click thetriangle to expand the node and see its contents. Disclosure triangles arestandard for hiding information throughout Chrome DevTools. If you want to seemore, feel free to click on the triangle! You're not going to break anything.First, let's add a title to our page:<h1>My HTML adventure</h1>Refresh the page to see the changes displayed in the browser. If you view theElements tab again, you should see that a new child node is nested inside thebody. Finally, run the tests again; the first test should now be passing.Next, we'll add a paragraph below the title. We'll also add some highlightedbits of text to the paragraph to make it stand out a little.<p>  We're writing HTML markup to display in our <strong>browser</strong>. We're  basically telling computers what to do. <em>Neat!</em></p>Save the file and check out the page in the 'Elements' tab. What's happeningabove is that we added some inline elements, <strong> and <em> to ourparagraph to style things a little. The <strong> tag makes any text withinlook important. It's usually bold in browsers by default. The <em> tagallows us to emphasize certain text. This text is typically rendered as italicin browsers.Run the tests again; you should now have all but two of the tests passing.In our paragraph, let's make \""HTML\"" a hyperlink and link to the MDN definition.We'll use the<a> tag for this. Add this to our existing <p>:We're writing<a href=\""https://developer.mozilla.org/en-US/docs/Web/HTML\"">HTML</a> markup todisplay in our <strong>browser</strong>.Notice that HTML attributes (in this case, the href attribute) are shownalongside their opening tag.Lastly, we'll add a table below the paragraph to recap some of the stuff inthis lesson:<table>  <thead>    <tr>      <th>Element name</th>      <th>Display value</th>    </tr>  </thead>  <tbody>    <tr>      <td>h1</td>      <td>block</td>    </tr>    <tr>      <td>p</td>      <td>block</td>    </tr>    <tr>      <td>strong</td>      <td>inline</td>    </tr>    <tr>      <td>em</td>      <td>inline</td>    </tr>  </tbody></table>Woah. That's a lot of markup! If you take a look at the result, though,you'll see that it's a fairly complex visual — it's a table! Our tableconsists of a header and a body. The header allows us to give the columns aname, and the table body contains the rows of content. Both <thead> and<tbody> tags contains rows, which are represented as <tr> (table row). Theserows then contain cells which form the table's columns. In the <thead> row,cells are represented as <th>, while cells in <tbody> have their content in<td> tags.That's a lot of nesting.Look again at the Elements tab. Expand out all the children of the table.This is the DOM tree!When you're done, go ahead and run the tests. They should now all be passing."
33,aosabook/500lines,https://github.com/aosabook/500lines/blob/master/README.md,JavaScript,"500 Lines or Less\""What I cannot create, I do not understand.\""-- Richard FeynmanThis is the source for the book 500 Lines or Less, the fourth in theArchitecture of Open Source Applications series.  Aswith other books in the series, all written material will be covered by theCreative Commons - Attribution license, and all code by the MIT License: pleasesee the license description for details.  In addition, allroyalties from paid-for versions will all go to Amnesty International.The production of this book has been made possible by the financial support ofPagerDuty.    MissionEvery architect studies family homes, apartments, schools, and other commontypes of buildings during her training.  Equally, every programmer ought toknow how a compiler turns text into instructions, how a spreadsheet updatescells, and how a database efficiently persists data.Previous books in the AOSA series have done this by describing the high-levelarchitecture of several mature open-source projects. While the lessons learnedfrom those stories are valuable, they are sometimes difficult to absorb forprogrammers who have not yet had to build anything at that scale.\""500 Lines or Less\"" focuses on the design decisions and tradeoffs thatexperienced programmers make when they are writing code:Why divide the application into these particular modules with theseparticular interfaces?Why use inheritance here and composition there?How do we predict where our program might need to be extended, and how canwe make that easy for other programmers?Each chapter consists of a walkthrough of a program that solves a canonicalproblem in software engineering in at most 500 source lines of code. We hopethat the material in this book will help readers understand the variedapproaches that engineers take when solving problems in different domains, andwill serve as a basis for projects that extend or modify the contributionshere.Contributors      Name    Affiliation    Project    Online    GitHub        Mike DiBernardo    Wave    editorial                        @mdibernardo            mikedebo.ca                MichaelDiBernardo         Amy Brown    indie    editorial    amyrbrown.ca        @amyrbrown    amyrbrown        Allison Kaptur    Dropbox    byterun    @akaptur    akaptur        Audrey Tang    g0v.tw, Socialtext, Apple    spreadsheet                        @audreyt                audreyt        Brandon Rhodes    Dropbox    contingent    @brandon_rhodes    brandon-rhodes        Carl Friedrich Bolz    King's College London    object model                        cfbolz.de            @cfbolz                cfbolz        Cate Huston         Image Filter app                        www.accidentallyincode.com/            @catehstn                catehstn        Christian Muise    University of Melbourne    flow-shop                        @cjmuise                haz        Daniel Jackson         same-origin-policy                  Daniel Rocco    BrightLink Technology    contingent    @drocco007    drocco007        Dann Toliver    Bento Box    dagoba                        danntoliver.com            @dann                dxnn        Dessy Daskalov    Nudge Rewards    Pedometer                        www.dessydaskalov.com            @dess_e                dessy        Dethe Elza         blockcode         dethe        Dustin Mitchell    Mozilla    cluster         djmitche        Erick Dransch         Modeller                        @ErickDransch                EkkiD        Eunsuk Kang         same-origin-policy                  Greg Wilson         web-server                        @gvwilson                gvwilson        Guido van Rossum    Dropbox    crawler                        @gvanrossum                gvanrossum        A. Jesse Jiryu Davis    MongoDB    crawler                        @jessejiryudavis                ajdavis        Jessica Hamrick    University of California, Berkeley    sampler                        www.jesshamrick.com            @jhamrick                jhamrick        Leah Hanson    Google    static analysis                        @astrieanna                astrieanna        Leo Zovic         event-web-framework                  Malini Das    Twitch    ci                        malinidas.com            @malinidas                malini        Marina Samuel    Mozilla    ocr                        www.marinasamuel.com            @emtwos                emtwo        Ned Batchelder    edX    templating engine                        nedbatchelder.com            @nedbat                nedbat        Santiago Perez De Rosso         same-origin-policy                  Taavi Burns    Previously at Points, now at PagerDuty    data-store                        @jaaaarel                taavi        Yoav Rubin    Microsoft    In-memory functional database                        @yoavrubin                yoavrubin  Technical Reviewers      Amber Yust    Andrew Gwozdziewycz    Andrew Kuchling        Andrew Svetlov    Andy Shen    Anton Beloglazov        Ben Trofatter    Borys Pierov    Carise Fernandez        Charles Stanhope    Chris Atlee    Chris Seaton        Cyryl Płotnicki-Chudyk    Dan Langer    Dan Shapiro        David Pokorny    Eric Bouwers    Frederic De Groef        Graham Lee    Gregory Eric Sanderson    James O'Beirne        Jan de Baat    Jana Beck    Jessica McKellar        Jo Van Eyck    Joel Crocker    Johan Thelin        Johannes Fürmann    John Morrissey    Joseph Kaptur        Josh Crompton    Joshua T. Corbin    Kevin Huang        Maggie Zhou    Marc Towler    Marcin Milewski        Marco Lancini    Mark Reid    Matthias Bussonnier        Max Mautner    Meggin Kearney    Mike Aquino        Natalie Black    Nick Presta    Nikhil Almeida        Nolan Prescott    Paul Martin    Piotr Banaszkiewicz        Preston Holmes    Pulkit Sethi    Rail Aliiev        Ronen Narkis    Rose Ames    Sina Jahan        Stefan Turalski    William Lachance  "
34,bigbluebutton/bigbluebutton,https://github.com/bigbluebutton/bigbluebutton/blob/develop/README.md,JavaScript,"BigBlueButtonBigBlueButton is an open source virtual classroom designed to help teachers teach and learners learn.BigBlueButton supports real-time sharing of audio, video, slides (with whiteboard annotations), chat, and the screen.  Instructors can engage remote students with polling, emojis, multi-user whiteboard, shared notes, and breakout rooms.  During the session, BigBlueButton generates analytics that are visible to moderators in the Learning Analytics Dashboard.Presenters can record and playback content for later sharing with others.We designed BigBlueButton for online learning, it can be used for many other applicationsas well).  The educational use cases for BigBlueButton areOnline tutoring (one-to-one)Flipped classrooms (recording content ahead of your session)Group collaboration (many-to-many)Online classes (one-to-many)The latest version is BigBlueButton 2.6.  You can install BigBlueButton 2.6 on Ubuntu 20.04 using bbb-install.sh within 30 minutes (or your money back 😉).For full technical documentation BigBlueButton -- including architecture, features, API, and GreenLight (the default front-end) -- see https://docs.bigbluebutton.org/.BigBlueButton and the BigBlueButton Logo are trademarks of BigBlueButton Inc ."
35,CodingTrain/website-archive,https://github.com/CodingTrain/website-archive/blob/main/README.ja.md,JavaScript,  こんにちは、The Coding Train WebサイトのGitHubリポジトリへようこそ！ これには、 thecodingtrain.com のすべてのコンテンツと、対応する動画のソースコードが含まれています。 このサイトは、さまざまな方法でコミュニティからの貢献を歓迎します！ 詳細については、 CONTRIBUTING.md をご覧ください。＃その他のリンクThe Coding Train on YouTubeBecome a YouTube MemberFor topic suggestionsJoin The Coding Train DiscordCoding questions＃ライブストリームライブストリームはYouTubeでイベントとして発表されます、[イベントの通知を受け取るにはサブスクライブしてください]（https://www.youtube.com/channel/UCvjgXvBlbQiydffZU7m1_aw/subscribe）！＃独自のバリエーションを追加Coding Trainビデオに基づいて独自のバリエーションを共有したい場合は、[Webサイト]（http://thecodingtrain.com）のビデオに対応するページにアクセスしてください。 [コミュニティ貢献ガイド]（https://thecodingtrain.com/Guides/community-contribution-guide.html）をチェックして、その方法を確認してください。その後、ウェブサイトのビデオのすぐ下に掲載され、誰もが見ることができます！＃ビデオチュートリアルのページの追加を支援する現在、動画とコミュニティの貢献を新しいシステムに移行中です。これを支援したい場合は、[コンテンツ寄稿ガイド]（https://thecodingtrain.com/Guides/content-contribution-guide.html）を参照してください。私たちを助けてくれてありがとう！＃Hacktoberfest[Hacktoberfest]（https://hacktoberfest.digitalocean.com/）にアクセスしている場合は、この問題を確認してください：https：//github.com/CodingTrain/website/issues/2615。
36,learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab,https://github.com/learn-co-curriculum/phase-0-javascript-events-acting-on-events-lab/blob/master/README.md,JavaScript,"Moving Things with JavaScript by Acting on EventsLearning GoalsPractice moving elements on the pageDemonstrate how to move an element in response to a browser eventDemonstrate how to update an element's position on the page conditionallyIntroductionThink back to the first video game you played.Think about the mechanics of that game. When you tilted a joystick orpressed a button it responded to your whims. It pulled you into its story bygiving you a window into its world and a way of interacting with — shaping, even— that world. When you performed an event, the computer made the worldrespond: the little plumber from Brooklyn jumped (Super Mario Franchise), theundead warrior slashed at an evil foe (Dark Souls), or the banana-yellow guyate the power pellet (Pac-Man).Programming means that you can create such a world for other people. Sure,it'll be a while before you're ready to build something like one of the classicgames above, but we can start with the essential steps. In this lab we'll learnhow to move an element on a page in response to an event.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Go ahead and run the tests. You'll see that you need to create two functions toget the tests passing: moveDodgerLeft() and moveDodgerRight(). We'll writemoveDodgerLeft() together, then you'll create moveDodgerRight() on your own.Practice Moving Elements on the PageOpen index.html in the browser. You'll see a black square which represents thegame field and a white rectangle at the bottom of that field which is our gamepiece, the dodger. Now open DevTools and click on the Elements tab. You'll seethat the game field is a <div> with an id of \""game.\"" Expand that div andyou'll see that the game piece is a second, nested <div> with an id of\""dodger.\""Click on the game div and take a look at its CSS in the styles tab. You'll seethat the game field has a height and width of 400px. Now click on the dodger andnote that it has a height of 20px and a width of 40px. Finally, take a look atthe inline style on the dodger <div>: the bottom and left propertiesdefine the dodger's starting position relative to its parent element, the gamefield. In other words, the lower left corner of the game field correspondstoleft and bottom positions of 0px. The starting values of the dodger'sbottom and left properties are what places it at the bottom center of thegame field when our game launches.Before we can use JavaScript to move the dodger, we first need to grab it andsave a reference to it in a variable. Enter the following in the console:const dodger = document.getElementById(\""dodger\"");Awesome. Now let's change its color:dodger.style.backgroundColor = \""#000000\"";Whoa, where'd it go? Well, we changed the color to #000000, another way ofexpressing \""black.\"" So it just blends in with the background.Let's change it to something more visible.dodger.style.backgroundColor = \""#FF69B4\"";Much better!Accessing the style property of the dodger element allows us to changethings like the backgroundColor, height, width, etc. We can also use it tochange an element's position on the page.Let's start by moving the element up:dodger.style.bottom = \""100px\"";Note: Even though we're talking about numeric coordinates, note that weneed to move the dodger by assigning a new string value.We can verify our dodger's current position by simply typing dodger.style.leftor dodger.style.bottom into the console.Let's return it to where it started by resetting the bottom attribute:dodger.style.bottom = \""0px\"";Now let's visually verify that the dodger's position is determined relative tothe game field by changing its left attribute:dodger.style.left = \""0px\"";You should see the dodger nestled up against the bottom left corner of the gamefield.Demonstrate How to Move an Element in Response to a Browser EventNow that we know how to write the code to move the dodger, let's figure out howto tie that action to an event.Let's say we want the user to be able to move the dodger to the left using theleft arrow key. We learned in an earlier lesson that, when a key is pressed, thekeydown event provides a code to indicate which key it was. So the first thingwe have to do is figure out what code is used to identify the left arrow key. Wecould look it up, but we're programmers — let's explore!So what do we mean when we say that an event provides a code? Any time an eventlistener is in place and the event it's listening for is triggered, a JavaScriptobject containing a bunch of information about the event is automaticallypassed as an argument to the callback function. We can access that object andthe information it contains by defining a parameter for the callback. It lookslike this:document.addEventListener(\""keydown\"", function (event) {  console.log(event);});By defining the event parameter in the parentheses, we've given the body ofthe callback access to that event object, which is what allows us to log it tothe console. Note that, as with any JavaScript parameter (and, in fact, anyJavaScript variable), we can give it any valid JavaScript variable name we like.By convention, and in keeping with programming best practice of using meaningfulvariable names, the name JavaScript programmers use for this parameter isusually either event or e. You will see these in a lot of JavaScript code,and we recommend you use them as well.This pattern, when you first encounter it, is tricky to wrap your head around.Don't worry if it doesn't make total sense yet — it will become clearer asyou continue through the curriculum. You might also want to read the excellentaccepted answer in this Stack Overflow thread.Let's take a look at what that event object looks like. Enter the code aboveinto the console then click in the browser window (where the game field anddodger are rendered). Now, if you press the left arrow key, you should see aKeyboardEvent logged in the console. Expand the event and you'll see itsproperties listed; the one we're interested in is the key property. Trypressing some other keys as well and check out their key properties.Top Tip: You can explore other event types as well: just change the name ofthe event in the code above.Now that we know the code the event uses to identify the left arrow key, we canwrite the JavaScript code to move the dodger left when the key is pressed:document.addEventListener(\""keydown\"", function (event) {  if (event.key === \""ArrowLeft\"") {    const leftNumbers = dodger.style.left.replace(\""px\"", \""\"");    const left = parseInt(leftNumbers, 10);    dodger.style.left = `${left - 1}px`;  }});So what are we doing here? Well, when our event listener detects a keydownevent, we first check to see whether the key property of the event object hasthe value \""ArrowLeft.\"" If it does, we get the current value of the dodger'sstyle.left property and use the String replace() method to stripout the \""px\"", then store the result in leftNumbers. Next, we parseleftNumbers as an integer and store that result in left. Finally, we updatethe dodger's style.left property using string interpolation, injecting thecurrent value minus 1. If the key that's pressed is not the left arrow key, wedo zilch. Try it out in the browser yourself!! (Be sure to refresh the pagefirst.)We do still have a problem, though. Even though we're only going one pixel at atime, eventually our dodger will zoom (well, relatively speaking) right out ofview.How can we prevent this? We need to check where the left edge of the dodger isand only move it if it hasn't yet reached the left edge of the game field.Update an Element's Position on the Page ConditionallyOur callback function is starting to get pretty complex. This is probably a goodtime to break the dodger's movement out into a separate function. We want tomove the dodger left if our if statement returns true, so let's pull out the bodyof that if statement into a function called moveDodgerLeft().Refresh the page so we're starting with a blank slate, then grab the dodger again:const dodger = document.getElementById(\""dodger\"");Now we'll build our moveDodgerLeft() function, adding a check on the currentposition of the dodger:function moveDodgerLeft() {  const leftNumbers = dodger.style.left.replace(\""px\"", \""\"");  const left = parseInt(leftNumbers, 10);  if (left > 0) {    dodger.style.left = `${left - 1}px`;  }}We're doing essentially the same thing, but we first ensure that the dodger'sleft edge has not reached the left edge of its container.Now let's wire this up to our event listener:document.addEventListener(\""keydown\"", function (e) {  if (e.key === \""ArrowLeft\"") {    moveDodgerLeft();  }});Now try moving the dodger past the left edge. No can do!Copy the final code into index.js and run the tests. You should now have thefirst one passing.LabNow it's your turn. With the code implemented from the code-along, think aboutwhat needs to change to make a moveDodgerRight() function. You'll need to addanother condition to your event listener's callback function to callmoveDodgerRight(). Then, inside the function, instead of moving the dodger${left - 1}px, you'll be moving it ${left + 1}px.Note: It may seem logical that you would use the dodger's style.rightproperty to move the dodger right, but that won't work. The reason is thatchanging the style.right property doesn't change the style.left property,which means we'd have conflicting information about where the dodger should beon the screen. JavaScript solves this problem by giving precedence tostyle.left. In other words, once the user presses the left arrow key for thefirst time and the value of style.left is changed, any subsequent changes tostyle.right will be ignored.Finally, implement the code needed to prevent the dodger from escaping off theright-hand side. How can we check whether the right edge of the dodger hasreached the right edge of the game field? (Keep in mind that the dodger is40px wide.)Once you've completed the work to get the tests to pass (and submitted yourwork using CodeGrade), the last step is to \""try out\"" your application. Makesure it works the way you expect in the browser. In professional applications,tests can't cover 100% of the use of the application. It's important torealize that \""passing all the tests\"" is not the same as \""building a workingapplication.\""Be sure to do a human-level manual \""play through\"" with your dodger to make sureyour working code really works!ConclusionEvents and event handling are vital to web programming. JavaScript allows fordynamic page rendering, so users can interact with the contents of the page inreal time. Knowledge of the basic techniques we've learned so far sets you onthe road toward being able to create complex interactions like those in videogames you may have played before!"
37,thinkgem/jeesite,https://github.com/thinkgem/jeesite/blob/master/README.md,JavaScript," JeeSite 快速开发平台      关注 JeeSite V4.x / 5.x 请点击: https://gitee.com/thinkgem/jeesite4关注 JeeSite Cloud 微服务 请点击: https://gitee.com/thinkgem/jeesite4-cloud关注 JeeSite Mobile 移动端 请点击: https://gitee.com/thinkgem/jeesite4-uniapp关注 JeeSite PC 客户端程序 请点击: https://gitee.com/thinkgem/jeesite-client关注 JeeSite Vue 前后分离 请点击: https://gitee.com/thinkgem/jeesite-vue平台简介JeeSite是基于多个优秀的开源项目，高度整合封装而成的高效，高性能，强安全性的开源Java EE快速开发平台。JeeSite是您快速完成项目的最佳基础平台解决方案，JeeSite是您想学习Java平台的最佳学习案例，JeeSite还是接私活的最佳助手。JeeSite是在Spring Framework基础上搭建的一个Java基础开发平台，以Spring MVC为模型视图控制器，MyBatis为数据访问层，Apache Shiro为权限授权层，Ehcahe对常用数据进行缓存，Activit为工作流引擎。是JavaEE界的最佳整合。JeeSite主要定位于企业信息化领域，已内置企业信息化系统的基础功能和高效的代码生成工具，包括：系统权限组件、数据权限组件、数据字典组件、核心工具组件、视图操作组件、工作流组件、代码生成等。前端界面风格采用了结构简单、性能优良、页面美观大气的Twitter Bootstrap页面展示框架。采用分层设计、双重验证、提交数据安全编码、密码加密、访问验证、数据权限验证。使用Maven做项目管理，提高项目的易开发性、扩展性。JeeSite目前包括以下四大模块，系统管理（SYS）模块、内容管理（CMS）模块、在线办公（OA）模块、代码生成（GEN）模块。 系统管理模块 ，包括企业组织架构（用户管理、机构管理、区域管理）、菜单管理、角色权限管理、字典管理等功能； 内容管理模块 ，包括内容管理（文章、链接），栏目管理、站点管理、公共留言、文件管理、前端网站展示等功能； 在线办公模块 ，提供简单的请假流程实例；代码生成模块 ，完成重复的工作。JeeSite 提供了常用工具进行封装，包括日志工具、缓存工具、服务器端验证、数据字典、当前组织机构数据（用户、机构、区域）以及其它常用小工具等。另外还提供一个强大的在线 代码生成 工具，此工具提供简单的单表、一对多、树结构功能的生成，如果对外观要求不是很高，生成的功能就可以用了。如果你使用了JeeSite基础框架，就可以很高效的快速开发出，优秀的信息管理系统。内置功能用户管理：用户是系统操作者，该功能主要完成系统用户配置。机构管理：配置系统组织机构（公司、部门、小组），树结构展现，可随意调整上下级。区域管理：系统城市区域模型，如：国家、省市、地市、区县的维护。菜单管理：配置系统菜单，操作权限，按钮权限标识等。角色管理：角色菜单权限分配、设置角色按机构进行数据范围权限划分。字典管理：对系统中经常使用的一些较为固定的数据进行维护，如：是否、男女、类别、级别等。操作日志：系统正常操作日志记录和查询；系统异常信息日志记录和查询。连接池监视：监视当期系统数据库连接池状态，可进行分析SQL找出系统性能瓶颈。工作流引擎：实现业务工单流转、在线流程设计器。为何选择JeeSite使用 Apache License 2.0 协议，源代码完全开源，无商业限制。使用目前主流的Java EE开发框架，简单易学，学习成本低。数据库无限制，目前支持MySql、Oracle，可扩充SQL Server、PostgreSQL、H2等。模块化设计，层次结构清晰。内置一系列企业信息管理的基础功能。操作权限控制精密细致，对所有管理链接都进行权限验证，可控制到按钮。数据权限控制精密细致，对指定数据集权限进行过滤，七种数据权限可供选择。提供在线功能代码生成工具，提高开发效率及质量。提供常用工具类封装，日志、缓存、验证、字典、组织机构等，常用标签（taglib），获取当前组织机构、字典等数据。兼容目前最流行浏览器（IE7+、Chrome、Firefox）IE6也支持，但体验效果差。技术选型1、后端核心框架：Spring Framework 5.3安全框架：Apache Shiro 1.9视图框架：Spring MVC 5.3服务端验证：Hibernate Validator 5.2布局框架：SiteMesh 2.4工作流引擎：Activiti 5.21任务调度：Spring Task 4.1持久层框架：MyBatis 3.2数据库连接池：Alibaba Druid 1.0缓存框架：Ehcache 2.6、Redis日志管理：SLF4J 1.7、Logback工具类：Apache Commons、Jackson、POI 3.92、前端JS框架：jQuery 1.9。CSS框架：Twitter Bootstrap 2.3.1（稳定是后台，UI方面根据需求自己升级改造吧）。客户端验证：JQuery Validation Plugin 1.11。富文本在线编辑：CKEditor在线文件管理：CKFinder动态页签：Jerichotab手机端框架：Jingle数据表格：jqGrid对话框：jQuery jBox下拉选择框：jQuery Select2树结构控件：jQuery zTree日期控件： My97DatePicker4、平台服务器中间件：在Java EE 7规范（Servlet 3.1、JSP 2.1）下开发。数据库支持：目前仅提供MySql和Oracle数据库的支持，但不限于数据库，平台留有其它数据库支持接口，你可以很方便的更改为其它数据库，如：SqlServer 2008、MySql 5.5、H2等开发环境：Java、Eclipse Java EE 4.3、Maven 3.1、Git安全考虑开发语言：系统采用Java 语言开发，具有卓越的通用性、高效性、平台移植性和安全性。分层设计：（数据库层，数据访问层，业务逻辑层，展示层）层次清楚，低耦合，各层必须通过接口才能接入并进行参数校验（如：在展示层不可直接操作数据库），保证数据操作的安全。双重验证：用户表单提交双验证：包括服务器端验证及客户端验证，防止用户通过浏览器恶意修改（如不可写文本域、隐藏变量篡改、上传非法文件等），跳过客户端验证操作数据库。安全编码：用户表单提交所有数据，在服务器端都进行安全编码，防止用户提交非法脚本及SQL注入获取敏感数据等，确保数据安全。密码加密：登录用户密码进行SHA1散列加密，此加密方法是不可逆的。保证密文泄露后的安全问题。强制访问：系统对所有管理端链接都进行用户身份权限验证，防止用户直接填写url进行访问。快速体验具备运行环境：JDK1.8、Maven3.0+、MySql5+或Oracle10g+、Tomcat8.5。修改src\\main\\resources\\jeesite.properties文件中的数据库设置参数。根据修改参数创建对应MySql或Oracle数据库用户和参数。运行bin\\init-db.bat脚本，即可导入表结构及演示数据(linux操作系统：在控制台中切换至项目根目录，运行命令：mvn antrun:run -Pinit-db)运行bin\\package.bat进行打包系统，完成后会在target目录生成jeesite.war文件将jeesite.war文件，拷贝到您的Tomcat8 webapps目录下进行部署，启动Tomcat8。启动Tomcat后浏览器访问系统，最高管理员账号，用户名：thinkgem 密码：admin常见问题用一段时间提示内存溢出，请修改JVM参数：-Xmx512m -XX:MaxPermSize=256m有时出现文字乱码：修改Tomcat的server.xml文件的Connector项，增加URIEncoding=\""UTF-8\""为什么新建菜单后看不到新建的菜单？因为授权问题，菜单管理只允许最高管理员账号管理（最高管理员默认账号：thinkgem 密码：admin）。更多文档https://gitee.com/thinkgem/jeesite/tree/master/doc如何交流、反馈、参与贡献？QQ 群号： 127515876、209330483、223507718、709534275、730390092、183903863(外包)GitHub：https://github.com/thinkgem/jeesite开源中国：https://gitee.com/thinkgem/jeesite官方网址：http://jeesite.com  论坛：http://www.jeesite.net支持JeeSite发展：（加我好友）支付宝：thinkgem@163.com   微信：thinkgem一个人的个人能力再强，也无法战胜一个团队，希望兄弟姐妹的支持，能够贡献出自己的部分代码，参与进来共同完善它(^_^)。怎么共享我的代码：手把手教你如何加入到github的开源世界！版权声明本软件使用 Apache License 2.0 协议，请严格遵照协议内容：需要给代码的用户一份Apache Licence。如果你修改了代码，需要在被修改的文件中说明。在延伸的代码中（修改和有源代码衍生的代码中）需要带有原来代码中的协议，商标，专利声明和其他原来作者规定需要包含的说明。如果再发布的产品中包含一个Notice文件，则在Notice文件中需要带有Apache Licence。你可以在Notice中增加自己的许可，但不可以表现为对Apache Licence构成更改。Apache Licence也是对商业应用友好的许可。使用者也可以在需要的时候修改代码来满足需要并作为开源或商业产品发布/销售你可以二次包装出售，但还请保留文件中的版权和作者信息，并在你的产品说明中注明JeeSite。你可以以任何方式获得，你可以修改包名或类名，但还请保留文件中的版权和作者信息。为何使用MyBatis学习成本：Hibernate的真正掌握要比Mybatis来得难不少。Mybatis框架相对简单很容易上手，也更加灵活。对于学习过Hibernate的用户，学习起MyBatis也更容易上手。开发成本：大家都说Hibernate开发效率高，个人认为MyBatis的开发效率并不比Hibernate低，通过代码生成器和封装开发效率不是问题，并且MyBatis可控性比较高，并更易于维护。性能方面：由于Hibernate比较难以掌握，性能方面也成为了Hibernate的问题瓶颈，当然如果你对Hibernate非常熟，Hibernate性能上定不是问题。但对于大多数情况下，真正掌握Hibernate的人少之又少，然而的也就造就了项目风险加大。多数据库支持：有些人说MyBatis对多数据库支持困难，我认为这个不是问题，虽说目前JeeSite仅提供对MySql或Oracle数据库的支持，但对于支持其它数据库的改动也不是很麻烦，SQL是被专门写在XML中，对于大多数SQL来说都是通用的，对于不同的数据库可通过dbName区分和修改各别的SQL片段即可。上述纯属个人观点，欢迎指正（thinkgem@163.com）。如果你仍然喜欢Hibernate，请点击下载JeeSite Hibernate版本。"
38,learn-co-curriculum/phase-1-javascript-functions-continued,https://github.com/learn-co-curriculum/phase-1-javascript-functions-continued/blob/master/README.md,JavaScript,"Functions: ContinuedLearning GoalsDefine a function using a function declarationDefine hoistingDefine function expressionDefine anonymous functionDefine a function using a function expressionDefine an IIFE: Immediately-Invoked Function ExpressionDefine function-level scopeDefine scope chainDefine closureIntroductionThis lab describes some more advanced concepts related to JavaScript functions.Be sure to take time to experiment or read up on a concept if you're notcomfortable with the idea before moving on. If you're struggling here, theremainder of this module will be challenging. Fix any gaps now before moving on.We also recommend that you complete the lab as you read through the sections.Reinforcing what you read by physically typing in the code will help make surethe concepts are locked in. We'll prompt you when it's a good time to shiftmodes from \""reading along\"" to coding.Getting StartedIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Define a Function Using Function DeclarationIn JavaScript, the most common way to define functions is with a functiondeclaration:function razzle() {  console.log(\""You've been razzled!\"");}The word razzle becomes a pointer to some stored, potential,not-yet-actually-run bit of work (the function). We use the pointer to callor invoke the function. We call the function by adding () after thepointer.function razzle() {  console.log(\""You've been razzled!\"");}razzle();//=> \""You've been razzled!\""Interestingly, you can write function declarations after you call them:razzle(); //=> \""You've been razzled!\""function razzle() {  console.log(\""You've been razzled!\"");}Functions can be passed arguments, given default arguments, etc. Here's abrief code synopsis:function razzle(lawyer = \""Billy\"", target = \""'em\"") {  console.log(`${lawyer} razzle-dazzles ${target}!`);}razzle(); //=> Billy razzle-dazzles 'em!razzle(\""Methuselah\"", \""T'challah\""); //=> Methuselah razzle-dazzles T'challah!LAB: Implement a function called saturdayFun. It should return a Stringlike \""This Saturday, I want to ....!\"" Fill in the ... with the activitythat's passed in as the first parameter. If nothing is passed in, default to\""roller-skate\"". Run npm test to verify you've gotten the first set oftests passing before continuing with the lesson.Define HoistingJavaScript's ability to call functions before they appear in the code iscalled hoisting. For hoisting to work, the function must be defined using afunction declaration.Define Function ExpressionWe've learned that programming languages feature expressions: arrangements ofconstants, variables, and symbols that, when interpreted by the language,produce a value. To review, open up your browser console and type in theseexamples:1 + 1; //=> 2\""Razzle \"" + \""dazzle!\""; //=> \""Razzle dazzle!\""The examples above are expressions that return primitive values, butJavaScript also has function expressions that look like this:function() {  console.log(\""Yet more razzling\"");}The value returned by this expression is the function itself. Go ahead andenter the above into the browser console; you should see the following:Uncaught SyntaxError: Function statements require a function nameThe problem is that, when the function expression appears by itself as shownabove, JavaScript does not recognize it as a function expression; it insteadinterprets it as a function declaration that's missing its name. One way to tellthe JavaScript engine that it's a function expression is to use thegrouping operator () to wrap the entire thing:(function () {  console.log(\""Yet more razzling\"");});Recall that the grouping operator is usually used in arithmetic operations totell the JavaScript engine to evaluate the value that's inside it first. It'sserving a similar purpose in this case: it's telling JavaScript to interpretwhat's inside the parentheses as a value. With the grouping operator in place,the JavaScript engine recognizes our function as a function expression. Enterthe function into your console again, this time using the grouping operator. Youshould see the following:ƒ () {  console.log(\""Yet more razzling\"");}JavaScript now correctly shows us the return value of our function expression: afunction (indicated by the ƒ ()) storing the work of logging our message.Define Anonymous FunctionAn anonymous function is, quite simply, a function that doesn't have a name:function() {  console.log(\""Yet more razzling\"");}Unlike a function declaration, there's no function name in front of the ().Note, however, that if we don't assign a name to the function, we have no way tocall it. We lose access to our function immediately after it's created. So howcan we invoke an anonymous function? We've seen one way before: we can use it asa callback function. For example, you'll often see anonymous functions passed asan argument to an event listener:const button = document.getElementById(\""button\"");button.addEventListener(\""click\"", function () {  console.log(\""Yet more razzling\"");});Our anonymous function is being passed as an argument to addEventListener. TheJavaScript engine \""stores it away\"" as work to be executed later, when the buttonis clicked.Define a Function Using a Function ExpressionAnother way we can solve the problem of accessing an anonymous function is bydeclaring a variable and assigning the function as its value. Recall that anyexpression can be assigned to a variable; this includes function expressions:const fn = function () {  console.log(\""Yet more razzling\"");};The code above defines our function using a function expression. If we askJavaScript what's in fn, it tells us:fn; //=> ƒ () { console.log(\""Yet more razzling\"") }Here, fn is a pointer to the stored block of work that hasn't yet beeninvoked. Just as with function declaration, to actually do the work, we needto invoke or call the function. We do this by adding () to the end of our\""pointer\"", the variable name:const fn = function () {  console.log(\""Yet more razzling\"");}; //=> undefinedfn; //=> ƒ () { console.log(\""Yet more razzling\"") }fn(); // \""Yet more razzling\""Also as with a function declaration, if we need to pass arguments to thefunction, we would include those in the parentheses when we call the function.We now know how to define a function as a function expression. Very importantly,function expressions are not hoisted. The same is true for any variableassignment: if we assign a String or the result of an arithmetic expression toa variable, those assignments are not hoisted either.LAB: Implement a function expression called mondayWork. The functionshould return a String like \""This Monday, I will ... .\"" Fill in the ...with the activity that's passed in as the first parameter. If nothing is passedin, default to \""go to the office\"". Run npm test to verify you've gottenthis set of tests passing before continuing with the lesson.Define an IIFE: Immediately-Invoked Function ExpressionAnother way to invoke an anonymous function is by creating what's known as animmediately-invoked function expression (IIFE).As a thought experiment, consider what happens here:(function (baseNumber) {  return baseNumber + 3;})(2); //=> ???We recognize the first () as the grouping operator that tells the JavaScriptengine to interpret the contents as a value — in this case, a functionexpression. What this means is that, in the IIFE statement, the value returnedby the first set of parentheses is an anonymous function, which can be invoked(immediately).The second () are the () of function invocation. When we put themimmediately after the first set of parentheses, we're invoking the function thatthose parentheses return immediately after defining it. Try it out in thebrowser console:(function (baseNumber) {  return baseNumber + 3;})(2); //=> 5Interestingly, any variables, functions, Arrays, etc. that are definedinside of the function expression's body can't be seen outside of theIIFE. To see this, check the value of baseNumber in the console. It's likeopening up a micro-dimension, a bubble-universe, doing all the work you couldever want to do there, and then closing the space-time rift. We'll see some ofthe practical power of \""hiding things\"" in IIFEs a little later in this lesson.Define Function-Level ScopeJavaScript exhibits \""function-level\"" scope. This means that if a function isdefined inside another function, the inner function has access to all theparameters of, as well as any variables defined in, the outer function. Thisworks recursively: if we nest a third function inside the inner function, itwill have access to all the variables of both the inner and outer enclosingfunctions. Each of the enclosing parents' scopes are made available via thescope chain. We will define the scope chain a bit later in this lesson. Let'sstart by seeing it in action.ASIDE: This is where people really start to get awed by JavaScript.Consider this code:function outer(greeting, msg = \""It's a fine day to learn\"") {  // 2  const innerFunction = function (name, lang = \""Python\"") {    // 3    return `${greeting}, ${name}! ${msg} ${lang}`; // 4  };  return innerFunction(\""student\"", \""JavaScript\""); // 5}outer(\""Hello\""); // 1//=> \""Hello, student! It's a fine day to learn JavaScript\""Let's break this down:We call outer, passing \""Hello\"" as an argument.The argument (\""Hello\"") is saved in outer's greeting parameter. Theother parameter, msg, is set to a default value.Here's our old friend the function expression. It expects two arguments, tobe stored in the parameters name and lang, and lang is assigned thedefault value of \""Python\"". The function expression itself is saved in thelocal variable innerFunction.Inside innerFunction we make use of its parameters, name and lang,as well as the greeting and msg parameters defined ininnerFunction's containing (parent) function, outer. innerFunction hasaccess to those variables via the scope chain.Finally, inside outer, we invoke innerFunction, passing arguments thatget stored in innerFunction's name and lang parameters.This might look a little bit weird, but it generally makes sense to ourintuition about scopes: inner things can see their parent outer things.Note that currently, the values of the arguments being passed to innerFunctionare part of the definition of outer. In order to change those values wehave to modify the outer function. This is not ideal.With a simple change, something miraculous can happen. Rather than having outerreturn the result of calling innerFunction, let's have it return the functionitself:function outer(greeting, msg = \""It's a fine day to learn\"") {  const innerFunction = function (name, lang = \""Python\"") {    return `${greeting}, ${name}! ${msg} ${lang}`;  };  return innerFunction;}The return value of outer is now an anonymous function. To invoke it, weupdate the function call as follows:outer(\""Hello\"")(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""The function call is processed by the JavaScript engine from left to right.First, outer is called with the argument \""Hello.\"" The return value of callingouter(\""Hello\"") is itself a function and, therefore, can itself be called. Wedo this by chaining on the second set of parentheses. This is basically the sameconcept as assigning a function expression to a variable and using the variablename followed by () to invoke the function. You can almost think ofouter(\""Hello\"") as the \""name\"" of the function that's returned by outer. It'sthe same as if we did this:const storedFunction = outer(\""Hello\"");storedFunction(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""Note that we are no longer calling innerFunction from inside outer.Amazingly, the code works exactly the same: it still has access tothose parent function's variables. It's like a little wormhole in space-time tothe outer's scope!We can tighten this code up a bit more: instead of assigning the functionexpression to innerFunction and returning that, let's just return the functionexpression.function outer(greeting, msg = \""It's a fine day to learn\"") {  return function (name, lang = \""Python\"") {    return `${greeting}, ${name}! ${msg} ${lang}`;  };}outer(\""Hello\"")(\""student\"", \""JavaScript\"");//=> \""Hello, student! It's a fine day to learn JavaScript\""To review: we first called outer, passing in the argument \""Hello\"". outerreturned an anonymous function inside which the default value of msg andthe passed-in value of greeting have now been set. It's almost as if outerreturned:function(name, lang=\""Python\"") { // The \""inner\"" function  return `Hello, ${name}! It's a fine day to learn ${lang}`}We invoked this returned \""inner\"" function\"" by adding the second set ofparentheses and passing the arguments \""student\"" and \""JavaScript\"", which werestored in name and lang. This filled in the final two values inside of thetemplate string and returned:\""Hello, student! It's a fine day to learn JavaScript\"";Define ClosureIn the previous example, we could call the \""inner\"" function, the anonymousfunction, a \""closure.\"" It \""encloses\"" the function-level scope of its parent.And, like a backpack, it can carry out the knowledge that it saw — even whenyou're out of the parent's scope.Recall the IIFE discussion. Since what's inside an IIFE can't be seen, if wewanted to let just tiny bits of information leak back out, we might want topass that information back out, through a closure.const array = (function (thingToAdd) {  const base = 3;  return [    function () {      return base + thingToAdd;    },    function () {      return base;    },  ];})(2);Note that the value on the right of the = in the first line is a functionexpression. That function takes a single argument and returns an array thatcontains two functions. The (2) after the function expression executes thatfunction (immediately), and the two inner functions are stored in the arrayvariable.Go ahead and copy the code above into your browser console and take a look at thevalues of the two elements of array. You should see the following:array[0]; //=> ƒ () { return base + thingToAdd; }array[1]; //=> ƒ () { return base; }However, if you try looking at the value of base in the console you'll get areference error: the value of base is not accessible outside the function it'sdefined in. Now go ahead and call the two returned functions; you should seethe following:array[0](); //=> 5array[1](); //=> 3The two functions being returned in array are closures; they have accessto the base variable because it's defined in their parent function. Whenthey're executed, they \""let out\"" the values of the sum and the original basenumber, allowing us to see them.Define Scope ChainThe mechanism behind all the cool stuff we just saw is the scope chain whichallows functions defined inside functions (inside functions) to access all theirparent (and grandparent) scopes' variables. Here's a simple example:function demoChain(name) {  const part1 = \""hi\"";  return function () {    const part2 = \""there\"";    return function () {      console.log(`${part1.toUpperCase()} ${part2} ${name}`);    };  };}demoChain(\""Dr. Stephen Strange\"")()(); //=> HI there Dr. Stephen StrangeWhen it is called, the innermost function has access to name, part1, andpart2 through the scope chain. As a result, when the console.log()statement is run, the string includes all three values. That's awesome wormhole,space-time magic!LAB:Implement a function called saturdayFun:It should define a function.It uses a default argument, 'roller-skate' when no arguments are passed.It allows the default argument to be overridden.Implement a function called mondayWork:It should define a function.It uses a default argument, 'go to the office' when no arguments are passed.It allows the default argument to be overridden.Implement a function called wrapAdjective:It should return a function. This \""inner\"" function should:take a single parameter that should default to \""special\"". Name ithowever you wish.return a String of the form \""You are ...!\"" where ... should be theadjective this function received wrapped in visual flair.It should take as parameter a String that will be used to create visual flair.You may call the parameter whatever you like, but its default value shouldbe \""*\"".Call example: const encouragingPromptFunction = wrapAdjective(\""!!!\"")Thus a total call should be:wrapAdjective(\""%\"")(\""a dedicated programmer\""); //=> \""You are %a dedicated programmer%!\""Run npm test to verify you've gotten this set of tests passing. Once you'redone, commit and push your changes up to GitHub, then submit your work to Canvasusing CodeGrade.ConclusionIn this lesson, we've covered the basics of function declaration, invocation,and function scope. As a refresher on your skills, we've provided a simple labto make sure that you're set for the new information coming up in the rest ofthis module.ResourcesWikipedia — First-class functionStackOverflow — What is meant by 'first class object'?Helephant — Functions are first class objects in javascript (Wayback Machine)2ality — Expressions versus statements in JavaScriptMDN — FunctionsMDN — Statements and declarations"
39,aws-samples/aws-elastic-beanstalk-express-js-sample,https://github.com/aws-samples/aws-elastic-beanstalk-express-js-sample/blob/main/README.md,JavaScript,"AWS Elastic Beanstalk Node.js Sample AppThis repository contains a sample Node.js web application built using Express, meant to be used as part of the AWS DevOps Learning Path.SecuritySee CONTRIBUTING for more information.LicenseThis library is licensed under the MIT-0 License. See the LICENSE file."
40,learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/blob/master/README.md,JavaScript,"Introduction to Functions LabLearning GoalsPractice reading tests and test errorsPractice writing functionsLearn how to use JavaScript's toUpperCase() and toLowerCase() methodsPractice using return and console.log()Practice creating conditional statementsIntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code. (If you are using a different code editor,the command will be different.)Code-AlongTo start, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require(\""expect\"");const babel = require(\""babel-core\"");const jsdom = require(\""jsdom\"");const path = require(\""path\"");This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run the tests. You may recall that we talked aboutpackages in an earlier lesson. A library is similar: it's code that someoneelse (usually multiple someones) wrote for our use. The code above makes thelibraries available inside our test environment, which enables us to run thetests.If you go to test/indexTest.js, you'll seedescribe(\""shout(string)\"", function () {  // there's stuff in here, too});describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe(\""shout(string)\"", function () {  it(\""receives one argument and returns it in all caps\"", function () {    // we'll get to this in a sec  });});These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout(\""hello\"")).toEqual(\""HELLO\"");which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, first run npm install in the terminal to install thedependencies, then run npm test. The first output you'll see will looksomething like this:$ npm test> java-script-intro-to-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) takes a string argument and logs it in all caps using console.log()  logWhisper(string)    4) takes a string argument and logs it in all lowercase using console.log()  sayHiToHeadphonedRoommate(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I would love to!\"" if `string` is \""Let's have dinner together!\""`  0 passing (120ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:461:21)  3) logShout(string)       takes a string argument and logs it in all caps using console.log():     ReferenceError: logShout is not defined      at Context.<anonymous> (test/indexTest.js:18:5)      at processImmediate (internal/timers.js:461:21)  4) logWhisper(string)       takes a string argument and logs it in all lowercase using console.log():     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/indexTest.js:30:5)      at processImmediate (internal/timers.js:461:21)  5) sayHiToHeadphonedRoommate(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:40:5)      at processImmediate (internal/timers.js:461:21)  6) sayHiToHeadphonedRoommate(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:44:5)      at processImmediate (internal/timers.js:461:21)  7) sayHiToHeadphonedRoommate(string)       returns \""I would love to!\"" if `string` is \""Let's have dinner together!\""`:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:48:5)      at processImmediate (internal/timers.jHm, seven failed tests - that seems like a lot to navigate. Let's go ahead andget Mocha set up to only show the first failing test. Find the test script inthe package.json file and add the --bail tag to the end:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""Save the file and run the tests. You should now see something like this:$ npm test> java-script-intro-to-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail  shout(string)    1) receives one argument and returns it in all caps  0 passing (159ms)  1 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)Much better! Now let's see if we can get that first test to pass. Open upindex.js.When we write our code, we follow the guidance of the tests. Let's take a lookat that first error:  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)The output above comes from this test in indexTest.js:describe(\""shout(string)\"", function () {  it(\""receives one argument and returns it in all caps\"", function () {    expect(shout(\""hello\"")).toEqual(\""HELLO\"");  });});We know that the test is expecting a function called shout that accepts anargument. The error tells us that shout isn't defined. So let's start bydeclaring our function in index.js:function shout(string) {  // todo}We know we won't pass the test yet because our function doesn't do anything yet.However, if we rerun the test, it should now give us more information about whatwe need to do:  1) shout(string)       receives one argument and returns it in all caps:     Error: Expected undefined to equal 'HELLO'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:4:28)      at processImmediate (internal/timers.js:461:21)Anytime you see Error: Expected undefined to equal [something], that meansthat the test is looking for a return value. We can also see the descriptionof what the function should do: it receives one argument and returns it in all caps.Okay, so with that information, we know that our function should return whateverstring is passed in as an argument:function shout(string) {  return string;}But we're still missing one piece: how do we make string all caps? JavaScripthas a built-in method for that! It's called toUpperCase(). We can call it onany string:\""Hello!\"".toUpperCase(); // 'HELLO!'Above, we've called it directly on a literal string but, of course, we can alsocall it on a variable. So let's try it with our shout() function:function shout(string) {  return string.toUpperCase();}and run our tests again. We get:  shout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  1 passing (147ms)  1 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:461:21)Hey! We got one to pass! Time to tackle the next error!Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!InstructionsIn this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing because whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.After you get whisper(string) passing, the next two tests will be checking tosee if a specific string is logged when a function is called. You will stillneed to use the .toUpperCase() and .toLowerCase() methods forlogShout(string) and logWhisper(string). Keep in mind, though, that thesetests are not looking for return values, only logs.The final function you need to create is sayHiToHeadphonedRoommate(). Yourroommate is very into their music, so whispering can be a bit difficult, butthey'll always hear you if you say, \""Let's have dinner together!\"" This time,you will need to return different strings depending on the string passed intothe function.Note: Although there are 3 tests for sayHiToHeadphonedRoommate(), you onlyneed to write one function. This function should be able to handle all threetest conditions:If the string that is passed into the function is all lowercase, the functionshould return \""I can't hear you!\""If the string that is passed into the function is all uppercase, the functionshould return \""YES INDEED!\""If the string that is passed into the function is equal to \""Let's have dinnertogether!\"", the function should return \""I would love to!\""How do we check if a string is all lowercase or all uppercase? Let's take a lookusing a REPL. Click on \""Show files\"" and then the \""index.js\"" file to see the code:<iframe height=\""400px\"" width=\""100%\"" src=\""https://replit.com/@lizbur10/InsubstantialTanInternet?lite=true\"" scrolling=\""no\"" frameborder=\""no\"" allowtransparency=\""true\"" allowfullscreen=\""true\"" sandbox=\""allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\""></iframe>In the first line we're defining a string variable. In the next two lines we logthe original variable, then the variable after calling toUpperCase() on it.Finally, we're checking to see whether those two values are equal. If you clickthe Run button, you'll see that the original string is mixed case and the uppercased version of it is (not surprisingly) uppercase. It should not come as asurprise, therefore, that comparing them with the equality operator (===)returns false. What do you think will happen if we initialize string to\""HELLO!\"" instead? Play around with different values for string in replitand see what happens. Also try doing the same thing with toLowerCase() andmake sure you understand what's happening.Basically, if we compare a string to its uppercased (or lowercased) version andthe two values are equal, then we know that the original string is uppercase (orlowercase). So now that we know how to make these comparisons, how can we usethem to conditionally return different strings? If you need a refresher, go backand review the lesson on Selection with Conditionals.Remember that punctuation is important! Humans might be able to understand that\""Lets have dinner together\"" is close enough to \""Let's have dinner together!\"" andmeans the same thing, but JavaScript will not consider these equal!Reminder: As you're working through the tests, you can run your code byrunning node index.js in the terminal. If you want to do this, remember thatyou'll need to call the function inside index.js. If you are just runningtests, however, you don't need to include a function call — the tests willhandle that for you.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process.Good luck!"
41,learn-co-curriculum/phase-0-pac-3-function-parameters-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/blob/master/README.md,JavaScript,"JavaScript Function Parameters LabLearning GoalsDefine a function that uses a parameterDefine a function that uses two parametersDefine a function with a parameter that has a default valueIntroductionIn this lab, we'll practice using parameters in our functions. We'll also learnhow to create a default value for a parameter.If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)You will be writing your code in the index.js file and running the tests byrunning npm test in the terminal. Remember to run npm install first toinstall the lab's dependencies.Define a Function That Uses a ParameterInstructions: Define a function called introduction that defines aparameter, name, and returns the phrase: \""Hi, my name is ${name}.\""Define a Function That Uses Two ParametersSetting up your function to use two parameters is straightforward: simplyinclude both parameters in the parentheses in the function declaration line,separated by a comma:function logTwoValues(value1, value2) {  console.log(`The two values are ${value1} and ${value2}.`);}As you might expect, if we instead wanted to log three values — or tenvalues — we can just continue listing the parameters in the parentheses,with commas between each.Instructions: To pass the second test, you'll need to define a functioncalled introductionWithLanguage that defines two parameters, name andlanguage, and returns the phrase: \""Hi, my name is [name] and I am learning toprogram in [language].\""Define a Function That Uses an Optional ParameterIn a previous lesson, we created a function that logs a personalized greeting:function sayHelloTo(firstName) {  console.log(`Hello, ${firstName}!`);}What if we wanted to make this function work whether or not a first name ispassed in as an argument? We can do this by setting a default value for thefirstName parameter:function sayHelloTo(firstName = \""User\"") {  console.log(`Hello, ${firstName}!`);}Note that we have used the assignment operator (=) here to assign a defaultvalue. The way this works is, if the function is called with an argument, theargument's value will supersede the default value. If it's called without anargument, the function will use the default value, logging \""Hello, User!\""Instructions: Copy the function you created for the second test and name itintroductionWithLanguageOptional. It should have two parameters, name andlanguage, and the second parameter should have a default value of\""JavaScript\"".After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process."
42,ironhack-labs/lab-javascript-functions-and-arrays,https://github.com/ironhack-labs/lab-javascript-functions-and-arrays/blob/master/README.md,JavaScript,"LAB | JS Functions & Arrays     Learning Goals  This exercise allows you to practice and apply the concepts and techniques taught in class.Upon completion of this exercise, you will be able to:Run predefined tests in Jasmine to verify that the program meets the technical requirements.Identify expected code behavior by reading and understanding test results and errors.Declare and invoke functions using function declaration, function expression, and arrow function syntax.Use the return  keyword to return a value from a function.Pass primitive values as arguments to functions.Pass arrays to functions as arguments.Access items stored in arrays using the indexes,Add, remove and check for items in an array using the index and array methods (unshift, push, splice, shift, pop, indexOf, and includes).Iterate over arrays using the for  and forEach loops.     IntroductionArray manipulation is a common task in programming. Whether you are calculating a total for a shopping cart, grabbing only the first names from a list of people, or moving a piece on a chessboard, you are probably modifying or manipulating an array somewhere in the code.RequirementsFork this repoClone it to your machineSubmissionUpon completion, run the following commands:git add .git commit -m \""Solved lab\""git push origin masterCreate a Pull Request so that your TAs can check your work.Automated Testing IntroductionWhat is automated testing?Automated software testing is the process of programmatically executing an application to validate and verify that it meets the business needs, as well as the technical requirements, and that it behaves as expected.Testing should be viewed as a continuous process, not a discrete operation or single activity in the development lifecycle. Designing tests at the beginning of the product lifecycle can mitigate common issues that arise when developing complex code bases.Having a strong test suite can provide you the ease of mind since you will be able to confidently improve upon your work while knowing that your not breaking a previously developed feature.Testing labsThis LAB and some labs you will work on during the bootcamp are equipped with unit tests to provide automated feedback on your lab progress.Testing with JasmineJasmine is an automated testing framework for JavaScript. It is designed to be used in Behavior-driven Development (BDD) programming, focusing more on the business value than the technical details.We have already included Jasmine in the project you just forked, so let's see how to use it to implement our code.UsageBefore starting coding, we will explain the project structure we have provided you:lab-js-functions-and-arrays  ├── README.md  ├── SpecRunner.html  ├── jasmine  │   └── ...  ├── src  │   └── functions-and-arrays.js  └── tests      └── functions-and-arrays.spec.jsWe will be working with the src/functions-and-arrays.js. You can find all the files in the jasmine folder needed to use Jasmine. All these files are already linked with the SpecRunner.html file.If you want to check the tests, they are in the tests/functions-and-arrays.spec.js file.Run testsRunning automated tests with Jasmine is super easy. All you need to do is open the SpecRunner.html file in your browser. You will find something similar to this:Pass the testsYou should write your code on the src/functions-and-arrays.js file. While following the instructions for each iteration, you should check every test and ensure it's passing, before moving on.Do not rush. You should take your time to read every iteration carefully and address the breaking tests as you progress through the exercise.When coding with tests, it is super important that you carefully read and understand the errors you are getting. This way, you will know what's expected from your code.To see the output of your JavaScript code, open the Console in the Developer Tools.Important: Note that you don't need to execute the functions yourself; the tests will automatically load and execute the functions on each test run. All you need to do is declare the functions, ensure they handle the parameters passed and return what is indicated in the iteration instructions and the test description. We provide you with a sample array for some iterations, so you can do some manual testing if you wish.InstructionsWhile following the instructions for each iteration, carefully read the instructions and test descriptions to understand the task requirements fully. Do not rush. It would be best if you took your time to read every iteration carefully.Iteration #1: Find the maximumImplement the function maxOfTwoNumbers that takes two numbers as arguments and returns the bigger number.Iteration #2: Find the longest wordImplement the function findLongestWord that takes as an argument an array of words and returns the longest one. If there are 2 with the same length, it should return the first occurrence.You can use the following array to test your solution:const words = ['mystery', 'brother', 'aviator', 'crocodile', 'pearl', 'orchard', 'crackpot'];Iteration #3: Calculate the sumIteration #3.1: Sum numbersCalculating a sum can be as simple as iterating over an array and adding each of the elements together.Implement the function named sumNumbers that takes an array of numbers as an argument and returns the sum of all the numbers in the array. Later in the course, we will learn how to do this using the reduce array method, making your work significantly easier. For now, let's practice the \""declarative\"" way of adding values using loops.You can use the following array to test your solution:const numbers = [6, 12, 1, 18, 13, 16, 2, 1, 8, 10];Bonus - Iteration #3.2: A generic sum() functionIn iteration 3, you created a function that returns the sum of an array of numbers. But what if we want to calculate the sum of the length of words in an array? What if it also includes boolean values? To achieve this, we must create a function allowing this flexibility.You should implement the function sum() in this iteration. The function should take an array of mixed values - numbers, strings, and booleans. The function should add all the string lengths, numeric values, and numeric values of booleans to the total sum and return the sum.You can use the following array to test your solution:const mixedArr = [6, 12, 'miami', 1, true, 'barca', '200', 'lisboa', 8, 10];// should return: 57Note: Your function should only accept an array with numbers, strings, or booleans. If the array contains any other data type, such as an object, you should throw an error. In JavaScript, the syntax for throwing an error is as follows:throw new Error(\""Error message goes here\"");When specifying the error message, you should be specific and descriptive in explaining the error.Iteration #4: Calculate the averageCalculating an average is a prevalent task. So let's practice it a bit.The logic behind this:Find the sum as we did in the first exercise (or how about reusing the function sumNumbers()?)Divide that sum by the number of elements in the array.Iteration #4.1: Array of numbersImplement the function averageNumbers that expects an array of numbers and returns the average of the numbers.You can use the following array to test your solution:const numbers = [2, 6, 9, 10, 7, 4, 1, 9];Iteration #4.2: Array of stringsImplement the function named averageWordLength that receives as a single argument an array of words and returns the average length of the words:You can use the following array to test your solution:const words = ['seat', 'correspond', 'linen', 'motif', 'hole', 'smell', 'smart', 'chaos', 'fuel', 'palace'];Bonus - Iteration #4.3: A generic avg() functionCreate function avg(arr) that receives any mixed array and calculates the average. For example, consider an array filled with numbers and/or strings and/or booleans as a mixed array.The non-numerical values should be counted as follows:Booleans: true counts as 1 and false counts as 0.Strings: use the string length as the numeric value.const mixedArr = [6, 12, 'miami', 1, true, 'barca', '200', 'lisboa', 8, 10];// should return: 5.7Iteration #5: Unique arraysTake the following array, remove the duplicates, and return a new array. You are more than likely going to want to check out the Array methods indexOf and includes.Do this in the form of a function uniquifyArray that receives an array of words as an argument.You can use the following array to test your solution:const words = [  'crab',  'poison',  'contagious',  'simple',  'bring',  'sharp',  'playground',  'poison',  'communion',  'simple',  'bring'];Iteration #6: Find elementsLet's create a simple array search.Declare a function named doesWordExist that will take in an array of words as one argument and a word to search for as the other. Return true if the word exists in the array; otherwise, return false.You can use the following array to test your solution:const words = ['machine', 'subset', 'trouble', 'starting', 'matter', 'eating', 'truth', 'disobedience'];Iteration #7: Count repetitionDeclare a function named howManyTimes that will take in an array of words as the first argument and a word to search for as the second argument. The function will return the number of times that word appears in the array.You can use the following array to test your solution:const words = [  'machine',  'matter',  'subset',  'trouble',  'starting',  'matter',  'eating',  'matter',  'truth',  'disobedience',  'matter'];Bonus - Iteration #8Bonus - Iteration #8.1: Product of adjacent numbersGiven multiple arrays, find the greatest product of four adjacent numbers.We consider adjacent any four numbers that are next to each other horizontally or vertically. For example, if we have a 5x5 Matrix like:[ 1,  2, 3, 4, 5][ 1, 20, 3, 4, 5][ 1, 20, 3, 4, 5][ 1, 20, 3, 4, 5][ 1,  4, 3, 4, 5]The greatest product will be the 20x20x20x4 = 32000.Declare a function named greatestProduct(matrix) to find it in the 20×20 grid below!const matrix = [  [08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08],  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00],  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65],  [52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91],  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],  [24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],  [67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21],  [24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],  [21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92],  [16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],  [86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],  [19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40],  [04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],  [88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],  [04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36],  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16],  [20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54],  [01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48]];Bonus - Iteration #8.2: Product of diagonalsFollowing the logic you've used in iteration #8.1, declare a function called greatestProductOfDiagonals(matrix). It takes a matrix as a parameter and returns the greatest product of any four values laid out diagonally, in either direction.Happy coding! ❤️FAQs  I am stuck in the exercise and don't know how to solve the problem or where to start.  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.Back to top  All of the Jasmine tests are failing and in red. Why did this happen?  One possible reason why all of the Jasmine tests are failing is that there is a syntax error in the code being tested. If the code contains a syntax error, it will not be loaded properly and none of the tests will be able to run. This will cause all of the tests to fail.To troubleshoot this issue, you will need to examine the code being tested for syntax errors. Look for missing brackets, semicolons, or other syntax issues that could be causing the problem. If you find a syntax error, correct it and try running the tests again.Another possibility is that there is an issue with the tests. It is possible that you may have modified the test file and caused an issue. If you have made changes to the test file, try copying and pasting the original test file and running the tests again to see if this resolves the issue.Back to top  How do you find a length of a string in JavaScript?  To find the length of a string, use the length property. Here is an example:const str = \""Hello, world!\""\"";console.log(str.length); // 13The length property returns the number of characters in the string, including spaces and special characters.Back to top  How do I loop over an array?  Loops allow you to repeat a block of code a certain number of times. There are several ways to loop over an array in JavaScript:For loopThe for loop is the most traditional way to loop through an array in JavaScript. It consists of three parts: the initialization, the condition, and the increment/decrement:const animals = ['cat', 'dog', 'bird'];// initialize counter variable (let i = 0)// set condition (i < animals.length)// increment counter (i++)for (let i = 0; i < animals.length; i++) {  console.log(animals[i]);}In initialization, you declare a counter variable and set its initial value.The condition is a boolean expression that is evaluated before each iteration of the loop. If the condition is true, the loop will continue. Once the condition turns false, the loop will terminate.The increment/decrement is where you update the counter variable and it happens at the end of each iteration.The block of code inside the loop is repeated during each iteration.While loopThe while loop is another way to loop through an array in JavaScript. It consists of a condition and a block of code that is executed as long as the condition is true.Like the for loop, the while loop requires a counter variable to keep track of the current position in the array. The counter variable must be initialized before the loop and incremented or decremented at the end of each iteration.const animals = ['cat', 'dog', 'bird'];// initialize a counter variable (i)let i = 0;// set condition (i < animals.length)while (i < animals.length) {  console.log(animals[i]);    // increment counter (i++)  i++;}Back to top  How do I loop over an array using the forEach() method?  The forEach() method executes a provided function once for each array element. It does not return a new array but rather executes the function on each element in the array.The syntax of the forEach() method is as follows:array.forEach( function(element) {  // code to be executed for each element});  Here is an example that uses the forEach() method to log each element and its index in an array to the console:const fruits = ['apple', 'banana', 'cherry'];fruits.forEach( function(element, index) {  console.log(`${index}: ${element}`);});You can also use an arrow function as the callback function for forEach():fruits.forEach((element, index) => {  console.log(`${index}: ${element}`);});Back to top  What could cause array.length to return undefined?  If you try to access the .length property on an array (e.g., array.length) but get undefined, it means that the variable you are accessing is not actually an array.  How do I fix this?Check that the variable you are trying to access is actually an array.Back to top  Why is my function returning the last element of the array instead of the longest one?  Your function might not be correctly checking for the longest element in the array. In other words, there may be an issue with the logic of the conditional statements in the function or with the comparison being used in the conditionals.To fix this issue, you should check the logic of the conditional statements in the function.Back to top  How can I compare the length of each word in an array in JavaScript?  To compare the length of each word in an array in JavaScript, you can use a loop to iterate through the array and compare the length of each element using the .length property.Here is an example of how you loop over an array:function findLongestWord(words) {  for (let i = 0; i < words.length; i++) {    console.log(words[i]);  }}  To compare the length of each element, you should use a conditional statement in the following way:  if ( words[i].length > longestWord.length) {    console.log(`${words[i].length} is longer than ${longestWord.length}`);  }Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first and then clone your fork to your local machine to be able to push the changes.Note: You should make a copy of your local code to avoid losing it in the process.Back to top"
43,Asabeneh/30-Days-Of-React,https://github.com/ironhack-labs/lab-javascript-functions-and-arrays/blob/master/README.md,JavaScript,"LAB | JS Functions & Arrays     Learning Goals  This exercise allows you to practice and apply the concepts and techniques taught in class.Upon completion of this exercise, you will be able to:Run predefined tests in Jasmine to verify that the program meets the technical requirements.Identify expected code behavior by reading and understanding test results and errors.Declare and invoke functions using function declaration, function expression, and arrow function syntax.Use the return  keyword to return a value from a function.Pass primitive values as arguments to functions.Pass arrays to functions as arguments.Access items stored in arrays using the indexes,Add, remove and check for items in an array using the index and array methods (unshift, push, splice, shift, pop, indexOf, and includes).Iterate over arrays using the for  and forEach loops.     IntroductionArray manipulation is a common task in programming. Whether you are calculating a total for a shopping cart, grabbing only the first names from a list of people, or moving a piece on a chessboard, you are probably modifying or manipulating an array somewhere in the code.RequirementsFork this repoClone it to your machineSubmissionUpon completion, run the following commands:git add .git commit -m \""Solved lab\""git push origin masterCreate a Pull Request so that your TAs can check your work.Automated Testing IntroductionWhat is automated testing?Automated software testing is the process of programmatically executing an application to validate and verify that it meets the business needs, as well as the technical requirements, and that it behaves as expected.Testing should be viewed as a continuous process, not a discrete operation or single activity in the development lifecycle. Designing tests at the beginning of the product lifecycle can mitigate common issues that arise when developing complex code bases.Having a strong test suite can provide you the ease of mind since you will be able to confidently improve upon your work while knowing that your not breaking a previously developed feature.Testing labsThis LAB and some labs you will work on during the bootcamp are equipped with unit tests to provide automated feedback on your lab progress.Testing with JasmineJasmine is an automated testing framework for JavaScript. It is designed to be used in Behavior-driven Development (BDD) programming, focusing more on the business value than the technical details.We have already included Jasmine in the project you just forked, so let's see how to use it to implement our code.UsageBefore starting coding, we will explain the project structure we have provided you:lab-js-functions-and-arrays  ├── README.md  ├── SpecRunner.html  ├── jasmine  │   └── ...  ├── src  │   └── functions-and-arrays.js  └── tests      └── functions-and-arrays.spec.jsWe will be working with the src/functions-and-arrays.js. You can find all the files in the jasmine folder needed to use Jasmine. All these files are already linked with the SpecRunner.html file.If you want to check the tests, they are in the tests/functions-and-arrays.spec.js file.Run testsRunning automated tests with Jasmine is super easy. All you need to do is open the SpecRunner.html file in your browser. You will find something similar to this:Pass the testsYou should write your code on the src/functions-and-arrays.js file. While following the instructions for each iteration, you should check every test and ensure it's passing, before moving on.Do not rush. You should take your time to read every iteration carefully and address the breaking tests as you progress through the exercise.When coding with tests, it is super important that you carefully read and understand the errors you are getting. This way, you will know what's expected from your code.To see the output of your JavaScript code, open the Console in the Developer Tools.Important: Note that you don't need to execute the functions yourself; the tests will automatically load and execute the functions on each test run. All you need to do is declare the functions, ensure they handle the parameters passed and return what is indicated in the iteration instructions and the test description. We provide you with a sample array for some iterations, so you can do some manual testing if you wish.InstructionsWhile following the instructions for each iteration, carefully read the instructions and test descriptions to understand the task requirements fully. Do not rush. It would be best if you took your time to read every iteration carefully.Iteration #1: Find the maximumImplement the function maxOfTwoNumbers that takes two numbers as arguments and returns the bigger number.Iteration #2: Find the longest wordImplement the function findLongestWord that takes as an argument an array of words and returns the longest one. If there are 2 with the same length, it should return the first occurrence.You can use the following array to test your solution:const words = ['mystery', 'brother', 'aviator', 'crocodile', 'pearl', 'orchard', 'crackpot'];Iteration #3: Calculate the sumIteration #3.1: Sum numbersCalculating a sum can be as simple as iterating over an array and adding each of the elements together.Implement the function named sumNumbers that takes an array of numbers as an argument and returns the sum of all the numbers in the array. Later in the course, we will learn how to do this using the reduce array method, making your work significantly easier. For now, let's practice the \""declarative\"" way of adding values using loops.You can use the following array to test your solution:const numbers = [6, 12, 1, 18, 13, 16, 2, 1, 8, 10];Bonus - Iteration #3.2: A generic sum() functionIn iteration 3, you created a function that returns the sum of an array of numbers. But what if we want to calculate the sum of the length of words in an array? What if it also includes boolean values? To achieve this, we must create a function allowing this flexibility.You should implement the function sum() in this iteration. The function should take an array of mixed values - numbers, strings, and booleans. The function should add all the string lengths, numeric values, and numeric values of booleans to the total sum and return the sum.You can use the following array to test your solution:const mixedArr = [6, 12, 'miami', 1, true, 'barca', '200', 'lisboa', 8, 10];// should return: 57Note: Your function should only accept an array with numbers, strings, or booleans. If the array contains any other data type, such as an object, you should throw an error. In JavaScript, the syntax for throwing an error is as follows:throw new Error(\""Error message goes here\"");When specifying the error message, you should be specific and descriptive in explaining the error.Iteration #4: Calculate the averageCalculating an average is a prevalent task. So let's practice it a bit.The logic behind this:Find the sum as we did in the first exercise (or how about reusing the function sumNumbers()?)Divide that sum by the number of elements in the array.Iteration #4.1: Array of numbersImplement the function averageNumbers that expects an array of numbers and returns the average of the numbers.You can use the following array to test your solution:const numbers = [2, 6, 9, 10, 7, 4, 1, 9];Iteration #4.2: Array of stringsImplement the function named averageWordLength that receives as a single argument an array of words and returns the average length of the words:You can use the following array to test your solution:const words = ['seat', 'correspond', 'linen', 'motif', 'hole', 'smell', 'smart', 'chaos', 'fuel', 'palace'];Bonus - Iteration #4.3: A generic avg() functionCreate function avg(arr) that receives any mixed array and calculates the average. For example, consider an array filled with numbers and/or strings and/or booleans as a mixed array.The non-numerical values should be counted as follows:Booleans: true counts as 1 and false counts as 0.Strings: use the string length as the numeric value.const mixedArr = [6, 12, 'miami', 1, true, 'barca', '200', 'lisboa', 8, 10];// should return: 5.7Iteration #5: Unique arraysTake the following array, remove the duplicates, and return a new array. You are more than likely going to want to check out the Array methods indexOf and includes.Do this in the form of a function uniquifyArray that receives an array of words as an argument.You can use the following array to test your solution:const words = [  'crab',  'poison',  'contagious',  'simple',  'bring',  'sharp',  'playground',  'poison',  'communion',  'simple',  'bring'];Iteration #6: Find elementsLet's create a simple array search.Declare a function named doesWordExist that will take in an array of words as one argument and a word to search for as the other. Return true if the word exists in the array; otherwise, return false.You can use the following array to test your solution:const words = ['machine', 'subset', 'trouble', 'starting', 'matter', 'eating', 'truth', 'disobedience'];Iteration #7: Count repetitionDeclare a function named howManyTimes that will take in an array of words as the first argument and a word to search for as the second argument. The function will return the number of times that word appears in the array.You can use the following array to test your solution:const words = [  'machine',  'matter',  'subset',  'trouble',  'starting',  'matter',  'eating',  'matter',  'truth',  'disobedience',  'matter'];Bonus - Iteration #8Bonus - Iteration #8.1: Product of adjacent numbersGiven multiple arrays, find the greatest product of four adjacent numbers.We consider adjacent any four numbers that are next to each other horizontally or vertically. For example, if we have a 5x5 Matrix like:[ 1,  2, 3, 4, 5][ 1, 20, 3, 4, 5][ 1, 20, 3, 4, 5][ 1, 20, 3, 4, 5][ 1,  4, 3, 4, 5]The greatest product will be the 20x20x20x4 = 32000.Declare a function named greatestProduct(matrix) to find it in the 20×20 grid below!const matrix = [  [08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08],  [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00],  [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65],  [52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91],  [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],  [24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],  [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],  [67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21],  [24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],  [21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],  [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92],  [16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],  [86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],  [19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40],  [04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],  [88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],  [04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36],  [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16],  [20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54],  [01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48]];Bonus - Iteration #8.2: Product of diagonalsFollowing the logic you've used in iteration #8.1, declare a function called greatestProductOfDiagonals(matrix). It takes a matrix as a parameter and returns the greatest product of any four values laid out diagonally, in either direction.Happy coding! ❤️FAQs  I am stuck in the exercise and don't know how to solve the problem or where to start.  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.Back to top  All of the Jasmine tests are failing and in red. Why did this happen?  One possible reason why all of the Jasmine tests are failing is that there is a syntax error in the code being tested. If the code contains a syntax error, it will not be loaded properly and none of the tests will be able to run. This will cause all of the tests to fail.To troubleshoot this issue, you will need to examine the code being tested for syntax errors. Look for missing brackets, semicolons, or other syntax issues that could be causing the problem. If you find a syntax error, correct it and try running the tests again.Another possibility is that there is an issue with the tests. It is possible that you may have modified the test file and caused an issue. If you have made changes to the test file, try copying and pasting the original test file and running the tests again to see if this resolves the issue.Back to top  How do you find a length of a string in JavaScript?  To find the length of a string, use the length property. Here is an example:const str = \""Hello, world!\""\"";console.log(str.length); // 13The length property returns the number of characters in the string, including spaces and special characters.Back to top  How do I loop over an array?  Loops allow you to repeat a block of code a certain number of times. There are several ways to loop over an array in JavaScript:For loopThe for loop is the most traditional way to loop through an array in JavaScript. It consists of three parts: the initialization, the condition, and the increment/decrement:const animals = ['cat', 'dog', 'bird'];// initialize counter variable (let i = 0)// set condition (i < animals.length)// increment counter (i++)for (let i = 0; i < animals.length; i++) {  console.log(animals[i]);}In initialization, you declare a counter variable and set its initial value.The condition is a boolean expression that is evaluated before each iteration of the loop. If the condition is true, the loop will continue. Once the condition turns false, the loop will terminate.The increment/decrement is where you update the counter variable and it happens at the end of each iteration.The block of code inside the loop is repeated during each iteration.While loopThe while loop is another way to loop through an array in JavaScript. It consists of a condition and a block of code that is executed as long as the condition is true.Like the for loop, the while loop requires a counter variable to keep track of the current position in the array. The counter variable must be initialized before the loop and incremented or decremented at the end of each iteration.const animals = ['cat', 'dog', 'bird'];// initialize a counter variable (i)let i = 0;// set condition (i < animals.length)while (i < animals.length) {  console.log(animals[i]);    // increment counter (i++)  i++;}Back to top  How do I loop over an array using the forEach() method?  The forEach() method executes a provided function once for each array element. It does not return a new array but rather executes the function on each element in the array.The syntax of the forEach() method is as follows:array.forEach( function(element) {  // code to be executed for each element});  Here is an example that uses the forEach() method to log each element and its index in an array to the console:const fruits = ['apple', 'banana', 'cherry'];fruits.forEach( function(element, index) {  console.log(`${index}: ${element}`);});You can also use an arrow function as the callback function for forEach():fruits.forEach((element, index) => {  console.log(`${index}: ${element}`);});Back to top  What could cause array.length to return undefined?  If you try to access the .length property on an array (e.g., array.length) but get undefined, it means that the variable you are accessing is not actually an array.  How do I fix this?Check that the variable you are trying to access is actually an array.Back to top  Why is my function returning the last element of the array instead of the longest one?  Your function might not be correctly checking for the longest element in the array. In other words, there may be an issue with the logic of the conditional statements in the function or with the comparison being used in the conditionals.To fix this issue, you should check the logic of the conditional statements in the function.Back to top  How can I compare the length of each word in an array in JavaScript?  To compare the length of each word in an array in JavaScript, you can use a loop to iterate through the array and compare the length of each element using the .length property.Here is an example of how you loop over an array:function findLongestWord(words) {  for (let i = 0; i < words.length; i++) {    console.log(words[i]);  }}  To compare the length of each element, you should use a conditional statement in the following way:  if ( words[i].length > longestWord.length) {    console.log(`${words[i].length} is longer than ${longestWord.length}`);  }Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first and then clone your fork to your local machine to be able to push the changes.Note: You should make a copy of your local code to avoid losing it in the process.Back to top"
44,learn-co-curriculum/phase-0-pac-3-arithmetic-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/blob/master/README.md,JavaScript,"JavaScript Calculator Challenge LabLearning GoalsPractice doing math with JavaScriptPractice writing functions that do things with numbersPractice parsing strings as numbersIntroductionIn this lab, we're going to practice writing functions and manipulating numbersin JavaScript. First, though, we need to review some basic math. In this lab,we're going to learn about various arithmetic operators. What's an operator, yousay? It's a symbol that operates on one or more (usually two) objects —+ is a good example. The + operator says \""add what's to the left of + andwhat's to the right of + together.\""If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)As you read through this lesson, you're going to be adding your solutions toindex.js. You'll write a total of eight functions. Use the results of runningnpm test to guide you towards the right function names and functionality.Remember to run npm install first to install the dependencies.Basic MathThe most fundamental math operations work as one might expect in JavaScript: +adds two numbers; - subtracts one number from another; * multiplies twonumbers; and / divides one number by another.Give it a try: type each of the following math examples into the REPL console.You can use the embedded console below or open replit in a separate windowif you prefer.1 + 80; //=> 8160 - 40; //=> 202 * 3.4; //=> 6.85.0 / 2.5; //=> 2<iframe height=\""400px\"" width=\""100%\"" src=\""https://replit.com/@lizbur10/Sandbox?embed=true\"" scrolling=\""no\"" frameborder=\""no\"" allowtransparency=\""true\"" allowfullscreen=\""true\"" sandbox=\""allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\""></iframe>Go ahead and run npm test and take a look at the first failing test:  1) basic math functions       'add()' is a valid function:     ReferenceError: add is not defined      at Context.<anonymous> (test/indexTest.js:10:12)      at processImmediate (node:internal/timers:464:21)The description of the test, 'add()' is a valid function, along with the errormessage, referenceError: add is not defined, tells us that we need to define afunction add(). Go ahead and create the add() function in index.js. Thistest is only looking for the function to exist, so we can leave the code blockempty for now:function add() {  // we'll fill this in shortly}Once you've added the empty function, run npm test again; the first testshould be passing. Go ahead and get the next three tests passing as well beforemoving on.Once you have the first four tests passing, the first error you get should looksimilar to this:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected undefined to equal 1078      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Note: the test document is randomly creating numbers to pass as arguments tothe functions in this lab, so the specific values you see in your errors willbe different from what's shown in this lesson, and will be different each timeyou run the tests!The tests have found our add() function, getting us past the first test, andnow we need to write the code inside the function to return what the test isexpecting. Let's break down the information from our error:add(a, b) adds two numbers and returns the result:Error: Expected undefined to equal 1078The first line tells us what our function needs to do, and the second line tellsus the specific error that is being thrown. Any time you see the error \""Expectedundefined to equal\"" something, that means the test is expecting your function toreturn a value but it's currently not returning anything (undefined). Let'ssee if we can just get that specific error cleared. We won't worry about exactlywhat we're returning just yet:function add() {  return \""something\"";}Running the tests now we get:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected 'something' to equal 853      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Great! So now our function is returning \""something\"" instead of nothing! So thenext step is to look more closely at the test's description of the function tofigure out what should be returned:add(a, b) adds two numbers and returns the resultThe add(a, b) tells us the test is trying to pass two arguments to ourfunction, so let's get that set up:function add(a, b) {  return \""something\"";}The rest of the description tells us we need to add the two arguments togetherand return that value:function add(a, b) {  return a + b;}With this code, both tests for the add() function should now be passing!A Quick Note about Hard CodingThink back to the errors we were getting above, e.g., Expected undefined to equal 1078. One thing that might be tempting to do when addressing an errorlike this is to explicitly return exactly what the test is looking for:function add(a, b) {  return 1078;}This is what's known as hard coding and is virtually never what you shoulddo! If you think about it, it doesn't really make sense. We've created anadd() function that can take any two numbers as arguments but will alwaysreturn 1078. This makes it a pretty useless function. Instead, we want to createfunctions that will return the correct answer for whatever argument or argumentswe pass in.Go ahead and tackle the next three tests on your own. You should follow aprocess very similar to what we did above. Once you have those passing, continueto the next section.Math + AssignmentRecall that we can increment (++) and decrement (--) a number if it'sassigned to a variable. Don't forget to follow along in the REPL console.let number = 5;number++; //=> 5... hmmmmnumber; //=> 6 -- the number was incremented after it was evaluatednumber--; //=> 6number; //=> 5We can also put the increment and decrement operators before the number, inwhich case the number is evaluated after the operator is executed:--number; //=> 4number; //=> 4++number; //=> 5number; //=> 5But generally, you will see them placed after the number (and we recommendthat that's where you put them). If you're interested in the difference, take alook at the MDN documentation.And, while we're on the subject, you'll usually only want to use theseincrementors and decrementors when the shorthand makes what you're writingeasier to read (more on when exactly in a later lesson). Instead, it's best touse the basic arithmetic operators combined with =.Follow along in the REPL console. You can pick up where we left off with theprevious examples. Start by setting number equal to 5.+= modifies the value to the operator's left by adding to it the value tothe operator's right:number += 3; //=> 8-= modifies the value to the operator's left by subtracting from it thevalue to the operator's right:number -= 2; //=> 6*= modifies the value to the operator's left by multiplying it by the valueto the operator's right:number *= 10; //=> 60/= modifies the value to the operator's left by dividing it by the value tothe operator's right:number /= 5; //=> 12Note that these methods modify the variable in place. So, if we have twofunctions that depend on the same external variable, the order in which they arecalled matters. Follow along in the console://reset numbernumber = 10;function add5() {  return (number += 5);}function divideBy3() {  return (number /= 3);}divideBy3(); //=> 3.3333333333333335add5(); //=> 8.333333333333334// reset numbernumber = 10;add5(); //=> 15divideBy3(); //=> 5Because these methods are more explicit, we prefer += to ++ and -= to-- (usually).Okay, now we're ready to write solutions for the next two functions:increment(n) and decrement(n). As indicated by the tests, these methodsshould take a number as an argument, increment/decrement the provided value byone, and return the result.Parsing NumbersSometimes, we'll receive a number wrapped in quotes. We recognize it as anumber, but JavaScript will think it's a string. Luckily, JavaScript gives ustools to turn these strings into proper numbers (that is, numbers thatJavaScript understands).parseInt()The first such tool is the function parseInt(), which accepts two arguments:the value to parse and the base of the value being parsed (called the radix).Usually you will want to work with base 10, so a typical call to parseInt()looks like:parseInt(\""2\"", 10); //=> 2What happens if we pass a representation of a non-integer to parseInt()? Let'stry it:parseInt(\""2.2222\"", 10);If we enter the above in the REPL console, we will see that parseInt() forcesthe parsed number to be an integer — which makes sense when we think about it,right?What happens, though, if we pass utter nonsense to parseInt()? Go ahead andtry it — something like:parseInt(\""nonsense!\"", 10);What did it return? NaN? What is that?NaN stands for \""Not a Number\"" — pretty handy, right? This is the number (inthe JavaScript sense) that JavaScript returns when it can't determine a validvalue for a numeric operation.Note: You may see parseInt() used without a radix specified. In mostcases, the radix will default to 10, but not always! To be safe, you shouldalways specify a radix.parseFloat()Above, we saw that parseInt() lops off everything after the decimal point andonly returns integers. If we want to preserve decimals, we'll need to useparseFloat().Unlike parseInt(), parseFloat() accepts only a single argument, the thing tobe parsed. We can use it like so:parseFloat(\""80.123999\""); // 80.123999You now have the information you need to write the final two functions,makeInt(string) and preserveDecimal(string). makeInt(string) should takein a string, parse it into a base 10 integer and return it.preserveDecimal(string) should take in a string, parse it into a float andreturn it.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process.ResourcesMDN - parseInt()MDN - parseFloat()"
45,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
46,learn-co-curriculum/phase-0-the-dom-modifying-elements-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/blob/master/README.md,JavaScript,"Creating and Inserting DOM Nodes LabLearning GoalsCreate DOM elements programmaticallyAdd elements to the DOMUpdate elements using innerHTMLChange properties on DOM nodesRemove elements from the DOMIntroductionNow that you have an understanding of the DOM and powerful tools for selectingthe right elements, it's time to learn how to:Create new nodesDelete nodesUpdate node propertiesIf you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create DOM Elements Programmaticallydocument.createElement()Creating an element in JavaScript is an easy process. You simply calldocument.createElement('tagName'), where tagName is the name of any validHTML tag ('p', 'div', 'span', etc.).Open the index.html file in your browser and open up the browser's console. Inthe console, enter:const element = document.createElement(\""div\"");Then take a look at the Elements tab. The element doesn't show up on the page.Why not?Add Elements to the DOMTo get an element to appear in the DOM, we have to append() it to an existingDOM node. To go back to our tree metaphor, we have to glue our new leaf onto abranch that's already there. We can start as high up on the tree asdocument.body, or we can find a more specific element using any of the methodswe've learned for traversing the DOM.append()Let's append element to body to start:document.body.append(element);(Recall that element is a variable containing the div we created above.)Now if you look at the Elements tab, you'll see our new (empty) <div> nestedinside the body element.Next, let's create an unordered list:const ul = document.createElement(\""ul\"");To populate our unordered list, we'll use a for loop to create three li's,give them some content, and append them to the ul:for (let i = 0; i < 3; i++) {  const li = document.createElement(\""li\"");  li.textContent = (i + 1).toString();  ul.append(li);}In each iteration of our loop, we calculate the value i + 1 (an integer), turnit into a string using JavaScript's toString() method, and assign the resultas the value of the li's textContent attribute.Note: although the textContent attribute must be a string, the code wouldstill work even if we didn't use the toString() method — JavaScript willturn the value into a string for us. However, for clarity and completeness, itis best to set it to a string value explicitly.Finally, we'll append the ul to the div we created:element.append(ul);You should now see the unordered list rendered on the page, and see the newelements in the \""Elements\"" tab, like this:<div>  <ul>    <li>1</li>    <li>2</li>    <li>3</li>  </ul></div>Note that, each time we create a new element, we create a variable and save areference to it. That makes it quite easy to make additional updates and to addit to the DOM using append().Add Elements to the DOM via innerHTMLCreating elements and then appending them into the DOM is a multi-step process.It's also the safest and most reliable way to add content to the DOM. Mostrepeated code can be removed by using variables, functions and loops. It's TheRight Way.That said, however, there's another process that will also work, usingElement.innerHTML. Inside our loop above, we create an li element and setits textContent property to a simple number (expressed as a string) thatrepresents the current iteration through the loop. Once we append the li tothe ul and the ul to the document body, we see our unordered list in thebrowser window. This is a perfectly valid way to use textContent to addcontent to the DOM — essentially, textContent changes only what text shows upinside a DOM element:li.textContent = \""Hi there!\"";// => <li>Hi there!</li>console.log(li.textContent);// => \""Hi there!\""Imagine, however, that we want to add content that's more complicated.Assume our HTML includes a main element with an id of \""main.\"" We can grabthat element and set its innerHTML attribute to any HTML we like:const main = document.getElementById(\""main\"");main.innerHTML =  \""<h1>Poodles!</h1><h3>An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective</h3><p><em>By: Byron Q. Poodle, Esq., BA.</em></p>\"";Here we are using one big, long string, complete with multiple HTML tags, tocreate the following HTML in the DOM:<main id=\""main\"">  <h1>Poodles!</h1>  <h3>    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a    post-Frankfurt School Appropriationist Perspective  </h3>  <p><em>By: Byron Q. Poodle, Esq., BA.</em></p></main>This process works but it is not recommended for several reasons. First,it's more error-prone, and the errors can be difficult to find. Second, it cannegatively impact site performance. Finally, if you're inserting user-deriveddata (e.g., comments) into the DOM using innerHTML, you can expose your siteto the risk of users injecting malicious code.Programmatically creating and appending elements is safer and more efficient,and it results in code that's easier to read, easier to debug, and easier tomaintain.Change Properties on DOM NodesWe can change the appearance of a DOM node using its style attribute. Try thisout in the console:const element = document.getElementById(\""main\"");element.style.height = \""300px\"";element.style.backgroundColor = \""#27647B\"";You've changed what's on the screen!Feel free to set as many properties as you'd like — this is a good chance tolook around and explore different properties of DOM elements.Let's adjust the display. Add some text:element.textContent = \""You've changed what's on the screen!\"";Then change the style to see the effect:element.style.fontSize = \""24px\"";element.style.marginLeft = \""30px\"";element.style.lineHeight = 2;Perhaps the most common way to change how things appear in the DOM is bychanging an element's class attribute. As you know from CSS, we often changethe way a bit of rendered HTML appears by adding or removing a class.For example, we could create an alert class that turns the text red (using theCSS color attribute) and makes it big (using the CSS font-size attribute).We can then use JavaScript to first grab the element and then add the class byupdating the element's className property. This has the same effect as settingthe class property in the HTML. The className property expects a Stringwith one or more class names, separated by spaces:element.className = \""pet-listing dog\"";Check out the Elements tab to see the effect of this change:<main id=\""main\"" class=\""pet-listing dog\""></main>Another way to accomplish the same thing is by using the Element.classListproperty. This property has .add() and .remove() methods thatcan be used as follows:element.classList.remove(\""dog\"");element.classList.add(\""cat\"", \""sale\"");This approach allows you to easily add and remove classes programmatically,without having to create a long string of class names.<main id=\""main\"" class=\""pet-listing cat sale\""></main>Separation of ConcernsAn important thing to bear in mind is that we only want to use JavaScript tochange the appearance of an element when we need to make a change dynamically,i.e., in response to user actions. This goes back to a fundamental programmingconcept about separating concerns between technologies:HTML defines the structure of the website (not appearance or functionality)JavaScript defines functionality of the website (not structure or styling)CSS defines the visualization and style of the website (not structure orfunctionality)Defining the base CSS should still happen in the CSS files that are loaded intothe DOM when the page is opened.Remove Elements from the DOMWe know how to add elements and change their attributes. What if we want toremove an element from a page?removeChild()We use removeChild(), as you might guess, to remove a particular child of anelement:someElement.removeChild(someChildElement);Let's take a look at a more complex example:const ul = document.getElementsByTagName(\""ul\"")[0];const secondChild = ul.querySelector(\""li:nth-child(2)\"");ul.removeChild(secondChild);Here you can see the power of querySelector(): we can use it to find thesecond li element of ul. We then pass that element as the argument to ourremoveChild method, which removes the element from our ul.What if we want to remove the whole unordered list (ul)?element.remove()We can just call remove() on the element itself:ul.remove();And it's gone!InstructionsFrom this point forward, many of the labs will work a little differently fromones you've done before. Specifically, the tests will mock the process of 1)running JavaScript code in the browser and 2) seeing the results of that coderepresented in the DOM. Take a look at test/indexTest.js to see the tests'descriptions of the changes your code should be making to the DOM elements.Note that you do not need to create functions for this lab. Just create the lineor lines of JavaScript necessary to pass each test. As usual, you will writeyour code in the index.js file.One final note: the last test in the test/indexTest.js file is looking for thetext \""YOUR-NAME is the champion\"" (with your name — or whatever text you choose —in place of YOUR-NAME) inside your newly created DOM node. While there are anumber of ways you could accomplish this, you should use either thetextContent or innerHTML property to setthe text inside your DOM node. The innerText property would technically workas well; however, the tests won't pass if you use this approach, and generallyit's not a good practice to use innerText when setting the contents of anelement. This StackOverflow answer does a good job explaining somedifferences between these properties.Resourcesdocument.createElement()append()removeChild()element.remove()classList Property"
47,learn-co-curriculum/phase-1-control-flow-lab,https://github.com/learn-co-curriculum/phase-1-control-flow-lab/blob/master/README.md,JavaScript,"Review: Control Flow LabLearning GoalsPractice writing if...else if...else statements.Practice working with the ternary operator.Practice writing switch statements.IntroductionYou have been hired as a contractor for Scuber, a burgeoning startup that helpsbusy parents transport their children to and from all of their activities onscooters.Scuber's drivers charge their passengers a variable amount based on how farthey need to travel. Modify the index.js file to make sure that Scuber's driversare properly telling their passengers how much the ride will cost.Getting StartedIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Next, run npm install to install the dependencies then run the test suite withthe npm test command.Read the TestsWe know that you do not have much experience with testing, so that is why it isvery important for you to read the instructions in this and every lab. Thatbeing said, reading the tests can often provide important clues on how tocomplete a lab. Let's take a look at the first test for this lab together:describe('index.js', function () {  describe('scuberGreetingForFeet()', function () {    it('gives customers a free sample if the ride is less than or equal to 400 feet', function () {      expect(scuberGreetingForFeet(199)).to.equal('This one is on me!');    });    // tests continue...  });});Okay, so all of the fancy describe words are just there to organize therequirements, and provide a description for what each function should do. Byreading the text inside of the describe words, we can see that there is somefunction that should give customers a free sample, where the first 400 feet arefree. Then in the next line we see a function called scuberGreetingForFeetbeing executed with 199 passed through as an argument to the function.Executing the scuberGreetingForFeet function with the argument should return\""This one is on me!\"".We will tackle the details of function writing in depth in an upcoming lab. Fornow, briefly, a function declaration is written like so:function addFive(someNumber) {  //Everything I want my function to do I put inside these curly braces  //In this example, let's say I want my function, addFive, to add 5 to  //any number I pass in (someNumber), but only IF the number is greater  //than zero:  let result  if (someNumber > 0) {    result = someNumber + 5;  }  //at the end, if I want my function to return something, I need to state it:  return result}//once our function is declared, we can call addFive, passing in values //as arguments:addFive(10);//=> 15addFive(20);//=> 25addFive(-5);//=> undefinedaddFive(addFive(5));//=> 15!! In this case, the return value of addFive(5), 10, is passed in //as the argument to the outer addFive, returning 15So, looking back at our test example, scuberGreetingForFeet(199) is callingthe function scuberGreetingForFeet, and passing in the value 199 as theargument.  When we write this function, we need to write the logic inside thecurly braces to pass our tests and return the result:function scuberGreetingForFeet(someValue) {  //this is where we can use conditionals given our argument, someValue  //don't forget to return whatever the result is!}The big clue from reading the example test above is that the tests in theindexTest.js file are calling the functions that we write inside theindex.js file. These tests pass arguments to our function. When this testpasses an argument of 199 to our function, the scuberGreetingForFeetfunction should return \""This one is on me!\"". That makes sense, consideringthe text in the describe and it functions say that the first 400 feetshould be free. That 199 must be indicating the distance in feet of therequested ride.So reading tests is essentially like reading the instructions. It's somethingwe may have avoided for much of our lives, but when it comes to programming,tests fill in the picture of the goal we are trying to accomplish. They runmini-experiments on our code and help us better understand our code and theproblem we are solving.InstructionsThere are three functions that have been declared for you. You will need to fill in the following code:scuberGreetingForFeet() — Use if and else if statements to return thecorrect greeting based on the distance the passenger desires to travel.ternaryCheckCity() — Use a ternary operator to return the correct responsebased on the desired destination of the passenger.switchOnCharmFromTip() — Use a switch statement to return a differentresponse based on the generosity of the passenger's tip.NOTE: Beware a gotcha! In JavaScript, you cannot express the concept of'between' in the following way:2 < 5 < 4// => trueIt seems like that expression should evaluate to false because 5 is not lessthan 4. However, we're forgetting about the order of operations — let'sthink about how the JavaScript engine evaluates that expression. First, theengine compares 2 < 5, which evaluates to true. At that point, it's asthough the value true has replaced 2 < 5 in the expression, resulting intrue < 4. The engine sees that we're trying to compare a non-number (true)against a number (4), and under the hood it converts true into a number:Number(true);// => 1That leaves us with 1 < 4, which the JavaScript engine correctly evaluates totrue. Can you figure out how to properly evaluate whether 5 is greater than2 AND 5 is less than 4 using logical operators? Ponder that as you workthrough the assignment.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Completing and Submitting Assignments withCodeGrade lesson to review the process.Good luck!"
48,learn-co-students/js-if-else-files-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
49,ironhack-labs/lab-javascript-clue,https://github.com/ironhack-labs/lab-javascript-clue/blob/master/README.md,JavaScript,"LAB | JS Clue (mixing objects and arrays)     Learning Goals  This exercise allows you to practice and apply the concepts and techniques taught in class.Upon completion of this exercise, you will be able to:Run predefined tests in Jasmine to verify that the program meets the technical requirements.Identify expected code behavior by reading and understanding test results and errors.Create objects using the object literal syntaxDeclare and invoke functionsUse the return keyword to return a value from a function.Pass arrays to functions as arguments.Access objects stored in arrays,Access object properties using the dot notation and bracket notationIterate over arrays using the for and forEach loops.     IntroductionDo you remember the classic detective board game Clue? It was a very popular game in the 90s.The plot starts with the death of Mr. Boddy, the very wealthy owner of Tudor Manor. He was killed under highly suspicious circumstances, and the player's mission is to uncover which suspect murdered him, what weapon was used, and in which room of the mansion the crime took place.When playing Clue, these three details are represented by a suspect card, a weapon card and a room card that are kept hidden in an envelope for the duration of the game. By progressively revealing the remaining cards, the players can infer which are the three cards that are hidden. When a player is confident that they know the solution to the mystery, they will try to reveal it. If a player guesses correctly, they win the game.RequirementsFork this repoClone this repoSubmissionUpon completion, run the following commands:git add .git commit -m \""Solved lab\""git push origin masterCreate a Pull Request so that your TAs can check your work.Test Your CodeThis LAB is equipped with unit tests to provide automated feedback on your lab progress. If you want to check the tests, they are in the tests/clue.spec.js file.To run the tests and your JavaScript code, open the SpecRunner.html file using the Live Server VSCode extension.To see the outputs of the console.log in your JavaScript code, open the Console in the Developer Tools.InstructionsYou will work in the src/clue.js file, already loaded in the SpecRunner.html file.To run the tests and your JavaScript code, open the SpecRunner.html file using the Live Server VSCode extension.Iteration 1: Create the cardsClue has three different card types: suspects, rooms, and weapons.Let's create an array for every card type. These arrays should be named suspectsArray, weaponsArray, roomsArray.Each array will contain objects, where each object represents one card.All of the information you need about suspects, rooms, and weapons can be found on the DATA.md file.Suggestion: Copy this data into the clue.js file and model it into objects nested inside your cards' arrays. This is a great chance for you to experiment with IDE shortcuts, multiple-line selection, find and replace, and other great features that VS Code provides.SuspectsAll of six possible suspects in Clue have a first name, last name, occupation, age, description, image and color.To complete this iteration, you should have an array that looks something like the following:const suspectsArray = [  {    firstName: 'Jacob',    lastName: 'Green',    occupation: 'Entrepreneur'    // ...  }  // ...];WeaponsThere are a total of nine weapons. Each of them has a different name and weight.RoomsThe game board represents the blueprints of the mansion and features fifteen different rooms. Each room will only have a name.Iteration 2: Create the mysteryAt the beginning of the game, players shuffle each of the card stacks to create a combination of suspect, weapon and room. This will be the mystery to solve.Random selectorDeclare a function named selectRandom to select one element from a card stack randomly. The function should expect an array as an argument and should return a random element from the array.Create the mysteryDeclare a function named pickMystery that takes no arguments and returns an object with three properties: suspect, weapon and room, each holding as a value a card of that specific type. You can get a random card of each type by calling selectRandom on each card stack.Iteration 3: Reveal the mysteryAt last, we are ready to reveal the mystery.Declare a function named revealMystery that receives an envelope object (with the shape of the object returned by pickMystery) as the single argument and returns a revealing message in the following format:<FIRST NAME> <LAST NAME> killed Mr. Boddy using the <WEAPON> in the <ROOM>!Extra ResourcesData Structures: Objects and Arrays20 Mind-blowing facts about CluedoCluedo - WikipediaHappy coding! ❤️FAQs  I am stuck in the exercise and don't know how to solve the problem or where to start.  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.Back to top  How do I loop over an array?  Loops allow you to repeat a block of code a certain number of times. There are several ways to loop over an array in JavaScript:For loopThe for loop is the most traditional way to loop through an array in JavaScript. It consists of three parts: the initialization, the condition, and the increment/decrement:const animals = ['cat', 'dog', 'bird'];// initialize counter variable (let i = 0)// set condition (i < animals.length)// increment counter (i++)for (let i = 0; i < animals.length; i++) {  console.log(animals[i]);}The initialization is where you declare a counter variable and set its initial value.The condition is a boolean expression that is evaluated before each iteration of the loop. If the condition is true, the loop will continue. Once the condition turns false, the loop will terminate.The increment/decrement is where you update the counter variable and it happens at the end of each iteration.The block of code inside the loop is repeated during each iteration.While loopThe while loop is another way to loop through an array in JavaScript. It consists of a condition and a block of code that is executed as long as the condition is true.Like the for loop, the while loop requires a counter variable to keep track of the current position in the array. The counter variable must be initialized before the loop and incremented or decremented at the end of each iteration.const animals = ['cat', 'dog', 'bird'];// initialize a counter variable (i)let i = 0;// set condition (i < animals.length)while (i < animals.length) {  console.log(animals[i]);    // increment counter (i++)  i++;}Back to top  How do I loop over an array using the forEach() method?  The forEach() method executes a provided function once for each array element. It does not return a new array but rather executes the function on each element in the array.The syntax of the forEach() method is as follows:array.forEach( function(element) {  // code to be executed for each element});  Here is an example that uses the forEach() method to log each element and its index in an array to the console:const fruits = ['apple', 'banana', 'cherry'];fruits.forEach( function(element, index) {  console.log(`${index}: ${element}`);});  You can also use an arrow function as the callback function for forEach():fruits.forEach((element, index) => {  console.log(`${index}: ${element}`);});Back to top  What could cause array.length to return undefined?  If you try to access the .length property on an array (e.g., array.length) but get undefined, it means that the variable you are accessing is not actually an array.How do I fix this?Check that the variable you are trying to access is actually an array.Back to top  How do you generate a random number in JavaScript?  To generate a random number using the Math.random() method.The Math.random() method returns a random floating-point (decimal) number in the range between 0 and 0.9999999999999999. Example:const randomNumber = Math.random();console.log(randomNumber);  To generate a random integer within a specific range, use the following formula:const min = 1;const max = 10;const randomInteger = Math.floor(Math.random() * (max-min + 1)) + min;console.log(randomInteger);This will generate a random number that is an integer between 1 and 10 (inclusive).For more information, check: MDN: Math.random()Back to top  All of the Jasmine tests are failing and in red. Why did this happen?  One possible reason why all of the Jasmine tests are failing is that there is a syntax error in the code being tested. If the code contains a syntax error, it will not be loaded properly and none of the tests will be able to run. This will cause all of the tests to fail.To troubleshoot this issue, you will need to examine the code being tested for syntax errors. Look for missing brackets, semicolons, or other syntax issues that could be causing the problem. If you find a syntax error, correct it and try running the tests again.Another possibility is that there is an issue with the tests. It is possible that you may have modified the test file and caused an issue. If you have made changes to the test file, try copying and pasting the original test file and running the tests again to see if this resolves the issue.Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first and then clone your fork to your local machine to be able to push the changes.Note: You should make a copy of your local code to avoid losing it in the process.Back to top"
50,Rob--W/cors-anywhere,https://github.com/Rob--W/cors-anywhere/blob/master/README.md,JavaScript,"CORS Anywhere is a NodeJS proxy which adds CORS headers to the proxied request.The url to proxy is literally taken from the path, validated and proxied. The protocolpart of the proxied URI is optional, and defaults to \""http\"". If port 443 is specified,the protocol defaults to \""https\"".This package does not put any restrictions on the http methods or headers, except forcookies. Requesting user credentials is disallowed.The app can be configured to require a header for proxying a request, for example to avoida direct visit from the browser.Example// Listen on a specific host via the HOST environment variablevar host = process.env.HOST || '0.0.0.0';// Listen on a specific port via the PORT environment variablevar port = process.env.PORT || 8080;var cors_proxy = require('cors-anywhere');cors_proxy.createServer({    originWhitelist: [], // Allow all origins    requireHeader: ['origin', 'x-requested-with'],    removeHeaders: ['cookie', 'cookie2']}).listen(port, host, function() {    console.log('Running CORS Anywhere on ' + host + ':' + port);});Request examples:http://localhost:8080/http://google.com/ - Google.com with CORS headershttp://localhost:8080/google.com - Same as previous.http://localhost:8080/google.com:443 - Proxies https://google.com/http://localhost:8080/ - Shows usage text, as defined in lib/help.txthttp://localhost:8080/favicon.ico - Replies 404 Not foundLive examples:https://cors-anywhere.herokuapp.com/https://robwu.nl/cors-anywhere.html - This demo shows how to use the API.DocumentationClientTo use the API, just prefix the URL with the API URL. Take a look at demo.html for an example.A concise summary of the documentation is provided at lib/help.txt.Note: as of February 2021, access to the demo server requires an opt-in,see: https://github.com/Rob--W/cors-anywhere/issues/301If you want to automatically enable cross-domain requests when needed, use the following snippet:(function() {    var cors_api_host = 'cors-anywhere.herokuapp.com';    var cors_api_url = 'https://' + cors_api_host + '/';    var slice = [].slice;    var origin = window.location.protocol + '//' + window.location.host;    var open = XMLHttpRequest.prototype.open;    XMLHttpRequest.prototype.open = function() {        var args = slice.call(arguments);        var targetOrigin = /^https?:\\/\\/([^\\/]+)/i.exec(args[1]);        if (targetOrigin && targetOrigin[0].toLowerCase() !== origin &&            targetOrigin[1] !== cors_api_host) {            args[1] = cors_api_url + args[1];        }        return open.apply(this, args);    };})();If you're using jQuery, you can also use the following code instead of the previous one:jQuery.ajaxPrefilter(function(options) {    if (options.crossDomain && jQuery.support.cors) {        options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;    }});ServerThe module exports createServer(options), which creates a server that handlesproxy requests. The following options are supported:function getProxyForUrl - If set, specifies which intermediate proxy to use for a given URL.If the return value is void, a direct request is sent. The default implementation isproxy-from-env, which respects the standard proxyenvironment variables (e.g. https_proxy, no_proxy, etc.).array of strings originBlacklist - If set, requests whose origin is listed are blocked.Example: ['https://bad.example.com', 'http://bad.example.com']array of strings originWhitelist - If set, requests whose origin is not listed are blocked.If this list is empty, all origins are allowed.Example: ['https://good.example.com', 'http://good.example.com']function handleInitialRequest - If set, it is called with the request, response and a parsedURL of the requested destination (null if unavailable). If the function returns true, the requestwill not be handled further. Then the function is responsible for handling the request.This feature can be used to passively monitor requests, for example for logging (return false).function checkRateLimit - If set, it is called with the origin (string) of the request. If thisfunction returns a non-empty string, the request is rejected and the string is send to the client.boolean redirectSameOrigin - If true, requests to URLs from the same origin will not be proxied but redirected.The primary purpose for this option is to save server resources by delegating the request to the client(since same-origin requests should always succeed, even without proxying).array of strings requireHeader - If set, the request must include this header or the API will refuse to proxy.Recommended if you want to prevent users from using the proxy for normal browsing.Example: ['Origin', 'X-Requested-With'].array of lowercase strings removeHeaders - Exclude certain headers from being included in the request.Example: [\""cookie\""]dictionary of lowercase strings setHeaders - Set headers for the request (overwrites existing ones).Example: {\""x-powered-by\"": \""CORS Anywhere\""}number corsMaxAge - If set, an Access-Control-Max-Age request header with this value (in seconds) will be added.Example: 600 - Allow CORS preflight request to be cached by the browser for 10 minutes.string helpFile - Set the help file (shown at the homepage).Example: \""myCustomHelpText.txt\""For advanced users, the following options are also provided.httpProxyOptions - Under the hood, http-proxyis used to proxy requests. Use this option if you really need to pass optionsto http-proxy. The documentation for these options can be found here.httpsOptions - If set, a https.Server will be created. The given options are passed to thehttps.createServer method.For even more advanced usage (building upon CORS Anywhere),see the sample code in test/test-examples.js.Demo serverA public demo of CORS Anywhere is available at https://cors-anywhere.herokuapp.com. This server isonly provided so that you can easily and quickly try out CORS Anywhere. To ensure that the servicestays available to everyone, the number of requests per period is limited, except for requests fromsome explicitly whitelisted origins.Note: as of February 2021, access to the demo server requires an opt-in,see: https://github.com/Rob--W/cors-anywhere/issues/301If you expect lots of traffic, please host your own instance of CORS Anywhere, and make sure thatthe CORS Anywhere server only whitelists your site to prevent others from using your instance ofCORS Anywhere as an open proxy.For instance, to run a CORS Anywhere server that accepts any request from some example.com sites onport 8080, use:export PORT=8080export CORSANYWHERE_WHITELIST=https://example.com,http://example.com,http://example.com:8080node server.jsThis application can immediately be run on Heroku, see https://devcenter.heroku.com/articles/nodejsfor instructions. Note that their Acceptable Use Policy forbidsthe use of Heroku for operating an open proxy, so make sure that you either enforce a whitelist asshown above, or severly rate-limit the number of requests.For example, to blacklist abuse.example.com and rate-limit everything to 50 requests per 3 minutes,except for my.example.com and my2.example.com (which may be unlimited), use:export PORT=8080export CORSANYWHERE_BLACKLIST=https://abuse.example.com,http://abuse.example.comexport CORSANYWHERE_RATELIMIT='50 3 my.example.com my2.example.com'node server.jsLicenseCopyright (C) 2013 - 2021 Rob Wu rob@robwu.nlPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the \""Software\""), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copiesof the Software, and to permit persons to whom the Software is furnished to doso, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE."
51,cyclic-software/express-hello-world,https://github.com/cyclic-software/express-hello-world/blob/main/README.md,JavaScript,"Cyclic - Express Hello WorldThis is a basic starter Expressjs app with:Static file hostingLogging MiddlewareCatch-all handler that echoes request infoLocal Quick StartClone to your localInstall dependencies npm installRun locally npm serveMake requestsBrowser: http://localhost:3000/some/path?q=query+one&q=second+query&single=valueCommand line: curl -i -XGET \""http://localhost:3000/cmd/line-curl\""Deploy in under 10 secondsSets up instant continuous deployment on git pushRealtime backend logs and API request monitoringCyclic RuntimeCyclic hosts your app on serverless infrastructure. That means there is no guarantee of memory or file system persistence between requests.The runtime expects a nodejs entry point defined as:package.json \""main\"" field defines the entry point file (if missing uses index.js)Entry point starts a server on process.env.PORTSay HiAsk a question or give us a shout out:💌 hello@cyclic.sh🐣 https://twitter.com/cyclicsoftware"
52,ViktoryiaYatskova/clean-code-s1e1,https://github.com/cyclic-software/express-hello-world/blob/main/README.md,JavaScript,"Cyclic - Express Hello WorldThis is a basic starter Expressjs app with:Static file hostingLogging MiddlewareCatch-all handler that echoes request infoLocal Quick StartClone to your localInstall dependencies npm installRun locally npm serveMake requestsBrowser: http://localhost:3000/some/path?q=query+one&q=second+query&single=valueCommand line: curl -i -XGET \""http://localhost:3000/cmd/line-curl\""Deploy in under 10 secondsSets up instant continuous deployment on git pushRealtime backend logs and API request monitoringCyclic RuntimeCyclic hosts your app on serverless infrastructure. That means there is no guarantee of memory or file system persistence between requests.The runtime expects a nodejs entry point defined as:package.json \""main\"" field defines the entry point file (if missing uses index.js)Entry point starts a server on process.env.PORTSay HiAsk a question or give us a shout out:💌 hello@cyclic.sh🐣 https://twitter.com/cyclicsoftware"
53,sudheerj/javascript-interview-questions,https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md,JavaScript,"JavaScript Interview Questions & AnswersClick ⭐if you like the project and follow @SudheerJonna for more updates. Coding questions available here. PDF and Epub versions available at actions tab.                  Take this JavaScript Projects course to go from a JS beginner to confidently building your own projects    Take this coding interview bootcamp if you’re serious about getting hired and don’t have a CS degree    Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer      Table of ContentsNo.Questions1What are the possible ways to create objects in JavaScript2What is prototype chain3What is the difference between Call, Apply and Bind4What is JSON and its common operations5What is the purpose of the array slice method6What is the purpose of the array splice method7What is the difference between slice and splice8How do you compare Object and Map9What is the difference between == and === operators10What are lambda or arrow functions11What is a first class function12What is a first order function13What is a higher order function14What is a unary function15What is the currying function16What is a pure function17What is the purpose of the let keyword18What is the difference between let and var19What is the reason to choose the name let as a keyword20How do you redeclare variables in switch block without an error21What is the Temporal Dead Zone22What is IIFE(Immediately Invoked Function Expression)23How do you decode or encode a URL in JavaScript?24What is memoization25What is Hoisting26What are classes in ES627What are closures28What are modules29Why do you need modules30What is scope in javascript31What is a service worker32How do you manipulate DOM using a service worker33How do you reuse information across service worker restarts34What is IndexedDB35What is web storage36What is a post message37What is a cookie38Why do you need a Cookie39What are the options in a cookie40How do you delete a cookie41What are the differences between cookie, local storage and session storage42What is the main difference between localStorage and sessionStorage43How do you access web storage44What are the methods available on session storage45What is a storage event and its event handler46Why do you need web storage47How do you check web storage browser support48How do you check web workers browser support49Give an example of a web worker50What are the restrictions of web workers on DOM51What is a promise52Why do you need a promise53What are the three states of promise54What is a callback function55Why do we need callbacks56What is a callback hell57What are server-sent events58How do you receive server-sent event notifications59How do you check browser support for server-sent events60What are the events available for server sent events61What are the main rules of promise62What is callback in callback63What is promise chaining64What is promise.all65What is the purpose of the race method in promise66What is a strict mode in javascript67Why do you need strict mode68How do you declare strict mode69What is the purpose of double exclamation70What is the purpose of the delete operator71What is typeof operator72What is undefined property73What is null value74What is the difference between null and undefined75What is eval76What is the difference between window and document77How do you access history in javascript78How do you detect caps lock key turned on or not79What is isNaN80What are the differences between undeclared and undefined variables81What are global variables82What are the problems with global variables83What is NaN property84What is the purpose of isFinite function85What is an event flow86What is event bubbling87What is event capturing88How do you submit a form using JavaScript89How do you find operating system details90What is the difference between document load and DOMContentLoaded events91What is the difference between native, host and user objects92What are the tools or techniques used for debugging JavaScript code93What are the pros and cons of promises over callbacks94What is the difference between an attribute and a property95What is same-origin policy96What is the purpose of void 097Is JavaScript a compiled or interpreted language98Is JavaScript a case-sensitive language99Is there any relation between Java and JavaScript100What are events101Who created javascript102What is the use of preventDefault method103What is the use of stopPropagation method104What are the steps involved in return false usage105What is BOM106What is the use of setTimeout107What is the use of setInterval108Why is JavaScript treated as Single threaded109What is an event delegation110What is ECMAScript111What is JSON112What are the syntax rules of JSON113What is the purpose JSON stringify114How do you parse JSON string115Why do you need JSON116What are PWAs117What is the purpose of clearTimeout method118What is the purpose of clearInterval method119How do you redirect new page in javascript120How do you check whether a string contains a substring121How do you validate an email in javascript122How do you get the current url with javascript123What are the various url properties of location object124How do get query string values in javascript125How do you check if a key exists in an object126How do you loop through or enumerate javascript object127How do you test for an empty object128What is an arguments object129How do you make first letter of the string in an uppercase130What are the pros and cons of for loop131How do you display the current date in javascript132How do you compare two date objects133How do you check if a string starts with another string134How do you trim a string in javascript135How do you add a key value pair in javascript136Is the '!--' notation represents a special operator137How do you assign default values to variables138How do you define multiline strings139What is an app shell model140Can we define properties for functions141What is the way to find the number of parameters expected by a function142What is a polyfill143What are break and continue statements144What are js labels145What are the benefits of keeping declarations at the top146What are the benefits of initializing variables147What are the recommendations to create new object148How do you define JSON arrays149How do you generate random integers150Can you write a random integers function to print integers with in a range151What is tree shaking152What is the need of tree shaking153Is it recommended to use eval154What is a Regular Expression155What are the string methods available in Regular expression156What are modifiers in regular expression157What are regular expression patterns158What is a RegExp object159How do you search a string for a pattern160What is the purpose of exec method161How do you change the style of a HTML element162What would be the result of 1+2+'3'163What is a debugger statement164What is the purpose of breakpoints in debugging165Can I use reserved words as identifiers166How do you detect a mobile browser167How do you detect a mobile browser without regexp168How do you get the image width and height using JS169How do you make synchronous HTTP request170How do you make asynchronous HTTP request171How do you convert date to another timezone in javascript172What are the properties used to get size of window173What is a conditional operator in javascript174Can you apply chaining on conditional operator175What are the ways to execute javascript after page load176What is the difference between proto and prototype177Give an example where do you really need semicolon178What is a freeze method179What is the purpose of freeze method180Why do I need to use freeze method181How do you detect a browser language preference182How to convert string to title case with javascript183How do you detect javascript disabled in the page184What are various operators supported by javascript185What is a rest parameter186What happens if you do not use rest parameter as a last argument187What are the bitwise operators available in javascript188What is a spread operator189How do you determine whether object is frozen or not190How do you determine two values same or not using object191What is the purpose of using object is method192How do you copy properties from one object to other193What are the applications of assign method194What is a proxy object195What is the purpose of seal method196What are the applications of seal method197What are the differences between freeze and seal methods198How do you determine if an object is sealed or not199How do you get enumerable key and value pairs200What is the main difference between Object.values and Object.entries method201How can you get the list of keys of any object202How do you create an object with prototype203What is a WeakSet204What are the differences between WeakSet and Set205List down the collection of methods available on WeakSet206What is a WeakMap207What are the differences between WeakMap and Map208List down the collection of methods available on WeakMap209What is the purpose of uneval210How do you encode an URL211How do you decode an URL212How do you print the contents of web page213What is the difference between uneval and eval214What is an anonymous function215What is the precedence order between local and global variables216What are javascript accessors217How do you define property on Object constructor218What is the difference between get and defineProperty219What are the advantages of Getters and Setters220Can I add getters and setters using defineProperty method221What is the purpose of switch-case222What are the conventions to be followed for the usage of switch case223What are primitive data types224What are the different ways to access object properties225What are the function parameter rules226What is an error object227When you get a syntax error228What are the different error names from error object229What are the various statements in error handling230What are the two types of loops in javascript231What is nodejs232What is an Intl object233How do you perform language specific date and time formatting234What is an Iterator235How does synchronous iteration works236What is an event loop237What is call stack238What is an event queue239What is a decorator240What are the properties of Intl object241What is an Unary operator242How do you sort elements in an array243What is the purpose of compareFunction while sorting arrays244How do you reversing an array245How do you find min and max value in an array246How do you find min and max values without Math functions247What is an empty statement and purpose of it248How do you get metadata of a module249What is a comma operator250What is the advantage of a comma operator251What is typescript252What are the differences between javascript and typescript253What are the advantages of typescript over javascript254What is an object initializer255What is a constructor method256What happens if you write constructor more than once in a class257How do you call the constructor of a parent class258How do you get the prototype of an object259What happens If I pass string type for getPrototype method260How do you set prototype of one object to another261How do you check whether an object can be extendable or not262How do you prevent an object to extend263What are the different ways to make an object non-extensible264How do you define multiple properties on an object265What is MEAN in javascript266What Is Obfuscation in javascript267Why do you need Obfuscation268What is Minification269What are the advantages of minification270What are the differences between Obfuscation and Encryption271What are the common tools used for minification272How do you perform form validation using javascript273How do you perform form validation without javascript274What are the DOM methods available for constraint validation275What are the available constraint validation DOM properties276What are the list of validity properties277Give an example usage of rangeOverflow property278Is enums feature available in javascript279What is an enum280How do you list all properties of an object281How do you get property descriptors of an object282What are the attributes provided by a property descriptor283How do you extend classes284How do I modify the url without reloading the page285How do you check whether an array includes a particular value or not286How do you compare scalar arrays287How to get the value from get parameters288How do you print numbers with commas as thousand separators289What is the difference between java and javascript290Does javascript supports namespace291How do you declare namespace292How do you invoke javascript code in an iframe from parent page293How do get the timezone offset from date294How do you load CSS and JS files dynamically295What are the different methods to find HTML elements in DOM296What is jQuery297What is V8 JavaScript engine298Why do we call javascript as dynamic language299What is a void operator300How to set the cursor to wait301How do you create an infinite loop302Why do you need to avoid with statement303What is the output of below for loops304List down some of the features of ES6305What is ES6306Can I redeclare let and const variables307Is const variable makes the value immutable308What are default parameters309What are template literals310How do you write multi-line strings in template literals311What are nesting templates312What are tagged templates313What are raw strings314What is destructuring assignment315What are default values in destructuring assignment316How do you swap variables in destructuring assignment317What are enhanced object literals318What are dynamic imports319What are the use cases for dynamic imports320What are typed arrays321What are the advantages of module loaders322What is collation323What is for...of statement324What is the output of below spread operator array325Is PostMessage secure326What are the problems with postmessage target origin as wildcard327How do you avoid receiving postMessages from attackers328Can I avoid using postMessages completely329Is postMessages synchronous330What paradigm is Javascript331What is the difference between internal and external javascript332Is JavaScript faster than server side script333How do you get the status of a checkbox334What is the purpose of double tilde operator335How do you convert character to ASCII code336What is ArrayBuffer337What is the output of below string expression338What is the purpose of Error object339What is the purpose of EvalError object340What are the list of cases error thrown from non-strict mode to strict mode341Do all objects have prototypes342What is the difference between a parameter and an argument343What is the purpose of some method in arrays344How do you combine two or more arrays345What is the difference between Shallow and Deep copy346How do you create specific number of copies of a string347How do you return all matching strings against a regular expression348How do you trim a string at the beginning or ending349What is the output of below console statement with unary operator350Does javascript uses mixins351What is a thunk function352What are asynchronous thunks353What is the output of below function calls354How to remove all line breaks from a string355What is the difference between reflow and repaint356What happens with negating an array357What happens if we add two arrays358What is the output of prepend additive operator on falsy values359How do you create self string using special characters360How do you remove falsy values from an array361How do you get unique values of an array362What is destructuring aliases363How do you map the array values without using map method364How do you empty an array365How do you rounding numbers to certain decimals366What is the easiest way to convert an array to an object367How do you create an array with some data368What are the placeholders from console object369Is it possible to add CSS to console messages370What is the purpose of dir method of console object371Is it possible to debug HTML elements in console372How do you display data in a tabular format using console object373How do you verify that an argument is a Number or not374How do you create copy to clipboard button375What is the shortcut to get timestamp376How do you flattening multi dimensional arrays377What is the easiest multi condition checking378How do you capture browser back button379How do you disable right click in the web page380What are wrapper objects381What is AJAX382What are the different ways to deal with Asynchronous Code383How to cancel a fetch request384What is web speech API385What is minimum timeout throttling386How do you implement zero timeout in modern browsers387What are tasks in event loop388What is microtask389What are different event loops390What is the purpose of queueMicrotask391How do you use javascript libraries in typescript file392What are the differences between promises and observables393What is heap394What is an event table395What is a microTask queue396What is the difference between shim and polyfill397How do you detect primitive or non primitive value type398What is babel399Is Node.js completely single threaded400What are the common use cases of observables401What is RxJS402What is the difference between Function constructor and function declaration403What is a Short circuit condition404What is the easiest way to resize an array405What is an observable406What is the difference between function and class declarations407What is an async function408How do you prevent promises swallowing errors409What is deno410How do you make an object iterable in javascript411What is a Proper Tail Call412How do you check an object is a promise or not413How to detect if a function is called as constructor414What are the differences between arguments object and rest parameter415What are the differences between spread operator and rest parameter416What are the different kinds of generators417What are the built-in iterables418What are the differences between for...of and for...in statements419How do you define instance and non-instance properties420What is the difference between isNaN and Number.isNaN?421How to invoke an IIFE without any extra brackets?422Is that possible to use expressions in switch cases?423What is the easiest way to ignore promise errors?424How do style the console output using CSS?425What is nullish coalescing operator (??)?426How do you group and nest console output?427What is the difference between dense and sparse arrays?428What are the different ways to create sparse arrays?429What is the difference between setTimeout, setImmediate and process.nextTick?430How do you reverse an array without modifying original array?431How do you create custom HTML element?432What is global execution context?433What is function execution context?434What is debouncing?435What is throttling?436What is optional chaining?437What is an environment record?438How to verify if a variable is an array?439What is pass by value and pass by reference?440What are the differences between primitives and non-primitives?441What are hidden classes?442What is inline caching?443How do you create your own bind method using either call or apply method?444What are the differences between pure and impure functions?445What is  referential transparency?446What are the possible side-effects in javascript?447What are compose and pipe functions?448What is module pattern?449What is Functon Composition?450How to use await outside of async function prior to ES2022?What are the possible ways to create objects in JavaScriptThere are many ways to create objects in javascript as belowObject constructor:The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.var object = new Object();Object's create method:The create method of Object creates a new object by passing the prototype object as a parametervar object = Object.create(null);Object literal syntax:The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.var object = {     name: \""Sudheer\"",     age: 34};Object literal property values can be of any data type, including array, function, and nested object.Note: This is an easiest way to create an objectFunction constructor:Create any function and apply the new operator to create object instances,function Person(name) {  this.name = name;  this.age = 21;}var object = new Person(\""Sudheer\"");Function constructor with prototype:This is similar to function constructor but it uses prototype for their properties and methods,function Person() {}Person.prototype.name = \""Sudheer\"";var object = new Person();This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.function func() {};new func(x, y, z);(OR)// Create a new instance using function prototype.var newInstance = Object.create(func.prototype)// Call the functionvar result = func.call(newInstance, x, y, z),// If the result is a non-null object then use it otherwise just use the new instance.console.log(result && typeof result === 'object' ? result : newInstance);ES6 Class syntax:ES6 introduces class feature to create the objectsclass Person {  constructor(name) {    this.name = name;  }}var object = new Person(\""Sudheer\"");Singleton pattern:A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.var object = new (function () {  this.name = \""Sudheer\"";})();⬆ Back to TopWhat is a prototype chainPrototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.The prototype on object instance is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.⬆ Back to TopWhat is the difference between Call, Apply and BindThe difference between Call, Apply and Bind can be explained with below examples,Call: The call() method invokes a function with a given this value and arguments provided one by onevar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.call(employee1, \""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?invite.call(employee2, \""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Apply: Invokes the function with a given this value and allows you to pass in arguments as an arrayvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.apply(employee1, [\""Hello\"", \""How are you?\""]); // Hello John Rodson, How are you?invite.apply(employee2, [\""Hello\"", \""How are you?\""]); // Hello Jimmy Baily, How are you?bind: returns a new function, allowing you to pass any number of argumentsvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}var inviteEmployee1 = invite.bind(employee1);var inviteEmployee2 = invite.bind(employee2);inviteEmployee1(\""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?inviteEmployee2(\""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array.Whereas Bind creates a new function that will have this set to the first parameter passed to bind().⬆ Back to TopWhat is JSON and its common operationsJSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/jsonParsing: Converting a string to a native objectJSON.parse(text);Stringification: converting a native object to a string so it can be transmitted across the networkJSON.stringify(object);⬆ Back to TopWhat is the purpose of the array slice methodThe slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.Some of the examples of this method are,let arrayIntegers = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]let arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]Note: Slice method won't mutate the original array but it returns the subset as a new array.⬆ Back to TopWhat is the purpose of the array splice methodThe splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.Some of the examples of this method are,let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \""a\"", \""b\"", \""c\""); //returns [4]; original array: [1, 2, 3, \""a\"", \""b\"", \""c\"", 5]Note: Splice method modifies the original array and returns the deleted array.⬆ Back to TopWhat is the difference between slice and spliceSome of the major difference in a tabular formSliceSpliceDoesn't modify the original array(immutable)Modifies the original array(mutable)Returns the subset of original arrayReturns the deleted elements as arrayUsed to pick the elements from arrayUsed to insert or delete elements to/from array⬆ Back to TopHow do you compare Object and MapObjects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.A Map may perform better in scenarios involving frequent addition and removal of key pairs.⬆ Back to TopWhat is the difference between == and === operatorsJavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.There are two special cases in this,NaN is not equal to anything, including NaN.Positive and negative zeros are equal to one another.Two Boolean operands are strictly equal if both are true or both are false.Two objects are strictly equal if they refer to the same Object.Null and Undefined types are not equal with ===, but equal with ==. i.e,null===undefined --> false but null==undefined --> trueSome of the example which covers the above cases,0 == false   // true0 === false  // false1 == \""1\""     // true1 === \""1\""    // falsenull == undefined // truenull === undefined // false'0' == false // true'0' === false // false[]==[] or []===[] //false, refer different objects in memory{}=={} or {}==={} //false, refer different objects in memory⬆ Back to TopWhat are lambda or arrow functionsAn arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.⬆ Back to TopWhat is a first class functionIn Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listenerconst handler = () => console.log(\""This is a click handler function\"");document.addEventListener(\""click\"", handler);⬆ Back to TopWhat is a first order functionFirst-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.const firstOrder = () => console.log(\""I am a first order function!\"");⬆ Back to TopWhat is a higher order functionHigher-order function is a function that accepts another function as an argument or returns a function as a return value or both.const firstOrderFunc = () =>  console.log(\""Hello, I am a First order function\"");const higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();higherOrder(firstOrderFunc);⬆ Back to TopWhat is a unary functionUnary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.Let us take an example of unary function,const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value⬆ Back to TopWhat is the currying functionCurrying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function.Let's take an example of n-ary function and how it turns into a currying function,const multiArgFunction = (a, b, c) => a + b + c;console.log(multiArgFunction(1, 2, 3)); // 6const curryUnaryFunction = (a) => (b) => (c) => a + b + c;curryUnaryFunction(1); // returns a function: b => c =>  1 + b + ccurryUnaryFunction(1)(2); // returns a function: c => 3 + ccurryUnaryFunction(1)(2)(3); // returns the number 6Curried functions are great to improve code reusability and functional composition.⬆ Back to TopWhat is a pure functionA Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.Let's take an example to see the difference between pure and impure functions,//Impurelet numberArray = [];const impureAddNumber = (number) => numberArray.push(number);//Pureconst pureAddNumber = (number) => (argNumberArray) =>  argNumberArray.concat([number]);//Display the resultsconsole.log(impureAddNumber(6)); // returns 1console.log(numberArray); // returns [6]console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]console.log(numberArray); // returns [6]As per the above code snippets, the Push function is impure itself by altering the array and returning a push number index independent of the parameter value. . Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array.Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with Immutability concept of ES6 by giving preference to const over let usage.⬆ Back to TopWhat is the purpose of the let keywordThe let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.Let's take an example to demonstrate the usage,let counter = 30;if (counter === 30) {  let counter = 31;  console.log(counter); // 31}console.log(counter); // 30 (because the variable in if block won't exist here)⬆ Back to TopWhat is the difference between let and varYou can list out the differences in a tabular formatvarletIt is been available from the beginning of JavaScriptIntroduced as part of ES6It has function scopeIt has block scopeVariables will be hoistedHoisted but not initializedLet's take an example to see the difference,function userDetails(username) {  if (username) {    console.log(salary); // undefined due to hoisting    console.log(age); // ReferenceError: Cannot access 'age' before initialization    let age = 30;    var salary = 10000;  }  console.log(salary); //10000 (accessible due to function scope)  console.log(age); //error: age is not defined(due to block scope)}userDetails(\""John\"");⬆ Back to TopWhat is the reason to choose the name let as a keywordlet is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.⬆ Back to TopHow do you redeclare variables in switch block without an errorIf you try to redeclare variables in a switch block then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,let counter = 1;switch (x) {  case 0:    let name;    break;  case 1:    let name; // SyntaxError for redeclaration.    break;}To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.let counter = 1;switch (x) {  case 0: {    let name;    break;  }  case 1: {    let name; // No SyntaxError for redeclaration.    break;  }}⬆ Back to TopWhat is the Temporal Dead ZoneThe Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.Let's see this behavior with an example,function somemethod() {  console.log(counter1); // undefined  console.log(counter2); // ReferenceError  var counter1 = 1;  let counter2 = 2;}⬆ Back to TopWhat is IIFE(Immediately Invoked Function Expression)IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,(function () {  // logic here})();The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,(function () {  var message = \""IIFE\"";  console.log(message);})();console.log(message); //Error: message is not defined⬆ Back to TopHow do you decode or encode a URL in JavaScript?encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string.decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.Note: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().let uri = \""employeeDetails?name=john&occupation=manager\"";let encoded_uri = encodeURI(uri);let decoded_uri = decodeURI(encoded_uri);⬆ Back to TopWhat is memoizationMemoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache.Let's take an example of adding function with memoization,const memoizAddition = () => {  let cache = {};  return (value) => {    if (value in cache) {      console.log(\""Fetching from cache\"");      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.    } else {      console.log(\""Calculating result\"");      let result = value + 20;      cache[value] = result;      return result;    }  };};// returned function from memoizAdditionconst addition = memoizAddition();console.log(addition(20)); //output: 40 calculatedconsole.log(addition(20)); //output: 40 cached⬆ Back to TopWhat is HoistingHoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation.Let's take a simple example of variable hoisting,console.log(message); //output : undefinedvar message = \""The variable Has been hoisted\"";The above code looks like as below to the interpreter,var message;console.log(message);message = \""The variable Has been hoisted\"";In the same fashion, function declarations are hoisted toomessage(\""Good morning\""); //Good morningfunction message(name) {  console.log(name);}This hoisting makes functions to be safely used in code before they are declared.⬆ Back to TopWhat are classes in ES6In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.For example, the prototype based inheritance written in function expression as below,function Bike(model, color) {  this.model = model;  this.color = color;}Bike.prototype.getDetails = function () {  return this.model + \"" bike has\"" + this.color + \"" color\"";};Whereas ES6 classes can be defined as an alternativeclass Bike {  constructor(color, model) {    this.color = color;    this.model = model;  }  getDetails() {    return this.model + \"" bike has\"" + this.color + \"" color\"";  }}⬆ Back to TopWhat are closuresA closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chainsOwn scope where variables defined between its curly bracketsOuter function’s variablesGlobal variablesLet's take an example of closure concept,function Welcome(name) {  var greetingInfo = function (message) {    console.log(message + \"" \"" + name);  };  return greetingInfo;}var myFunction = Welcome(\""John\"");myFunction(\""Welcome \""); //Output: Welcome JohnmyFunction(\""Hello Mr.\""); //output: Hello Mr.JohnAs per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.⬆ Back to TopWhat are modulesModules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor⬆ Back to TopWhy do you need modulesBelow are the list of benefits using modules in javascript ecosystemMaintainabilityReusabilityNamespacing⬆ Back to TopWhat is scope in javascriptScope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.⬆ Back to TopWhat is a service workerA Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.⬆ Back to TopHow do you manipulate DOM using a service workerService worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM.⬆ Back to TopHow do you reuse information across service worker restartsThe problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.⬆ Back to TopWhat is IndexedDBIndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.⬆ Back to TopWhat is web storageWeb storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.Local storage: It stores data for current origin with no expiration date.Session storage: It stores data for one session and the data is lost when the browser tab is closed.⬆ Back to TopWhat is a post messagePost message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).⬆ Back to TopWhat is a CookieA cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs.For example, you can create a cookie named username as below,document.cookie = \""username=John\"";⬆ Back to TopWhy do you need a CookieCookies are used to remember information about the user profile(such as username). It basically involves two steps,When a user visits a web page, the user profile can be stored in a cookie.Next time the user visits the page, the cookie remembers the user profile.⬆ Back to TopWhat are the options in a cookieThere are few below options available for a cookie,By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).document.cookie = \""username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\"";By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.document.cookie = \""username=John; path=/services\"";⬆ Back to TopHow do you delete a cookieYou can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case.For example, you can delete a username cookie in the current page as below.document.cookie =  \""username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;\"";Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.⬆ Back to TopWhat are the differences between cookie, local storage and session storageBelow are some of the differences between cookie, local storage and session storage,FeatureCookieLocal storageSession storageAccessed on client or server sideBoth server-side & client-sideclient-side onlyclient-side onlyLifetimeAs configured using Expires optionuntil deleteduntil tab is closedSSL supportSupportedNot supportedNot supportedMaximum data size4KB5 MB5MB⬆ Back to TopWhat is the main difference between localStorage and sessionStorageLocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.⬆ Back to TopHow do you access web storageThe Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(window.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local).For example, you can read and write on local storage objects as belowlocalStorage.setItem(\""logo\"", document.getElementById(\""logo\"").value);localStorage.getItem(\""logo\"");⬆ Back to TopWhat are the methods available on session storageThe session storage provided methods for reading, writing and clearing the session data// Save data to sessionStoragesessionStorage.setItem(\""key\"", \""value\"");// Get saved data from sessionStoragelet data = sessionStorage.getItem(\""key\"");// Remove saved data from sessionStoragesessionStorage.removeItem(\""key\"");// Remove all saved data from sessionStoragesessionStorage.clear();⬆ Back to TopWhat is a storage event and its event handlerThe StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events.The syntax would be as belowwindow.onstorage = functionRef;Let's take the example usage of onstorage event handler which logs the storage key and it's valueswindow.onstorage = function (e) {  console.log(    \""The \"" +      e.key +      \"" key has been changed from \"" +      e.oldValue +      \"" to \"" +      e.newValue +      \"".\""  );};⬆ Back to TopWhy do you need web storageWeb storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.⬆ Back to TopHow do you check web storage browser supportYou need to check browser support for localStorage and sessionStorage before using web storage,if (typeof Storage !== \""undefined\"") {  // Code for localStorage/sessionStorage.} else {  // Sorry! No Web Storage support..}⬆ Back to TopHow do you check web workers browser supportYou need to check browser support for web workers before using itif (typeof Worker !== \""undefined\"") {  // code for Web worker support.} else {  // Sorry! No Web Worker support..}⬆ Back to TopGive an example of a web workerYou need to follow below steps to start using web workers for counting exampleCreate a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.jslet i = 0;function timedCount() {  i = i + 1;  postMessage(i);  setTimeout(\""timedCount()\"", 500);}timedCount();Here postMessage() method is used to post a message back to the HTML pageCreate a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.jsif (typeof w == \""undefined\"") {  w = new Worker(\""counter.js\"");}and we can receive messages from web workerw.onmessage = function (event) {  document.getElementById(\""message\"").innerHTML = event.data;};Terminate a Web Worker:Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.w.terminate();Reuse the Web Worker: If you set the worker variable to undefined you can reuse the codew = undefined;⬆ Back to TopWhat are the restrictions of web workers on DOMWebWorkers don't have access to below javascript objects since they are defined in an external filesWindow objectDocument objectParent object⬆ Back to TopWhat is a promiseA promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.The syntax of Promise creation looks like below,const promise = new Promise(function (resolve, reject) {  // promise description});The usage of a promise would be as below,const promise = new Promise(  (resolve) => {    setTimeout(() => {      resolve(\""I'm a Promise!\"");    }, 5000);  },  (reject) => {});promise.then((value) => console.log(value));The action flow of a promise will be as below,⬆ Back to TopWhy do you need a promisePromises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.⬆ Back to TopWhat are the three states of promisePromises have three states:Pending: This is an initial state of the Promise before an operation beginsFulfilled: This state indicates that the specified operation was completed.Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.⬆ Back to TopWhat is a callback functionA callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action.Let's take a simple example of how to use callback functionfunction callbackFunction(name) {  console.log(\""Hello \"" + name);}function outerFunction(callback) {  let name = prompt(\""Please enter your name.\"");  callback(name);}outerFunction(callbackFunction);⬆ Back to TopWhy do we need callbacksThe callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events.Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.function firstFunction() {  // Simulate a code delay  setTimeout(function () {    console.log(\""First function called\"");  }, 1000);}function secondFunction() {  console.log(\""Second function called\"");}firstFunction();secondFunction();Output;// Second function called// First function calledAs observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.⬆ Back to TopWhat is a callback hellCallback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,async1(function(){    async2(function(){        async3(function(){            async4(function(){                ....            });        });    });});⬆ Back to TopWhat are server-sent eventsServer-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.⬆ Back to TopHow do you receive server-sent event notificationsThe EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,if (typeof EventSource !== \""undefined\"") {  var source = new EventSource(\""sse_generator.js\"");  source.onmessage = function (event) {    document.getElementById(\""output\"").innerHTML += event.data + \""<br>\"";  };}⬆ Back to TopHow do you check browser support for server-sent eventsYou can perform browser support for server-sent events before using it as below,if (typeof EventSource !== \""undefined\"") {  // Server-sent events supported. Let's have some code here!} else {  // No server-sent events supported}⬆ Back to TopWhat are the events available for server sent eventsBelow are the list of events available for server sent eventsEventDescriptiononopenIt is used when a connection to the server is openedonmessageThis event is used when a message is receivedonerrorIt happens when an error occurs⬆ Back to TopWhat are the main rules of promiseA promise must follow a specific set of rules:A promise is an object that supplies a standard-compliant .then() methodA pending promise may transition into either fulfilled or rejected stateA fulfilled or rejected promise is settled and it must not transition into any other state.Once a promise is settled, the value must not change.⬆ Back to TopWhat is callback in callbackYou can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.loadScript(\""/script1.js\"", function (script) {  console.log(\""first script is loaded\"");  loadScript(\""/script2.js\"", function (script) {    console.log(\""second script is loaded\"");    loadScript(\""/script3.js\"", function (script) {      console.log(\""third script is loaded\"");      // after all scripts are loaded    });  });});⬆ Back to TopWhat is promise chainingThe process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,new Promise(function (resolve, reject) {  setTimeout(() => resolve(1), 1000);})  .then(function (result) {    console.log(result); // 1    return result * 2;  })  .then(function (result) {    console.log(result); // 2    return result * 3;  })  .then(function (result) {    console.log(result); // 6    return result * 4;  });In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,The initial promise resolves in 1 second,After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2.After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3.Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.⬆ Back to TopWhat is promise.allPromise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,Promise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))Note: Remember that the order of the promises(output the result) is maintained as per input order.⬆ Back to TopWhat is the purpose of the race method in promisePromise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved firstvar promise1 = new Promise(function (resolve, reject) {  setTimeout(resolve, 500, \""one\"");});var promise2 = new Promise(function (resolve, reject) {  setTimeout(resolve, 100, \""two\"");});Promise.race([promise1, promise2]).then(function (value) {  console.log(value); // \""two\"" // Both promises will resolve, but promise2 is faster});⬆ Back to TopWhat is a strict mode in javascriptStrict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression \""use strict\""; instructs the browser to use the javascript code in the Strict mode.⬆ Back to TopWhy do you need strict modeStrict mode is useful to write \""secure\"" JavaScript by notifying \""bad syntax\"" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.⬆ Back to TopHow do you declare strict modeThe strict mode is declared by adding \""use strict\""; to the beginning of a script or a function.If declared at the beginning of a script, it has global scope.\""use strict\"";x = 3.14; // This will cause an error because x is not declaredand if you declare inside a function, it has local scopex = 3.14; // This will not cause an error.myFunction();function myFunction() {  \""use strict\"";  y = 3.14; // This will cause an error}⬆ Back to TopWhat is the purpose of double exclamationThe double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true.For example, you can test IE version using this expression as below,let isIE8 = false;isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);console.log(isIE8); // returns true or falseIf you don't use this expression then it returns the original value.console.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or nullNote: The expression !! is not an operator, but it is just twice of ! operator.⬆ Back to TopWhat is the purpose of the delete operatorThe delete keyword is used to delete the property as well as its value.var user = { name: \""John\"", age: 20 };delete user.age;console.log(user); // {name: \""John\""}⬆ Back to TopWhat is typeof operatorYou can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.typeof \""John Abraham\""; // Returns \""string\""typeof (1 + 2); // Returns \""number\""typeof [1, 2, 3] // Returns \""object\"" because all arrays are also objects⬆ Back to TopWhat is undefined propertyThe undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.var user; // Value is undefined, type is undefinedconsole.log(typeof user); //undefinedAny variable can be emptied by setting the value to undefined.user = undefined;⬆ Back to TopWhat is null valueThe value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object.You can empty the variable by setting the value to null.var user = null;console.log(typeof user); //object⬆ Back to TopWhat is the difference between null and undefinedBelow are the main differences between null and undefined,NullUndefinedIt is an assignment value which indicates that variable points to no object.It is not an assignment value where a variable has been declared but has not yet been assigned a value.Type of null is objectType of undefined is undefinedThe null value is a primitive value that represents the null, empty, or non-existent reference.The undefined value is a primitive value used when a variable has not been assigned a value.Indicates the absence of a value for a variableIndicates absence of variable itselfConverted to zero (0) while performing primitive operationsConverted to NaN while performing primitive operations⬆ Back to TopWhat is evalThe eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.console.log(eval(\""1 + 2\"")); //  3⬆ Back to TopWhat is the difference between window and documentBelow are the main differences between window and document,WindowDocumentIt is the root level element in any web pageIt is the direct child of the window object. This is also known as Document Object Model(DOM)By default window object is available implicitly in the pageYou can access it via window.document or document.It has methods like alert(), confirm() and properties like document, locationIt provides methods like getElementById, getElementsByTagName, createElement etc⬆ Back to TopHow do you access history in javascriptThe window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.function goBack() {  window.history.back();}function goForward() {  window.history.forward();}Note: You can also access history without window prefix.⬆ Back to TopHow do you detect caps lock key turned on or notThe mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.Let's take an input element to detect the CapsLock on/off behavior with an example,<input type=\""password\"" onmousedown=\""enterInput(event)\"" /><p id=\""feedback\""></p><script>  function enterInput(e) {    var flag = e.getModifierState(\""CapsLock\"");    if (flag) {      document.getElementById(\""feedback\"").innerHTML = \""CapsLock activated\"";    } else {      document.getElementById(\""feedback\"").innerHTML =        \""CapsLock not activated\"";    }  }</script>⬆ Back to TopWhat is isNaNThe isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.isNaN(\""Hello\""); //trueisNaN(\""100\""); //false⬆ Back to TopWhat are the differences between undeclared and undefined variablesBelow are the major differences between undeclared(not defined) and undefined variables,undeclaredundefinedThese variables do not exist in a program and are not declaredThese variables declared in the program but have not assigned any valueIf you try to read the value of an undeclared variable, then a runtime error is encounteredIf you try to read the value of an undefined variable, an undefined value is returned.⬆ Back to TopWhat are global variablesGlobal variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variablemsg = \""Hello\""; // var is missing, it becomes global variable⬆ Back to TopWhat are the problems with global variablesThe problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.⬆ Back to TopWhat is NaN propertyThe NaN property is a global property that represents \""Not-a-Number\"" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few casesMath.sqrt(-1);parseInt(\""Hello\"");⬆ Back to TopWhat is the purpose of isFinite functionThe isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.isFinite(Infinity); // falseisFinite(NaN); // falseisFinite(-Infinity); // falseisFinite(100); // true⬆ Back to TopWhat is an event flowEvent flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.There are two ways of event flowTop to Bottom(Event Capturing)Bottom to Top (Event Bubbling)⬆ Back to TopWhat is event bubblingEvent bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.⬆ Back to TopWhat is event capturingEvent capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.⬆ Back to TopHow do you submit a form using JavaScriptYou can submit a form using document.forms[0].submit(). All the form input's information is submitted using onsubmit event handlerfunction submit() {  document.forms[0].submit();}⬆ Back to TopHow do you find operating system detailsThe window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property,console.log(navigator.platform);⬆ Back to TopWhat is the difference between document load and DOMContentLoaded eventsThe DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).⬆ Back to TopWhat is the difference between native, host and user objectsNative objects are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.Host objects are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects.User objects are objects defined in the javascript code. For example, User objects created for profile information.⬆ Back to TopWhat are the tools or techniques used for debugging JavaScript codeYou can use below tools or techniques for debugging javascriptChrome Devtoolsdebugger statementGood old console.log statement⬆ Back to TopWhat are the pros and cons of promises over callbacksBelow are the list of pros and cons of promises over callbacks,Pros:It avoids callback hell which is unreadableEasy to write sequential asynchronous code with .then()Easy to write parallel asynchronous code with Promise.all()Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)Cons:It makes little complex codeYou need to load a polyfill if ES6 is not supported⬆ Back to TopWhat is the difference between an attribute and a propertyAttributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes type and value,<input type=\""text\"" value=\""Name:\"">You can retrieve the attribute value as below,const input = document.querySelector(\""input\"");console.log(input.getAttribute(\""value\"")); // Good morningconsole.log(input.value); // Good morningAnd after you change the value of the text field to \""Good evening\"", it becomes likeconsole.log(input.getAttribute(\""value\"")); // Good eveningconsole.log(input.value); // Good evening⬆ Back to TopWhat is same-origin policyThe same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).⬆ Back to TopWhat is the purpose of void 0Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=\""JavaScript:Void(0);\"" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression.For example, the below link notify the message without reloading the page<a href=\""JavaScript:void(0);\"" onclick=\""alert('Well done!')\"">  Click Me!</a>⬆ Back to TopIs JavaScript a compiled or interpreted languageJavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.⬆ Back to TopIs JavaScript a case-sensitive languageYes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any other identifiers must always be typed with a consistent capitalization of letters.⬆ Back to TopIs there any relation between Java and JavaScriptNo, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).⬆ Back to TopWhat are eventsEvents are \""things\"" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on these events. Some of the examples of HTML events are,Web page has finished loadingInput field was changedButton was clickedLet's describe the behavior of click event for button element,<!doctype html><html> <head>   <script>     function greeting() {       alert('Hello! Good morning');     }   </script> </head> <body>   <button type=\""button\"" onclick=\""greeting()\"">Click me</button> </body></html>⬆ Back to TopWho created javascriptJavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name Mocha, but later the language was officially called LiveScript when it first shipped in beta releases of Netscape.⬆ Back to TopWhat is the use of preventDefault methodThe preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.document  .getElementById(\""link\"")  .addEventListener(\""click\"", function (event) {    event.preventDefault();  });Note: Remember that not all events are cancelable.⬆ Back to TopWhat is the use of stopPropagation methodThe stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)<p>Click DIV1 Element</p><div onclick=\""secondFunc()\"">DIV 2  <div onclick=\""firstFunc(event)\"">DIV 1</div></div><script>function firstFunc(event) {  alert(\""DIV 1\"");  event.stopPropagation();}function secondFunc() {  alert(\""DIV 2\"");}</script>⬆ Back to TopWhat are the steps involved in return false usageThe return false statement in event handlers performs the below steps,First it stops the browser's default action or behaviour.It prevents the event from propagating the DOMStops callback execution and returns immediately when called.⬆ Back to TopWhat is BOMThe Browser Object Model (BOM) allows JavaScript to \""talk to\"" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.⬆ Back to TopWhat is the use of setTimeoutThe setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,setTimeout(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhat is the use of setIntervalThe setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method,setInterval(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhy is JavaScript treated as Single threadedJavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.⬆ Back to TopWhat is an event delegationEvent delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.For example, if you wanted to detect field changes in inside a specific form, you can use event delegation technique,var form = document.querySelector(\""#registration-form\"");// Listen for changes to fields inside the formform.addEventListener(  \""input\"",  function (event) {    // Log the field that was changed    console.log(event.target);  },  false);⬆ Back to TopWhat is ECMAScriptECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.⬆ Back to TopWhat is JSONJSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.⬆ Back to TopWhat are the syntax rules of JSONBelow are the list of syntax rules of JSONThe data is in name/value pairsThe data is separated by commasCurly braces hold objectsSquare brackets hold arrays⬆ Back to TopWhat is the purpose JSON stringifyWhen sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.var userJSON = { name: \""John\"", age: 31 };var userString = JSON.stringify(userJSON);console.log(userString); //\""{\""name\"":\""John\"",\""age\"":31}\""⬆ Back to TopHow do you parse JSON stringWhen receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.var userString = '{\""name\"":\""John\"",\""age\"":31}';var userJSON = JSON.parse(userString);console.log(userJSON); // {name: \""John\"", age: 31}⬆ Back to TopWhy do you need JSONWhen exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.⬆ Back to TopWhat are PWAsProgressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.⬆ Back to TopWhat is the purpose of clearTimeout methodThe clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg =setTimeout(greeting, 3000);}function stop() {    clearTimeout(msg);}</script>⬆ Back to TopWhat is the purpose of clearInterval methodThe clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg = setInterval(greeting, 3000);}function stop() {    clearInterval(msg);}</script>⬆ Back to TopHow do you redirect new page in javascriptIn vanilla javascript, you can redirect to a new page using the location property of window object. The syntax would be as follows,function redirect() {  window.location.href = \""newPage.html\"";}⬆ Back to TopHow do you check whether a string contains a substringThere are 3 possible ways to check whether a string contains a substring or not,Using includes: ES6 provided String.prototype.includes method to test a string contains a substringvar mainString = \""hello\"",  subString = \""hell\"";mainString.includes(subString);Using indexOf: In an ES5 or older environment, you can use String.prototype.indexOf which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.var mainString = \""hello\"",  subString = \""hell\"";mainString.indexOf(subString) !== -1;Using RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressionsvar mainString = \""hello\"",  regex = /hell/;regex.test(mainString);⬆ Back to TopHow do you validate an email in javascriptYou can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.function validateEmail(email) {  var re =    /^(([^<>()\\[\\]\\\\.,;:\\s@\""]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\""]+)*)|(\"".+\""))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;  return re.test(String(email).toLowerCase());}⬆ Back to TopThe above regular expression accepts unicode characters.How do you get the current url with javascriptYou can use window.location.href expression to get the current url path and you can use the same expression for updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.console.log(\""location.href\"", window.location.href); // Returns full URL⬆ Back to TopWhat are the various url properties of location objectThe below Location object properties can be used to access URL components of the page,href - The entire URLprotocol - The protocol of the URLhost - The hostname and port of the URLhostname - The hostname of the URLport - The port number in the URLpathname - The path name of the URLsearch - The query portion of the URLhash - The anchor portion of the URL⬆ Back to TopHow do get query string values in javascriptYou can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string,const urlParams = new URLSearchParams(window.location.search);const clientCode = urlParams.get(\""clientCode\"");⬆ Back to TopHow do you check if a key exists in an objectYou can check whether a key exists in an object or not using three approaches,Using in operator: You can use the in operator whether a key exists in an object or not\""key\"" in obj;and If you want to check if a key doesn't exist, remember to use parenthesis,!(\""key\"" in obj);Using hasOwnProperty method: You can use hasOwnProperty to particularly test for properties of the object instance (and not inherited properties)obj.hasOwnProperty(\""key\""); // trueUsing undefined comparison: If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.const user = {  name: \""John\"",};console.log(user.name !== undefined); // trueconsole.log(user.nickName !== undefined); // false⬆ Back to TopHow do you loop through or enumerate javascript objectYou can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using hasOwnProperty method.var object = {  k1: \""value1\"",  k2: \""value2\"",  k3: \""value3\"",};for (var key in object) {  if (object.hasOwnProperty(key)) {    console.log(key + \"" -> \"" + object[key]); // k1 -> value1 ...  }}⬆ Back to TopHow do you test for an empty objectThere are different solutions based on ECMAScript versionsUsing Object entries(ECMA 7+): You can use object entries length along with constructor type.Object.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing Object keys(ECMA 5+): You can use object keys length along with constructor type.Object.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing for-in with hasOwnProperty(Pre-ECMA 5): You can use a for-in loop along with hasOwnProperty.function isEmpty(obj) {  for (var prop in obj) {    if (obj.hasOwnProperty(prop)) {      return false;    }  }  return JSON.stringify(obj) === JSON.stringify({});}⬆ Back to TopWhat is an arguments objectThe arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function,function sum() {  var total = 0;  for (var i = 0, len = arguments.length; i < len; ++i) {    total += arguments[i];  }  return total;}sum(1, 2, 3); // returns 6Note: You can't apply array methods on arguments object. But you can convert into a regular array as below.var argsArray = Array.prototype.slice.call(arguments);⬆ Back to TopHow do you make first letter of the string in an uppercaseYou can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.function capitalizeFirstLetter(string) {  return string.charAt(0).toUpperCase() + string.slice(1);}⬆ Back to TopWhat are the pros and cons of for loopThe for-loop is a commonly used iteration syntax in javascript. It has both pros and consProsWorks on every environmentYou can use break and continue flow control statementsConsToo verboseImperativeYou might face one-by-off errors⬆ Back to TopHow do you display the current date in javascriptYou can use new Date() to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyyvar today = new Date();var dd = String(today.getDate()).padStart(2, \""0\"");var mm = String(today.getMonth() + 1).padStart(2, \""0\""); //January is 0!var yyyy = today.getFullYear();today = mm + \""/\"" + dd + \""/\"" + yyyy;document.write(today);⬆ Back to TopHow do you compare two date objectsYou need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !== operators)var d1 = new Date();var d2 = new Date(d1);console.log(d1.getTime() === d2.getTime()); //Trueconsole.log(d1 === d2); // False⬆ Back to TopHow do you check if a string starts with another stringYou can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage,\""Good morning\"".startsWith(\""Good\""); // true\""Good morning\"".startsWith(\""morning\""); // false⬆ Back to TopHow do you trim a string in javascriptJavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.\""  Hello World   \"".trim(); //Hello WorldIf your browser(<IE9) doesn't support this method then you can use below polyfill.if (!String.prototype.trim) {  (function () {    // Make sure we trim BOM and NBSP    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;    String.prototype.trim = function () {      return this.replace(rtrim, \""\"");    };  })();}⬆ Back to TopHow do you add a key value pair in javascriptThere are two possible solutions to add new properties to an object. Let's take a simple object to explain these solutions.var object = {  key1: value1,  key2: value2,};Using dot notation: This solution is useful when you know the name of the propertyobject.key3 = \""value3\"";Using square bracket notation: This solution is useful when the name of the property is dynamically determined.obj[\""key3\""] = \""value3\"";⬆ Back to TopIs the !-- notation represents a special operatorNo,that's not a special operator. But it is a combination of 2 standard operators one after the other,A logical not (!)A prefix decrement (--)At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.⬆ Back to TopHow do you assign default values to variablesYou can use the logical or operator || in an assignment expression to provide a default value. The syntax looks like as below,var a = b || c;As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'.⬆ Back to TopHow do you define multiline stringsYou can define multiline string literals using the '\\' character followed by line terminator.var str =  \""This is a \\very lengthy \\sentence!\"";But if you have a space after the '\\' character, the code will look exactly the same, but it will raise a SyntaxError.⬆ Back to TopWhat is an app shell modelAn application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.⬆ Back to TopCan we define properties for functionsYes, We can define properties for functions because functions are also objects.fn = function (x) {  //Function code goes here};fn.name = \""John\"";fn.profile = function (y) {  //Profile code goes here};⬆ Back to TopWhat is the way to find the number of parameters expected by a functionYou can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers,function sum(num1, num2, num3, num4) {  return num1 + num2 + num3 + num4;}sum.length; // 4 is the number of parameters expected.⬆ Back to TopWhat is a polyfillA polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.⬆ Back to TopWhat are break and continue statementsThe break statement is used to \""jump out\"" of a loop. i.e, It breaks the loop and continues executing the code after the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    break;  }  text += \""Number: \"" + i + \""<br>\"";}The continue statement is used to \""jump over\"" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    continue;  }  text += \""Number: \"" + i + \""<br>\"";}⬆ Back to TopWhat are js labelsThe label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,var i, j;loop1: for (i = 0; i < 3; i++) {  loop2: for (j = 0; j < 3; j++) {    if (i === j) {      continue loop1;    }    console.log(\""i = \"" + i + \"", j = \"" + j);  }}// Output is://   \""i = 1, j = 0\""//   \""i = 2, j = 0\""//   \""i = 2, j = 1\""⬆ Back to TopWhat are the benefits of keeping declarations at the topIt is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,Gives cleaner codeIt provides a single place to look for local variablesEasy to avoid unwanted global variablesIt reduces the possibility of unwanted re-declarations⬆ Back to TopWhat are the benefits of initializing variablesIt is recommended to initialize variables because of the below benefits,It gives cleaner codeIt provides a single place to initialize variablesAvoid undefined values in the code⬆ Back to TopWhat are the recommendations to create new objectIt is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.Assign {} instead of new Object()Assign \""\"" instead of new String()Assign 0 instead of new Number()Assign false instead of new Boolean()Assign [] instead of new Array()Assign /()/ instead of new RegExp()Assign function (){} instead of new Function()You can define them as an example,var v1 = {};var v2 = \""\"";var v3 = 0;var v4 = false;var v5 = [];var v6 = /()/;var v7 = function () {};⬆ Back to TopHow do you define JSON arraysJSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,\""users\"":[  {\""firstName\"":\""John\"", \""lastName\"":\""Abrahm\""},  {\""firstName\"":\""Anna\"", \""lastName\"":\""Smith\""},  {\""firstName\"":\""Shane\"", \""lastName\"":\""Warn\""}]⬆ Back to TopHow do you generate random integersYou can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,Math.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10Math.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100Note: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)⬆ Back to TopCan you write a random integers function to print integers with in a rangeYes, you can create a proper random function to return a random number between min and max (both included)function randomInteger(min, max) {  return Math.floor(Math.random() * (max - min + 1)) + min;}randomInteger(1, 100); // returns a random integer from 1 to 100randomInteger(1, 1000); // returns a random integer from 1 to 1000⬆ Back to TopWhat is tree shakingTree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup.⬆ Back to TopWhat is the need of tree shakingTree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.⬆ Back to TopIs it recommended to use evalNo, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.⬆ Back to TopWhat is a Regular ExpressionA regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now,/pattern/modifiers;For example, the regular expression or search pattern with case-insensitive username would be,/John/i;⬆ Back to TopWhat are the string methods available in Regular expressionRegular Expressions has two string methods: search() and replace().The search() method uses an expression to search for a match, and returns the position of the match.var msg = \""Hello John\"";var n = msg.search(/John/i); // 6The replace() method is used to return a modified string where the pattern is replaced.var msg = \""Hello John\"";var n = msg.replace(/John/i, \""Buttler\""); // Hello Buttler⬆ Back to TopWhat are modifiers in regular expressionModifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,ModifierDescriptioniPerform case-insensitive matchinggPerform a global match rather than stops at first matchmPerform multiline matchingLet's take an example of global modifier,var text = \""Learn JS one by one\"";var pattern = /one/g;var result = text.match(pattern); // one,one⬆ Back to TopWhat are regular expression patternsRegular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,Brackets: These are used to find a range of characters.For example, below are some use cases,[abc]: Used to find any of the characters between the brackets(a,b,c)[0-9]: Used to find any of the digits between the brackets(a|b): Used to find any of the alternatives separated with |Metacharacters: These are characters with a special meaningFor example, below are some use cases,\\d: Used to find a digit\\s: Used to find a whitespace character\\b: Used to find a match at the beginning or ending of a wordQuantifiers: These are useful to define quantitiesFor example, below are some use cases,n+: Used to find matches for any string that contains at least one nn*: Used to find matches for any string that contains zero or more occurrences of nn?: Used to find matches for any string that contains zero or one occurrences of n⬆ Back to TopWhat is a RegExp objectRegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object,var regexp = new RegExp(\""\\\\w+\"");console.log(regexp);// expected output: /\\w+/⬆ Back to TopHow do you search a string for a patternYou can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.var pattern = /you/;console.log(pattern.test(\""How are you?\"")); //true⬆ Back to TopWhat is the purpose of exec methodThe purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.var pattern = /you/;console.log(pattern.exec(\""How are you?\"")); //[\""you\"", index: 8, input: \""How are you?\"", groups: undefined]⬆ Back to TopHow do you change the style of a HTML elementYou can change inline style or classname of a HTML element using javascriptUsing style property: You can modify inline style using style propertydocument.getElementById(\""title\"").style.fontSize = \""30px\"";Using ClassName property: It is easy to modify element class using className propertydocument.getElementById(\""title\"").className = \""custom-title\"";⬆ Back to TopWhat would be the result of 1+2+'3'The output is going to be 33. Since 1 and 2 are numeric values, the result of the first two digits is going to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3 and string type value 3 is just going to be a concatenation value 33.⬆ Back to TopWhat is a debugger statementThe debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.For example, in the below function a debugger statement has been inserted. Soexecution is paused at the debugger statement just like a breakpoint in the script source.function getProfile() {  // code goes here  debugger;  // code goes here}⬆ Back to TopWhat is the purpose of breakpoints in debuggingYou can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.⬆ Back to TopCan I use reserved words as identifiersNo, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,var else = \""hello\""; // Uncaught SyntaxError: Unexpected token else⬆ Back to TopHow do you detect a mobile browserYou can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.window.mobilecheck = function () {  var mobileCheck = false;  (function (a) {    if (      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(        a      ) ||      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(        a.substr(0, 4)      )    )      mobileCheck = true;  })(navigator.userAgent || navigator.vendor || window.opera);  return mobileCheck;};⬆ Back to TopHow do you detect a mobile browser without regexpYou can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,function detectmob() {  if (    navigator.userAgent.match(/Android/i) ||    navigator.userAgent.match(/webOS/i) ||    navigator.userAgent.match(/iPhone/i) ||    navigator.userAgent.match(/iPad/i) ||    navigator.userAgent.match(/iPod/i) ||    navigator.userAgent.match(/BlackBerry/i) ||    navigator.userAgent.match(/Windows Phone/i)  ) {    return true;  } else {    return false;  }}⬆ Back to TopHow do you get the image width and height using JSYou can programmatically get the image and check the dimensions(width and height) using Javascript.var img = new Image();img.onload = function () {  console.log(this.width + \""x\"" + this.height);};img.src = \""http://www.google.com/intl/en_ALL/images/logo.gif\"";⬆ Back to TopHow do you make synchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScriptfunction httpGet(theUrl) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.open(\""GET\"", theUrl, false); // false for synchronous request  xmlHttpReq.send(null);  return xmlHttpReq.responseText;}⬆ Back to TopHow do you make asynchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.function httpGetAsync(theUrl, callback) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.onreadystatechange = function () {    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)      callback(xmlHttpReq.responseText);  };  xmlHttp.open(\""GET\"", theUrl, true); // true for asynchronous  xmlHttp.send(null);}⬆ Back to TopHow do you convert date to another timezone in javascriptYou can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below,console.log(event.toLocaleString(\""en-GB\"", { timeZone: \""UTC\"" })); //29/06/2019, 09:56:00⬆ Back to TopWhat are the properties used to get size of windowYou can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document,var width =  window.innerWidth ||  document.documentElement.clientWidth ||  document.body.clientWidth;var height =  window.innerHeight ||  document.documentElement.clientHeight ||  document.body.clientHeight;⬆ Back to TopWhat is a conditional operator in javascriptThe conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.var isAuthenticated = false;console.log(  isAuthenticated ? \""Hello, welcome\"" : \""Sorry, you are not authenticated\""); //Sorry, you are not authenticated⬆ Back to TopCan you apply chaining on conditional operatorYes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is going to be as below,function traceValue(someParam) {  return condition1    ? value1    : condition2    ? value2    : condition3    ? value3    : value4;}// The above conditional operator is equivalent to:function traceValue(someParam) {  if (condition1) {    return value1;  } else if (condition2) {    return value2;  } else if (condition3) {    return value3;  } else {    return value4;  }}⬆ Back to TopWhat are the ways to execute javascript after page loadYou can execute javascript after page load in many different ways,window.onload:window.onload = function ...document.onload:document.onload = function ...body onload:<body onload=\""script();\"">⬆ Back to TopWhat is the difference between proto and prototypeThe __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with new.new Employee().__proto__ === Employee.prototype;new Employee().prototype === undefined;There are few more differences,featurePrototypeprotoAccessAll the function constructors have prototype properties.All the objects have __proto__ propertyPurposeUsed to reduce memory wastage with a single copy of functionUsed in lookup chain to resolve methods, constructors etc.ECMAScriptIntroduced in ES6Introduced in ES5UsageFrequently usedRarely used⬆ Back to TopGive an example where do you really need semicolonIt is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws an error \"".. is not a function\"" at runtime due to missing semicolon.// define a functionvar fn = (function () {  //...})(  // semicolon missing at this line  // then execute some code inside a closure  function () {    //...  })();and it will be interpreted asvar fn = (function () {  //...})(function () {  //...})();In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a \""... is not a function\"" error at runtime.⬆ Back to TopWhat is a freeze methodThe freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing properties. i.e, It returns the passed object and does not create a frozen copy.const obj = {  prop: 100,};Object.freeze(obj);obj.prop = 200; // Throws an error in strict modeconsole.log(obj.prop); //100Remember freezing is only applied to the top-level properties in objects but not for nested objects.For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.const user = {  name: 'John',  employment: {    department: 'IT'  }};Object.freeze(user);user.employment.department = 'HR';Note: It causes a TypeError if the argument passed is not an object.⬆ Back to TopWhat is the purpose of freeze methodBelow are the main benefits of using freeze method,It is used for freezing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhy do I need to use freeze methodIn the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the final keyword which is used in various languages.⬆ Back to TopHow do you detect a browser language preferenceYou can use navigator object to detect a browser language preference as below,var language =  (navigator.languages && navigator.languages[0]) || // Chrome / Firefox  navigator.language || // All browsers  navigator.userLanguage; // IE <= 10console.log(language);⬆ Back to TopHow to convert string to title case with javascriptTitle case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,function toTitleCase(str) {  return str.replace(/\\w\\S*/g, function (txt) {    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();  });}toTitleCase(\""good morning john\""); // Good Morning John⬆ Back to TopHow do you detect javascript disabled in the pageYou can use the <noscript> tag to detect javascript disabled or not. The code block inside <noscript> gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.<script type=\""javascript\"">    // JS related code goes here</script><noscript>    <a href=\""next_page.html?noJS=true\"">JavaScript is disabled in the page. Please click Next Page</a></noscript>⬆ Back to TopWhat are various operators supported by javascriptAn operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,Arithmetic Operators: Includes + (Addition),– (Subtraction), * (Multiplication), / (Division), % (Modulus), + + (Increment) and – – (Decrement)Comparison Operators: Includes = =(Equal),!= (Not Equal), ===(Equal with type), > (Greater than),> = (Greater than or Equal to),< (Less than),<= (Less than or Equal to)Logical Operators: Includes &&(Logical AND),||(Logical OR),!(Logical NOT)Assignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), – = (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)Ternary Operators: It includes conditional(: ?) Operatortypeof Operator: It uses to find type of variable. The syntax looks like typeof variable⬆ Back to TopWhat is a rest parameterRest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,function f(a, b, ...theArgs) {  // ...}For example, let's take a sum example to calculate on dynamic number of parameters,function total(…args){let sum = 0;for(let i of args){sum+=i;}return sum;}console.log(fun(1,2)); //3console.log(fun(1,2,3)); //6console.log(fun(1,2,3,4)); //13console.log(fun(1,2,3,4,5)); //15Note: Rest parameter is added in ES2015 or ES6⬆ Back to TopWhat happens if you do not use rest parameter as a last argumentThe rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.function someFunc(a,…b,c){//You code goes herereturn;}⬆ Back to TopWhat are the bitwise operators available in javascriptBelow are the list of bitwise logical operators used in JavaScriptBitwise AND ( & )Bitwise OR ( | )Bitwise XOR ( ^ )Bitwise NOT ( ~ )Left Shift ( << )Sign Propagating Right Shift ( >> )Zero fill Right Shift ( >>> )⬆ Back to TopWhat is a spread operatorSpread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,function calculateSum(x, y, z) {  return x + y + z;}const numbers = [1, 2, 3];console.log(calculateSum(...numbers)); // 6⬆ Back to TopHow do you determine whether object is frozen or notObject.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,If it is not extensible.If all of its properties are non-configurable.If all its data properties are non-writable.The usage is going to be as follows,const object = {  property: \""Welcome JS world\"",};Object.freeze(object);console.log(Object.isFrozen(object));⬆ Back to TopHow do you determine two values same or not using objectThe Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,Object.is(\""hello\"", \""hello\""); // trueObject.is(window, window); // trueObject.is([], []); // falseTwo values are the same if one of the following holds:both undefinedboth nullboth true or both falseboth strings of the same length with the same characters in the same orderboth the same object (means both object have same reference)both numbers andboth +0both -0both NaNboth non-zero and both not NaN and both have the same value.⬆ Back to TopWhat is the purpose of using object is methodSome of the applications of Object's is method are follows,It is used for comparison of two strings.It is used for comparison of two numbers.It is used for comparing the polarity of two numbers.It is used for comparison of two objects.⬆ Back to TopHow do you copy properties from one object to otherYou can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the source objects. The syntax would be as below,Object.assign(target, ...sources);Let's take example with one source and one target object,const target = { a: 1, b: 2 };const source = { b: 3, c: 4 };const returnedTarget = Object.assign(target, source);console.log(target); // { a: 1, b: 3, c: 4 }console.log(returnedTarget); // { a: 1, b: 3, c: 4 }As observed in the above code, there is a common property(b) from source to target so it's value has been overwritten.⬆ Back to TopWhat are the applications of assign methodBelow are the some of main applications of Object.assign() method,It is used for cloning an object.It is used to merge objects with the same properties.⬆ Back to TopWhat is a proxy objectThe Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc. The syntax would be as follows,var p = new Proxy(target, handler);Let's take an example of proxy object,var handler = {  get: function (obj, prop) {    return prop in obj ? obj[prop] : 100;  },};var p = new Proxy({}, handler);p.a = 10;p.b = null;console.log(p.a, p.b); // 10, nullconsole.log(\""c\"" in p, p.c); // false, 100In the above code, it uses get handler which define the behavior of the proxy when an operation is performed on it⬆ Back to TopWhat is the purpose of seal methodThe Object.seal() method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. Let's see the below example to understand more about seal() methodconst object = {  property: \""Welcome JS world\"",};Object.seal(object);object.property = \""Welcome to object world\"";console.log(Object.isSealed(object)); // truedelete object.property; // You cannot delete when sealedconsole.log(object.property); //Welcome to object world⬆ Back to TopWhat are the applications of seal methodBelow are the main applications of Object.seal() method,It is used for sealing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhat are the differences between freeze and seal methodsIf an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.⬆ Back to TopHow do you determine if an object is sealed or notThe Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold trueIf it is not extensible.If all of its properties are non-configurable.If it is not removable (but not necessarily non-writable).Let's see it in the actionconst object = {  property: \""Hello, Good morning\"",};Object.seal(object); // Using seal() method to seal the objectconsole.log(Object.isSealed(object)); // checking whether the object is sealed or not⬆ Back to TopHow do you get enumerable key and value pairsThe Object.entries() method is used to return an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of object.entries() method in an example,const object = {  a: \""Good morning\"",  b: 100,};for (let [key, value] of Object.entries(object)) {  console.log(`${key}: ${value}`); // a: 'Good morning'  // b: 100}Note: The order is not guaranteed as object defined.⬆ Back to TopWhat is the main difference between Object.values and Object.entries methodThe Object.values() method's behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.const object = {  a: \""Good morning\"",  b: 100,};for (let value of Object.values(object)) {  console.log(`${value}`); // 'Good morning'  100;}⬆ Back to TopHow can you get the list of keys of any objectYou can use the Object.keys() method which is used to return an array of a given object's own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,const user = {  name: \""John\"",  gender: \""male\"",  age: 40,};console.log(Object.keys(user)); //['name', 'gender', 'age']⬆ Back to TopHow do you create an object with prototypeThe Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.const user = {  name: \""John\"",  printInfo: function () {    console.log(`My name is ${this.name}.`);  },};const admin = Object.create(user);admin.name = \""Nick\""; // Remember that \""name\"" is a property set on \""admin\"" but not on \""user\"" objectadmin.printInfo(); // My name is Nick⬆ Back to TopWhat is a WeakSetWeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,new WeakSet([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakSet();var user = {};ws.add(user);ws.has(user); // truews.delete(user); // removes user from the setws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakSet and SetThe main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it.Other differences are,Sets can store any value Whereas WeakSets can store only collections of objectsWeakSet does not have size property unlike SetWeakSet does not have methods such as clear, keys, values, entries, forEach.WeakSet is not iterable.⬆ Back to TopList down the collection of methods available on WeakSetBelow are the list of methods available on WeakSet,add(value): A new object is appended with the given value to the weaksetdelete(value): Deletes the value from the WeakSet collection.has(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.Let's see the functionality of all the above methods in an example,var weakSetObject = new WeakSet();var firstObject = {};var secondObject = {};// add(value)weakSetObject.add(firstObject);weakSetObject.add(secondObject);console.log(weakSetObject.has(firstObject)); //trueweakSetObject.delete(secondObject);⬆ Back to TopWhat is a WeakMapThe WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax is looking like as below,new WeakMap([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakMap();var user = {};ws.set(user);ws.has(user); // truews.delete(user); // removes user from the mapws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakMap and MapThe main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it.Other differences are,Maps can store any key type Whereas WeakMaps can store only collections of key objectsWeakMap does not have size property unlike MapWeakMap does not have methods such as clear, keys, values, entries, forEach.WeakMap is not iterable.⬆ Back to TopList down the collection of methods available on WeakMapBelow are the list of methods available on WeakMap,set(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.delete(key): Removes any value associated to the key.has(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.get(key): Returns the value associated to the key, or undefined if there is none.Let's see the functionality of all the above methods in an example,var weakMapObject = new WeakMap();var firstObject = {};var secondObject = {};// set(key, value)weakMapObject.set(firstObject, \""John\"");weakMapObject.set(secondObject, 100);console.log(weakMapObject.has(firstObject)); //trueconsole.log(weakMapObject.get(firstObject)); // JohnweakMapObject.delete(secondObject);⬆ Back to TopWhat is the purpose of unevalThe uneval() is an inbuilt function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let's see the below example to know more about it's functionality,var a = 1;uneval(a); // returns a String containing 1uneval(function user() {}); // returns \""(function user(){})\""⬆ Back to TopHow do you encode an URLThe encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ & = + $ #) characters.var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B⬆ Back to TopHow do you decode an URLThe decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8Btry {  console.log(decodeURI(encoded)); // \""https://mozilla.org/?x=шеллы\""} catch (e) {  // catches a malformed URI  console.error(e);}⬆ Back to TopHow do you print the contents of web pageThe window object provided a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an example,<input type=\""button\"" value=\""Print\"" onclick=\""window.print()\"" />Note: In most browsers, it will block while the print dialog is open.⬆ Back to TopWhat is the difference between uneval and evalThe uneval function returns the source of a given object; whereas the eval function does the opposite, by evaluating that source code in a different memory area. Let's see an example to clarify the difference,var msg = uneval(function greeting() {  return \""Hello, Good morning\"";});var greeting = eval(msg);greeting(); // returns \""Hello, Good morning\""⬆ Back to TopWhat is an anonymous functionAn anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,function (optionalParameters) {  //do something}const myFunction = function(){ //Anonymous function assigned to a variable  //do something};[1, 2, 3].map(function(element){ //Anonymous function used as a callback function  //do something});Let's see the above anonymous function in an example,var x = function (a, b) {  return a * b;};var z = x(5, 10);console.log(z); // 50⬆ Back to TopWhat is the precedence order between local and global variablesA local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.var msg = \""Good morning\"";function greeting() {  msg = \""Good Evening\"";  console.log(msg); // Good Evening}greeting();⬆ Back to TopWhat are javascript accessorsECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the get keyword whereas Setters uses the set keyword.var user = {  firstName: \""John\"",  lastName : \""Abraham\"",  language : \""en\"",  get lang() {    return this.language;  },  set lang(lang) {  this.language = lang;  }};console.log(user.lang); // getter access lang as enuser.lang = 'fr';console.log(user.lang); // setter used to set lang as fr⬆ Back to TopHow do you define property on Object constructorThe Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let's see an example to know how to define property,const newObject = {};Object.defineProperty(newObject, \""newProperty\"", {  value: 100,  writable: false,});console.log(newObject.newProperty); // 100newObject.newProperty = 200; // It throws an error in strict mode due to writable setting⬆ Back to TopWhat is the difference between get and definePropertyBoth have similar results until unless you use classes. If you use get the property will be defined on the prototype of the object whereas using Object.defineProperty() the property will be defined on the instance it is applied to.⬆ Back to TopWhat are the advantages of Getters and SettersBelow are the list of benefits of Getters and Setters,They provide simpler syntaxThey are used for defining computed properties, or accessors in JS.Useful to provide equivalence relation between properties and methodsThey can provide better data qualityUseful for doing things behind the scenes with the encapsulated logic.⬆ Back to TopCan I add getters and setters using defineProperty methodYes, You can use the Object.defineProperty() method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,var obj = { counter: 0 };// Define gettersObject.defineProperty(obj, \""increment\"", {  get: function () {    this.counter++;  },});Object.defineProperty(obj, \""decrement\"", {  get: function () {    this.counter--;  },});// Define settersObject.defineProperty(obj, \""add\"", {  set: function (value) {    this.counter += value;  },});Object.defineProperty(obj, \""subtract\"", {  set: function (value) {    this.counter -= value;  },});obj.add = 10;obj.subtract = 5;console.log(obj.increment); //6console.log(obj.decrement); //5⬆ Back to TopWhat is the purpose of switch-caseThe switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,switch (expression){    case value1:        statement1;        break;    case value2:        statement2;        break;    .    .    case valueN:        statementN;        break;    default:        statementDefault;}The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.⬆ Back to TopWhat are the conventions to be followed for the usage of switch caseBelow are the list of conventions should be taken care,The expression can be of type either number or string.Duplicate values are not allowed for the expression.The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.The break statement is used inside the switch to terminate a statement sequence.The break statement is optional. But if it is omitted, the execution will continue on into the next case.⬆ Back to TopWhat are primitive data typesA primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of primitive data types.stringnumberbooleannullundefinedbigintsymbol⬆ Back to TopWhat are the different ways to access object propertiesThere are 3 possible ways for accessing the property of an object.Dot notation: It uses dot for accessing the propertiesobjectName.property;Square brackets notation: It uses square brackets for property accessobjectName[\""property\""];Expression notation: It uses expression in the square bracketsobjectName[expression];⬆ Back to TopWhat are the function parameter rulesJavaScript functions follow below rules for parameters,The function definitions do not specify data types for parameters.Do not perform type checking on the passed arguments.Do not check the number of arguments received.i.e, The below function follows the above rules,function functionName(parameter1, parameter2, parameter3) {  console.log(parameter1); // 1}functionName(1);⬆ Back to TopWhat is an error objectAn error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,try {  greeting(\""Welcome\"");} catch (err) {  console.log(err.name + \""<br>\"" + err.message);}⬆ Back to TopWhen you get a syntax errorA SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax errortry {  eval(\""greeting('welcome)\""); // Missing ' will produce an error} catch (err) {  console.log(err.name);}⬆ Back to TopWhat are the different error names from error objectThere are 6 different types of error names returned from error object,Error NameDescriptionEvalErrorAn error has occurred in the eval() functionRangeErrorAn error has occurred with a number \""out of range\""ReferenceErrorAn error due to an illegal referenceSyntaxErrorAn error due to a syntax errorTypeErrorAn error due to a type errorURIErrorAn error due to encodeURI()⬆ Back to TopWhat are the various statements in error handlingBelow are the list of statements used in an error handling,try: This statement is used to test a block of code for errorscatch: This statement is used to handle the errorthrow: This statement is used to create custom errors.finally: This statement is used to execute code after try and catch regardless of the result.⬆ Back to TopWhat are the two types of loops in javascriptEntry Controlled loops: In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.Exit Controlled Loops: In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.⬆ Back to TopWhat is nodejsNode.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript engine and libuv library.⬆ Back to TopWhat is an Intl objectThe Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.⬆ Back to TopHow do you perform language specific date and time formattingYou can use the Intl.DateTimeFormat object which is a constructor for objects that enable language-sensitive date and time formatting. Let's see this behavior with an example,var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));console.log(new Intl.DateTimeFormat(\""en-GB\"").format(date)); // 07/08/2019console.log(new Intl.DateTimeFormat(\""en-AU\"").format(date)); // 07/08/2019⬆ Back to TopWhat is an IteratorAn iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a next() method which returns an object with two properties: value (the next value in the sequence) and done (which is true if the last value in the sequence has been consumed).⬆ Back to TopHow does synchronous iteration worksSynchronous iteration was introduced in ES6 and it works with below set of components,Iterable: It is an object which can be iterated over via a method whose key is Symbol.iterator.Iterator: It is an object returned by invoking [Symbol.iterator]() on an iterable. This iterator object wraps each iterated element in an object and returns it via next() method one by one.IteratorResult: It is an object returned by next() method. The object contains two properties; the value property contains an iterated element and the done property determines whether the element is the last element or not.Let's demonstrate synchronous iteration with an array as below,const iterable = [\""one\"", \""two\"", \""three\""];const iterator = iterable[Symbol.iterator]();console.log(iterator.next()); // { value: 'one', done: false }console.log(iterator.next()); // { value: 'two', done: false }console.log(iterator.next()); // { value: 'three', done: false }console.log(iterator.next()); // { value: 'undefined, done: true }⬆ Back to TopWhat is an event loopThe event loop is a process that continuously monitors both the call stack and the event queue and checks whether or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the event, and any additional events generated during the execution are added to the end of the event queue.Note: The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript is single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background.⬆ Back to TopWhat is call stackCall Stack is a data structure for javascript interpreters to keep track of function calls(creates execution context) in the program. It has two major actions,Whenever you call a function for its execution, you are pushing it to the stack.Whenever the execution is completed, the function is popped out of the stack.Let's take an example and it's state representation in a diagram formatfunction hungry() {  eatFruits();}function eatFruits() {  return \""I'm eating fruits\"";}// Invoke the `hungry` functionhungry();The above code processed in a call stack as below,Add the hungry() function to the call stack list and execute the code.Add the eatFruits() function to the call stack list and execute the code.Delete the eatFruits() function from our call stack list.Delete the hungry() function from the call stack list since there are no items anymore.⬆ Back to TopWhat is an event queueThe event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is also known as the Callback Queue or Macrotask Queue.Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of the promise is moved into the microtask queue).The event queue constantly checks whether or not the call stack is empty. Once the call stack is empty and there is a callback in the event queue, the event queue moves the callback into the call stack. If there is a callback in the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue.⬆ Back to TopWhat is a decoratorA decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define admin decorator for user class at design time,function admin(isAdmin) {   return function(target) {       target.isAdmin = isAdmin;   }}@admin(true)class User() {}console.log(User.isAdmin); //true @admin(false) class User() { } console.log(User.isAdmin); //false⬆ Back to TopWhat are the properties of Intl objectBelow are the list of properties available on Intl object,Collator: These are the objects that enable language-sensitive string comparison.DateTimeFormat: These are the objects that enable language-sensitive date and time formatting.ListFormat: These are the objects that enable language-sensitive list formatting.NumberFormat: Objects that enable language-sensitive number formatting.PluralRules: Objects that enable plural-sensitive formatting and language-specific rules for plurals.RelativeTimeFormat: Objects that enable language-sensitive relative time formatting.⬆ Back to TopWhat is an Unary operatorThe unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let's see this behavior in an action.var x = \""100\"";var y = +x;console.log(typeof x, typeof y); // string, numbervar a = \""Hello\"";var b = +a;console.log(typeof a, typeof b, b); // string, number, NaN⬆ Back to TopHow do you sort elements in an arrayThe sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage would be as below,var months = [\""Aug\"", \""Sep\"", \""Jan\"", \""June\""];months.sort();console.log(months); //  [\""Aug\"", \""Jan\"", \""June\"", \""Sep\""]⬆ Back to TopWhat is the purpose of compareFunction while sorting arraysThe compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. Let's take an example to see the usage of compareFunction,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);console.log(numbers); // [5, 4, 3, 2, 1]⬆ Back to TopHow do you reversing an arrayYou can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let's see the usage of reverse() method in an example,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);numbers.reverse();console.log(numbers); // [1, 2, 3, 4 ,5]⬆ Back to TopHow do you find min and max value in an arrayYou can use Math.min and Math.max methods on array variables to find the minimum and maximum elements within an array. Let's create two functions to find the min and max value with in an array,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  return Math.min.apply(null, arr);}function findMax(arr) {  return Math.max.apply(null, arr);}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopHow do you find min and max values without Math functionsYou can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let's create those functions to find min and max values,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  var length = arr.length;  var min = Infinity;  while (length--) {    if (arr[length] < min) {      min = arr[length];    }  }  return min;}function findMax(arr) {  var length = arr.length;  var max = -Infinity;  while (length--) {    if (arr[length] > max) {      max = arr[length];    }  }  return max;}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopWhat is an empty statement and purpose of itThe empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,// Initialize an array afor(let i=0; i < a.length; a[i++] = 0) ;⬆ Back to TopHow do you get metadata of a moduleYou can use the import.meta object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module's URL. In browsers, you might get different meta data than NodeJS.<script type=\""module\"" src=\""welcome-module.js\""></script>;console.log(import.meta); // { url: \""file:///home/user/welcome-module.js\"" }⬆ Back to TopWhat is a comma operatorThe comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,var x = 1;x = (x++, x);console.log(x); // 2⬆ Back to TopWhat is the advantage of a comma operatorIt is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a for loop. For example, the below for loop uses multiple expressions in a single location using comma operator,for (var a = 0, b =10; a <= 10; a++, b--)You can also use the comma operator in a return statement where it processes before returning.function myFunction() {  var a = 1;  return (a += 10), a; // 11}⬆ Back to TopWhat is typescriptTypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language. You can install it globally asnpm install -g typescriptLet's see a simple example of TypeScript usage,function greeting(name: string): string {  return \""Hello, \"" + name;}let user = \""Sudheer\"";console.log(greeting(user));The greeting method allows only string type as argument.⬆ Back to TopWhat are the differences between javascript and typescriptBelow are the list of differences between javascript and typescript,featuretypescriptjavascriptLanguage paradigmObject oriented programming languageScripting languageTyping supportSupports static typingIt has dynamic typingModulesSupportedNot supportedInterfaceIt has interfaces conceptDoesn't support interfacesOptional parametersFunctions support optional parametersNo support of optional parameters for functions⬆ Back to TopWhat are the advantages of typescript over javascriptBelow are some of the advantages of typescript over javascript,TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.⬆ Back to TopWhat is an object initializerAn object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.var initObject = { a: \""John\"", b: 50, c: {} };console.log(initObject.a); // John⬆ Back to TopWhat is a constructor methodThe constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,class Employee {  constructor() {    this.name = \""John\"";  }}var employeeObject = new Employee();console.log(employeeObject.name); // John⬆ Back to TopWhat happens if you write constructor more than once in a classThe \""constructor\"" in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a SyntaxError error. class Employee {   constructor() {     this.name = \""John\"";   }   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor     this.age = 30;   } } var employeeObject = new Employee(); console.log(employeeObject.name);⬆ Back to TopHow do you call the constructor of a parent classYou can use the super keyword to call the constructor of a parent class. Remember that super() must be called before using 'this' reference. Otherwise it will cause a reference error. Let's the usage of it,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do you get the prototype of an objectYou can use the Object.getPrototypeOf(obj) method to return the prototype of the specified object. i.e. The value of the internal prototype property. If there are no inherited properties then null value is returned.const newPrototype = {};const newObject = Object.create(newPrototype);console.log(Object.getPrototypeOf(newObject) === newPrototype); // true⬆ Back to TopWhat happens If I pass string type for getPrototype methodIn ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter will be coerced to an Object.// ES5Object.getPrototypeOf(\""James\""); // TypeError: \""James\"" is not an object// ES2015Object.getPrototypeOf(\""James\""); // String.prototype⬆ Back to TopHow do you set prototype of one object to anotherYou can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,Object.setPrototypeOf(Square.prototype, Rectangle.prototype);Object.setPrototypeOf({}, null);⬆ Back to TopHow do you check whether an object can be extendable or notThe Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.const newObject = {};console.log(Object.isExtensible(newObject)); //trueNote: By default, all the objects are extendable. i.e, The new properties can be added or modified.⬆ Back to TopHow do you prevent an object to extendThe Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property,const newObject = {};Object.preventExtensions(newObject); // NOT extendabletry {  Object.defineProperty(newObject, \""newProperty\"", {    // Adding new property    value: 100,  });} catch (e) {  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible}⬆ Back to TopWhat are the different ways to make an object non-extensibleYou can mark an object non-extensible in 3 ways,Object.preventExtensionsObject.sealObject.freezevar newObject = {};Object.preventExtensions(newObject); // Prevent objects are non-extensibleObject.isExtensible(newObject); // falsevar sealedObject = Object.seal({}); // Sealed objects are non-extensibleObject.isExtensible(sealedObject); // falsevar frozenObject = Object.freeze({}); // Frozen objects are non-extensibleObject.isExtensible(frozenObject); // false⬆ Back to TopHow do you define multiple properties on an objectThe Object.defineProperties() method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object,const newObject = {};Object.defineProperties(newObject, {  newProperty1: {    value: \""John\"",    writable: true,  },  newProperty2: {},});⬆ Back to TopWhat is MEAN in javascriptThe MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.⬆ Back to TopWhat Is Obfuscation in javascriptObfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it.Let's see the below function before Obfuscation,function greeting() {  console.log(\""Hello, welcome to JS world\"");}And after the code Obfuscation, it would be appeared as below,eval(  (function (p, a, c, k, e, d) {    e = function (c) {      return c;    };    if (!\""\"".replace(/^/, String)) {      while (c--) {        d[c] = k[c] || c;      }      k = [        function (e) {          return d[e];        },      ];      e = function () {        return \""\\\\w+\"";      };      c = 1;    }    while (c--) {      if (k[c]) {        p = p.replace(new RegExp(\""\\\\b\"" + e(c) + \""\\\\b\"", \""g\""), k[c]);      }    }    return p;  })(    \""2 1(){0.3('4, 7 6 5 8')}\"",    9,    9,    \""console|greeting|function|log|Hello|JS|to|welcome|world\"".split(\""|\""),    0,    {}  ));⬆ Back to TopWhy do you need ObfuscationBelow are the few reasons for Obfuscation,The Code size will be reduced. So data transfers between server and client will be fast.It hides the business logic from outside world and protects the code from othersReverse engineering is highly difficultThe download time will be reduced⬆ Back to TopWhat is MinificationMinification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation .⬆ Back to TopWhat are the advantages of minificationNormally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,Decreases loading times of a web pageSaves bandwidth usages⬆ Back to TopWhat are the differences between Obfuscation and EncryptionBelow are the main differences between Obfuscation and Encryption,FeatureObfuscationEncryptionDefinitionChanging the form of any data in any other formChanging the form of information to an unreadable format by using a keyA key to decodeIt can be decoded without any keyIt is requiredTarget data formatIt will be converted to a complex formConverted into an unreadable format⬆ Back to TopWhat are the common tools used for minificationThere are many online/offline tools to minify the javascript files,Google's Closure CompilerUglifyJS2jsminjavascript-minifier.com/prettydiff.com⬆ Back to TopHow do you perform form validation using javascriptJavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted.Lets' perform user login in an html form,<form name=\""myForm\"" onsubmit=\""return validateForm()\"" method=\""post\"">  User name: <input type=\""text\"" name=\""uname\"" />  <input type=\""submit\"" value=\""Submit\"" /></form>And the validation on user login is below,function validateForm() {  var x = document.forms[\""myForm\""][\""uname\""].value;  if (x == \""\"") {    alert(\""The username shouldn't be empty\"");    return false;  }}⬆ Back to TopHow do you perform form validation without javascriptYou can perform HTML form validation automatically without using javascript. The validation enabled by applying the required attribute to prevent form submission when the input is empty.<form method=\""post\"">  <input type=\""text\"" name=\""uname\"" required />  <input type=\""submit\"" value=\""Submit\"" /></form>Note: Automatic form validation does not work in Internet Explorer 9 or earlier.⬆ Back to TopWhat are the DOM methods available for constraint validationThe below DOM methods are available for constraint validation on an invalid input,checkValidity(): It returns true if an input element contains valid data.setCustomValidity(): It is used to set the validationMessage property of an input element.Let's take an user login form with DOM validationsfunction myFunction() {  var userName = document.getElementById(\""uname\"");  if (!userName.checkValidity()) {    document.getElementById(\""message\"").innerHTML =      userName.validationMessage;  } else {    document.getElementById(\""message\"").innerHTML =      \""Entered a valid username\"";  }}⬆ Back to TopWhat are the available constraint validation DOM propertiesBelow are the list of some of the constraint validation DOM properties available,validity: It provides a list of boolean properties related to the validity of an input element.validationMessage: It displays the message when the validity is false.willValidate: It indicates if an input element will be validated or not.⬆ Back to TopWhat are the list of validity propertiesThe validity property of an input element provides a set of properties related to the validity of data.customError: It returns true, if a custom validity message is set.patternMismatch: It returns true, if an element's value does not match its pattern attribute.rangeOverflow: It returns true, if an element's value is greater than its max attribute.rangeUnderflow: It returns true, if an element's value is less than its min attribute.stepMismatch: It returns true, if an element's value is invalid according to step attribute.tooLong: It returns true, if an element's value exceeds its maxLength attribute.typeMismatch: It returns true, if an element's value is invalid according to type attribute.valueMissing: It returns true, if an element with a required attribute has no value.valid: It returns true, if an element's value is valid.⬆ Back to TopGive an example usage of rangeOverflow propertyIf an element's value is greater than its max attribute then rangeOverflow property returns true. For example, the below form submission throws an error if the value is more than 100,<input id=\""age\"" type=\""number\"" max=\""100\"" /><button onclick=\""myOverflowFunction()\"">OK</button>function myOverflowFunction() {  if (document.getElementById(\""age\"").validity.rangeOverflow) {    alert(\""The mentioned age is not allowed\"");  }}⬆ Back to TopIs enums feature available in javascriptNo, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,var DaysEnum = Object.freeze({\""monday\"":1, \""tuesday\"":2, \""wednesday\"":3, ...})⬆ Back to TopWhat is an enumAn enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.enum Color { RED, GREEN, BLUE}⬆ Back to TopHow do you list all properties of an objectYou can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a given object. Let's the usage of it in an example,const newObject = {  a: 1,  b: 2,  c: 3,};console.log(Object.getOwnPropertyNames(newObject));[\""a\"", \""b\"", \""c\""];⬆ Back to TopHow do you get property descriptors of an objectYou can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below,const newObject = {  a: 1,  b: 2,  c: 3,};const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);console.log(descriptorsObject.a.writable); //trueconsole.log(descriptorsObject.a.configurable); //trueconsole.log(descriptorsObject.a.enumerable); //trueconsole.log(descriptorsObject.a.value); // 1⬆ Back to TopWhat are the attributes provided by a property descriptorA property descriptor is a record which has the following attributesvalue: The value associated with the propertywritable: Determines whether the value associated with the property can be changed or notconfigurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.set: A function which serves as a setter for the propertyget: A function which serves as a getter for the property⬆ Back to TopHow do you extend classesThe extends keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,class ChildClass extends ParentClass { ... }Let's take an example of Square subclass from Polygon parent class,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do I modify the url without reloading the pageThe window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,window.history.pushState(\""page2\"", \""Title\"", \""/page2.html\"");⬆ Back to TopHow do you check whether an array includes a particular value or notThe Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.var numericArray = [1, 2, 3, 4];console.log(numericArray.includes(3)); // truevar stringArray = [\""green\"", \""yellow\"", \""blue\""];console.log(stringArray.includes(\""blue\"")); //true⬆ Back to TopHow do you compare scalar arraysYou can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The combination of these expressions can give the expected result,const arrayFirst = [1, 2, 3, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.every((value, index) => value === arraySecond[index])); // trueIf you would like to compare arrays irrespective of order then you should sort them before,const arrayFirst = [2, 3, 1, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.sort().every((value, index) => value === arraySecond[index])); //true⬆ Back to TopHow to get the value from get parametersThe new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters. Remember that you may need to use polyfill or window.location to access the URL in older browsers(including IE).let urlString = \""http://www.some-domain.com/about.html?x=1&y=2&z=3\""; //window.location.hreflet url = new URL(urlString);let parameterZ = url.searchParams.get(\""z\"");console.log(parameterZ); // 3⬆ Back to TopHow do you print numbers with commas as thousand separatorsYou can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive representation such as thousand separator,currency etc of this number.function convertToThousandFormat(x) {  return x.toLocaleString(); // 12,345.679}console.log(convertToThousandFormat(12345.6789));⬆ Back to TopWhat is the difference between java and javascriptBoth are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,FeatureJavaJavaScriptTypedIt's a strongly typed languageIt's a dynamic typed languageParadigmObject oriented programmingPrototype based programmingScopingBlock scopedFunction-scopedConcurrencyThread basedevent basedMemoryUses more memoryUses less memory. Hence it will be used for web pages⬆ Back to TopDoes JavaScript supports namespaceJavaScript doesn’t support namespace by default. So if you create any element(function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace,function func1() {  console.log(\""This is a first definition\"");}function func1() {  console.log(\""This is a second definition\"");}func1(); // This is a second definitionIt always calls the second function definition. In this case, namespace will solve the name collision problem.⬆ Back to TopHow do you declare namespaceEven though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.Using Object Literal Notation: Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notationvar namespaceOne = {   function func1() {       console.log(\""This is a first definition\"");   }}var namespaceTwo = {     function func1() {         console.log(\""This is a second definition\"");     } }namespaceOne.func1(); // This is a first definitionnamespaceTwo.func1(); // This is a second definitionUsing IIFE (Immediately invoked function expression): The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.(function () {  function fun1() {    console.log(\""This is a first definition\"");  }  fun1();})();(function () {  function fun1() {    console.log(\""This is a second definition\"");  }  fun1();})();Using a block and a let/const declaration: In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.{  let myFunction = function fun1() {    console.log(\""This is a first definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.{  let myFunction = function fun1() {    console.log(\""This is a second definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.⬆ Back to TopHow do you invoke javascript code in an iframe from parent pageInitially iFrame needs to be accessed using either document.getElementBy or window.frames. After that contentWindow property of iFrame gives the access for targetFunctiondocument.getElementById(\""targetFrame\"").contentWindow.targetFunction();window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox⬆ Back to TopHow do get the timezone offset from dateYou can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTCvar offset = new Date().getTimezoneOffset();console.log(offset); // -480⬆ Back to TopHow do you load CSS and JS files dynamicallyYou can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below,function loadAssets(filename, filetype) {  if (filetype == \""css\"") {    // External CSS file    var fileReference = document.createElement(\""link\"");    fileReference.setAttribute(\""rel\"", \""stylesheet\"");    fileReference.setAttribute(\""type\"", \""text/css\"");    fileReference.setAttribute(\""href\"", filename);  } else if (filetype == \""js\"") {    // External JavaScript file    var fileReference = document.createElement(\""script\"");    fileReference.setAttribute(\""type\"", \""text/javascript\"");    fileReference.setAttribute(\""src\"", filename);  }  if (typeof fileReference != \""undefined\"")    document.getElementsByTagName(\""head\"")[0].appendChild(fileReference);}⬆ Back to TopWhat are the different methods to find HTML elements in DOMIf you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,document.getElementById(id): It finds an element by Iddocument.getElementsByTagName(name): It finds an element by tag namedocument.getElementsByClassName(name): It finds an element by class name⬆ Back to TopWhat is jQueryjQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,$(document).ready(function () {  // It selects the document and apply the function on page load  alert(\""Welcome to jQuery world\"");});Note: You can download it from jquery's official site or install it from CDNs, like google.⬆ Back to TopWhat is V8 JavaScript engineV8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors.Note: It can run standalone, or can be embedded into any C++ application.⬆ Back to TopWhy do we call javascript as dynamic languageJavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.let age = 50; // age is a number nowage = \""old\""; // age is a string nowage = true; // age is a boolean⬆ Back to TopWhat is a void operatorThe void operator evaluates the given expression and then returns undefined(i.e, without returning value). The syntax would be as below,void expression;void expression;Let's display a message without any redirection or reload<a href=\""javascript:void(alert('Welcome to JS world'))\"">  Click here to see a message</a>Note: This operator is often used to obtain the undefined primitive value, using \""void(0)\"".⬆ Back to TopHow to set the cursor to waitThe cursor can be set to wait in JavaScript by using the property \""cursor\"". Let's perform this behavior on page load using the below function.function myFunction() {  window.document.body.style.cursor = \""wait\"";}and this function invoked on page load<body onload=\""myFunction()\""></body>⬆ Back to TopHow do you create an infinite loopYou can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,for (;;) {}while (true) {}⬆ Back to TopWhy do you need to avoid with statementJavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times.a.b.c.greeting = \""welcome\"";a.b.c.age = 32;Using with it turns this into:with (a.b.c) {  greeting = \""welcome\"";  age = 32;}But this with statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.⬆ Back to TopWhat is the output of below for loopsfor (var i = 0; i < 4; i++) {  // global scope  setTimeout(() => console.log(i));}for (let i = 0; i < 4; i++) {  // block scope  setTimeout(() => console.log(i));}The output of the above for loops is 4 4 4 4 and 0 1 2 3Explanation: Due to the event queue/loop of javascript, the setTimeout callback function is called after the loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is 4 4 4 4.Whereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is 0 1 2 3.⬆ Back to TopList down some of the features of ES6Below are the list of some new features of ES6,Support for constants or immutable variablesBlock-scope support for variables, constants and functionsArrow functionsDefault parametersRest and Spread ParametersTemplate LiteralsMulti-line StringsDestructuring AssignmentEnhanced Object LiteralsPromisesClassesModules⬆ Back to TopWhat is ES6ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.⬆ Back to TopCan I redeclare let and const variablesNo, you cannot redeclare let and const variables. If you do, it throws below errorUncaught SyntaxError: Identifier 'someVariable' has already been declaredExplanation: The variable declaration with var keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables.var name = \""John\"";function myFunc() {  var name = \""Nick\"";  var name = \""Abraham\""; // Re-assigned in the same function block  alert(name); // Abraham}myFunc();alert(name); // JohnThe block-scoped multi-declaration throws syntax error,let name = \""John\"";function myFunc() {  let name = \""Nick\"";  let name = \""Abraham\""; // Uncaught SyntaxError: Identifier 'name' has already been declared  alert(name);}myFunc();alert(name);⬆ Back to TopIs const variable makes the value immutableNo, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later)const userList = [];userList.push(\""John\""); // Can mutate even though it can't re-assignconsole.log(userList); // ['John']⬆ Back to TopWhat are default parametersIn ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples,//ES5var calculateArea = function (height, width) {  height = height || 50;  width = width || 60;  return width * height;};console.log(calculateArea()); //300The default parameters makes the initialization more simpler,//ES6var calculateArea = function (height = 50, width = 60) {  return width * height;};console.log(calculateArea()); //300⬆ Back to TopWhat are template literalsTemplate literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes.In ES6, this feature enables using dynamic expressions as below,var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;In ES5, you need break string like below,var greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`Note: You can use multi-line strings and string interpolation features with template literals.⬆ Back to TopHow do you write multi-line strings in template literalsIn ES5, you would have to use newline escape characters('\') and concatenation symbols(+) in order to get multi-line strings.console.log(\""This is string sentence 1\\"" + \""This is string sentence 2\"");Whereas in ES6, You don't need to mention any newline sequence character,console.log(`This is string sentence'This is string sentence 2`);⬆ Back to TopWhat are nesting templatesThe nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,const iconStyles = `icon ${  isMobilePlatform()    ? \""\""    : `icon-${user.isAuthorized ? \""submit\"" : \""disabled\""}`}`;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.//Without nesting templates const iconStyles = `icon ${ isMobilePlatform() ? '' :   user.isAuthorized ? 'icon-submit' : 'icon-disabled'}`;⬆ Back to TopWhat are tagged templatesTagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization,var user1 = \""John\"";var skill1 = \""JavaScript\"";var experience1 = 15;var user2 = \""Kane\"";var skill2 = \""JavaScript\"";var experience2 = 5;function myInfoTag(strings, userExp, experienceExp, skillExp) {  var str0 = strings[0]; // \""Mr/Ms. \""  var str1 = strings[1]; // \"" is a/an \""  var str2 = strings[2]; // \""in\""  var expertiseStr;  if (experienceExp > 10) {    expertiseStr = \""expert developer\"";  } else if (skillExp > 5 && skillExp <= 10) {    expertiseStr = \""senior developer\"";  } else {    expertiseStr = \""junior developer\"";  }  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;}var output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;var output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;console.log(output1); // Mr/Ms. John is a/an expert developer in JavaScriptconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript⬆ Back to TopWhat are raw stringsES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,var calculationString = String.raw`The sum of numbers is \${  1 + 2 + 3 + 4}!`;console.log(calculationString); // The sum of numbers is 10If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple linesvar calculationString = `The sum of numbers is \${1 + 2 + 3 + 4}!`;console.log(calculationString);// The sum of numbers is// 10Also, the raw property is available on the first argument to the tag functionfunction tag(strings) {  console.log(strings.raw[0]);}⬆ Back to TopWhat is destructuring assignmentThe destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables.Let's get the month values from an array using destructuring assignmentvar [one, two, three] = [\""JAN\"", \""FEB\"", \""MARCH\""];console.log(one); // \""JAN\""console.log(two); // \""FEB\""console.log(three); // \""MARCH\""and you can get user properties of an object using destructuring assignment,var { name, age } = { name: \""John\"", age: 32 };console.log(name); // Johnconsole.log(age); // 32⬆ Back to TopWhat are default values in destructuring assignmentA variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases,Arrays destructuring:var x, y, z;[x = 2, y = 4, z = 6] = [10];console.log(x); // 10console.log(y); // 4console.log(z); // 6Objects destructuring:var { x = 2, y = 4, z = 6 } = { x: 10 };console.log(x); // 10console.log(y); // 4console.log(z); // 6⬆ Back to TopHow do you swap variables in destructuring assignmentIf you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment,var x = 10,  y = 20;[x, y] = [y, x];console.log(x); // 20console.log(y); // 10⬆ Back to TopWhat are enhanced object literalsObject literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.//ES6var x = 10,  y = 20;obj = { x, y };console.log(obj); // {x: 10, y:20}//ES5var x = 10,  y = 20;obj = { x: x, y: y };console.log(obj); // {x: 10, y:20}⬆ Back to TopWhat are dynamic importsThe dynamic imports using import() function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in stage4 proposal. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience.The syntax of dynamic imports would be as below,import(\""./Module\"").then((Module) => Module.method());⬆ Back to TopWhat are the use cases for dynamic importsBelow are some of the use cases of using dynamic imports over static imports,Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browserif (isLegacyBrowser()) {    import(···)    .then(···);}Compute the module specifier at runtime. For example, you can use it for internationalization.import(`messages_${getLocale()}.js`).then(···);Import a module from within a regular script instead a module.⬆ Back to TopWhat are typed arraysTyped arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed array types,Int8Array: An array of 8-bit signed integersInt16Array: An array of 16-bit signed integersInt32Array: An array of 32-bit signed integersUint8Array: An array of 8-bit unsigned integersUint16Array: An array of 16-bit unsigned integersUint32Array: An array of 32-bit unsigned integersFloat32Array: An array of 32-bit floating point numbersFloat64Array: An array of 64-bit floating point numbersFor example, you can create an array of 8-bit signed integers as belowconst a = new Int8Array();// You can pre-allocate n bytesconst bytes = 1024;const a = new Int8Array(bytes);⬆ Back to TopWhat are the advantages of module loadersThe module loaders provides the below features,Dynamic loadingState isolationGlobal namespace isolationCompilation hooksNested virtualization⬆ Back to TopWhat is collationCollation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features,Comparison:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(l10nDE.compare(\""ä\"", \""z\"") === -1); // trueconsole.log(l10nSV.compare(\""ä\"", \""z\"") === +1); // trueSorting:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(list.sort(l10nDE.compare)); // [ \""a\"", \""ä\"", \""z\"" ]console.log(list.sort(l10nSV.compare)); // [ \""a\"", \""z\"", \""ä\"" ]⬆ Back to TopWhat is for...of statementThe for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,let arrayIterable = [10, 20, 30, 40, 50];for (let value of arrayIterable) {  value++;  console.log(value); // 11 21 31 41 51}⬆ Back to TopWhat is the output of below spread operator array[...\""John Resig\""];The output of the array is ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']Explanation: The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.⬆ Back to TopIs PostMessage secureYes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.⬆ Back to TopWhat are the problems with postmessage target origin as wildcardThe second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.targetWindow.postMessage(message, \""*\"");⬆ Back to TopHow do you avoid receiving postMessages from attackersSince the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver's end using the “message.origin” attribute. For examples, let's check the sender's origin http://www.some-sender.com on receiver side www.some-receiver.com,//Listener on http://www.some-receiver.com/window.addEventListener(\""message\"", function(message){    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){         console.log('You received the data from valid sender', message.data);   }});⬆ Back to TopCan I avoid using postMessages completelyYou cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.⬆ Back to TopIs postMessages synchronousThe postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.⬆ Back to TopWhat paradigm is JavascriptJavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.⬆ Back to TopWhat is the difference between internal and external javascriptInternal JavaScript: It is the source code within the script tag.External JavaScript: The source code is stored in an external file(stored with .js extension) and referred with in the tag.⬆ Back to TopIs JavaScript faster than server side scriptYes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.⬆ Back to TopHow do you get the status of a checkboxYou can apply the checked property on the selected checkbox in the DOM. If the value is true it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:<input type=\""checkbox\"" id=\""checkboxname\"" value=\""Agree\"" /> Agree theconditions<br />console.log(document.getElementById(‘checkboxname’).checked); // true or false⬆ Back to TopWhat is the purpose of double tilde operatorThe double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor().⬆ Back to TopHow do you convert character to ASCII codeYou can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string,\""ABC\"".charCodeAt(0); // returns 65Whereas String.fromCharCode() method converts numbers to equal ASCII characters.String.fromCharCode(65, 66, 67); // returns 'ABC'⬆ Back to TopWhat is ArrayBufferAn ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,let buffer = new ArrayBuffer(16); // create a buffer of length 16alert(buffer.byteLength); // 16To manipulate an ArrayBuffer, we need to use a “view” object.//Create a DataView referring to the bufferlet view = new DataView(buffer);⬆ Back to TopWhat is the output of below string expressionconsole.log(\""Welcome to JS world\""[0]);The output of the above expression is \""W\"".Explanation: The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character \""W\"" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.⬆ Back to TopWhat is the purpose of Error objectThe Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,new Error([message[, fileName[, lineNumber]]])You can throw user defined exceptions or errors using Error object in try...catch block as below,try {  if (withdraw > balance)    throw new Error(\""Oops! You don't have enough balance\"");} catch (e) {  console.log(e.name + \"": \"" + e.message);}⬆ Back to TopWhat is the purpose of EvalError objectThe EvalError object indicates an error regarding the global eval() function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,new EvalError([message[, fileName[, lineNumber]]])You can throw EvalError with in try...catch block as below,try {  throw new EvalError('Eval function error', 'someFile.js', 100);} catch (e) {  console.log(e.message, e.name, e.fileName);              // \""Eval function error\"", \""EvalError\"", \""someFile.js\""⬆ Back to TopWhat are the list of cases error thrown from non-strict mode to strict modeWhen you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the scriptWhen you use Octal syntaxvar n = 022;Using with statementWhen you use delete operator on a variable nameUsing eval or arguments as variable or function argument nameWhen you use newly reserved keywordsWhen you declare a function in a blockif (someCondition) {  function f() {}}Hence, the errors from above cases are helpful to avoid errors in development/production environments.⬆ Back to TopDo all objects have prototypesNo. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.⬆ Back to TopWhat is the difference between a parameter and an argumentParameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let's explain this with a simple functionfunction myFunction(parameter1, parameter2, parameter3) {  console.log(arguments[0]); // \""argument1\""  console.log(arguments[1]); // \""argument2\""  console.log(arguments[2]); // \""argument3\""}myFunction(\""argument1\"", \""argument2\"", \""argument3\"");⬆ Back to TopWhat is the purpose of some method in arraysThe some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var odd = (element) => element % 2 !== 0;console.log(array.some(odd)); // true (the odd element exists)⬆ Back to TopHow do you combine two or more arraysThe concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,array1.concat(array2, array3, ..., arrayX)Let's take an example of array's concatenation with veggies and fruits arrays,var veggies = [\""Tomato\"", \""Carrot\"", \""Cabbage\""];var fruits = [\""Apple\"", \""Orange\"", \""Pears\""];var veggiesAndFruits = veggies.concat(fruits);console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears⬆ Back to TopWhat is the difference between Shallow and Deep copyThere are two ways to copy an object,Shallow Copy:Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};to create a duplicatevar empDetailsShallowCopy = empDetails; //Shallow copying!if we change some property value in the duplicate one like this:empDetailsShallowCopy.name = \""Johnson\"";The above statement will also change the name of empDetails, since we have a shallow copy. That means we're losing the original data as well.Deep copy:A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};Create a deep copy by using the properties from the original object into new variablevar empDetailsDeepCopy = {  name: empDetails.name,  age: empDetails.age,  expertise: empDetails.expertise,};Now if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails⬆ Back to TopHow do you create specific number of copies of a stringThe repeat() method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification.Let's take an example of Hello string to repeat it 4 times,\""Hello\"".repeat(4); // 'HelloHelloHelloHello'How do you return all matching strings against a regular expressionThe matchAll() method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,let regexp = /Hello(\\d?))/g;let greeting = \""Hello1Hello2Hello3\"";let greetingList = [...greeting.matchAll(regexp)];console.log(greetingList[0]); //Hello1console.log(greetingList[1]); //Hello2console.log(greetingList[2]); //Hello3⬆ Back to TopHow do you trim a string at the beginning or endingThe trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use trimStart/trimLeft and trimEnd/trimRight methods. Let's see an example of these methods on a greeting message,var greeting = \""   Hello, Goodmorning!   \"";console.log(greeting); // \""   Hello, Goodmorning!   \""console.log(greeting.trimStart()); // \""Hello, Goodmorning!   \""console.log(greeting.trimLeft()); // \""Hello, Goodmorning!   \""console.log(greeting.trimEnd()); // \""   Hello, Goodmorning!\""console.log(greeting.trimRight()); // \""   Hello, Goodmorning!\""⬆ Back to TopWhat is the output of below console statement with unary operatorLet's take console statement with unary operator as given below,console.log(+\""Hello\"");The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.⬆ Back to TopDoes javascript uses mixinsMixin is a generic object-oriented programming term - is a class containing methods that can be used by other classes without a need to inherit from it. In JavaScript we can only inherit from a single object. ie. There can be only one [[prototype]] for an object.But sometimes we require to extend more than one, to overcome this we can use Mixin which helps to copy methods to the prototype of another class.Say for instance, we've two classes User and CleanRoom. Suppose we need to add CleanRoom functionality to User, so that user can clean the room at demand. Here's where concept called mixins comes into picture.// mixinlet cleanRoomMixin = {  cleanRoom() {    alert(`Hello ${this.name}, your room is clean now`);  },  sayBye() {    alert(`Bye ${this.name}`);  },};// usage:class User {  constructor(name) {    this.name = name;  }}// copy the methodsObject.assign(User.prototype, cleanRoomMixin);// now User can clean the roomnew User(\""Dude\"").cleanRoom(); // Hello Dude, your room is clean now!⬆ Back to TopWhat is a thunk functionA thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example,const add = (x, y) => x + y;const thunk = () => add(2, 3);thunk(); // 5⬆ Back to TopWhat are asynchronous thunksThe asynchronous thunks are useful to make network requests. Let's see an example of network requests,function fetchData(fn) {  fetch(\""https://jsonplaceholder.typicode.com/todos/1\"")    .then((response) => response.json())    .then((json) => fn(json));}const asyncThunk = function () {  return fetchData(function getData(data) {    console.log(data);  });};asyncThunk();The getData function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.⬆ Back to TopWhat is the output of below function callsCode snippet:const circle = {  radius: 20,  diameter() {    return this.radius * 2;  },  perimeter: () => 2 * Math.PI * this.radius,};console.log(circle.diameter());console.log(circle.perimeter());Output:The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The this keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.⬆ Back to TopHow to remove all line breaks from a stringThe easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.function remove_linebreaks( var message ) {    return message.replace( /[\\r\]+/gm, \""\"" );}In the above expression, g and m are for global and multiline flags.⬆ Back to TopWhat is the difference between reflow and repaintA repaint occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A reflow involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.⬆ Back to TopWhat happens with negating an arrayNegating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return false.console.log(![]); // false⬆ Back to TopWhat happens if we add two arraysIf you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,console.log([\""a\""] + [\""b\""]); // \""ab\""console.log([] + []); // \""\""console.log(![] + []); // \""false\"", because ![] returns false.⬆ Back to TopWhat is the output of prepend additive operator on falsy valuesIf you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \""\""), the falsy value converts to a number value zero. Let's display them on browser console as below,console.log(+null); // 0console.log(+undefined); // NaNconsole.log(+false); // 0console.log(+NaN); // NaNconsole.log(+\""\""); // 0⬆ Back to TopHow do you create self string using special charactersThe self string can be formed with the combination of []()!+ characters. You need to remember the below conventions to achieve this pattern.Since Arrays are truthful values, negating the arrays will produce false: ![] === falseAs per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \""\""Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1By applying the above rules, we can derive below conditions(![] + [] === \""false\"" + !+[]) === 1;Now the character pattern would be created as below,      s               e               l               f ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^ (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0] ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^(![] + [])[+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]] +(![] + [])[+[]]^^^^^^^^^^^^^^^^^^^^^^^^^^^^^(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]⬆ Back to TopHow do you remove falsy values from an arrayYou can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and \""\"") from the array.const myArray = [false, null, 1, 5, undefined];myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);⬆ Back to TopHow do you get unique values of an arrayYou can get unique values of an array with the combination of Set and rest expression/spread(...) syntax.console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]⬆ Back to TopWhat is destructuring aliasesSometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.const obj = { x: 1 };// Grabs obj.x as as { otherName }const { x: otherName } = obj;⬆ Back to TopHow do you map the array values without using map methodYou can map the array values without using the map method by just using the from method of Array. Let's map city names from Countries array,const countries = [  { name: \""India\"", capital: \""Delhi\"" },  { name: \""US\"", capital: \""Washington\"" },  { name: \""Russia\"", capital: \""Moscow\"" },  { name: \""Singapore\"", capital: \""Singapore\"" },  { name: \""China\"", capital: \""Beijing\"" },  { name: \""France\"", capital: \""Paris\"" },];const cityNames = Array.from(countries, ({ capital }) => capital);console.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']⬆ Back to TopHow do you empty an arrayYou can empty an array quickly by setting the array length to zero.let cities = [\""Singapore\"", \""Delhi\"", \""London\""];cities.length = 0; // cities becomes []⬆ Back to TopHow do you rounding numbers to certain decimalsYou can round numbers to a certain number of decimals using toFixed method from native javascript.let pie = 3.141592653;pie = pie.toFixed(3); // 3.142⬆ Back to TopWhat is the easiest way to convert an array to an objectYou can convert an array to an object with the same data using spread(...) operator.var fruits = [\""banana\"", \""apple\"", \""orange\"", \""watermelon\""];var fruitsObject = { ...fruits };console.log(fruitsObject); // {0: \""banana\"", 1: \""apple\"", 2: \""orange\"", 3: \""watermelon\""}⬆ Back to TopHow do you create an array with some dataYou can create an array with some data or an array with the same values using fill method.var newArray = new Array(5).fill(\""0\"");console.log(newArray); // [\""0\"", \""0\"", \""0\"", \""0\"", \""0\""]⬆ Back to TopWhat are the placeholders from console objectBelow are the list of placeholders available from console object,%o — It takes an object,%s — It takes a string,%d — It is used for a decimal or integerThese placeholders can be represented in the console.log as belowconst user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.log(  \""Hello %s, your details %o are available in the object form\"",  \""John\"",  user); // Hello John, your details {name: \""John\"", id: 1, city: \""Delhi\""} are available in object⬆ Back to TopIs it possible to add CSS to console messagesYes, you can apply CSS styles to console messages similar to html text on the web page.console.log(  \""%c The text has blue color, with large font and red background\"",  \""color: blue; font-size: x-large; background: red\"");The text will be displayed as below,Note: All CSS styles can be applied to console messages.⬆ Back to TopWhat is the purpose of dir method of console objectThe console.dir() is used to display an interactive list of the properties of the specified JavaScript object as JSON.const user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.dir(user);The user object displayed in JSON representation⬆ Back to TopIs it possible to debug HTML elements in consoleYes, it is possible to get and debug HTML elements in the console just like inspecting elements.const element = document.getElementsByTagName(\""body\"")[0];console.log(element);It prints the HTML element in the console,⬆ Back to TopHow do you display data in a tabular format using console objectThe console.table() is used to display data in the console in a tabular format to visualize complex arrays or objects.const users = [  { name: \""John\"", id: 1, city: \""Delhi\"" },  { name: \""Max\"", id: 2, city: \""London\"" },  { name: \""Rod\"", id: 3, city: \""Paris\"" },];console.table(users);The data visualized in a table format,Not: Remember that console.table() is not supported in IE.⬆ Back to TopHow do you verify that an argument is a Number or notThe combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.function isNumber(n) {  return !isNaN(parseFloat(n)) && isFinite(n);}⬆ Back to TopHow do you create copy to clipboard buttonYou need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.document.querySelector(\""#copy-button\"").onclick = function () {  // Select the content  document.querySelector(\""#copy-input\"").select();  // Copy to the clipboard  document.execCommand(\""copy\"");};⬆ Back to TopWhat is the shortcut to get timestampYou can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.console.log(+new Date());console.log(Date.now());⬆ Back to TopHow do you flattening multi dimensional arraysFlattening bi-dimensional arrays is trivial with Spread operator.const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]But you can make it work with multi-dimensional arrays by recursive calls,function flattenMultiArray(arr) {  const flattened = [].concat(...arr);  return flattened.some((item) => Array.isArray(item))    ? flattenMultiArray(flattened)    : flattened;}const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]Also you can use the flat method of Array.const arr = [1, [2,3], 4, 5, [6,7]];const fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]// And for multiDemensional arraysconst multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]const towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]const fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]⬆ Back to TopWhat is the easiest multi condition checkingYou can use indexOf to compare input with multiple values instead of checking each value as one condition.// Verbose approachif (  input === \""first\"" ||  input === 1 ||  input === \""second\"" ||  input === 2) {  someFunction();}// Shortcutif ([\""first\"", 1, \""second\"", 2].indexOf(input) !== -1) {  someFunction();}⬆ Back to TopHow do you capture browser back buttonThe window.onbeforeunload method is used to capture browser back button events. This is helpful to warn users about losing the current data.window.onbeforeunload = function () {  alert(\""You work will be lost\"");};⬆ Back to TopHow do you disable right click in the web pageThe right click on the page can be disabled by returning false from the oncontextmenu attribute on the body element.<body oncontextmenu=\""return false;\""></body>⬆ Back to TopWhat are wrapper objectsPrimitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.let name = \""john\"";console.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.⬆ Back to TopWhat is AJAXAJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.⬆ Back to TopWhat are the different ways to deal with Asynchronous CodeBelow are the list of different ways to deal with Asynchronous code.CallbacksPromisesAsync/awaitThird-party libraries such as async.js,bluebird etc⬆ Back to TopHow to cancel a fetch requestUntil a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls.The basic flow of cancelling a fetch request would be as below,Create an AbortController instanceGet the signal property of an instance and pass the signal as a fetch option for signalCall the AbortController's abort property to cancel all fetches that use that signalFor example, let's pass the same signal to multiple fetch calls will cancel all requests with that signal,const controller = new AbortController();const { signal } = controller;fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 1 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 2 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });// Wait 2 seconds to abort both requestssetTimeout(() => controller.abort(), 2000);⬆ Back to TopWhat is web speech APIWeb speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API has been introduced by W3C Community in the year 2012. It has two main parts,SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface.The below example shows on how to use this API to get text from speech,window.SpeechRecognition =  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FFconst recognition = new window.SpeechRecognition();recognition.onresult = (event) => {  // SpeechRecognitionEvent type  const speechToText = event.results[0][0].transcript;  console.log(speechToText);};recognition.start();In this API, browser is going to ask you for permission to use your microphoneSpeechSynthesis (Text-to-Speech): It provides the ability to recognize voice context from an audio input and respond. This is accessed by the SpeechSynthesis interface.For example, the below code is used to get voice/speech from text,if (\""speechSynthesis\"" in window) {  var speech = new SpeechSynthesisUtterance(\""Hello World!\"");  speech.lang = \""en-US\"";  window.speechSynthesis.speak(speech);}The above examples can be tested on chrome(33+) browser's developer console.Note: This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification)⬆ Back to TopWhat is minimum timeout throttlingBoth browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously.Browsers: They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals.Note: The older browsers have a minimum delay of 10ms.Nodejs: They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1.The best example to explain this timeout throttling behavior is the order of below code snippet.function runMeFirst() {  console.log(\""My script is initialized\"");}setTimeout(runMeFirst, 0);console.log(\""Script loaded\"");and the output would be inScript loadedMy script is initializedIf you don't use setTimeout, the order of logs will be sequential.function runMeFirst() {  console.log(\""My script is initialized\"");}runMeFirst();console.log(\""Script loaded\"");and the output is,My script is initializedScript loaded⬆ Back to TopHow do you implement zero timeout in modern browsersYou can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.⬆ Back to TopWhat are tasks in event loopA task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue.Below are the list of use cases to add tasks to the task queue,When a new javascript program is executed directly from console or running by the <script> element, the task will be added to the task queue.When an event fires, the event callback added to task queueWhen a setTimeout or setInterval is reached, the corresponding callback added to task queue⬆ Back to TopWhat is microtaskMicrotask is the javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the microtask queue is empty.The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etcNote: All of these microtasks are processed in the same turn of the event loop.⬆ Back to TopWhat are different event loopsIn JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:1. The Browser Event Loop2. The Node.js Event Loop- Browser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.- The Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions. **[⬆ Back to Top](#table-of-contents)**What is the purpose of queueMicrotaskThe queueMicrotask function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of queueMicrotask is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.Example:console.log('Start'); //1queueMicrotask(() => {  console.log('Inside microtask'); // 3});console.log('End'); //2By using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular setTimeout or setInterval callbacks.⬆ Back to TopHow do you use javascript libraries in typescript fileIt is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution is declare keyword along with a variable declaration. For example, let's imagine you have a library called customLibrary that doesn’t have a TypeScript declaration and have a namespace called customLibrary in the global namespace. You can use this library in typescript code as below,declare var customLibrary;In the runtime, typescript will provide the type to the customLibrary variable as any type. The another alternative without using declare keyword is belowvar customLibrary: any;⬆ Back to TopWhat are the differences between promises and observablesSome of the major difference in a tabular formPromisesObservablesEmits only a single value at a timeEmits multiple values over a period of time(stream of values ranging from 0 to multiple)Eager in nature; they are going to be called immediatelyLazy in nature; they require subscription to be invokedPromise is always asynchronous even though it resolved immediatelyObservable can be either synchronous or asynchronousDoesn't provide any operatorsProvides operators such as map, forEach, filter, reduce, retry, and retryWhen etcCannot be canceledCanceled by using unsubscribe() method⬆ Back to TopWhat is heapHeap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime.Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.⬆ Back to TopWhat is an event tableEvent Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table.It doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.⬆ Back to TopWhat is a microTask queueMicrotask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue.The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.⬆ Back to TopWhat is the difference between shim and polyfillA shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9).Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively.In a simple sentence, A polyfill is a shim for a browser API.⬆ Back to TopHow do you detect primitive or non primitive value typeIn JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,var myPrimitive = 30;var myNonPrimitive = {};function isPrimitive(val) {  return Object(val) !== val;}isPrimitive(myPrimitive);isPrimitive(myNonPrimitive);If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.⬆ Back to TopWhat is babelBabel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,Transform syntaxPolyfill features that are missing in your target environment (using @babel/polyfill)Source code transformations (or codemods)⬆ Back to TopIs Node.js completely single threadedNode is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.⬆ Back to TopWhat are the common use cases of observablesSome of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc⬆ Back to TopWhat is RxJSRxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.⬆ Back to TopWhat is the difference between Function constructor and function declarationThe functions which are created with Function constructor do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.Let's see this difference with an example,Function Constructor:var a = 100;function createFunction() {  var a = 200;  return new Function(\""return a;\"");}console.log(createFunction()()); // 100Function declaration:var a = 100;function createFunction() {  var a = 200;  return function func() {    return a;  };}console.log(createFunction()()); // 200⬆ Back to TopWhat is a Short circuit conditionShort circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,if (authenticate) {  loginToPorta();}Since the javascript logical operators evaluated from left to right, the above expression can be simplified using && logical operatorauthenticate && loginToPorta();⬆ Back to TopWhat is the easiest way to resize an arrayThe length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2,var array = [1, 2, 3, 4, 5];console.log(array.length); // 5array.length = 2;console.log(array.length); // 2console.log(array); // [1,2]and the array can be emptied toovar array = [1, 2, 3, 4, 5];array.length = 0;console.log(array.length); // 0console.log(array); // []⬆ Back to TopWhat is an observableAn Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling subscribe() method.Let's look at a simple example of an Observableimport { Observable } from \""rxjs\"";const observable = new Observable((observer) => {  setTimeout(() => {    observer.next(\""Message from a Observable!\"");  }, 3000);});observable.subscribe((value) => console.log(value));Note: Observables are not part of the JavaScript language yet but they are being proposed to be added to the language⬆ Back to TopWhat is the difference between function and class declarationsThe main difference between function declarations and class declarations is hoisting. The function declarations are hoisted but not class declarations.Classes:const user = new User(); // ReferenceErrorclass User {}Constructor Function:const user = new User(); // No errorfunction User() {}⬆ Back to TopWhat is an async functionAn async function is a function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more await expressions.Let's take a below async function example,async function logger() {  let data = await fetch(\""http://someapi.com/users\""); // pause until fetch returns  console.log(data);}logger();It is basically syntax sugar over ES2015 promises and generators.⬆ Back to TopHow do you prevent promises swallowing errorsWhile using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.Let's say you expect to print an error to the console for all the below cases,Promise.resolve(\""promised value\"").then(function () {  throw new Error(\""error\"");});Promise.reject(\""error value\"").catch(function () {  throw new Error(\""error\"");});new Promise(function (resolve, reject) {  throw new Error(\""error\"");});But there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways,Add catch block at the end of each chain: You can add catch block to the end of each of your promise chainsPromise.resolve(\""promised value\"")  .then(function () {    throw new Error(\""error\"");  })  .catch(function (error) {    console.error(error.stack);  });But it is quite difficult to type for each promise chain and verbose too.Add done method: You can replace first solution's then and catch blocks with done methodPromise.resolve(\""promised value\"").done(function () {  throw new Error(\""error\"");});Let's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write done block as below,getDataFromHttp()  .then(function (result) {    return processDataAsync(result);  })  .done(function (processed) {    displayData(processed);  });In future, if the processing library API changed to synchronous then you can remove done block as below,getDataFromHttp().then(function (result) {  return displayData(processDataAsync(result));});and then you forgot to add done block to then block leads to silent errors.Extend ES6 Promises by Bluebird:Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejectionsPromise.onPossiblyUnhandledRejection(function (error) {  throw error;});and discard a rejection, just handle it with an empty catchPromise.reject(\""error value\"").catch(function () {});⬆ Back to TopWhat is denoDeno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.⬆ Back to TopHow do you make an object iterable in javascriptBy default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator property on it.Let's demonstrate this with an example,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]() {    const values = Object.keys(this);    let i = 0;    return {      next: () => {        return {          value: this[values[i++]],          done: i > values.length,        };      },    };  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // → {value: 1, done: false}console.log(iterator.next()); // → {value: 2, done: false}console.log(iterator.next()); // → {value: 3, done: false}console.log(iterator.next()); // → {value: undefined, done: true}The above process can be simplified using a generator function,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]: function* () {    for (let key in this) {      yield this[key];    }  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // {value: 1, done: false}console.log(iterator.next()); // {value: 2, done: false}console.log(iterator.next()); // {value: 3, done: false}console.log(iterator.next()); // {value: undefined, done: true}⬆ Back to TopWhat is a Proper Tail CallFirst, we should know about tail call before talking about \""Proper Tail Call\"". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto n * factorial(n - 1)function factorial(n) {  if (n === 0) {    return 1;  }  return n * factorial(n - 1);}console.log(factorial(5)); //120But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.function factorial(n, acc = 1) {  if (n === 0) {    return acc;  }  return factorial(n - 1, n * acc);}console.log(factorial(5)); //120The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.⬆ Back to TopHow do you check an object is a promise or notIf you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a promisefunction isPromise(object) {  if (Promise && Promise.resolve) {    return Promise.resolve(object) == object;  } else {    throw \""Promise not supported in your environment\"";  }}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // trueAnother way is to check for .then() handler typefunction isPromise(value) {  return Boolean(value && typeof value.then === \""function\"");}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // true⬆ Back to TopHow to detect if a function is called as constructorYou can use new.target pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.For function calls, new.target is undefined.function Myfunc() {   if (new.target) {      console.log('called with new');   } else {      console.log('not called with new');   }}new Myfunc(); // called with newMyfunc(); // not called with newMyfunc.call({}); // not called with new⬆ Back to TopWhat are the differences between arguments object and rest parameterThere are three main differences between arguments object and rest parametersThe arguments object is an array-like but not an array. Whereas the rest parameters are array instances.The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.The rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function⬆ Back to TopWhat are the differences between spread operator and rest parameterRest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.⬆ Back to TopWhat are the different kinds of generatorsThere are five kinds of generators,Generator function declaration:function* myGenFunc() {  yield 1;  yield 2;  yield 3;}const genObj = myGenFunc();Generator function expressions:const myGenFunc = function* () {  yield 1;  yield 2;  yield 3;};const genObj = myGenFunc();Generator method definitions in object literals:const myObj = {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  },};const genObj = myObj.myGeneratorMethod();Generator method definitions in class:class MyClass {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  }}const myObject = new MyClass();const genObj = myObject.myGeneratorMethod();Generator as a computed property:const SomeObj = {  *[Symbol.iterator]() {    yield 1;    yield 2;    yield 3;  },};console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]⬆ Back to TopWhat are the built-in iterablesBelow are the list of built-in iterables in javascript,Arrays and TypedArraysStrings: Iterate over each character or Unicode code-pointsMaps: iterate over its key-value pairsSets: iterates over their elementsarguments: An array-like special variable in functionsDOM collection such as NodeList⬆ Back to TopWhat are the differences between for...of and for...in statementsBoth for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:for..in iterates over all enumerable property keys of an objectfor..of iterates over the values of an iterable object.Let's explain this difference with an example,let arr = [\""a\"", \""b\"", \""c\""];arr.newProp = \""newVlue\"";// key are the property keysfor (let key in arr) {  console.log(key); // 0, 1, 2 & newValue}// value are the property valuesfor (let value of arr) {  console.log(value); // a, b, c}Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.⬆ Back to TopHow do you define instance and non-instance propertiesThe Instance properties must be defined inside of class methods. For example, name and age properties defined inside constructor as below,class Person {  constructor(name, age) {    this.name = name;    this.age = age;  }}But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign the age value for Person class as below,Person.staticAge = 30;Person.prototype.prototypeAge = 40;⬆ Back to TopWhat is the difference between isNaN and Number.isNaN?isNaN: The global function isNaN converts the argument to a Number and returns true if the resulting value is NaN.Number.isNaN: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.Let's see the difference with an example,isNaN(‘hello’);   // trueNumber.isNaN('hello'); // false⬆ Back to TopHow to invoke an IIFE without any extra brackets?Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.(function (dt) {  console.log(dt.toLocaleTimeString());})(new Date());Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using void operator for IIFE as below,void function (dt) {  console.log(dt.toLocaleTimeString());}(new Date());⬆ Back to TopIs that possible to use expressions in switch cases?You might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let's see the weather condition based on temparature as an example,const weather = (function getWeather(temp) {  switch (true) {    case temp < 0:      return \""freezing\"";    case temp < 10:      return \""cold\"";    case temp < 24:      return \""cool\"";    default:      return \""unknown\"";  }})(10);⬆ Back to TopWhat is the easiest way to ignore promise errors?The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.await promise.catch((e) => void e);⬆ Back to TopHow do style the console output using CSS?You can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let's print the red the color text using console.log and CSS specifier as below,console.log(\""%cThis is a red text\"", \""color:red\"");It is also possible to add more styles for the content. For example, the font-size can be modified for the above textconsole.log(  \""%cThis is a red text with bigger font\"",  \""color:red; font-size:20px\"");⬆ Back to TopWhat is nullish coalescing operator (??)?It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.console.log(null ?? true); // trueconsole.log(false ?? true); // falseconsole.log(undefined ?? true); // true⬆ Back to TopHow do you group and nest console output?The console.group() can be used to group related log messages to be able to easily read the logs and use console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in hierarchical manner.For example, if you’re logging a user’s details:console.group(\""User Details\"");console.log(\""name: Sudheer Jonna\"");console.log(\""job: Software Developer\"");// Nested Groupconsole.group(\""Address\"");console.log(\""Street: Commonwealth\"");console.log(\""City: Los Angeles\"");console.log(\""State: California\"");// Close nested groupconsole.groupEnd();// Close outer groupconsole.groupEnd()You can also use console.groupCollapsed() instead of console.group() if you want the groups to be collapsed by default.⬆ Back to TopWhat is the difference between dense and sparse arrays?An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array. Whereas if at least one item is missing at any index, the array is called as sparse.Let's see the below two kind of arrays,const avengers = [\""Ironman\"", \""Hulk\"", \""CaptainAmerica\""];console.log(avengers[0]); // 'Ironman'console.log(avengers[1]); // 'Hulk'console.log(avengers[2]); // 'CaptainAmerica'console.log(avengers.length); // 3const justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague[0]); // 'Superman'console.log(justiceLeague[1]); // 'Aquaman'console.log(justiceLeague[2]); // undefinedconsole.log(justiceLeague[3]); // 'Batman'console.log(justiceLeague.length); // 4⬆ Back to TopWhat are the different ways to create sparse arrays?There are 4 different ways to create sparse arrays in JavaScriptArray literal: Omit a value when using the array literalconst justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague); // ['Superman', 'Aquaman', empty ,'Batman']Array() constructor: Invoking Array(length) or new Array(length)const array = Array(3);console.log(array); // [empty, empty ,empty]Delete operator: Using delete array[index] operator on the arrayconst justiceLeague = [\""Superman\"", \""Aquaman\"", \""Batman\""];delete justiceLeague[1];console.log(justiceLeague); // ['Superman', empty, ,'Batman']Increase length property: Increasing length property of an arrayconst justiceLeague = ['Superman', 'Aquaman', 'Batman'];justiceLeague.length = 5;console.log(justiceLeague); // ['Superman', 'Aquaman', 'Batman', empty, empty]⬆ Back to TopWhat is the difference between setTimeout, setImmediate and process.nextTick?Set Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.Set Immediate: The setImmediate function is used to execute a function right after the current event loop finishes.Process NextTick: If process.nextTick() is called in a given phase, all the callbacks passed to process.nextTick() will be resolved before the event loop continues. This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.⬆ Back to TopHow do you reverse an array without modifying original array?The reverse() method reverses the order of the elements in an array but it mutates the original array. Let's take a simple example to demonistrate this case,const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reverse();console.log(newArray); // [ 5, 4, 3, 2, 1]console.log(originalArray); // [ 5, 4, 3, 2, 1]There are few solutions that won't mutate the original array. Let's take a look.Using slice and reverse methods:In this case, just invoke the slice() method on the array to create a shallow copy followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.slice().reverse(); //Slice an array gives a new copyconsole.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using spread and reverse methods:In this case, let's use the spread syntax (...) to create a copy of the array followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = [...originalArray].reverse();console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduce and spread methods:Here execute a reducer function on an array elements and append the accumulated array on right side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduce((accumulator, value) => {  return [value, ...accumulator];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and spread methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append the accumulated array on left side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  return [...accumulator, value];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and push methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the iterated value to the accumulatorconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  accumulator.push(value);  return accumulator;}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]⬆ Back to TopHow do you create custom HTML element?The creation of custom HTML elements involves two main steps,Define your custom HTML element: First you need to define some custom class by extending HTMLElement class.After that define your component properties (styles,text etc) using connectedCallback method.Note: The browser exposes a function called customElements.define inorder to reuse the element.class CustomElement extends HTMLElement {  connectedCallback() {    this.innerHTML = \""This is a custom element\"";  }}customElements.define(\""custom-element\"", CustomElement);Use custome element just like other HTML element: Declare your custom element as a HTML tag.   <body>        <custom-element>   </body>⬆ Back to TopWhat is global execution context?The global execution context is the default or first execution context that is created by the JavaScript engine before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside a function or object will be executed inside this global execution context. Since JS engine is single threaded there will be only one global environment and there will be only one global execution context.For example, the below code other than code inside any function or object is executed inside the global execution context.var x = 10;function A() {  console.log(\""Start function A\"");  function B() {    console.log(\""In function B\"");  }  B();}A();console.log(\""GlobalContext\"");⬆ Back to TopWhat is function execution context?Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within that function.⬆ Back to TopWhat is debouncing?Debouncing is a programming pattern that allows delaying execution of some piece of code until a specified time to avoid unnecessary CPU cycles, API calls and improve performance. The debounce function make sure that your code is only triggered once per user input. The common usecases are Search box suggestions, text-field auto-saves, and eliminating double-button clicks.Let's say you want to show suggestions for a search query, but only after a visitor has finished typing it. So here you write a debounce function where the user keeps writing the characters with in 500ms then previous timer cleared out using clearTimeout and reschedule API call/DB query for a new time—300 ms in the future.function debounce(func, timeout = 500) {  let timer;  return (...args) => {    clearTimeout(timer);    timer = setTimeout(() => {      func.apply(this, args);    }, timeout);  };}function fetchResults() {  console.log(\""Fetching input suggestions\"");}const processChange = debounce(() => fetchResults());The debounce() function can be used on input, button and window eventsInput:<input type=\""text\"" onkeyup=\""processChange()\"" />Button:<button onclick=\""processChange()\"">Click me</button>Windows event:window.addEventListener(\""scroll\"", processChange);⬆ Back to TopWhat is throttling?Throttling is a technique used to limit the execution of an event handler function, even when this event triggers continuously due to user actions. The common use cases are browser resizing, window scrolling etc.The below example creates a throttle function to reduce the number of events for each pixel change and trigger scroll event for each 100ms except for the first event.const throttle = (func, limit) => {  let inThrottle;  return (...args) => {    if (!inThrottle) {      func.apply(this, args);      inThrottle = true;      setTimeout(() => (inThrottle = false), limit);    }  };};window.addEventListener(\""scroll\"", () => {  throttle(handleScrollAnimation, 100);});⬆ Back to TopWhat is optional chaining?According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist. const adventurer = {   name: 'Alice',   cat: {     name: 'Dinah'   } }; const dogName = adventurer.dog?.name; console.log(dogName); // expected output: undefined console.log(adventurer.someNonExistentMethod?.()); // expected output: undefined⬆ Back to TopWhat is an environment record?According to ECMAScript specification 262 (9.1):Environment Record is a specification type used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.⬆ Back to TopHow to verify if a variable is an array?It is possible to check if a variable is an array instance using 3 different ways,Array.isArray() method:The Array.isArray(value) utility function is used to determine whether value is an array or not. This function returns a true boolean value if the variable is an array and a false value if it is not.const numbers = [1, 2, 3];const user = { name: 'John' };Array.isArray(numbers);  // trueArray.isArray(user); //falseinstanceof operator:The instanceof operator is used to check the type of an array at run time. It returns true if the type of a variable is an Array other false for other type.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers instanceof Array);  // trueconsole.log(user instanceof Array);  // falseChecking constructor type:The constructor property of the variable is used to determine whether the variable Array type or not.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers.constructor === Array);  // trueconsole.log(user.constructor === Array);  // false⬆ Back to TopWhat is pass by value and pass by reference?Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.let a = 5;let b = a;b++;console.log(a, b); //5, 6In the above code snippet, the value of a is assigned to b and the variable b has been incremented. Since there is a new space created for variable b, any update on this variable doesn't impact the variable a.Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.let user1 = {   name: 'John',   age: 27};let user2 = user1;user2.age = 30;console.log(user1.age, user2.age); // 30, 30In the above code snippet, updating the age property of one object will impact the other property due to the same reference.⬆ Back to TopWhat are the differences between primitives and non-primitives?JavaScript language has both primitives and non-primitives but there are few differences between them as below,PrimitivesNon-primitivesThese types are predefinedCreated by developerThese are immutableMutableCompare by valueCompare by referenceStored in StackStored in heapContain certain valueCan contain NULL too⬆ Back to TopHow do you create your own bind method using either call or apply method?The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions. This custom function should return a function similar to original bind method and the implementation of inner function needs to use apply method call.The function which is going to bind using custom myOwnBind method act as the attached function(boundTargetFunction) and argument as the object for apply method call. Function.prototype.myOwnBind = function(whoIsCallingMe) {   if (typeof this !== \""function\"") {     throw new Error(this + \""cannot be bound as it's not callable\"");   }   const boundTargetFunction = this;   return function() {     boundTargetFunction.apply(whoIsCallingMe, arguments);   } }⬆ Back to TopWhat are the differences between pure and impure functions?Some of the major differences between pure and impure function are as below,Pure functionImpure functionIt has no side effectsIt causes side effectsIt is always return the same resultIt returns different result on each callEasy to read and debugDifficult to read and debug because they are affected by extenal code⬆ Back to TopWhat is referential transparency?An expression in javascript that can be replaced by its value without affecting the behaviour of the program is called referential transparency. Pure functions are referentially transparent.const add = (x,y) => x + y;const multiplyBy2 = (x) => x * 2;//Now add (2, 3) can be replaced by 5.multiplyBy2(add(2, 3)); ⬆ Back to TopWhat are the possible side-effects in javascript?A side effect is the modification of state through the invocation of a function or expression. These side effects makes our function impure by default. Below are some side effects which makes function impure,Making an HTTP request. Asynchronous functions such as fetch and promise are impure.DOM manipulationsMutating the input dataPrinting to a screen or console: For example, console.log() and alert()Fetching the current timeMath.random() calls: Modifies the internal state of Math object⬆ Back to TopWhat are compose and pipe functions?The \""compose\"" and \""pipe\"" are two techniques commonly used in functional programming to simplify complex operations and make code more readable. They are not native to JavaScript and higher-order functions. the compose() applies right to left any number of functions to the output of the previous function.⬆ Back to TopWhat is module pattern?Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Python, etc) to provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e., a closure that protect variables and methods.The module pattern looks like below, (function() { // Private variables or functions goes here. return {     // Return public variables or functions here. } })();Let's see an example of a module pattern for an employee with private and public access,const createEmployee = (function () {   // Private   const name = \""John\"";   const department = \""Sales\"";   const getEmployeeName = () => name;   const getDepartmentName = () => department;   // Public   return {     name,     department,     getName: () => getEmployeeName(),     getDepartment: () => getDepartmentName(),   }; })(); console.log(createEmployee.name); console.log(createEmployee.department); console.log(createEmployee.getName()); console.log(createEmployee.getDepartment());Note: It mimic the concepts of classes with private variables and methods.⬆ Back to TopWhat is Function Composition?It is an approach where the result of one function is passed on to the next function, which is passed to another until the final function is executed for the final result. //example const double = x => x * 2 const square = x => x * x var output1 = double(2); var output2 = square(output1); console.log(output2); var output_final = square(double(2)); console.log(output_final);⬆ Back to TopHow to use await outside of async function prior to ES2022?Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.await Promise.resolve(console.log('Hello await')); // SyntaxError: await is only valid in async functionBut you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the feature. (async function() {   await Promise.resolve(console.log('Hello await')); // Hello await }());In ES2022, you can write top-level await without writing any hacks.await Promise.resolve(console.log('Hello await')); //Hello await⬆ Back to TopCoding Exercise1. What is the output of below codevar car = new Vehicle(\""Honda\"", \""white\"", \""2010\"", \""UK\"");console.log(car);function Vehicle(model, color, year, country) {  this.model = model;  this.color = color;  this.year = year;  this.country = country;}1: Undefined2: ReferenceError3: null4: {model: \""Honda\"", color: \""white\"", year: \""2010\"", country: \""UK\""}AnswerAnswer: 4The function declarations are hoisted similar to any variables. So the placement for Vehicle function declaration doesn't make any difference.⬆ Back to Top2. What is the output of below codefunction foo() {  let x = (y = 0);  x++;  y++;  return x;}console.log(foo(), typeof x, typeof y);1: 1, undefined and undefined2: ReferenceError: X is not defined3: 1, undefined and number4: 1, number and numberAnswerAnswer: 3Of course the return value of foo() is 1 due to the increment operator. But the statement let x = y = 0 declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,let x;window.y = 0;x = window.y;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable y is available outside the function, the value is 0 and type is number.⬆ Back to Top3. What is the output of below codefunction main() {  console.log(\""A\"");  setTimeout(function print() {    console.log(\""B\"");  }, 0);  console.log(\""C\"");}main();1: A, B and C2: B, A and C3: A and C4: A, C and BAnswerAnswer: 4The statements order is based on the event loop mechanism. The order of statements follows the below order,At first, the main function is pushed to the stack.Then the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and popping out immediately.But setTimeout statement moved to Browser API to apply the delay for callback.In the meantime, C's console.log added to stack, executed and popped out.The callback of setTimeout moved from Browser API to message queue.The main function popped out from stack because there are no statements to executeThe callback moved from message queue to the stack since the stack is empty.The console.log for B is added to the stack and display on the console.⬆ Back to Top4. What is the output of below equality checkconsole.log(0.1 + 0.2 === 0.3);1: false2: trueAnswerAnswer: 1This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results.You can find more details about the explanation here 0.30000000000000004.com/⬆ Back to Top5. What is the output of below codevar y = 1;if (function f() {}) {  y += typeof f;}console.log(y);1: 1function2: 1object3: ReferenceError4: 1undefinedAnswerAnswer: 4The main points in the above code snippets are,You can see function expression instead function declaration inside if statement. So it always returns true.Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.In other words, it is same asvar y = 1;if (\""foo\"") {  y += typeof f;}console.log(y);Note: It returns 1object for MS Edge browser⬆ Back to Top6. What is the output of below codefunction foo() {  return;  {    message: \""Hello World\"";  }}console.log(foo());1: Hello World2: Object {message: \""Hello World\""}3: Undefined4: SyntaxErrorAnswerAnswer: 3This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.function foo() {  return {    message: \""Hello World\"",  };}console.log(foo()); // {message: \""Hello World\""}⬆ Back to Top7. What is the output of below codevar myChars = [\""a\"", \""b\"", \""c\"", \""d\""];delete myChars[0];console.log(myChars);console.log(myChars[0]);console.log(myChars.length);1: [empty, 'b', 'c', 'd'], empty, 32: [null, 'b', 'c', 'd'], empty, 33: [empty, 'b', 'c', 'd'], undefined, 44: [null, 'b', 'c', 'd'], undefined, 4AnswerAnswer: 3The delete operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed.If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array. The newer versions of Chrome use empty instead of undefined to make the difference a bit clearer.⬆ Back to Top8. What is the output of below code in latest Chromevar array1 = new Array(3);console.log(array1);var array2 = [];array2[2] = 100;console.log(array2);var array3 = [, , ,];console.log(array3);1: [undefined × 3], [undefined × 2, 100], [undefined × 3]2: [empty × 3], [empty × 2, 100], [empty × 3]3: [null × 3], [null × 2, 100], [null × 3]4: [], [100], []AnswerAnswer: 2The latest chrome versions display sparse array(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation.Note: The latest version of FF displays n empty slots notation.⬆ Back to Top9. What is the output of below codeconst obj = {  prop1: function () {    return 0;  },  prop2() {    return 1;  },  [\""prop\"" + 3]() {    return 2;  },};console.log(obj.prop1());console.log(obj.prop2());console.log(obj.prop3());1: 0, 1, 22: 0, { return 1 }, 23: 0, { return 1 }, { return 2 }4: 0, 1, undefinedAnswerAnswer: 1ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.⬆ Back to Top10. What is the output of below codeconsole.log(1 < 2 < 3);console.log(3 > 2 > 1);1: true, true2: true, false3: SyntaxError, SyntaxError,4: false, falseAnswerAnswer: 2The important point is that if the statement contains the same operators(e.g, < or >) then it can be evaluated from left to right.The first statement follows the below order,console.log(1 < 2 < 3);console.log(true < 3);console.log(1 < 3); // True converted as 1 during comparisonTrueWhereas the second statement follows the below order,console.log(3 > 2 > 1);console.log(true > 1);console.log(1 > 1); // False converted as 0 during comparisonFalse⬆ Back to Top11. What is the output of below code in non-strict modefunction printNumbers(first, second, first) {  console.log(first, second, first);}printNumbers(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 2In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters.The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.Note: In strict mode, duplicate parameters will throw a Syntax Error.⬆ Back to Top12. What is the output of below codeconst printNumbersArrow = (first, second, first) => {  console.log(first, second, first);};printNumbersArrow(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 3Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see SyntaxError in the console.⬆ Back to Top13. What is the output of below codeconst arrowFunc = () => arguments.length;console.log(arrowFunc(1, 2, 3));1: ReferenceError: arguments is not defined2: 33: undefined4: nullAnswerAnswer: 1Arrow functions do not have an arguments, super, this, or new.target bindings. So any reference to arguments variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.Where as the normal function provides the number of arguments passed to the functionconst func = function () {  return arguments.length;};console.log(func(1, 2, 3));But If you still want to use an arrow function then rest operator on arguments provides the expected argumentsconst arrowFunc = (...args) => args.length;console.log(arrowFunc(1, 2, 3));⬆ Back to Top14. What is the output of below codeconsole.log(String.prototype.trimLeft.name === \""trimLeft\"");console.log(String.prototype.trimLeft.name === \""trimStart\"");1: True, False2: False, TrueAnswerAnswer: 2In order to be consistent with functions like String.prototype.padStart, the standard method name for trimming the whitespaces is considered as trimStart. Due to web web compatibility reasons, the old method name 'trimLeft' still acts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'⬆ Back to Top15. What is the output of below codeconsole.log(Math.max());1: undefined2: Infinity3: 04: -InfinityAnswerAnswer: 4-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned.Note: Zero number of arguments is a valid case.⬆ Back to Top16. What is the output of below codeconsole.log(10 == [10]);console.log(10 == [[[[[[[10]]]]]]]);1: True, True2: True, False3: False, False4: False, TrueAnswerAnswer: 1As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below10 === Number([10].valueOf().toString()); // 10So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.⬆ Back to Top17. What is the output of below codeconsole.log(10 + \""10\"");console.log(10 - \""10\"");1: 20, 02: 1010, 03: 1010, 10-104: NaN, NaNAnswerAnswer: 2The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.⬆ Back to Top18. What is the output of below codeconsole.log([0] == false);if ([0]) {  console.log(\""I'm True\"");} else {  console.log(\""I'm False\"");}1: True, I'm True2: True, I'm False3: False, I'm True4: False, I'm FalseAnswerAnswer: 1In comparison operators, the expression [0] converted to Number([0].valueOf().toString()) which is resolved to false. Whereas [0] just becomes a truthy value without any conversion because there is no comparison operator.19. What is the output of below codeconsole.log([1, 2] + [3, 4]);1: [1,2,3,4]2: [1,2][3,4]3: SyntaxError4: 1,23,4AnswerAnswer: 4The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.⬆ Back to Top20. What is the output of below codeconst numbers = new Set([1, 1, 2, 3, 4]);console.log(numbers);const browser = new Set(\""Firefox\"");console.log(browser);1: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}2: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""}3: [1, 2, 3, 4], [\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""]4: {1, 1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}AnswerAnswer: 1Since Set object is a collection of unique values, it won't allow duplicate values in the collection. At the same time, it is case sensitive data structure.⬆ Back to Top21. What is the output of below codeconsole.log(NaN === NaN);1: True2: FalseAnswerAnswer: 2JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.⬆ Back to Top22. What is the output of below codelet numbers = [1, 2, 3, 4, NaN];console.log(numbers.indexOf(NaN));1: 42: NaN3: SyntaxError4: -1AnswerAnswer: 4The indexOf uses strict equality operator(===) internally and NaN === NaN evaluates to false. Since indexOf won't be able to find NaN inside an array, it returns -1 always.But you can use Array.prototype.findIndex method to find out the index of NaN in an array or You can use Array.prototype.includes to check if NaN is present in an array or not.let numbers = [1, 2, 3, 4, NaN];console.log(numbers.findIndex(Number.isNaN)); // 4console.log(numbers.includes(NaN)); // true⬆ Back to Top23. What is the output of below codelet [a, ...b,] = [1, 2, 3, 4, 5];console.log(a, b);1: 1, [2, 3, 4, 5]2: 1, {2, 3, 4, 5}3: SyntaxError4: 1, [2, 3, 4]AnswerAnswer: 3When using rest parameters, trailing commas are not allowed and will throw a SyntaxError.If you remove the trailing comma then it displays 1st answerlet [a, ...b] = [1, 2, 3, 4, 5];console.log(a, b); // 1, [2, 3, 4, 5]⬆ Back to Top25. What is the output of below codeasync function func() {  return 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<rejected>: 10}AnswerAnswer: 1Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10);}⬆ Back to Top26. What is the output of below codeasync function func() {  await 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<resolved>: undefined}AnswerAnswer: 4The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a .then callback. In this case, there is no return expression at the end of the function. Hence, the default return value of undefined is returned as the resolution of the promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10).then(() => undefined);}⬆ Back to Top27. What is the output of below codefunction delay() {  return new Promise(resolve => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function processArray(array) {  array.forEach(item => {    await delayedLog(item);  })}processArray([1, 2, 3, 4]);1: SyntaxError2: 1, 2, 3, 43: 4, 4, 4, 44: 4, 3, 2, 1AnswerAnswer: 1Even though “processArray” is an async function, the anonymous function that we use for forEach is synchronous. If you use await inside a synchronous function then it throws a syntax error.⬆ Back to Top28. What is the output of below codefunction delay() {  return new Promise((resolve) => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function process(array) {  array.forEach(async (item) => {    await delayedLog(item);  });  console.log(\""Process completed!\"");}process([1, 2, 3, 5]);1: 1 2 3 5 and Process completed!2: 5 5 5 5 and Process completed!3: Process completed! and 5 5 5 54: Process completed! and 1 2 3 5AnswerAnswer: 4The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.But you control the array sequence using for..of loop,async function processArray(array) {  for (const item of array) {    await delayedLog(item);  }  console.log(\""Process completed!\"");}⬆ Back to Top29. What is the output of below codevar set = new Set();set.add(\""+0\"").add(\""-0\"").add(NaN).add(undefined).add(NaN);console.log(set);1: Set(4) {\""+0\"", \""-0\"", NaN, undefined}2: Set(3) {\""+0\"", NaN, undefined}3: Set(5) {\""+0\"", \""-0\"", NaN, undefined, NaN}4: Set(4) {\""+0\"", NaN, undefined, NaN}AnswerAnswer: 1Set has few exceptions from equality check,All NaN values are equalBoth +0 and -0 considered as different values⬆ Back to Top30. What is the output of below codeconst sym1 = Symbol(\""one\"");const sym2 = Symbol(\""one\"");const sym3 = Symbol.for(\""two\"");const sym4 = Symbol.for(\""two\"");console.log(sym1 === sym2, sym3 === sym4);1: true, true2: true, false3: false, true4: false, falseAnswerAnswer: 3Symbol follows below conventions,Every symbol value returned from Symbol() is unique irrespective of the optional string.Symbol.for() function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.Note: The symbol description is just useful for debugging purposes.⬆ Back to Top31. What is the output of below codeconst sym1 = new Symbol(\""one\"");console.log(sym1);1: SyntaxError2: one3: Symbol('one')4: SymbolAnswerAnswer: 1Symbol is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError⬆ Back to Top32. What is the output of below codelet myNumber = 100;let myString = \""100\"";if (!typeof myNumber === \""string\"") {  console.log(\""It is not a string!\"");} else {  console.log(\""It is a string!\"");}if (!typeof myString === \""number\"") {  console.log(\""It is not a number!\"");} else {  console.log(\""It is a number!\"");}1: SyntaxError2: It is not a string!, It is not a number!3: It is not a string!, It is a number!4: It is a string!, It is a number!AnswerAnswer: 4The return value of typeof myNumber or typeof myString is always a truthy value (either \""number\"" or \""string\""). The ! operator operates on either typeof myNumber or typeof myString, converting them to boolean values. Since the value of both !typeof myNumber and !typeof myString is false, the if condition fails, and control goes to else block.To make the ! operator operate on the equality expression, one needs to add parentheses:if (!(typeof myNumber === \""string\""))Or simply use the inequality operator:if (typeof myNumber !== \""string\"")⬆ Back to Top33. What is the output of below codeconsole.log(  JSON.stringify({ myArray: [\""one\"", undefined, function () {}, Symbol(\""\"")] }));console.log(  JSON.stringify({ [Symbol.for(\""one\"")]: \""one\"" }, [Symbol.for(\""one\"")]));1: {\""myArray\"":['one', undefined, {}, Symbol]}, {}2: {\""myArray\"":['one', null,null,null]}, {}3: {\""myArray\"":['one', null,null,null]}, \""{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\""4: {\""myArray\"":['one', undefined, function(){}, Symbol('')]}, {}AnswerAnswer: 2The symbols has below constraints,The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).⬆ Back to Top34. What is the output of below codeclass A {  constructor() {    console.log(new.target.name);  }}class B extends A {  constructor() {    super();  }}new A();new B();1: A, A2: A, BAnswerAnswer: 2Using constructors, new.target refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.⬆ Back to Top35. What is the output of below codeconst [x, ...y, z] = [1, 2, 3, 4];console.log(x, y, z);1: 1, [2, 3], 42: 1, [2, 3, 4], undefined3: 1, [2], 34: SyntaxErrorAnswerAnswer: 4It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.⬆ Back to Top36. What is the output of below codeconst { a: x = 10, b: y = 20 } = { a: 30 };console.log(x);console.log(y);1: 30, 202: 10, 203: 10, undefined4: 30, undefinedAnswerAnswer: 1The object property follows below rules,The object properties can be retrieved and assigned to a variable with a different nameThe property assigned a default value when the retrieved value is undefined⬆ Back to Top37. What is the output of below codefunction area({ length = 10, width = 20 }) {  console.log(length * width);}area();1: 2002: Error3: undefined4: 0AnswerAnswer: 2If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error Error: Cannot read property 'length' of undefined as mentioned above.You can avoid the error with either of the below changes,Pass at least an empty object:function area({ length = 10, width = 20 }) {  console.log(length * width);}area({});Assign default empty object:function area({ length = 10, width = 20 } = {}) {  console.log(length * width);}area();⬆ Back to Top38. What is the output of below codeconst props = [  { id: 1, name: \""John\"" },  { id: 2, name: \""Jack\"" },  { id: 3, name: \""Tom\"" },];const [, , { name }] = props;console.log(name);1: Tom2: Error3: undefined4: JohnAnswerAnswer: 1It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.⬆ Back to Top39. What is the output of below codefunction checkType(num = 1) {  console.log(typeof num);}checkType();checkType(undefined);checkType(\""\"");checkType(null);1: number, undefined, string, object2: undefined, undefined, string, object3: number, number, string, object4: number, number, number, numberAnswerAnswer: 3If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a parameter.Hence, the result of function calls categorized as below,The first two function calls logs number type since the type of default value is numberThe type of '' and null values are string and object type respectively.⬆ Back to Top40. What is the output of below codefunction add(item, items = []) {  items.push(item);  return items;}console.log(add(\""Orange\""));console.log(add(\""Apple\""));1: ['Orange'], ['Orange', 'Apple']2: ['Orange'], ['Apple']AnswerAnswer: 2Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.⬆ Back to Top41. What is the output of below codefunction greet(greeting, name, message = greeting + \"" \"" + name) {  console.log([greeting, name, message]);}greet(\""Hello\"", \""John\"");greet(\""Hello\"", \""John\"", \""Good morning!\"");1: SyntaxError2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']AnswerAnswer: 2Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.⬆ Back to Top42. What is the output of below codefunction outer(f = inner()) {  function inner() {    return \""Inner\"";  }}outer();1: ReferenceError2: InnerAnswerAnswer: 1The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, inner is not defined).⬆ Back to Top43. What is the output of below codefunction myFun(x, y, ...manyMoreArgs) {  console.log(manyMoreArgs);}myFun(1, 2, 3, 4, 5);myFun(1, 2);1: [3, 4, 5], undefined2: SyntaxError3: [3, 4, 5], []4: [3, 4, 5], [undefined]AnswerAnswer: 3The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.⬆ Back to Top44. What is the output of below codeconst obj = { key: \""value\"" };const array = [...obj];console.log(array);1: ['key', 'value']2: TypeError3: []4: ['key']AnswerAnswer: 2Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as map(), reduce(), and assign(). If you still try to do it, it still throws TypeError: obj is not iterable.⬆ Back to Top45. What is the output of below codefunction* myGenFunc() {  yield 1;  yield 2;  yield 3;}var myGenObj = new myGenFunc();console.log(myGenObj.next().value);1: 12: undefined3: SyntaxError4: TypeErrorAnswerAnswer: 4Generators are not constructible type. But if you still proceed to do, there will be an error saying \""TypeError: myGenFunc is not a constructor\""⬆ Back to Top46. What is the output of below codefunction* yieldAndReturn() {  yield 1;  return 2;  yield 3;}var myGenObj = yieldAndReturn();console.log(myGenObj.next());console.log(myGenObj.next());console.log(myGenObj.next());1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }AnswerAnswer: 1A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: {value: undefined, done: true}.⬆ Back to Top47. What is the output of below codeconst myGenerator = (function* () {  yield 1;  yield 2;  yield 3;})();for (const value of myGenerator) {  console.log(value);  break;}for (const value of myGenerator) {  console.log(value);}1: 1,2,3 and 1,2,32: 1,2,3 and 4,5,63: 1 and 14: 1AnswerAnswer: 4The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break & return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn't print any value.⬆ Back to Top48. What is the output of below codeconst num = 0o38;console.log(num);1: SyntaxError2: 38AnswerAnswer: 1If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.⬆ Back to Top49. What is the output of below codeconst squareObj = new Square(10);console.log(squareObj.area);class Square {  constructor(length) {    this.length = length;  }  get area() {    return this.length * this.length;  }  set area(value) {    this.area = value;  }}1: 1002: ReferenceErrorAnswerAnswer: 2Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError \""Uncaught ReferenceError: Square is not defined\"".Note: Class expressions also applies to the same hoisting restrictions of class declarations.⬆ Back to Top50. What is the output of below codefunction Person() {}Person.prototype.walk = function () {  return this;};Person.run = function () {  return this;};let user = new Person();let walk = user.walk;console.log(walk());let run = Person.run;console.log(run());1: undefined, undefined2: Person, Person3: SyntaxError4: Window, WindowAnswerAnswer: 4When a regular or prototype method is called without a value for this, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial this value is undefined so both methods return window objects.⬆ Back to Top51. What is the output of below codeclass Vehicle {  constructor(name) {    this.name = name;  }  start() {    console.log(`${this.name} vehicle started`);  }}class Car extends Vehicle {  start() {    console.log(`${this.name} car started`);    super.start();  }}const car = new Car(\""BMW\"");console.log(car.start());1: SyntaxError2: BMW vehicle started, BMW car started3: BMW car started, BMW vehicle started4: BMW car started, BMW car startedAnswerAnswer: 3The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to be a first statement. i.e, The statements will be executed in the same order of code.⬆ Back to Top52. What is the output of below codeconst USER = { age: 30 };USER.age = 25;console.log(USER.age);1: 302: 253: Uncaught TypeError4: SyntaxErrorAnswerAnswer: 2Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.⬆ Back to Top53. What is the output of below codeconsole.log(\""🙂\"" === \""🙂\"");1: false2: trueAnswerAnswer: 2Emojis are unicodes and the unicode for smile symbol is \""U+1F642\"". The unicode comparision of same emojies is equivalent to string comparison. Hence, the output is always true.⬆ Back to Top54. What is the output of below code?console.log(typeof typeof typeof true);1: string2: boolean3: NaN4: numberAnswerAnswer: 1The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.⬆ Back to Top55. What is the output of below code?let zero = new Number(0);if (zero) {  console.log(\""If\"");} else {  console.log(\""Else\"");}1: If2: Else3: NaN4: SyntaxErrorAnswerAnswer: 1The type of operator on new Number always returns object. i.e, typeof new Number(0) --> object.Objects are always truthy in if blockHence the above code block always goes to if section.⬆ Back to Top55. What is the output of below code in non strict mode?let msg = \""Good morning!!\"";msg.name = \""John\"";console.log(msg.name);1: \""\""2: Error3: John4: UndefinedAnswerAnswer: 4It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.⬆ Back to Top56. What is the output of below code?let count = 10;(function innerFunc() {  if (count === 10) {    let count = 11;    console.log(count);  }  console.log(count);})();1: 11, 102: 11, 113: 10, 114: 10, 10AnswerAnswer: 111 and 10 is logged to the console.The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has another local variable count which overwrites the ourter count variable. So the first console.log displays value 11.Whereas the second console.log logs 10 by capturing the count variable from outerscope.⬆ Back to Top57. What is the output of below code ?1: console.log(true && 'hi');2: console.log(true && 'hi' && 1);3: console.log(true && '' && 0);Answer1: hi2: 13: ''Reason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.Note: Below these values are consider as falsy value1: 02: ''3: null4: undefined5: NAN⬆ Back to Top58. What is the output of below code ?let arr = [1, 2, 3];let str = \""1,2,3\"";console.log(arr == str);1: false2: Error3: trueAnswerAnswer: 3Arrays have their own implementation of toString method that returns a comma-separated list of elements. So the above code snippet returns true. In order to avoid conversion of array type, we should use === for comparison.⬆ Back to Top59. What is the output of below code?getMessage();var getMessage = () => {  console.log(\""Good morning\"");};1: Good morning2: getMessage is not a function3: getMessage is not defined4: UndefinedAnswerAnswer: 2Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above function will considered as a varible due to it's variable declaration or assignment. So the variables will have undefined value in memory phase and throws an error 'getMessage is not a function' at the code execution phase.⬆ Back to Top60. What is the output of below code?let quickPromise = Promise.resolve();quickPromise.then(() => console.log(\""promise finished\""));console.log(\""program finished\""); 1: program finished2: Cannot predict the order3: program finished, promise finished4: promise finished, program finishedAnswerAnswer: 3Even though a promise is resolved immediately, it won't be executed immediately because its .then/catch/finally handlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current program, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before the log of promise handler.Note: We call the above queue as \""MicroTask Queue\""⬆ Back to Top61. What is the output of below code?console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))console.log('Third line')1: First line, then print a, b, c in a new line, and finally print Third line as next line2: First line, then print a, b, c in a first line, and  print Third line as next line3:  Missing semi-colon error4:  Cannot read properties of undefinedAnswerAnswer: 4When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon based on a set of rules called Automatic Semicolon Insertion which determines whether line break as end of statement or not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines considered as a single statement as below.console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))Hence, there will be cannot read properties of undefined error while applying the array square bracket on log function.⬆ Back to Top62. Write a function that returns a random HEX colorSolution 1 (Iterative generation)const HEX_ALPHABET = [\""0\"", \""1\"", \""2\"", \""3\"", \""4\"", \""5\"", \""6\"", \""7\"", \""8\"", \""9\"", \""a\"", \""b\"", \""c\"", \""d\"", \""e\"", \""f\""];const HEX_PREFIX = \""#\"";const HEX_LENGTH = 6;function generateRandomHex() {\tlet randomHex = \""\"";\tfor(let i = 0; i < HEX_LENGTH; i++) {\t\tconst randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);\t\trandomHex += HEX_ALPHABET[randomIndex];\t}\treturn HEX_PREFIX + randomHex;}Solution 2 (One-liner)const HEX_PREFIX = \""#\"";const HEX_RADIX = 16;const HEX_LENGTH = 6;function generateRandomHex() {\treturn HEX_PREFIX + Math.floor(Math.random() * 0xffffff).toString(HEX_RADIX).padStart(HEX_LENGTH, \""0\"");} ⬆ Back to Top63. What is the output of below code?var of = ['of'];for(var of of of) {  console.log(of);}1:  of2:  SyntaxError: Unexpected token of3:  SyntaxError: Identifier 'of' has already been declared4:  ReferenceError: of is not definedAnswerAnswer: 1In JavaScript, of is not considered as a reserved keyword. So the variable declaration with of is accepted and prints the array value of using for..of loop.But if you use reserved keyword such as in then there will be a syntax error saying SyntaxError: Unexpected token in,var in = ['in'];for(var in in in) {  console.log(in[in]);}⬆ Back to Top64. What is the output of below code?const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort();console.log(numbers);1:  [11, 18, 23, 25, 31, 33, 200]2:  [11, 18, 200, 23, 25, 31, 33]3:  [11, 25, 31, 23, 33, 18, 200]4:  Cannot sort numbersAnswerAnswer: 2By default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings compared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort numerically just supply a comparator function which handles numeric sorts.const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort((a, b) => a - b);console.log(numbers);Note: Sort() method changes the original array.⬆ Back to Top65. What is the output order of below code?setTimeout(() => {console.log('1')}, 0);Promise.resolve('hello').then(() => console.log('2'));console.log('3');1:  1, 2, 32:  1, 3, 23:  3, 1, 24:  3, 2, 1AnswerAnswer: 4When the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later and third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the console. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in the execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and executed. Hence, you will see number 2 printed first followed by 1.⬆ Back to Top66. What is the output of below code?console.log(name);console.log(message());var name = 'John';(function message() {   console.log('Hello John: Welcome');});1:  John, Hello John: Welcome2:  undefined, Hello John, Welcome3:  Reference error: name is not defined, Reference error: message is not defined4:  undefined, Reference error: message is not definedAnswerAnswer: 4IIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence, there will be a reference error for message call.The behavior would be the same with below function expression of message1,console.log(name);console.log(message());var name = 'John';var message = function () {   console.log('Hello John: Welcome');});⬆ Back to Top67. What is the output of below code?message()function message() {  console.log(\""Hello\"");}function message() {  console.log(\""Bye\"");}1:  Reference error: message is not defined2:  Hello3:  Bye4:  Compile time errorAnswerAnswer: 3As part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite or replaces with redefined function content.⬆ Back to Top68. What is the output of below code?var currentCity = \""NewYork\"";var changeCurrentCity = function() {  console.log('Current City:', currentCity);  var currentCity = \""Singapore\"";  console.log('Current City:', currentCity);}changeCurrentCity();1:  NewYork, Singapore2:  NewYork, NewYork3:  undefined, Singapore4:  Singapore, SingaporeAnswerAnswer: 3Due to hositing feature, the variables declared with var will have undefined value in the creation phase so the outer variable currentCity will get same undefined value. But after few lines of code JavaScript engine found a new function call(changeCurrentCity()) to update the current city with var re-declaration. Since each function call will create a new execution context, the same variable will have undefined value before the declaration and new value(Singapore) after the declarion. Hence, the value undefined print first followed by new value Singapore in the execution phase.⬆ Back to Top69. What is the output of below code in an order?function second() {\tvar message;  console.log(message);}function first() {\tvar message=\""first\"";  second();  console.log(message);}var message = \""default\"";first();console.log(message);1:  undefined, first, default2:  default, default, default3:  first, first, default4:  undefined, undefined, undefinedAnswerAnswer: 1Each context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So you can see the message variable value from second, first functions in an order followed by global context message variable value at the end.⬆ Back to Top70. What is the output of below code?var expressionOne = function functionOne() {  console.log(\""functionOne\"");}functionOne();1:  functionOne is not defined2:  functionOne3:  console.log(\""functionOne\"")4:  undefinedAnswerAnswer: 1The function call functionOne is not going to be part of scope chain and it has it's own execution context with the enclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while invoking the function as functionOne is not defined.⬆ Back to Top71. What is the output of below code?const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    eatFruit()  }}user.eat();1:  {name: \""John\"", eat: f}, {name: \""John\"", eat: f}2:  Window {...}, Window {...}3:  {name: \""John\"", eat: f}, undefined4:  {name: \""John\"", eat: f}, Window {...}AnswerAnswer: 4this keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where this has been written but how it has been invoked really matter. In the above code snippet, the user object invokes eat function so this keyword refers to user object but eatFruit has been invoked by eat function and this will have default Window object.The above pit fall fixed by three ways,In ES6, the arrow function will make this keyword as lexically scoped. Since the surrounding object of this object is user object, the eatFruit function will contain user object for this object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = () => {      console.log(this);    }    eatFruit()  }}user.eat();The next two solutions have been used before ES6 introduced.It is possible create a reference of this into a separate variable and use that new variable inplace of this keyword inside eatFruit function. This is a common practice in jQuery and AngularJS before ES6 introduced.const user = {  name: 'John',  eat() {    console.log(this);    var self = this;    var eatFruit = () => {      console.log(self);    }    eatFruit()  }}user.eat();The eatFruit function can bind explicitly with this keyword where it refers Window object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    return eatFruit.bind(this)  }}user.eat()();⬆ Back to Top72. What is the output of below code?let message = 'Hello World!';message[0] = 'J';console.log(message)let name = 'John';name = name + ' Smith';console.log(name);1:  Jello World!, John Smith2:  Jello World!, John3:  Hello World!, John Smith4:  Hello World!, JohnAnswerAnswer: 3In JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when you try to update the string's first character, there is no change in the string value and prints the same initial value Hello World!. Whereas in the later example, the concatenated value is re-assigned to the same variable which will result into creation of new memory block with the reference pointing to John Smith value and the old memory block value(John) will be garbage collected.⬆ Back to Top73. What is the output of below code?let user1 = {       name : 'Jacob',      age : 28    };    let user2 = {          name : 'Jacob',      age : 28    };    console.log(user1 === user2);1:  True2:  False3:  Compile time errorAnswerAnswer: 2In JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to compare two objects with same content, it is going to compare memory address or reference of those variables. These variables always create separate memory blocks hence the comparison is always going to return false value.⬆ Back to Top74. What is the output of below code?function greeting() {  setTimeout(function() {    console.log(message);  }, 5000);  const message = \""Hello, Good morning\"";}greeting();1:  Undefined2:  Reference error:3:  Hello, Good morning4:  nullAnswerAnswer: 3The variable message is still treated as closure(since it has been used in inner function) eventhough it has been declared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable declaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be displayed.⬆ Back to Top75. What is the output of below code?const a = new Number(10);const b = 10;console.log(a === b);1:  False2:  TrueAnswerAnswer: 1Eventhough both variables a and b refer a number value, the first declaration is based on constructor function and the type of the variable is going to be object type. Whereas the second declaration is primitive assignment with a number and the type is number type. Hence, the equality operator === will output false value.⬆ Back to Top76. What is the type of below function?function add(a, b) {  console.log(\""The input arguments are: \"", a, b);  return a + b;}1:  Pure function2:  Impure functionAnswerAnswer: 2Eventhough the above function returns the same result for the same arguments(input) that are passed in the function, the console.log() statement causes a function to have side effects because it affects the state of an external code. i.e, the console object's state and depends on it to perform the job. Hence, the above function considered as impure function.⬆ Back to Top77. What is the output of below code?const promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));const promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));Promise.all([promiseOne, promiseTwo]).then(data => console.log(data));1:  [{status: \""fullfilled\"", value: undefined}, {status: \""rejected\"", reason: undefined}]2:  [{status: \""fullfilled\"", value: undefined}, Uncaught(in promise)]3:  Uncaught (in promise)4:  [Uncaught(in promise), Uncaught(in promise)]AnswerAnswer: 3The above promises settled at the same time but one of them resolved and other one rejected. When you use .all method on these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you use .allSettled method then result of both the promises will be returned irrespective of resolved or rejected promise status without throwing any error.Promise.allSettled([promiseOne, promiseTwo]).then(data => console.log(data)); ⬆ Back to Top78. What is the output of below code?try {  setTimeout(() => {    console.log('try block');    throw new Error(`An exception is thrown`)  }, 1000);} catch(err) {  console.log('Error: ', err);}1:  try block, Error: An exception is thrown2:  Error: An exception is thrown3:  try block, Uncaught Error: Exception is thrown4:  Uncaught Error: Exception is thrownAnswerAnswer: 3If you put setTimeout and setInterval methods inside the try clause and an exception is thrown, the catch clause will not catch any of them. This is because the try...catch statement works synchronously, and the function in the above code is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching the error. To resolve this issue, you have to put the try...catch block inside the function as below,setTimeout(() => {   try {      console.log('try block');      throw new Error(`An exception is thrown`)   } catch(err) {      console.log('Error: ', err);   }    }, 1000);You can use .catch() function in promises to avoid these issues with asynchronous code. ⬆ Back to Top79. What is the output of below code?let a = 10;if(true){  let a = 20;  console.log(a, \""inside\"");}console.log(a, \""outside\"");1:  20, \""inside\"" and 20, \""outside\""2:  20, \""inside\"" and 10, \""outside\""3:  10, \""inside\"" and 10, \""outside\""4:  10, \""inside\"" and 20, \""outside\""AnswerAnswer: 2The variable \""a\"" declared inside \""if\"" has block scope and does not affect the value of the outer \""a\"" variable. ⬆ Back to Top80. What is the output of below code?let arr = [1,2,3,4,5,-6,7];arr.length = 0;console.log(arr);1:  02:  Undefined3:  null4:  [ ]AnswerAnswer: 4The length of the array 'arr' has been set to 0, so the array becomes empty. ⬆ Back to TopDisclaimerThe questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don't know the answer to all of them ⁠— that is ok!Good luck with your interview 😊"
54,BlackAmda/QueenAmdi,https://github.com/BlackAmda/QueenAmdi/blob/master/README.md,JavaScript,"QUEEN AMDI💃🏻❤️ - A Javascript WhatsApp User BotA WhatsApp based third party application that provide many services with a real-time automated conversational experience.Queen Amdi is an user bot for WhatsApp that allowing you to get done so many tasks. This project mainly focusing on make user's work easy. This project coded with Javascript and Docker. And using Baileys as the WA Web API. Developer or Team members are not responsible for your usage mistakes and not using wisely. Also, you have no authorities do any modifications to this project. Enjoy!🎈Visit our official Queen Amdi 4.0v [Multi-Device] website for deploy instructions» Official WebsiteYou can join our Beta Testing WhatsApp Group by this invite link» Join beta test groupFor heroku deployers: » See heroku deploy instructions» See other deploy methods» Queen Amdi announcement group🐝 Queen Amdi Team - A.N.Tech [ Since 2016 ]Achintha BandaraFounder & Developer[Black Amda]Sasmitha AshinsanaCo-Admin/DeveloperLil LuziUser SupporterKapayaGroup ManagementMr.DinaGraphic DesignerJokaTamahBug TesterZeusGroup ManagementLicenseThis project is protected by the GNU General Public License v3.0.Do not edit copyright messages!DisclaimerWhatsApp name, its variations and logo are registered trademarks on Facebook. We have nothing to do with the registered trademark."
55,bloominstituteoftechnology/DOM-II,https://github.com/bloominstituteoftechnology/DOM-II/blob/main/README.md,JavaScript,"DOM IIProject DescriptionFun Bus wants you to make their site more interactive. They are relying on you to provide 10 unique events to enhance their site. Explore the many events available to you by using the MDN events reference.Git Setup Create a forked copy of this project. Clone your OWN version of the repository. Implement the project on the main branch, committing changes regularly. Push commits: git push origin main.Running the projectThis project uses Webpack and Babel. Inside src/index.html you will notice there is no script tag linking the JavaScript, nor a link tag linking the styles. When the project starts, Webpack transcompiles the LESS into CSS, and injects the JavaScript and the styles into the HTML.Do not move or rename any files in this project. The website's source files live inside the src folder. Do not make changes to any files outside of the src folder, unless it's new dependecies declared in the package.json due to installing NPM libraries (E.G. npm i lodash). Run npm install to download the project's dependencies. Run npm start to launch the website on http://localhost:3000.MVPCreate listeners of 10 types of events Using your index.js file, create event listeners of at least 10 different types. You must Use your creativity to make the Fun Bus site more interactive. For example you could change colors, animate objects, add DOM elements, remove them, etc. Here are some event types you could try to use: mouseover keydown wheel load focus resize scroll select dblclick drag / dropNote: Drag and drop is a bit more advanced than the others. It's not actually a single type of event but several types that need to work together.Use preventDefault Find a usecase for preventDefault. For example, you could prevent a link from navigating when clicked, or to navigate somewhere surprising.Submission Format Submit project using Codegrade, as per the instructions in the learning platform."
56,learn-co-curriculum/phase-1-javascript-variables-lab,https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/blob/master/README.md,JavaScript,"Review: Variables LabLearning GoalsPractice using const and let to declare variables in JavaScriptInstructionsIn this lab we'll practice declaring and assigning values to variables. We'llalso go over how to read the test document. Understanding how to read the testscan be a valuable tool in figuring out exactly what you'll need to do tocomplete the lab.TestsWhen we want to run an experiment, we need to develop a hypothesis and we needto test it. In programming, we run tests to verify that programs behave the waywe think they do. Tests help us identify bugs and judge how healthy ourapplications are.We use tests to describe the program's behavior, just as you would in aprofessional coding environment, and we also use them as teaching tools. You arein charge of getting the tests to pass.StructureThe structure of this lab — where its files and folders are located— looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── indexTest.jsAll labs will more or less have the same structure. (And non-lab lessons, forthat matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)Code AlongThis lesson is set up as a code-along, so you'll first need to fork andclone it to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. Verify that your GitHub usernameis showing in the Owner dropdown, then click the Createfork button.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.3. Make sure you're in Development/code/phase-1 (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-1-javascript-variables-lab.git4. The previous command will create a folder in the phase-1 foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-1-javascript-variables-lab$ code .Open up index.js in your code editor; you should see, well, nothing. We'll fixthat soon.Now open up test/indexTest.js. Hey, there's something! What's all of thisstuff doing?Note: The test/indexTest.js has great info that we want to look at, but donot edit this file otherwise you may have extra difficulty passing this lab.A few lines down in the test/indexTest.js file you will see:describe('index.js', function () {  // there's stuff in here, too});describe is a function provided by our test library, Mocha, and it's used tohold our tests. After the word describe is information about our tests. Testsare used as a way to document the behavior of a function to developers. Forexample, the next word describe is followed by the word companyName. Herethe test is telling us that the tests that come afterwards will be aboutcompanyName. Then comes the word it, where you see the following:it('is set as Scuber', function () {  // tests are here});This is telling us that the companyName should be set to Scuber. Finally,filling in the missing part of the it code, we see:it('is set as Scuber', function () {  expect(companyName).to.equal('Scuber');});This example shows that the test expects companyName to equal Scuber. Thatexpect and to.equal are essentially doing the same thing as companyName == 'Scuber'. In other words, expect(companyName).to.equal('Scuber') is runningcode that will have this first test pass if companyName equals Scuber andfail if it does not.Don't worry too much yet if it's hard to understand what is happening inside ofthe test/indexTest.js file. But it's a good idea to open up the file, andgather the information that you can. We will also provide instructions in theREADME.md file that will allow you to complete the lab.Running the TestsStart by installing the test dependencies by running npm install in theterminal, then run npm test to run the tests. You should now see the currentstatus of the tests in the terminal. For the moment, all of the tests fail.Let's figure out how to get one of them passing! (The rest will be up to you.)To get our first test to pass, we can open up our index.js file, and write thefollowing:let companyName = 'Scuber';If you run npm test again, you'll see that our first test is now passing.However, the second test, which is also about companyName, is not yet passing.It's not passing because it expects companyName to be declared using adifferent keyword than the let keyword — it needs a keyword that is used forvariables that can't be changed...Continue to work through the problems below. Keep in mind the general workflowfor a lab:Run npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 1 and 2 often until a test passes.Repeat as needed until all the tests are passing.Working Through the ProblemsIf you open up test/indexTest.js, you will see the tasks in front of you:companyName — Inside the test/indexTest.js file, look at thedescribe function call for the companyName variable. The two it functioncalls inside this describe tell us the features of companyName we need tocreate. To review, in the first it function call, it says that it(companyName) is set as Scuber. In the next line, you can see that the testchecks to make sure this occurs by seeing if companyName equals Scuber. Sothis means that you need to go to your index.js file and declare a variablenamed companyName and set it equal to Scuber.In the second it function call for companyName, it says it is defined as a const. The next line of code tests this. So you need to make sure that youare using the correct type of variable declaration such that attempting toreassign the variable throws an error.mostProfitableNeighborhood and companyCeo — Here we are getting morepractice with declaring variables. Read the tests to see how you need to codethese two variables to get the remaining tests passing.Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theCompleting and Submitting Assignments with CodeGradelesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.ResourcesMDN: LetMDN: Const"
57,mermaid-js/mermaid,https://github.com/mermaid-js/mermaid/blob/develop/README.md,JavaScript,"MermaidGenerate diagrams from markdown-like text.  Live Editor! 📖 Documentation | 🚀 Getting Started | 🌐 CDN | 🙌 Join Us简体中文🏆 Mermaid was nominated and won the JS Open Source Awards (2019) in the category \""The most exciting use of technology\""!!!Thanks to all involved, people committing pull requests, people answering questions! 🙏AboutMermaid is a JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. The main purpose of Mermaid is to help documentation catch up with development.Doc-Rot is a Catch-22 that Mermaid helps to solve.Diagramming and documentation costs precious developer time and gets outdated quickly.But not having diagrams or docs ruins productivity and hurts organizational learning.Mermaid addresses this problem by enabling users to create easily modifiable diagrams. It can also be made part of production scripts (and other pieces of code).Mermaid allows even non-programmers to easily create detailed diagrams through the Mermaid Live Editor.Tutorials has video tutorials.Use Mermaid with your favorite applications, check out the list of Integrations and Usages of Mermaid.You can also use Mermaid within GitHub as well many of your other favorite applications—check out the list of Integrations and Usages of Mermaid.For a more detailed introduction to Mermaid and some of its more basic uses, look to the Beginner's Guide, Usage and Tutorials.In our release process we rely heavily on visual regression tests using applitools. Applitools is a great service which has been easy to use and integrate with our tests.ExamplesThe following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the text syntax.Flowchart [docs - live editor]flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]            flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]                  Sequence diagram [docs - live editor]sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!            sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!                  Gantt chart [docs - live editor]gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d            gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d                  Class diagram [docs - live editor]classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}            classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}                  State diagram [docs - live editor]stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]            stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]                  Pie chart [docs - live editor]pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15            pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15                  Git graph [experimental - live editor]Bar chart (using gantt chart) [docs - live editor]gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5            gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5                  User Journey diagram [docs - live editor]  journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me              journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me                  C4 diagram [docs]C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")            C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")                  ReleaseFor those who have the permission to do so:Update version number in package.json.npm publishThe above command generates files into the dist folder and publishes them to https://www.npmjs.com.Related projectsCommand Line InterfaceLive EditorHTTP ServerContributors   Mermaid is a growing community and is always accepting new contributors. There's a lot of different ways to help out and we're always looking for extra hands! Look at this issue if you want to know where to start helping out.Detailed information about how to contribute can be found in the contribution guideSecurity and safe diagramsFor public sites, it can be precarious to retrieve text from users on the internet, storing that content for presentation in a browser at a later stage. The reason is that the user content can contain embedded malicious scripts that will run when the data is presented. For Mermaid this is a risk, specially as mermaid diagrams contain many characters that are used in html which makes the standard sanitation unusable as it also breaks the diagrams. We still make an effort to sanitize the incoming code and keep refining the process but it is hard to guarantee that there are no loop holes.As an extra level of security for sites with external users we are happy to introduce a new security level in which the diagram is rendered in a sandboxed iframe preventing javascript in the code from being executed. This is a great step forward for better security.Unfortunately you can not have a cake and eat it at the same time which in this case means that some of the interactive functionality gets blocked along with the possible malicious code.Reporting vulnerabilitiesTo report a vulnerability, please e-mail security@mermaid.live with a description of the issue, the steps you took to create the issue, affected versions, and if known, mitigations for the issue.AppreciationA quick note from Knut Sveidqvist:Many thanks to the d3 and dagre-d3 projects for providing the graphical layout and drawing libraries!Thanks also to the js-sequence-diagram project for usage of the grammar for the sequence diagrams. Thanks to Jessica Peter for inspiration and starting point for gantt rendering.Thank you to Tyler Long who has been a collaborator since April 2017.Thank you to the ever-growing list of contributors that brought the project this far!Mermaid was created by Knut Sveidqvist for easier documentation."
58,JS-Challenges/recursion-prompts,https://github.com/JS-Challenges/recursion-prompts/blob/master/README.md,JavaScript,"Recursion PromptsWhat is this?This is a repository of toy problems to be solved using recursion and JavaScript. While the concept of recursion may not be difficult to grasp, the only way to improve at thinking recursively is by practice. If you need practice, then maybe this repo is for you.A few guidelines:Please refrain from sharing solutions. As crazy as it sounds, giving someone the answer doesn't help them. Instead, give them a question that encourages them to think differently.Q: Why does my function keep exceeding the call stack?A: What's your base case?Don't be afraid to pseudocode your algorithm before writing actual code.Pseudocode helps you focus on the algorithm instead of getting distracted by syntax.This repo requires each function call itself recursively and pays no attention to whether inner recursive functions are defined and called.While both are valid uses of recursion, there are important lessons to learn by following the method this repo enforces. Defining inner functions and calling them recursively relies on side effects, while following the more pure approach requires an understanding of how values are passed through the call stack.This repo restricts expanding the number of parameters a function accepts.Expanding the number of parameters is a valid approach, but has been restricted here to emphasize certain lessons while learning recursion.An attempt was made to order prompts by difficulty, but they don't have to be solved in any particular order.Feel free to make pull requests or open issues regarding bugs or suggestions.Watch, Star, and Fork this repo. You know you want to.How to use this repo:Fork this repo and clone it to your local machineOpen SpecRunner.html in your web browserCode your solutions in recursion.jsReview the tests in spec/part1.js and spec/part2.js as necessarySave your work and refresh your browser to check for passing/failing testsWhat is recursion?Recursion is when a function calls itself until it doesn't. --not helpful personIs it a true definition? Mostly. Recursion is when a function calls itself. A recursive function can call itself forever, but that's generally not preferred. It's often a good idea to include a condition in the function definition that allows it to stop calling itself. This condition is referred to as a base case. As a general rule, recursion shouldn't be utilized without an accompanying base case unless an infinite operation is desired. This leaves us with two fundamental conditions every recursive function should include:A base caseA recursive caseWhat does this all mean? Let's consider a silly example:function stepsToZero(n) {  if (n === 0) { /* base case */    return 'Reached zero';  } else { /* recursive case */    console.log(n + ' is not zero');    return stepsToZero(n-1);  }}This function doesn't do anything meaningful, but hopefully it demonstrates the fundamental idea behind recursion. Simply put, recursion provides us a looping or repeating mechanism. It repeats an operation until a base condition is met. Let's step through an invocation of the above function to see how it evaluates.Invoke stepsToZero(n) where n is the number 2Is 2 zero?No, print message to console that 2 is not zeroInvoke stepsToZero(n-1) where n-1 evaluates to 1Every recursive call adds a new invocation to the stack on top of the previous invocationIs 1 zero?No, print message that 1 is not zeroInvoke stepsToZero(n-1) where n-1 evaluates to 0Is 0 zero?Yes, return message that reached zeroThe above return pops the current invocation off the stackResume the invocation from step 4 where it left off (in-between steps 6 and 7)Return out of the invocation from step 4Resume the initial invocation from step 1 where it left off (in-between steps 3 and 4)Return out of the initial invocationNote that the value returned from the base case (step 9) gets returned to the previous invocation (step 4) on the stack. Step 4's invocation takes that value and returns it to the invocation that preceded it (step 1). Once the initial invocation is reached, it returns the value to whatever invoked it. Through these steps, you can watch the call stack build up and once the base case is reached, the return value is passed back down as each invocation pops off the stack.Due to the way the execution stack operates, it's as if each function invocation pauses in time when a recursive call is made. The function that pauses before a recursive call will resume once the recursive call completes. If you've seen the movie Inception, this model may sound reminiscent to when the characters enter a person's dreams and time slowed. The difference is time doesn't actually slow with recursive invocations; rather, it's a matter of order of operations. If a new invocation enters the execution stack, that invocation must complete before the previous can continue and complete.Why use recursion?Recursion can be elegant, but it can also be dangerous. In some cases, recursion feels like a more natural and readable solution; in others, it ends up being contrived. In most cases, recursion can be avoided entirely and sometimes should in order to minimize the possibility of exceeding the call stack and crashing your app. But keep in mind that code readability is important. If a recursive solution reads more naturally, then it may be the best solution for the given problem.Recursion isn't unique to any one programming language. As a software engineer, you will encounter recursion and it's important to understand what's happening and how to work with it. It's also important to understand why someone might use it. Recursion is often used when the depth of a thing is unknown or every element of a thing needs to be touched. For example, you might use recursion if you want to find all DOM elements with a specific class name. You may not know how deep the DOM goes and need to touch every element so that none are missed. The same can be said for traversing any structure where all possible paths need to be considered and investigated.Divide and ConquerRecursion is often used in divide and conquer algorithms where problems can be divided into similar subproblems and conquered individually. Consider traversing a tree structure. Each branch may have its own \""children\"" branches. Every branch is essentially just another tree which means, as long as child trees are found, we can recurse on each child."
59,whitehatjr/Monkey-Chunky,https://github.com/whitehatjr/Monkey-Chunky/blob/master/README.md,JavaScript,Monkey Chunky AppMonkey Chunky App is designed to help early stage readers practice reading words. The user can enter any word and the app will break it down into phonic chunks. User can tap on the phonic chunks to hear the corresponding sound of the phones that make the word.
60,learn-co-curriculum/phase-1-scope-lab,https://github.com/learn-co-curriculum/phase-1-scope-lab/blob/master/README.md,JavaScript,"Scope LabLearning GoalsUnderstand how functions determine scope in JavaScriptIntroductionScuber's drivers are beginning to take down some notes about their customers.Use your knowledge of scope to access and change some of these variables.InstructionsA word of warning. In this lab, you will practice doing some bad things. Forexample, we'll ask you to declare variables in global scope, and write functionsthat break down. You'll also need to use var to declare all variables exceptwhen specifically instructed otherwise. We do this because, by testing thelimits and exposing the underbelly of a language, you can better understand itand know what to avoid in the future.Fork and clone this lab into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Ok, these are your tasks:customerName: Declare a variable in global scope called customerName usingthe var keyword and assign it the value 'bob'.upperCaseCustomerName(): Write a function that accesses that globalcustomerName variable, and uppercases it.setBestCustomer(): Write a function that when called, declares a variablecalled bestCustomer in global scope and assigns it to be 'not bob'. (PoorBob.) Also, poor us, declaring a global variable from inside a function isone of those things we would never want to do normally, but is good for us toexplore right now.overwriteBestCustomer(): See the consequences of declaring a variable inglobal scope, by writing a new function called overwriteBestCustomer() thatchanges that bestCustomer variable to 'maybe bob'.leastFavoriteCustomer and changeLeastFavoriteCustomer(): Now declare aconstant (using the const keyword) in global scope calledleastFavoriteCustomer; be sure to assign it some initial value. Finally,write a function called changeLeastFavoriteCustomer() that attempts tochange that constant - notice what JavaScript does when you try to change theconstant.When you're done, remember to commit and push your changes up to GitHub, thensubmit your work to Canvas using CodeGrade."
61,ironhack-labs/lab-mongoose-recipes,https://github.com/ironhack-labs/lab-mongoose-recipes/blob/master/README.md,JavaScript,"Mongoose RecipesIntroductionWe've learned how to use Mongoose to create Schemas and then interact with our MongoDB database. In the following exercise, we will practice how to implement this by creating awesome recipes.RequirementsFork this repoClone this repoSubmissionUpon completion, run the following commands:git add .git commit -m \""Completed lab\""git push origin masterCreate Pull Request so your TAs can check up your work.InstructionsIteration 0: Initial setupTo run the application, the first thing you have to do is install all of its dependencies. Run the following command:npm installIteration 1 - Recipe SchemaCreate a Recipe model inside of the file /models/Recipe.model.js. The schema should have the following fields:title - Type String. It should be required and unique.level - Type String. Can be one of the following values: Easy Peasy - Amateur Chef - UltraPro Chef (remember the enum validator 😉).ingredients - Type Array of Strings (represented as [ String ]).cuisine - Type String. Should be required.dishType - Type String. Possible values: breakfast, main_course, soup, snack, drink, dessert or other.image - Type String. Default value: \""https://images.media-allrecipes.com/images/75131.jpg\"".duration - Type Number. The minimum value should be 0.creator - Type String.created - Type Date. By default, today.Iteration 2 - Create a recipeIn the index.js, we first connect to the database using mongoose.connect() and following the connection we call the method Recipe.deleteMany() to remove any existing documents from the recipes collection:// ...mongoose  .connect(MONGODB_URI)  .then(x => {    console.log(`Connected to the database: \""${x.connection.name}\""`);    // Before adding any recipes to the database, let's remove all existing ones    return Recipe.deleteMany();  })// ...Then, you should add a new recipe document to the database by calling the Model.create method and passing it the recipe details as an object. After inserting the recipe, you should console.log the title of the recipe.You can use MongoDB Compass to double-check that everything is working as intended.To run your code, remember you should use:node index.jsIteration 3 - Insert multiple recipesWe are importing an array of recipes from the data.json file. Using the Model.insertMany method, you should add the entire array to the database. After inserting the documents, print the title of each recipe to the console.Tip: Follow the same tip as in the previous step.Iteration 4 - Update recipeNow you should have six different recipes in the database, but there was a mistake in one of them. The Rigatoni alla Genovese does not take that long. You should update the duration field and set it to 100. You might want to use the Model.findOneAndUpdate method. After updating it, print a success message!Iteration 5 - Remove a recipeOh oh! The Carrot Cake is no longer available, so we need to remove it from the database. Using the Model.deleteOne method, remove that recipe from the database and display a success message after doing it!Iteration 6 - Close the DatabaseAs the last step, you need to close the database. Otherwise, the connection will stay open until the Node.js process dies. Pay attention to the asynchronicity of the operation. You should only close the connection after everything is done! 😉Happy coding! ❤️FAQs  I am stuck and don't know how to solve the problem or where to start. What should I do?  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.  Back to top  How to use then() and catch() with Promises?  When working with Promises or a function that returns a promise, you can attach the .then() method to handle the resolved value and a catch() method to handle the possible rejection value.Here is an example of how to use .then() and .catch() to handle a simple promise:myPromise  .then((result) => {    console.log(result);  })  .catch((error) => {    console.log(error);  })Here is an example of using .then() and .catch() to handle a promise returned by a function/method:someAPI.getData()  .then((result) => {    console.log(result);  })  .catch((error) => {    console.log(error);  })  If you are trying to execute multiple promises in a sequence, you can do so by returning a promise from a .then() block. Example:someAPI.getData()    .then((result1) => {        console.log(result1        return someAPI.getData( // Return another pending promise    .then((result2) => { // Handle the returned promise        console.log(result2    })    .catch((error) => {        console.log(error    })The first line someAPI.getData() initiates an asynchronous operation, which returns a promise. The .then() method is then called on the promise to handle the resolved value.The first then() returns another promise with another call to someAPI.getData(), which allows to chain another then() function that handles the second resolved value, logging it to the console.  Back to top  How to use async function and await?  You create an asynchronous function by using the async keyword before the function definition.An async function allows you to use the await keyword inside the function body to wait for a promise to resolve.When using an async function to handle asynchronous code (e.g. API call) that may potentially throw an error, we have to add a try/catch block to be able to handle any potential errors.Syntaxasync function doSomething() {  try {    // Code that will be executed asynchronously    // that might throw an error  }  catch (error) {    // Handle the error  }}  Using await inside an async functionHere is an example of using await inside of an async function to await for a promise to resolve:async function getData() {  try {    let response = await fetch('https://api.github.com/search/repositories?q=js');    let data = await response.json();    console.log(data);  }  catch (error) {    // error handling  } }In the above example, the first await is used to wait for the promise returned by fetch() to resolve. The value of the resolved promise is then assigned to the variable response.The second await is used to parse the response as json object, and is used to wait for the promise returned by response.json(). The resolved value is then assigned to the variable data.The function uses the return keyword to return the data to allow consuming the value outside of the function.  An async function always returns a PromiseThe difference between a regular function and an async function is that the async function always returns a Promise.Once defined, you can invoke an async function just like a regular function and handle the Promise it returns using .then() and .catch() or await.  Here's an example of using then and catch to handle a Promise returned by an async function:async function greeting() {  // An `async` function always returns a promise  // This value will be returned as a Promise  return \""HELLO IRONHACKERS!\"";}greeting()  .then((result) => {    console.log(result);  })  .catch((error) => {    console.log(\""Error:\"", error);  })  Here's an example of handling the same async function but this time using await:async function greeting() {  // Async function always returns a promise  // This value will be returned as a Promise  return \""HELLO IRONHACKERS!\"";}// We need another wrapper `async` function so that we can use `await`async function wrapperFunction() {  try {    const result = await greeting()    console.log(result);  }  catch (error) {    console.log(\""Error:\"", error);  }}Note that we needed another wrapper async function to be able to use await.  Back to top  How to use try / catch block?  The try/catch  block is used to handle errors that occur during the execution of a program.The try block contains the code that might throw an error, and the catch block contains the code that will handle the error.Here is an example of using a try/catch block:try {  // Code that might throw an error} catch (error) {  // Handle the error}The try/catch block is typically used in async functions when handling asynchronous code that may potentially throw an error.Here is an example of using a try/catch block in an async function when handling a promise:async function doSomething() {  try {    // Code that might throw an error    const result = await someAsyncFunction();  }  catch (error) {    // Handle the error    console.error(error);  }  }In the above example, the try block contains an asynchronous operation that might throw an error:  await someAsyncFunction(). If an error is thrown, execution will automatically jump to the catch block.  Back to top  I got the error: \""Cannot find module\"" Node.js\"". How can I resolve it?  The error \""Cannot find module\"" in a Node.js application means that the module you are trying to import or use does not exist in your project or cannot be found by Node.js.There are a few things you can try to resolve the issue:Dependencies are not installed: Make sure that all dependencies are installed.To do this, run the command npm install in the root folder of your project.This will install all of the dependencies listed in the project's package.json file, and ensure that all of the modules that your Node'js application requires are available.Module is not installed: Make sure that the package you are trying to use is listed in the project's package.json and that it is installed.To do this, run the command npm install <package_name>, replacing the <package_name> with the name of the package.This will add the package to the list of dependencies in the package.json file, and install it in the project.Module is not imported: Make sure that you've imported the module/package correctly and that the require statement is spelled correctly and available in the correct place in your code.Wrong file path: If you are importing another file as a module, make sure that the file you are trying to require is located in the correct folder and that you are using the correct file path.Wrong module/package name: Check the spelling of the package name you are trying to import.  Back to top  I got the error \""Error: listen EADDRINUSE: Address already in use\"". How do I fix it?  This error means that the port is taken by another process that is still running on that port.To fix the issue, you need to kill the process using the port and then run the command again. Here's how to do it:On Mac/LinuxTo kill the process running on port 3000, run the following command in the terminal:sudo kill -9 $(lsof -t -i:3000)   Important: Replace the above example port 3000 with the port number of the process you are trying to kill.  On Windows1. Using the Task ManagerTo kill the running process on Windows using the Task Manager do the following:Open the Task Manager by pressing: Ctrl + Shift + EscFind the Node process you want to terminate.Right-click and select End Task  2. Using Command PromptTo kill the running process on Windows using the Command Prompt do the following:Open the windows Start menuSearch for CMD in the search barIn the search results, right-click on Command Prompt and select Run as administrator. This will open the Command Prompt terminal.In the Command Prompt terminal, run the following command to find the process ID:netstat -ano|findstr \""PID :3000\""If the process happens to be running on another port, simply replace 3000 with the number the port number the process is running on.This will return the process id (PID). You should then run the following command using the process id (PID) you got in the previous step to terminate the process:taskkill /PID 12345 /fImportant: Replace the above example PID 12345, with the process id (PID) you got in the previous step.  Back to top  I got the error \""Port is already in use\"". How do I fix it?  This error means that the port is taken by another process that is still running on that port.To fix the issue, you need to kill the process using the port and then run the command again. Here's how to do it:On Mac/LinuxTo kill the process running on port 3000, run the following command in the terminal:sudo kill -9 $(lsof -t -i:3000)   Important: Replace the above example port 3000 with the port number of the process you are trying to kill.  On Windows1. Using the Task ManagerTo kill the running process on Windows using the Task Manager do the following:Open the Task Manager by pressing: Ctrl + Shift + EscFind the Node process you want to terminate.Right-click and select End Task  2. Using Command PromptTo kill the running process on Windows using the Command Prompt do the following:Open the windows Start menuSearch for CMD in the search barIn the search results, right-click on Command Prompt and select Run as administrator. This will open the Command Prompt terminal.In the Command Prompt terminal, run the following command to find the process ID:netstat -ano|findstr \""PID :3000\""If the process happens to be running on another port, simply replace 3000 with the number the port number the process is running on.This will return the process id (PID). You should then run the following command using the process id (PID) you got in the previous step to terminate the process:taskkill /PID 12345 /fImportant: Replace the above example PID 12345, with the process id (PID) you got in the previous step.  Back to top  I got the error: \""Error: connect ECONNREFUSED ::1:27017\"". What should I do?  This error means that the Node.js application is unable to connect to a MongoDB instance running on the local (same) machine.There are a few things you should look at to troubleshoot this:Check the database connection string: Check that the connection string is correct. The database connection string should be in the format:mongodb://127.0.0.1:27017/databaseNameVerify that MongoDB is running on your machine: Check that MongoDB is running on your machine. If it is not running, restart the service according to the following instructions:On Mac:Check if MongoDB is running on your machine, by running the command:brew services listYou should see the service mongodb-community listed as started. If not, run the following command to start it:brew services start mongodb-community   On Ubuntu:You can start the mongod process by issuing the following command:sudo systemctl start mongodIf you receive an error similar to the following when starting mongod:Failed to start mongod.service: Unit mongod.service not found.Run the following command first:sudo systemctl daemon-reloadThen run the start command above again.   On Windows:To open the MongoDB process on Windows, you will need to do these steps:Go to your Program Files in your C: drive - the local diskIn Program Files go to the MongoDB folderInside the MongoDB folder, follow this path Server/4.4/bin. The version number on your system (4.4) may be slightly different for the newer installations.Double-click on the file named mongod.exe.  Check the image inside    Back to top  Why is my database empty even though I am able to connect?  It is normal for the database to be empty if you have not inserted any data into it. If you want to confirm that your connection to the database is working correctly, you can try inserting a simple document into a collection and then querying the collection or checking the database to see if the document was added.  Back to top  I get the error \""MongoDB is not running on the provided host and port\"" when trying to connect with MongoDB Compass. What should I do?  If you are trying to connect to a MongoDB instance running locally, you should first check that MongoDB is running on your machine. If it is not running, restart the service according to the following instructions:On Mac:Check if MongoDB is running on your machine, by running the command:brew services listYou should see the service mongodb-community listed as started. If not, run the following command to start it:brew services start mongodb-community   On Ubuntu:You can start the mongod process by issuing the following command:sudo systemctl start mongodIf you receive an error similar to the following when starting mongod:Failed to start mongod.service: Unit mongod.service not found.Run the following command first:sudo systemctl daemon-reloadThen run the start command above again.   On Windows:To open the MongoDB process on Windows, you will need to do these steps:Go to your Program Files in your C: drive - the local diskIn Program Files go to the MongoDB folderInside the MongoDB folder, follow this path Server/4.4/bin. The version number on your system (4.4) may be slightly different for the newer installations.Double-click on the file named mongod.exe.  Check the image inside    Back to top  How to create a Mongoose model?  The mongoose model serves as a blueprint for creating and managing documents within MongoDB collections. The mongoose model is an overlay on top of one MongoDB collection, that we use to query and interact with that database collection.Here is an example of creating a User model to manage documents in the users collection:// IMPORT MONGOOSEconst mongoose = require(\""mongoose\"");// CREATE A SCHEMA - defines the shape of the documentsconst userSchema = new mongoose.Schema({   firstName: String,  lastName: String });// CREATE THE MODELconst User = mongoose.model(\""User\"", schema);// EXPORT THE MODELmodule.exports = User;  In the above example, we created and exported a User model, so that it can be imported and used anywhere in the application for managing the database collection users.Let's break down the above example and the steps in creating a mongoose model:Import mongoose: The first step is to import the mongoose library.Create a schema:  The next step is to create a schema, which defines the shape of the documents that will be stored in the users collection. In the above example, the schema has two fields firstName and lastName which are both strings.Create the model: The last step is to create the model. This is doe using the method mongoose.model() , which takes two arguments: the name of the model, in this case 'User' and the schema it should use.Mongoose automatically pluralizes and converts to lowercase the provided model name and uses it as the name of the collection. In this case, the string 'User' is automatically converted into a collection name -> users.Export the model: After the model is created, it needs to be exported so it can be used in other parts of the application.  Back to top  How do I resolve the Mongoose error \""ValidationError: Path ... is required.\""?  This error occurs when you try to save a document to the database without a value for a field that is marked as required in the model.To fix this error, make sure that you are providing a value for all required fields when creating or updating a document. You can verify that you are providing the correct values by using the console.log to inspect the data before saving it to the database.  Back to top  I am getting an error: \""not defined\"". How do I fix it?  The \""ReferenceError: variable is not defined\"" error in JavaScript occurs when you try to access a variable or a function that has not been defined yet or is out of scope.To fix the issue, check that you have defined the variable or function that you are trying to use and double-check the spelling to make sure you are using the correct name.In case the variable or a function is defined in another file, make sure that the file has been imported or loaded correctly.  Back to top  When I try to run the app, I get an error \""command not found: nodemon\""  Make sure you have nodemon installed globally:npm install -g nodemonThis will install nodemon globally on your system, making it available to all of your projects.  Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first, and then clone your fork to your local machine to be able to push the changes.Note: You may want to make a copy of the code you have locally, to avoid losing it in the process.  Back to top"
62,learn-co-students/javascript-arrays-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-arrays-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Arrays LabObjectivesPractice writing arraysPractice manipulating arraysExplain how to manipulate arrays in a non-destructive wayIntroductionPreviously, we've learned about how arrays work. We know that push() pusheselements onto the ends of arrays, and pop() pops them off; similarly,unshift() adds elements to the beginnings of arrays, and shift() pulls themoff.Now it's time to put what we've learned to the test.What's with all this destruction?You might have noticed that our tests are looking for functions likedestructivelyAppendKitten() — what's up with that? (Rest assured, no kittenswill be harmed.)We want to distinguish between actions that mutate (\""change\"") their underlyingstructures (like pop(), push(), shift(), and unshift()) and thosefunctions that leave those structures untouched.In general, it's good practice to avoid mutating a program's state wheneverpossible. So we want to call out these methods as destructive, since mutatingstate means we don't always know what we're dealing with. Indeed, thesemutations mean that we need to refresh the test environment after every test tomake sure that we're not working with mutated data!By contrast, we also have methods like appendKitten(), which simply adds akitten to the end of the kittens array and returns the new array, leavingthe existing array untouched. This flow is preferable to mutating state becausewe have complete control over what's going into and coming out of the function.Try to use methods like slice() or concat() to return a newarray when keeping the original array intact.concat()slice()Think of it this way: you're making a peanut butter and jelly sandwich. Wouldyou rather work with a sandwich where someone had put an unspecified amount ofpeanut butter or jelly on the bread before you start making it (or, worse, wheresomeone had taken a bite out of the bread), or would you rather start fresh?Regardless of your feelings about stale peanut butter and jelly, we're going tostate unequivocally that fresh sandwiches are preferable — and fresh functions(ones that don't mutate shared state) are preferable, too.Run those tests!You'll notice that the first test asks for an array called kittens, set to aninitial value of [\""Milo\"", \""Otis\"", \""Garfield\""].In our test file, we're going to reset this array to your initial value afterevery test. Some of our tests manipulate arrays in place, and we want to be surethat we can get back to a blank slate between tests.Why is a blank slate important? We want our programs to be predictable: thismakes them more robust, easier to maintain, and less prone to bugs. One way toachieve predictability is by isolating our tests from one another, meaning thatno test should depend on the outcome or process of any other test. That way,tests can run in any order and test known inputs and environments, rather thandepending on other tests running first and modifying the entire environment.Remember the workflow:Run learn test.Read the errors; vocalize what they're asking you to do.Write code, save, and repeat steps 1 and 2 often until a test passes.Repeat as needed for further tests.Run learn submit when finished!Normally, resetting the array and the array itself would be decoupled — thatis, independent. But because of the nature of this lab, we need to be a bitprescriptive and give you some initial values so that we can focus on whatreally matters — understanding how to manipulate arrays in JavaScript.Resourcesnpm"
63,learn-co-curriculum/phase-1-domcontentloaded,https://github.com/learn-co-curriculum/phase-1-domcontentloaded/blob/master/README.md,JavaScript,"The JavaScript DOMContentLoaded EventLearning GoalsUnderstand why DOMContentLoaded is importantSet up an event on DOMContentLoadedIntroductionAn important part of working with JavaScript is ensuring that your code runs atthe right time. Every now and then, you may have to add some extra code toensure your code doesn't run before the page is ready. Many factors go intodetermining the \""right time,\"" but there are two events that represent twoparticularly important milestones in terms of page load:The DOMContentLoaded event fires when your page's DOM is fully parsed fromthe underlying htmlThe load event fires when a resource and all its dependent resources(including CSS and JavaScript) have finished loadingIn this lesson, we'll be focusing on DOMContentLoaded.Why is DOMContentLoaded Important?The DOMContentLoaded event is the browser's built-in way to indicate when apage's html is loaded into the DOM. It isn't possible to manipulate HTMLelements that haven't rendered yet, so trying to manipulate the DOM before thepage fully loads can potentially lead to problems.We need to make sure to wait until after the DOMContentLoaded event istriggered to safely execute our code. By creating an event listener, we can keepour code from immediately firing when index.js is loaded.Set Up an Event Listener for DOMContentLoadedAs always, addEventListener takes a String with the name of theevent and a callback function.document.addEventListener(\""DOMContentLoaded\"", function() {  console.log(\""The DOM has loaded\"");});If you put the above code in index.js, 'The DOM has loaded' will not be loggedimmediately. In fact, you can confirm this yourself by putting a secondconsole.log() outside of the event listener callback:document.addEventListener(\""DOMContentLoaded\"", function() {  console.log(\""The DOM has loaded\"");});console.log(  \""This console.log() fires when index.js loads - before DOMContentLoaded is triggered\"");InstructionsCode your solution in index.js. First, set up a DOMContentLoaded eventlistener to detect when the HTML page has loaded and the document is ready to bemanipulated. Use the event's callback function to target the paragraph elementwith id=\""text\"" and replace the text with \""This is really cool!\""Note: Using the innerText property to modify DOM elementcontent will not work for this lab. Use textContent orinnerHTML instead.Test your event in the browser to confirm that it is working.DOMContentLoaded Does Not Wait For Stylesheets and Images to LoadIt is important to note that the DOMContentLoaded event fires once theinitial HTML document finishes loading, but does not wait for CSS stylesheets orimages to load. In situations where you need everything to completely load,use the load event instead.While both will work, it is often the case that we only need the HTML content tofully load in order to execute our JavaScript. Since images can take some timeto load, using the load event means visitors of a webpage may see your webpagein its original state for a couple of seconds before any JavaScript fires andupdates the DOM.For a comparison of the difference between DOMContentLoaded and loadedevents, check out this example.ConclusionJavaScript provides us the powerful ability to update webpage content withoutrefreshing. We can, for instance, have a page with some basic HTML structure anduse JavaScript to fill in the content, enabling the possibility of dynamicwebpages.This sort of action, however, will only work if the HTML content is loaded onthe page before the JavaScript is executed. The DOMContentLoaded event ensuresthat our JavaScript code is being executed immediately after the HTML isfinished loading.AddendumThe DOMContentLoaded event is now a widely accepted standard. Modern webdevelopment, however, provides us with additional choices for setting up when wewant our JavaScript to execute. For example, HTML5 now has a deferattribute for use in <script> tags:<script src=\""index.js\"" defer></script>This functions in a similar way to DOMContentLoaded: the JavaScript codestored in index.js will be loaded up but won't execute until the HTML pagecompletely loads.ResourcesDOMContentLoadedRunning Your Code at the Right Time"
64,parallax/jsPDF,https://github.com/parallax/jsPDF/blob/master/HOTFIX_README.md,JavaScript,"HotfixesWe sometimes bake-in solutions (A.K.A. hotfixes) to solve issues for specific use cases.When we deem a hotfix will not break existing code,will make it default behaviour and mark the hotfix as accepted,At that point the define can be removed.To enable a hotfix, pass the hotfixes option to the jsPDF constructor:new jsPDF({  hotfixes: [\""px_scaling\""]});Active Hotfixespx_scalingApplies TojsPDF CoreDescriptionWhen supplying 'px' as the unit for the PDF, the internal scaling factor was being miscalculated making drawn componentslarger than they should be. Enabling this hotfix will correct this scaling calculation and items will be drawn to thecorrect scale.To EnableTo enable this hotfix, supply a 'hotfixes' array to the options object in the jsPDF constructor function, and add thestring 'px_scaling' to this array.#Accepted Hotfixesscale_textApplies Tocontext2d pluginAffectsDrawing and Filling Text when a scale transformation is active.DescriptionjsPDF currently has no way to draw scaled text.This hotfix scales the current font size by the x-axis scale factor.fill_closeApplies Tocontext2d pluginAffectsFilling pathsDescriptionIn certain cases, closing a fill would result in a path resolving to an incorrect point.The was most likely fixed when we refactored matrix logic. Enabling this hotfix will ignore a most-likely unneeded workaround."
65,tangly1024/NotionNext,https://github.com/tangly1024/NotionNext/blob/main/README.md,JavaScript,"NotionNext                                中文文档 | README in English一个使用 NextJS + Notion API 实现的，部署在 Vercel 上的静态博客系统。为Notion和所有创作者设计。预览效果在线演示：https://preview.tangly1024.com/ ，项目支持多主题切换，没找到喜欢的主题？贡献一个吧~NextMediumHexoFukasawa 预览NEXT 预览MEDIUM 预览HEXO 预览FUKASAWA我要如何开始？只需几分钟即可搭建您的个人站点：部署教程 (支持多方案)配置手册 - (自定义插件)二次开发 - (开发手册)更新指南 - (升级您的代码)版本汇总 - (查询变动功能)致谢感谢Craig Hart发起的Nobelium项目  Craig Hart贡献者      tangly1024🎫 🔧 🐛         uWayLu🔧 🐛        txs🔧 🐛        yuzhanglong🔧 🐛         Hscpro🔧 🐛         JensonMiao🔧 🐛         haixin1225🔧 🐛        mouyase🔧 🐛        qfdk🔧 🐛        ifyz🔧 🐛        Liqun Zhao🔧 🐛        Ylarod🔧 🐛        Etherrreal.🔧 🐛      Joshua Astray🔧 🐛        Vixcity🔧 🐛        ipatpat🔧 🐛        xloong🔧 🐛        expoli🔧 🐛        bUBBLE🔧 🐛        派了个萌 🔧 🐛        Simon Shi🔧 🐛        S.Y. Lee🔧 🐛        fighting-buf🔧 🐛        cliouo🔧 🐛        Sude Akgün🔧 🐛        Ray🔧 🐛        Hongzzz🔧 🐛        RedhairHambagu🔧 🐛        Allen🔧 🐛        zdf🔧 🐛        emengweb🔧 🐛        kitety🔧 🐛        Jiaxin Peng🔧 🐛  引用技术框架: Next.js样式: Tailwind CSS渲染: React-notion-x评论: Twikoo, Giscus, Gitalk, Cusdis, Utterances图标: FontawesomeLicenseThe MIT License."
66,eligrey/FileSaver.js,https://github.com/eligrey/FileSaver.js/blob/master/README.md,JavaScript,"If you need to save really large files bigger than the blob's size limitation or don't haveenough RAM, then have a look at the more advanced StreamSaver.jsthat can save data directly to the hard drive asynchronously with the power of the new streams API. That will havesupport for progress, cancelation and knowing when it's done writingFileSaver.jsFileSaver.js is the solution to saving files on the client-side, and is perfect forweb apps that generates files on the client, However if the file is coming from theserver we recommend you to first try to use Content-Disposition attachment response header as it has more cross-browser compatiblity.Looking for canvas.toBlob() for saving canvases? Check outcanvas-toBlob.js for a cross-browser implementation.Supported BrowsersBrowserConstructs asFilenamesMax Blob SizeDependenciesFirefox 20+BlobYes800 MiBNoneFirefox < 20data: URINon/aBlob.jsChromeBlobYes2GBNoneChrome for AndroidBlobYesRAM/5NoneEdgeBlobYes?NoneIE 10+BlobYes600 MiBNoneOpera 15+BlobYes500 MiBNoneOpera < 15data: URINon/aBlob.jsSafari 6.1+*BlobNo?NoneSafari < 6data: URINon/aBlob.jsSafari 10.1+  Blob        Yes        n/a          NoneFeature detection is possible:try {    var isFileSaverSupported = !!new Blob;} catch (e) {}IE < 10It is possible to save text files in IE < 10 without Flash-based polyfills.See ChenWenBrian and koffsyrup's saveTextAs() for more details.Safari 6.1+Blobs may be opened instead of saved sometimes—you may have to direct your Safari users to manuallypress ⌘+S to save the file after it is opened. Using the application/octet-stream MIME type to force downloads can cause issues in Safari.iOSsaveAs must be run within a user interaction event such as onTouchDown or onClick; setTimeout will prevent saveAs from triggering. Due to restrictions in iOS saveAs opens in a new window instead of downloading, if you want this fixed please tell Apple how this WebKit bug is affecting you.SyntaxImport saveAs() from file-saverimport { saveAs } from 'file-saver';FileSaver saveAs(Blob/File/Url, optional DOMString filename, optional Object { autoBom })Pass { autoBom: true } if you want FileSaver.js to automatically provide Unicode text encoding hints (see: byte order mark). Note that this is only done if your blob type has charset=utf-8 set.ExamplesSaving text using require()var FileSaver = require('file-saver');var blob = new Blob([\""Hello, world!\""], {type: \""text/plain;charset=utf-8\""});FileSaver.saveAs(blob, \""hello world.txt\"");Saving textvar blob = new Blob([\""Hello, world!\""], {type: \""text/plain;charset=utf-8\""});FileSaver.saveAs(blob, \""hello world.txt\"");Saving URLsFileSaver.saveAs(\""https://httpbin.org/image\"", \""image.jpg\"");Using URLs within the same origin will just use a[download].Otherwise, it will first check if it supports cors header with a synchronous head request.If it does, it will download the data and save using blob URLs.If not, it will try to download it using a[download].The standard W3C File API Blob interface is not available in all browsers.Blob.js is a cross-browser Blob implementation that solves this.Saving a canvasvar canvas = document.getElementById(\""my-canvas\"");canvas.toBlob(function(blob) {    saveAs(blob, \""pretty image.png\"");});Note: The standard HTML5 canvas.toBlob() method is not available in all browsers.canvas-toBlob.js is a cross-browser canvas.toBlob() that polyfills this.Saving FileYou can save a File constructor without specifying a filename. If thefile itself already contains a name, there is a hand full of ways to get a fileinstance (from storage, file input, new constructor, clipboard event).If you still want to change the name, then you can change it in the 2nd argument.// Note: Ie and Edge don't support the new File constructor,// so it's better to construct blobs and use saveAs(blob, filename)var file = new File([\""Hello, world!\""], \""hello world.txt\"", {type: \""text/plain;charset=utf-8\""});FileSaver.saveAs(file);Installation# Basic Node.JS installationnpm install file-saver --savebower install file-saverAdditionally, TypeScript definitions can be installed via:# Additional typescript definitionsnpm install @types/file-saver --save-dev"
67,gulpjs/gulp,https://github.com/gulpjs/gulp/blob/master/README.md,JavaScript,"          The streaming build system        What is gulp?Automation - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.Platform-agnostic - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.Strong Ecosystem - Use npm modules to do anything you want + over 3000 curated plugins for streaming file transformations.Simple - By providing only a minimal API surface, gulp is easy to learn and simple to use.What's new in 4.0?!The task system was rewritten from the ground-up, allowing task composition using series() and parallel() methods.The watcher was updated, now using chokidar (no more need for gulp-watch!), with feature parity to our task system.First-class support was added for incremental builds using lastRun().A symlink() method was exposed to create symlinks instead of copying files.Built-in support for sourcemaps was added - the gulp-sourcemaps plugin is no longer necessary!Task registration of exported functions - using node or ES exports - is now recommended.Custom registries were designed, allowing for shared tasks or augmented functionality.Stream implementations were improved, allowing for better conditional and phased builds.gulp for enterpriseAvailable as part of the Tidelift SubscriptionThe maintainers of gulp and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.InstallationFollow our Quick Start guide.RoadmapFind out about all our work-in-progress and outstanding issues at https://github.com/orgs/gulpjs/projects.DocumentationCheck out the Getting Started guide and API docs on our website!Excuse our dust! All other docs will be behind until we get everything updated. Please open an issue if something isn't working.Sample gulpfile.jsThis file will give you a taste of what gulp does.var gulp = require('gulp');var less = require('gulp-less');var babel = require('gulp-babel');var concat = require('gulp-concat');var uglify = require('gulp-uglify');var rename = require('gulp-rename');var cleanCSS = require('gulp-clean-css');var del = require('del');var paths = {  styles: {    src: 'src/styles/**/*.less',    dest: 'assets/styles/'  },  scripts: {    src: 'src/scripts/**/*.js',    dest: 'assets/scripts/'  }};/* Not all tasks need to use streams, a gulpfile is just another node program * and you can use all packages available on npm, but it must return either a * Promise, a Stream or take a callback and call it */function clean() {  // You can use multiple globbing patterns as you would with `gulp.src`,  // for example if you are using del 2.0 or above, return its promise  return del([ 'assets' ]);}/* * Define our tasks using plain functions */function styles() {  return gulp.src(paths.styles.src)    .pipe(less())    .pipe(cleanCSS())    // pass in options to the stream    .pipe(rename({      basename: 'main',      suffix: '.min'    }))    .pipe(gulp.dest(paths.styles.dest));}function scripts() {  return gulp.src(paths.scripts.src, { sourcemaps: true })    .pipe(babel())    .pipe(uglify())    .pipe(concat('main.min.js'))    .pipe(gulp.dest(paths.scripts.dest));}function watch() {  gulp.watch(paths.scripts.src, scripts);  gulp.watch(paths.styles.src, styles);}/* * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel` */var build = gulp.series(clean, gulp.parallel(styles, scripts));/* * You can use CommonJS `exports` module notation to declare tasks */exports.clean = clean;exports.styles = styles;exports.scripts = scripts;exports.watch = watch;exports.build = build;/* * Define default task that can be called by just running `gulp` from cli */exports.default = build;Use latest JavaScript version in your gulpfileMost new versions of node support most features that Babel provides, except the import/export syntax. When only that syntax is desired, rename to gulpfile.esm.js, install the esm module, and skip the Babel portion below.Node already supports a lot of ES2015+ features, but to avoid compatibility problems we suggest to install Babel and rename your gulpfile.js to gulpfile.babel.js.npm install --save-dev @babel/register @babel/core @babel/preset-envThen create a .babelrc file with the preset configuration.{  \""presets\"": [ \""@babel/preset-env\"" ]}And here's the same sample from above written in ES2015+.import gulp from 'gulp';import less from 'gulp-less';import babel from 'gulp-babel';import concat from 'gulp-concat';import uglify from 'gulp-uglify';import rename from 'gulp-rename';import cleanCSS from 'gulp-clean-css';import del from 'del';const paths = {  styles: {    src: 'src/styles/**/*.less',    dest: 'assets/styles/'  },  scripts: {    src: 'src/scripts/**/*.js',    dest: 'assets/scripts/'  }};/* * For small tasks you can export arrow functions */export const clean = () => del([ 'assets' ]);/* * You can also declare named functions and export them as tasks */export function styles() {  return gulp.src(paths.styles.src)    .pipe(less())    .pipe(cleanCSS())    // pass in options to the stream    .pipe(rename({      basename: 'main',      suffix: '.min'    }))    .pipe(gulp.dest(paths.styles.dest));}export function scripts() {  return gulp.src(paths.scripts.src, { sourcemaps: true })    .pipe(babel())    .pipe(uglify())    .pipe(concat('main.min.js'))    .pipe(gulp.dest(paths.scripts.dest));} /*  * You could even use `export as` to rename exported tasks  */function watchFiles() {  gulp.watch(paths.scripts.src, scripts);  gulp.watch(paths.styles.src, styles);}export { watchFiles as watch };const build = gulp.series(clean, gulp.parallel(styles, scripts));/* * Export a default task */export default build;Incremental BuildsYou can filter out unchanged files between runs of a task usingthe gulp.src function's since option and gulp.lastRun:const paths = {  ...  images: {    src: 'src/images/**/*.{jpg,jpeg,png}',    dest: 'build/img/'  }}function images() {  return gulp.src(paths.images.src, {since: gulp.lastRun(images)})    .pipe(imagemin())    .pipe(gulp.dest(paths.images.dest));}function watch() {  gulp.watch(paths.images.src, images);}Task run times are saved in memory and are lost when gulp exits. It will onlysave time during the watch task when running the images taskfor a second time.Want to contribute?Anyone can help make this project better - check out our Contributing guide!BackersSupport us with a monthly donation and help us continue our activities.SponsorsBecome a sponsor to get your logo on our README on Github."
68,lyfe00011/whatsapp-bot,https://github.com/lyfe00011/whatsapp-bot/blob/master/README.md,JavaScript,"WhatsApp User BotThis is a Userbot based on WhatsAsena written by Yusuf UstaWhat is WhatsAsena?WhatsAsena, is a WhatsApp bot written by Yusuf Usta. Does not log into your account It is written on WhatsApp Web API.SetupClick SCAN and scan QR through Whatsapp Linked Devices Option in Your whatsapp App.You will get a long text that needs after 4th step (ASENA_SESSION).If You don't have a account in Heroku, Create a account.Click FORKNow DEPLOYPluginsActiveGroup commands✔️Kick✔️Tag✔️Add✔️Warn✔️Vote✔️Invite✔️Revoke✔️Demote✔️Promote✔️Banbye✔️Goodbye✔️Welcome✔️Schedule✔️Auto-mute✔️Mute/Unmute✔️Common/DiffActiveDowloader commands✔️Saavn✔️Upload✔️Yta/Ytv✔️Unsplash✔️Mediafire✔️Pinterest✔️SoundCloud✔️TikTok video✔️Twitter video✔️Facebook video✔️Instagram story✔️YouTube audio/video✔️Instagram video/imageActiveMisc CommandsUsage✔️QrReads QR code✔️SsScreenshot of web✔️UrlGets url of media✔️TrtTranslates messages✔️Mp3Video to mp3✔️TxtImage to text✔️AfkAway from keyboard✔️CutCuts mp3✔️PdfImages to pdf✔️Mp4Sticker to video✔️TakeChange sticker pack info✔️WikiWikipedia search✔️MemeText on photos✔️TrimTrims video✔️FindIt finds song✔️AttpColoured text sticker✔️AliveTo check alive or not✔️WhoisGroup or individual data✔️MovieShows Movie Info✔️MergeIt merge a videos✔️VoiceVoice to mp3✔️TopdfDocumnet ot pdf✔️EmojiEmoji to sticker✔️LydiaAuto AI chat✔️StickerPhoto/video to sticker✔️ReverseReverse audio/video✔️UnvoiceAudio to voices✔️WastedWasted logo✔️TriggedTriggered effect✔️ForwardForwarding msg using jid✔️CompressCompresses video✔️GoogleGoogle reverse image search✔️UploadDownload from Url✔️WeatherShows weather✔️GetjidsGets jids of chats✔️RemovebgRemoves background✔️SetaboutSets bio✔️SetstatusSets status✔️Pitch/low/bassAudio effects✔️Histo/vector/avesAudio to video✔️Block/unblockBlocks/unblocks members✔️BroadcastCustom Broadcasting MessagesThanks ToYusuf Usta for WhatsAsena@adiwajshing for Baileys"
69,learn-co-students/javascript-logging-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-logging-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('mocha-jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll seedescribe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining to tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we got back to index.js and write something like,console.log(\""I would be a logger.\"") // get it?we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
70,progedu/fibonacci,https://github.com/learn-co-students/javascript-logging-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('mocha-jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll seedescribe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining to tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we got back to index.js and write something like,console.log(\""I would be a logger.\"") // get it?we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
71,learn-co-curriculum/phase-1-sending-data-with-fetch,https://github.com/learn-co-curriculum/phase-1-sending-data-with-fetch/blob/master/README.md,JavaScript,"Sending Data with FetchLearning GoalsUse fetch() to send data to a remote hostHandle the response from a successful requestHandle errors from an unsuccessful requestIntroductionIf you think about it, fetch() is a little browser in your browser. You tellfetch() to go to a URL by passing it an argument, e.g.fetch(\""https://flatironschool.com\""), and it makes a network request. You chaincalls to fetch() with then(). Each then() call takes a callback functionas its argument. Based on actions in the callback function, we can display orupdate content in the DOM.This is a lot like browsing the web: you change the URL in the URL bar, or youfollow a link, and those actions tell the browser to go somewhere else and getthe data. A technical way to describe that is: \""The browser implements an HTTPGET to retrieve the content at a URL.\"" It's also 100% technically correct tosay \""fetch() uses an HTTP GET to retrieve the content specified by a URL.\""The browser also provides a helpful model for understanding what sending datafrom the browser looks like. We know this as an HTML form. Technicallyspeaking, HTML forms \""use an HTTP POST to send content gathered in <input>elements to a specified URL.\"" It's also 100% technically correct to say\""fetch() uses an HTTP POST to send content gathered in a JavaScriptObject.\""HTML forms are still widely used, but with fetch(), we have more detailedcontrol of the request. Using fetch(), we can actually override the normalbehavior of an HTML form, capture any user input, package it up with theappropriate request information and send it out.Our focus in this lesson will be learning how to send data using fetch().Using JSON Server to Mimic a Backend DatabaseTo start up JSON Server, run json-server --watch db.json in your terminal.Note: Running this command will instruct json-server to use a db.jsonfile in your terminal's current directory, so make sure to run this command fromthe same directory as this lab.Once the server is running, you'll see a list of available resource paths in theterminal:Resources  http://localhost:3000/dogs  http://localhost:3000/cats  http://localhost:3000/users  http://localhost:3000/robotsThese endpoints each provide different sets of data. Since it is mimicking aRESTful API, sending a request to 'http://localhost:3000/dogs' will return allrecords in the database for dogs, while 'http://localhost:3000/dogs/1' willreturn the dog with the id of 1.Some example data is already present, stored in db.json. If the JSON server isrunning, you can also visit any of the above resources in a browser to see thedata.The tests in this lab do not need JSON Server to be running, but if you wouldlike to run tests while also running the server, open a second tab in yourterminal.Note: For users of the Live Server VSCode extension, if thepage is reloading when you initiate a fetch request, you'll need toset up some additional configuration for Live Server to play nicely withjson-server. Follow the steps in this gist (you'llonly need to do this once), then come back to this lesson.Analyze Data Sent in an HTML FormLet's take a look at an HTML <form> (see sample_form.html in this repo):<form action=\""http://localhost:3000/dogs\"" method=\""POST\"">  <label> Dog Name: <input type=\""text\"" name=\""dogName\"" id=\""dogName\"" /></label  ><br />  <label> Dog Breed: <input type=\""text\"" name=\""dogBreed\"" id=\""dogBreed\"" /></label  ><br />  <input type=\""submit\"" id=\""submit\"" value=\""Submit\"" /></form>When we use the <form> element's default POST behavior in combination with abackend server, the key components for sending the submitted data to the serverare:The destination URL as defined in the action attribute of the <form> tagThe HTTP verb to use as defined in the method attribute of the <form> tagThe key / value data obtained from the inputs in the fields dogName anddogBreedWe should expect that our \""mini-browser,\"" fetch(), will need those same bitsof information in order to send a Post request to the server.Note: with JSON Server and our HTML form, we already have what we need tosubmit our form the conventional way, without using JavaScript. To try thisout, make sure the JSON server is running and open sample_form.html in thebrowser. If you enter a dog name and breed in the input fields and click\""Submit,\"" your information should successfully POST to the JSON serverdatabase, db.json.Construct a POST Request Using fetch()Sending a POST request with fetch() is more complicated than what we've seenup to this point. It still takes a String representing the destination URL asthe first argument, as always. But as we will see below, fetch() can also takea JavaScript Object as the second argument. This Object can be givencertain properties that can be used to change fetch()'s default behavior.fetch(destinationURL, configurationObject);The configurationObject contains three core components that are needed forstandard POST requests: the HTTP verb, the headers, and the body.Add the HTTP VerbSo far, comparing to an HTML form, we've only got the destination URL('http://localhost:3000/dogs' in this case). The next thing we need to includeis the HTTP verb. By default, the verb is GET, which is why we can send simpleGET requests with only a destination URL. To tell fetch() that this is aPOST request, we need to add a method property to our configurationObject:const configurationObject = {  method: \""POST\"",};Add HeadersThe second piece we need to include is some metadata about the actual data wewant to send. This metadata is in the form of headers. Headers aresent just ahead of the actual data payload of our POST request. They containinformation about the data being sent.One very common header is \""Content-Type\"". \""Content-Type\"" isused to indicate what format the data being sent is in. With JavaScript'sfetch(), JSON is the most common format we will be using. We want tomake sure that the destination of our POST request knows this. To do this, we'llinclude the \""Content-Type\"" header:const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",  },};Each individual header is stored as a key/value pair inside an object. Thisobject is assigned as the value of the headers property as seen above.When sending data, the server at the destination URL will send back a response,often including data that the sender of the fetch() request might find useful.Just like \""Content-Type\"" tells the destination server what type of data we'resending, it is also good practice to tell the server what data format weaccept in return.To do this, we add a second header, \""Accept\"", and assign it to\""application/json\"" as well:const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },};There are many other headers available for particular uses. Some areused to send credentials or user authentication keys. Others are used to sendcookies containing user info. \""Content-Type\"" and \""Accept\"" are two that we'llsee the most throughout the remainder of this course.A server that expects requests with specific headers may reject requests thatdon't include those headers.Add DataWe now have the destination URL, our HTTP verb, and headers that includeinformation about the data we're sending. The last thing to add is the dataitself.Data being sent in fetch() must be stored in the body of theconfigurationObject:const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\""  },  body: /* Your data goes here */};There is a catch here to be aware of — when data is exchanged between a client(your browser, for instance), and a server, the data is sent as text. Whateverdata we're assigning to the body of our request needs to be a string.Use JSON.stringify() to Convert Objects to StringsWhen sending data using fetch(), we often send multiple pieces of informationin one request. In our code, we often organize this information usingobjects. Consider the following object, for instance:{  dogName: \""Byron\"",  dogBreed: \""Poodle\""}This object contains two related pieces of information, a dog's name and breed.Let's say we want to send the data in this object to a server. We can't simplyassign it to body, as it isn't a string. Instead, we convert it to JSON.The object above, converted to JSON would look like this:\""{\""dogName\"":\""Byron\"",\""dogBreed\"":\""Poodle\""}\""Here, using JSON has enabled us to preserve the key/value pairs of our objectwithin the string. When sent to a server, the server will be able to take thisstring and convert it back into key/value pairs in whatever language the serveris written in.Fortunately, JavaScript comes with a built-in method for converting objects tostrings, JSON.stringify(). By passing an object in, JSON.stringify() willreturn a string, formatted and ready to send in our request:const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify({    dogName: \""Byron\"",    dogBreed: \""Poodle\"",  }),};Send the POST RequestWe've got all the pieces we need. Putting it all together, we get:const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify({    dogName: \""Byron\"",    dogBreed: \""Poodle\"",  }),};fetch(\""http://localhost:3000/dogs\"", configurationObject);With the JSON server running, if you open up sample_form.html or index.html,you can test out the code above in the console. Try it and take a look indb.json: you should see that Byron the Poodle has been successfully persistedto our database.We can make our code a bit more general by splitting out the body of our requestinto a variable:const formData = {  dogName: \""Byron\"",  dogBreed: \""Poodle\"",};const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify(formData),};fetch(\""http://localhost:3000/dogs\"", configurationObject);Using the formData and configurationObject variables helps make our codemore readable and flexible, but, of course, we could instead just pass ananonymous object as the second argument to fetch():fetch(\""http://localhost:3000/dogs\"", {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify({    dogName: \""Byron\"",    dogBreed: \""Poodle\"",  }),});All three approaches yield the same results!Note: As a security precaution, most modern websites block the ability touse fetch() in console while on their website, so if you are testing out codein the browser, make sure to be on a page like index.html orsample_form.html.Handling What Happens AfterJust like when we use fetch() to send GET requests, we have to handleresponses to fetch(). As mentioned before, servers will send aResponse that might include useful information. To access thisinformation, we use a series of calls to then() which aregiven function callbacks.Building on the previous implementation we might write the following:const formData = {  dogName: \""Byron\"",  dogBreed: \""Poodle\"",};const configurationObject = {  method: \""POST\"",  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify(formData),};fetch(\""http://localhost:3000/dogs\"", configurationObject)  .then(function (response) {    return response.json();  })  .then(function (object) {    console.log(object);  });Notice that the first then() is passed a callback function that takes inresponse as an argument. This is a Response object, representingwhat the destination server sent back to us. This object has a built-in method,json(), that converts the body of the response from JSON to a plain oldJavaScript object. The result of json() is returned and made available in thesecond then(). In this example, whatever response.json() returns will belogged in console.log(object).Let's go ahead and send the example above to our JSON server in the console;once the request is successfully resolved, you should see the following log:{dogName: \""Byron\"", dogBreed: \""Poodle\"", id: 6} // Your ID value may be differentThe JSON server is sending back the data we sent, along with a new piece ofdata, an id, created by the server.When Things Go Wrong: Using catch()When something goes wrong in a fetch() request, JavaScript will look down thechain of .then() calls for something very similar to a then() called acatch() and, if it exists, execute it. This allows us to write code to \""handle\""the error. Say for instance, we forgot to add the HTTP verb to our POST request,and the fetch() defaults to GET. By including a catch() statement,JavaScript doesn't fail silently:const formData = {  dogName: \""Byron\"",  dogBreed: \""Poodle\"",};// method: \""POST\"" is missing from the object belowconst configurationObject = {  headers: {    \""Content-Type\"": \""application/json\"",    \""Accept\"": \""application/json\"",  },  body: JSON.stringify(formData),};fetch(\""http://localhost:3000/dogs\"", configurationObject)  .then(function (response) {    return response.json();  })  .then(function (object) {    console.log(object);  })  .catch(function (error) {    alert(\""Bad things! Ragnarők!\"");    console.log(error.message);  });If you try the code above in the console from index.html orsample_form.html, you should receive an alert window pop-up and a loggedmessage:Failed to execute 'fetch' on 'Window': Request with GET/HEAD method cannot have body.While catch() may not stop all silent errors, it is useful to have as a wayto gracefully handle unexpected results. We can use it, for instance, to displaya message in the DOM for a user, rather than leave them with nothing.ChallengeIt's time to practice writing your own POST request using fetch(). Inindex.js, write a function, submitData, that takes two strings as arguments,one representing a user's name and the other representing a user's email.The first two tests mirror the behavior of the JSON server. As you write yoursolution, keep the server running to test your code. Open index.html in abrowser to gain access to your submitData function in console.Note: The tests in this lab need access to the fetch() request insidesubmitData. In order to give them access, write your solution so thatsubmitData returns the fetch(). This will not change the behavior ofyour fetch().Test 1 - Send DataIn submitData, write a valid POST request to http://localhost:3000/usersusing fetch(). This request should include:The destination URLHeaders for 'Content-Type' and 'Accept', both set to 'application/json'A body with the name and email passed in as arguments to submitData. Theseshould be assigned to name and email keys within an object. This objectshould then be stringified.Test 2 - Handle the ResponseOn a successful POST request, expect the server to respond with aResponse object. Just like we saw earlier in the dog example, thebody property of this response will contain the data from the POST requestalong with a newly assigned id.Use a then() call to access the Response object and use its built-injson() method to parse the contents of the body property. Use a secondthen() to access this newly converted object. From this object, find the newid and append this value to the DOM.If JSON Server is running and index.html is open in the browser, you can testyour code in the console: calling submitData() in the console should cause anid number to appear on the page.Test 3 - Handle ErrorsFor this final test, after the two then() calls on your fetch() request,add a catch().When writing the callback function for your catch(), expect to receive anobject on error with a property, message, containing info about what wentwrong. Write code to append this message to the DOM when catch() is called.Test 4 - Return the Fetch ChainAn amazing feature of fetch() is that if you return it, other functionscan tack on their own then() and catch() calls. For this lab, you willneed to return the fetch() chain from our submitData function to ensure thatthe tests run correctly.ConclusionIn this lab, we learned how to use fetch requests to post data to a server.This allows us to override the default behavior of an HTML <form> element andhave greater control over the behavior of our form when it is submitted. It alsoenables us to improve our users' experience by rendering content without reloadingthe page.Specifically, we learned:In order to submit a POST request, we call fetch() and pass it twoarguments: the URL we're submitting the request to, and an object containingdetails about the request.This 'configuration' object needs to contain three properties: the method(\""POST\"" in this case), headers that provide some information about ourrequest, and the body of the request (i.e., the content we want to post).The body must be \""stringified\"" before it can be passed in the request.Just as with a GET request, the POST request returns a Response objectthat can be accessed and used to update the DOM using chained then calls.In addition to the thens, you can also chain a catch() function thatwill \""handle\"" unsuccessful requests.With this information, you can now use fetch() to send both GET and POSTrequests! This means we have the tools we need to stitch together server updates(reads and updates) with DOM updating and event handling. We're almost readyto build the \""Simple Liker\"" from scratch!"
72,learn-co-students/js-basics-online-shopping-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-basics-online-shopping-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Online ShoppingObjectivesModel a shopping cart full of items as an array of objects in JavaScript.Iterate over arrays with for loopsUse ES6 ${template literals} instead of \""regular, \"" + \""old \"" + string + \"" concatenation.\""Brush up on conditionals and control flow to make some Oxford comma magic happen.InstructionsWe've started you off with a cart variable that points at an empty array. There are five functions that you'll have to code in order to create a working shopping cart:The addToCart() function accepts one argument, the name of an item.Use that passed-in string to create a new object representing the item. The object should consist of two key-value pairs : { itemName: name of the item, itemPrice: price of the item, }. As more items are added, the cart should start to look something like this: [ {  itemName:\""bananas\"", itemPrice: 17 }, { itemName:\""pancake batter\"",itemPrice: 5 }, { itemName:\""eggs\"", itemPrice: 49 }].The price of each item should be a randomly-generated integer between 1 and 100.HINT: Look into Math.random() and Math.floor().Upon the successful addition of a new item to the cart, the function should return <itemName> has been added to your cart. .The viewCart() function does not accept any arguments. It should loop over every item in your cart, returning the contents as one long, coherent statement in this format: In your cart, you have bananas at $17, pancake batter at $5, and eggs at $49.If the cart is empty, the function should instead return Your shopping cart is empty.Note: Pay close attention to the syntax above. The returned statement should be a single sentence that begins with In your cart, you have , terminates in a period, and can assume the following shapes according to how many items the cart contains:1 item — In your cart, you have bananas at $17.2 items — In your cart, you have bananas at $17, and pancake batter at $5.3+ items — In your cart, you have bananas at $17, pancake batter at $5, and eggs at $49.The total() function accepts no arguments, iterates through the cart array, and returns the current total value of the items in the cart.The removeFromCart() function accepts one argument, the name of the item that should be removed.If the item is present in the cart, the function should remove the object from the cart and then return the updated cart.HINT: Check each object's itemName value key to see if it matches the parameter, then remove it if it matches. You might find Array.prototype.splice() to be useful.If the cart does not contain a matching item, the function should return That item is not in your cart.The placeOrder() function accepts one argument, a credit card number.If no argument is received, the function should print out Sorry, we don't have a credit card on file for you..If a card number is received, the function shouldempty the cart arrayreturn Your total cost is $71, which will be charged to the card 83296759. (where 71 is the value returned by total() and 83296759 is the credit card number passed to placeOrder())The final send-offThis lab is not easy! The methods, especially viewCart() require careful planning and a sharp eye. The cart array is a non-trivial nested data structure, and it would be a good idea to periodically check the value of your variables (think: console.log(), debugger, etc.) at different points within your functions, especially when attempting to iterate over the cart and its items.View Online Shopping Lab on Learn.co and start learning to code for free."
73,learn-co-curriculum/phase-0-git-basics-lab,https://github.com/learn-co-curriculum/phase-0-git-basics-lab/blob/master/README.md,JavaScript,"Git Basics LabLearning GoalsUnderstand how to complete assignmentsApply what you've learned about Git version controlInitialize a new Git repositoryStage and commit new contentCreate a remote repository on GitHubConnect the newly created local repository with the remote on GitHubIntroductionSo far lessons have only contained written content on specific topics. All youneeded to do was read through each lesson and continue on. This lesson, however,is considered an assignment. Assignments are exercises that have some writtencontent to guide you, but also ask you to complete some work of your own. Manyassignments, like this one, include tests that must be passed in order tocomplete the lesson. Assignments with tests are often referred to as a labs inour course.Now that you've learned about Git version control, in this lab, we're going togo through the entire process of creating a local Git repository, creating aninitial commit and pushing that work to a remote repo stored onGitHub.Getting StartedTo start work on this lab, you will first need to fork this assignment and cloneit to your local environment. Let's quickly review this process:StepsStep 1Click the Fork button at the top of this page in Canvas.Reminder: This button does the same thing as forking in GitHub(via the Octocat button). We recommend using the Fork button inCanvas.Step 2Choose to fork to your personal account if prompted. Once the forking processis complete, you should be looking at your personal copy of the assignment onGitHub.Step 3Click Code, choose SSH, then click the clipboard icon to copy theinformation we'll need about this repository.Step 4In your terminal, type git clone, and paste the info you copied fromGitHub. The command should look something like this (but with your personalaccount name):$ git clone git@github.com:<your-github-username>/phase-0-git-basics-lab.gitStep 5A folder will be created wherever you run this command. The folder name willbe the same as the repository, so in this case, phase-0-git-basics-lab.Navigate into this folder with cd phase-0-git-basics-lab.Once inside the folder, you are ready to work on the lab.Solving this LabOnce you're in your local clone of this lab, the first step is to run the lab'stests to get a sense of what you need to do. We do this with two terminalcommands. First, we run the following:$ npm installThis sets up the tools we'll use for testing. To run the tests, type the followingonce you regain control of the command line:$ npm testThis will run all the tests included for this lab. You should see a lot ofoutput, enough that you may need to scroll up in your terminal to see it all.Six failed tests should print out, starting with this:$ npm testthis lab  1) has a folder named my-repository  2) has a valid git repository initialized for the my-repository folder  3) has a README.md file in the my-repository folderthe local repository  4) has README.md as a tracked file  5) has at least one commit  6) has been pushed up to the remote repository0 passing (42ms)6 failing1) this lab     has a folder named my-repository:   AssertionError: no folder name \""my-repository\"" was found: value: expected './my-repository' to exist    at Function.<anonymous> (node_modules/chai-fs/lib/assertions/directory.js:21:53)    at Function.ctx.(anonymous function) [as directory] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)    at Function.assert.isDirectory (node_modules/chai-fs/lib/assertions/directory.js:34:35)    at Context.it (test/index-test.js:11:19)    ...Each failed test includes an explanation.In the first test seen above, for instance, it saysthis lab has a folder named my-repository, followed byAssertionError: no folder name \""my-repository\"" was found.This first test is looking specifically for a folder, my-repository, to existinside this lab's main directory (or \""folder\""). You probably have a theory onhow to correct that test after seeing that error! We're going to use thesetests to let us know when we're all done.InstructionsIMPORTANT TIPS TO AVOID GETTING STUCKThe work you will do to set up the Git repository will be done in themy-repository directory (after you create it ;)). If you're doing gitcommands in the same directory as THIS README that you're reading right now,you're not going to get to working tests.When you run the tests, you will need to be in the top-level directory ofthis lab, (phase-0-git-basics-lab, the directory with the README you'rereading right now in it).Follow the steps provided below carefully to help ensure you are doing things inthe right location.StepsAs we saw above, there are six broken tests. Let's get them working.Step 1Create a new directory locally named my-repository. This directory should beside by side with the test directory of this lab. Use the Unix command tocreate this directory. From the top-level of this lab, the parent directory ofmy-repository, run npm test and verify there are only 5 broken tests left.Step 2Navigate into the new directory my-repository using cd on the command line.Step 3While inside my-repository, using the command line, initialize a new gitrepository. You'll know you've done it if you see 'Initialized empty Gitrepository in <...your local directory>/my-repository/.git/'>. Changeback-up to the parent directory and you should be back in the top-leveldirectory. Run npm test again and you should be down to four tests left.If that's true, change back into my-repository.Step 4Create a file (not a folder) called README.md inside my-repository.Step 5If you run git status at the command line, you should see that README.mdis now listed as an untracked file. Add README.md so that it is tracked byGit.Step 6Once the file is tracked, running git status again will show thatREADME.md is staged and ready to be committed. Go ahead and create a commit onthe command line (don't forget to add -m when committing to include amessage!).NOTE: If you forget to include -m when committing, you may find you'veopened vi, the built in terminal text editor. To escape out of this editor,press the 'esc' key once, then type :q! to close the editor and return tothe normal terminal.Step 7Change back to the top-level directory, run npm test, and you'll seethat the test output is looking pretty successful:$ npm test  this lab    ✓ has a folder named my-repository    ✓ has a valid git repository initialized for the my-repository folder    ✓ has a README.md file in the my-repository folder  the local repository    ✓ has README.md as a tracked file    ✓ has at least one commit    1) has been pushed up to the remote repository  5 passing (18ms)  1 failing  1) the local repository       has been pushed up to the remote repository:     AssertionError: no record of pushing to a remote was found. Follow the instructions on GitHub to connect and push to a new remote repository: value: expected './my-repository/.git/logs/refs/remotes' to existAlmost done! Change back into the my-repository directory.Step 8Create a remote repository on GitHub using your personal GitHubaccount and connect it to your newly created local repository.When we create a blank repository, we are given multiple options for how to getstarted. Since we have a local folder with Git initialized already, we'll usethe instructions for creating a new repository using the command line.If you've been following along, you may notice that the first commands listedare things you've already done - git init initialized the my-repositorydirectory as a local Git repository; git add README.md tracks the README.mdfile (you may have used git add ., which will work too);git commit -m \""first commit\"" commits the newly created README.md file with amessage.The remaining commands still need to be run. First we run the following:$ git branch -M mainIf you recall from the version control basics lesson, going forward main willbe used as the default name of the... main... branch in a repository. Dependingon your environment you may still have an older version of Git that defaults tomaster. If this is the case, the above command will change this masterbranch to main.After setting the branch, we need to add the newly created GitHub repo as theremote for your local my-repository repo. This command will include infospecific to your GitHub account and the name you gave your GitHub repo:$ git remote add origin git@github.com:<your-github-username>/<your-github-repository>.gitStep 9The last step listed pushes your local work up to the remote:$ git push -u origin mainStep 10Change back up to the top-level directory and run npm test oncemore, your tests should all be passing.Once you've passed all tests, if you visit the newly created remote repositoryon GitHub, you should see that the README.md file you created is now present.Additional PracticeWe recommend taking time to become familiar with Git commands since you'll berelying on them a lot. If you'd like to practice further, change directoryback into the my-repository folder and try the following:Create another file, then add, commit, and push to the remoteModify the contents of README.md, then add, commit, and push to the remoteRename README.md, then add, commit, and push to the remoteWrapping UpIf you would like to preserve the work you've done for this lab on GitHub,you'll need to push it up to your fork of this assignment. Change directory tothe top-level once again, then run the following:$ git add .$ git commit -m \""Done with assignment\""$ git push origin masterNote that this assignment was created with a master branch as the default, sothe push command is different than when you pushed my-repository.ConclusionAs you become more comfortable with the terminal and Git, you'll find yourselfusing the workflow of initializing, adding, committing and pushing your work ona regular basis. These commands are at the core of Git version control. Byknowing them, you now have the ability to create your own repositories andcontribute to repositories that already exist.In this lab you used tests to guide you in the basics of setting up a new localGit repository and binding it to a remote repository on GitHub. By pushing yourwork to a remote repository you've backed it up and made it available for theworld to see via GitHub. Professional developers use this process to share codewith each other, to document their code, and to earn interview slots by showingoff what they're capable of. You did this guided by tests. It's common fordevelopers to write tasks as tests that all fail and then slowly work to getthem all passing. It's like a to-do list that verifies you've actually done thework!"
74,learn-co-students/javascript-strings-lab-js-intro-000,https://github.com/learn-co-students/javascript-strings-lab-js-intro-000/blob/master/README.md,JavaScript,"JavaScript Strings LabOverviewIn this lab, we're going to work with strings. Strings in JavaScript are wrapped in single or double quotes, or in back ticks.ObjectivesManipulate strings in JavaScriptPractice interpolating with template literalsIntroductionImagine we're planning a birthday party for Bill Nye. There are going to be a lot of people there, so we're going to use JavaScript to help us keep everything straight.First, we need to practice greeting everyone. (I don't know about you, but I sometimes get nervous and say the dumbest things — but we don't want to embarrass ourselves in front of Bill Nye!)One might think that we could just typeHello, everybody!in our browser's console and be done with it. Give it a try. (If you're on a Mac, that would be Command + Option + J together.)You should see something likeUncaught ReferenceError: Hello is not defined(…)Well, that won't work. (This is why we practice!) In order to greet our guests, we need to tell JavaScript that we're using a string. A string is a collection of characters (letters, numbers, and symbols) wrapped in single or double quotes (or, as we'll see, in back ticks). So to greet everyone, we can write,'Hello, everybody!'or\""Hello, everybody!\""Single or double quotation marks can contain a string variable..What if we want to say hi to a special guest, like Neil deGrasse Tyson? When we wrap strings in single or double quotes, we can join them together using the + operator:var specialGuest = \""Neil deGrasse Tyson\""\""Hello, \"" + specialGuest + \""!\"" // \""Hello, Neil deGrasse Tyson!\""This is called concatenation. Notice that the value of the specialGuest variable is also a string!TOP TIP: Your console might be getting a little full at this point. If at any point you'd like to clear it out and start fresh, you can either click the button in the top left corner of the console — in Chrome, it looks like this:Alternatively, you can press ctrl + L or command + K. As long as you don't refresh the page, anything you've declared will stick around for you to reference — you'll just get a nice blank slate on which to code.When we wrap strings in back ticks, we can use placeholders (${}) and insert variables or evaluated JavaScript directly:var specialGuest = \""Neil deGrasse Tyson\"";`Hello, ${specialGuest}! High ${3 + 2}!` // \""Hello, Neil deGrasse Tyson! High 5!\""This is called interpolation.LabYou'll find a file called index.js in this directory. Your mission, should you choose to accept it, is to get its tests (in tests/index-test.js) to pass.You can run the tests using the learn command in your terminal or the Learn IDE. Give that a go now.All three tests have failed! This is okay, and it's expected — you haven't written any code yet, after all.In index.js, you'll see five lines of code:var greeting = \""\"";var specialGuest = \""Neil deGrasse Tyson\""var greetSpecialGuest = \""\"" + specialGuest + \""!\"";var topic = \""space\"";var conversation = `${topic}`;Each line has a test associated with it. When the tests fail, they show us what the expected value is — your job is to make that expectation a reality by modifying the code provided.When you first run learn, you should see something like this:Let's walk through that first error together. First, we see the test title:1) strings defines `greeting`:The title tells us what the test expects our code to do. In this case,\""strings\"" refers to the general problem space in which we're working —we're handling strings.Continuing on with the test output, we can now make better sense of the next few lines:AssertionError: '!' == 'Hello, everybody!'+ expected - actual- !+Hello, everybody!This is a lot to take in, so we'll go through it slowly.What could AssertionError mean? Well, it probably means that our test asserted (or expected) that something would be true, and that thing wasn't true.What is that thing? The test expected the empty string, '', to be equal to the string 'Hello, everybody!' — but, of course, these strings are not equal.+ expected - actual is a key for reading the statements below it. + expected tells us that the expected output shows up in that yellowish green; - actual tells us what actually happened.But reading on, we only see +Hello, everybody! — what's going on? Why isn't there any - actual output? Well, there was no actual output — it's just an empty string! That must be the problem!Next, the title tells us that index.js \""defines greeting.\"" Let's look in index.js — sure enough, we see, at the top of the file, var greeting = \""\"";. Seems like a reasonable place to start.What if, instead of assigning \""\"" to greeting, we assign \""Hello, everybody!\"", like the test expects. Go ahead and change that line in index.js so it readsvar greeting = \""Hello, everybody!\"";save the file, and rerun your tests. You should seeNice! You got the first test to pass.Now use the skills that you learned above to read through the rest of the test output and fix those errors, too! Always remember to save your file before re-running your tests.NOTE: Because we're dealing with some low-level language features, you might spot some easy ways to \""cheat\"" on this lab, or this lab might seem frustratingly easy. We've given you some starter code to point you in the right direction — try to solve the lab as intended! You can then compare your solution with ours (found in the solution branch of this repository).When your tests are passing, submit your answer by typing in learn submit in the command line or else create a pull request (use learn submit if \""pull request\"" sounds a bit terrifying).Good luck!View JavaScript Strings Lab on Learn.co and start learning to code for free."
75,ibm-developer-skills-network/qkfls-Movie-Reviews-Database,https://github.com/ibm-developer-skills-network/qkfls-Movie-Reviews-Database/blob/master/README.md,JavaScript,Movies Review Database
76,dangrossman/daterangepicker,https://github.com/dangrossman/daterangepicker/blob/master/README.md,JavaScript,"Date Range PickerThis date range picker component creates a dropdown menu from which a user canselect a range of dates. I created it while building the UI for Improvely,which needed a way to select date ranges for reports.Features include limiting the selectable date range, localizable strings and date formats,a single date picker mode, a time picker, and predefined date ranges.Documentation and Live Usage ExamplesSee It In a Live ApplicationLicenseThe MIT License (MIT)Copyright (c) 2012-2020 Dan GrossmanPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the \""Software\""), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE."
77,fabricjs/fabric.js,https://github.com/fabricjs/fabric.js/blob/master/README.md,JavaScript,"Fabric.jsA simple and powerful Javascript HTML5 canvas library.WebsiteGOTCHASContributing, Developing and MoreFeaturesOut of the box interactions such as scale, move, rotate, skew, group...Built in shapes, controls, animations, image filters, gradients, patterns, brushes...JPG, PNG, JSON and SVG i/oTyped and modularUnit testedSupported Browsers/EnvironmentsContextSupported VersionNotesFirefox✔️modern version (tbd)Safari✔️version >= 10.1Opera✔️chromium basedChrome✔️modern version (tbd)Edge✔️chromium basedEdge Legacy❌IE11❌Node.js✔️Node.js installationFabric.js Does not use transpilation by default, the browser version we support is determined by the level of canvas api we want to use and some js syntax. While JS can be easily transpiled, canvas API can't.Migrating to v6v6 is a MAJOR effort including migrating to TS and es6, countless fixes, rewrites and features.Currently in beta, refer to #8299 for guidance.$ npm install fabric@beta --save// or$ yarn add fabric@betaInstallation$ npm install fabric --save// or$ yarn add fabricBrowserSee browser modules for using es6 imports in the browser or use a dedicated bundler.Node.jsFabric.js depends on node-canvas for a canvas implementation (HTMLCanvasElement replacement) and jsdom for a window implementation on node.This means that you may encounter node-canvas limitations and bugs.Follow these instructions to get node-canvas up and running.Quick Start// v6import { Canvas, Rect } from 'fabric'; // browserimport { StaticCanvas, Rect } from 'fabric/node'; // node// v5import { fabric } from 'fabric';Plain HTML<canvas id=\""canvas\"" width=\""300\"" height=\""300\""></canvas><script src=\""https://cdn.jsdelivr.net/npm/fabric\""></script><script>  const canvas = new fabric.Canvas('canvas');  const rect = new fabric.Rect({    top: 100,    left: 100,    width: 60,    height: 70,    fill: 'red',  });  canvas.add(rect);</script>ReactJSimport React, { useEffect, useRef } from 'react';import * as fabric from 'fabric'; // v6import { fabric } from 'fabric'; // v5export const FabricJSCanvas = () => {  const canvasEl = useRef<HTMLCanvasElement>(null);  useEffect(() => {    const options = { ... };    const canvas = new fabric.Canvas(canvasEl.current, options);    // make the fabric.Canvas instance available to your app    updateCanvasContext(canvas);    return () => {      updateCanvasContext(null);      canvas.dispose();    }  }, []);  return <canvas width=\""300\"" height=\""300\"" ref={canvasEl}/>;};Node.jsimport http from 'http';import * as fabric from 'fabric/node'; // v6import { fabric } from 'fabric'; // v5const port = 8080;http  .createServer((req, res) => {    const canvas = new fabric.Canvas(null, { width: 100, height: 100 });    const rect = new fabric.Rect({ width: 20, height: 50, fill: '#ff0000' });    const text = new fabric.Text('fabric.js', { fill: 'blue', fontSize: 24 });    canvas.add(rect, text);    canvas.renderAll();    if (req.url === '/download') {      res.setHeader('Content-Type', 'image/png');      res.setHeader('Content-Disposition', 'attachment; filename=\""fabric.png\""');      canvas.createPNGStream().pipe(res);    } else if (req.url === '/view') {      canvas.createPNGStream().pipe(res);    } else {      const imageData = canvas.toDataURL();      res.writeHead(200, '', { 'Content-Type': 'text/html' });      res.write(`<img src=\""${imageData}\"" />`);      res.end();    }  })  .listen(port, (err) => {    if (err) throw err;    console.log(      `> Ready on http://localhost:${port}, http://localhost:${port}/view, http://localhost:${port}/download`    );  });See our ready to use templates.Other SolutionsProjectDescriptionDemoThree.js3D graphicsPixiJSWebGL rendererKonvaSimilar features❌html-to-imageHTML to image/canvasMore ResourcesDemos on fabricjs.comFabric.js on TwitterFabric.js on CodeTriageFabric.js on Stack OverflowFabric.js on jsfiddleFabric.js on Codepen.ioCredits kangaxasturur on Twittermelchiar ShaMan123 Ernest Delgado for the original idea of manipulating images on canvasMaxim \""hakunin\"" Chernyak for ideas, and help with various parts of the library throughout its lifeSergey Nisnevich for help with geometry logicStefan Kienzle for help with bugs, features, documentation, GitHub issuesShutterstock for the time and resources invested in using and improving Fabric.jsand all the other contributors"
78,jklepatch/eattheblocks,https://github.com/jklepatch/eattheblocks/blob/master/README.md,JavaScript,EaTheBlocksBlockchain tutorials of EatTheBlocks. Learn how to build DecentralizedApplications (Dapps) on Ethereum and Solidity Smart contractsCovers:EthereumSolidityWeb3TruffleDeFi (Decentralized Finance)OrganizationYoutube: screencast folderCourses: other foldersCourses6-Figures Blockchain DevelopmentProfitable Flashloan
79,angular/quickstart,https://github.com/angular/quickstart/blob/master/README.md,JavaScript,"Angular QuickStart SourceThis repository is now deprecated. The Angular Quickstart project was a nice starting point for creating Angular applications. Now we recommend using the Angular CLI to create new Angular projects.Starting from 1 November 2017, all the Angular documentation, at angular.io, is based on the Angular CLI.Let's get startedThis repository holds the TypeScript source code of the angular.io quickstart,the foundation for most of the documentation samples and potentially a good starting point for your application.It's been extended with testing support so you can start writing tests immediately.This is not the perfect arrangement for your application. It is not designed for production.It exists primarily to get you started quickly with learning and prototyping in AngularWe are unlikely to accept suggestions about how to grow this QuickStart into something it is not.Please keep that in mind before posting issues and PRs.Updating to a newer version of the Quickstart RepoFrom time to time the QuickStart will be enhanced with support for new features or to reflectchanges to the official Style Guide.You can update your existing project to an up-to-date QuickStart by following these instructions:Create a new project using the instructions belowCopy the code you have in your project's main.ts file onto src/app/main.ts in the new projectCopy your old app folder into src/appDelete src/app/main.ts if you have one (we now use src/main.ts instead)Copy your old index.html, styles.css and tsconfig.json into src/Install all your third party dependenciesCopy your old e2e/ folder into e2e/Copy over any other files you added to your projectCopy your old .git folder into your new project's rootNow you can continue working on the new project.PrerequisitesNode.js and npm are essential to Angular development.Get it now if it's not already installed on your machine.Verify that you are running at least node v4.x.x and npm 3.x.xby running node -v and npm -v in a terminal/console window.Older versions produce errors.We recommend nvm for managing multiple versions of node and npm.Create a new project based on the QuickStartClone this repo into new project folder (e.g., my-proj).git clone https://github.com/angular/quickstart  my-projcd my-projWe have no intention of updating the source on angular/quickstart.Discard the .git folder..rm -rf .git  # OS/X (bash)rd .git /S/Q # windowsDelete non-essential files (optional)You can quickly delete the non-essential files that concern testing and QuickStart repository maintenance(including all git-related artifacts such as the .git folder and .gitignore!)by entering the following commands while in the project folder:OS/X (bash)xargs rm -rf < non-essential-files.osx.txtrm src/app/*.spec*.tsrm non-essential-files.osx.txtWindowsfor /f %i in (non-essential-files.txt) do del %i /F /S /Qrd .git /s /qrd e2e /s /qCreate a new git repoYou could start writing code now and throw it all away when you're done.If you'd rather preserve your work under source control, consider taking the following steps.Initialize this project as a local git repo and make the first commit:git initgit add .git commit -m \""Initial commit\""Recover the deleted .gitignore from the QuickStart repositoryif you lost it in the Delete non-essential files step.Create a remote repository for this project on the service of your choice.Grab its address (e.g. https://github.com/<my-org>/my-proj.git) and push the local repo to the remote.git remote add origin <repo-address>git push -u origin masterInstall npm packagesSee npm and nvm version notes aboveInstall the npm packages described in the package.json and verify that it works:npm installnpm startDoesn't work in Bash for Windows which does not support servers as of January, 2017.The npm start command first compiles the application,then simultaneously re-compiles and runs the lite-server.Both the compiler and the server watch for file changes.Shut it down manually with Ctrl-C.You're ready to write your application.npm scriptsWe've captured many of the most useful commands in npm scripts defined in the package.json:npm start - runs the compiler and a server at the same time, both in \""watch mode\"".npm run build - runs the TypeScript compiler once.npm run build:w - runs the TypeScript compiler in watch mode; the process keeps running, awaiting changes to TypeScript files and re-compiling when it sees them.npm run serve - runs the lite-server, a light-weight, static file server, written and maintained byJohn Papa andChristopher Martinwith excellent support for Angular apps that use routing.Here are the test related scripts:npm test - compiles, runs and watches the karma unit testsnpm run e2e - compiles and run protractor e2e tests, written in Typescript (*e2e-spec.ts)TestingThe QuickStart documentation doesn't discuss testing.This repo adds both karma/jasmine unit test and protractor end-to-end testing support.These tools are configured for specific conventions described below.It is unwise and rarely possible to run the application, the unit tests, and the e2e tests at the same time.We recommend that you shut down one before starting another.Unit TestsTypeScript unit-tests are usually in the src/app folder. Their filenames must end in .spec.ts.Look for the example src/app/app.component.spec.ts.Add more .spec.ts files as you wish; we configured karma to find them.Run it with npm testThat command first compiles the application, then simultaneously re-compiles and runs the karma test-runner.Both the compiler and the karma watch for (different) file changes.Shut it down manually with Ctrl-C.Test-runner output appears in the terminal window.We can update our app and our tests in real-time, keeping a weather eye on the console for broken tests.Karma is occasionally confused and it is often necessary to shut down its browser or even shut the command down (Ctrl-C) andrestart it. No worries; it's pretty quick.End-to-end (E2E) TestsE2E tests are in the e2e directory, side by side with the src folder.Their filenames must end in .e2e-spec.ts.Look for the example e2e/app.e2e-spec.ts.Add more .e2e-spec.js files as you wish (although one usually suffices for small projects);we configured Protractor to find them.Thereafter, run them with npm run e2e.That command first compiles, then simultaneously starts the lite-server at localhost:8080and launches Protractor.The pass/fail test results appear at the bottom of the terminal window.A custom reporter (see protractor.config.js) generates a  ./_test-output/protractor-results.txt filewhich is easier to read; this file is excluded from source control.Shut it down manually with Ctrl-C."
80,heroku/flow-demo,https://github.com/heroku/flow-demo/blob/master/README.md,JavaScript,"Heroku Flow DemoA barebones Node.js app using Express 4.Running LocallyMake sure you have Node.js and the Heroku Toolbelt installed.git clone git@github.com:heroku/button-sample.git # or clone your own forkcd button-samplenpm installnpm startYour app should now be running on localhost:5000.Deploying to Herokuheroku creategit push heroku masterheroku openAlternatively, you can deploy your own copy of the app using this button:DocumentationFor more information about using Heroku, check out https://devcenter.heroku.com/"
81,nexusNw/Gojo-Satoru,https://github.com/nexusNw/Gojo-Satoru/blob/master/README.md,JavaScript,"Gojo-SatoruAutomated Multi Device whatsapp bot created by nexusNwDont forget to give a star bro.🥲 IF Heroku Deploy seems Error, Fork This Repo And Try Deploy AgainIf The Api Of This Bot Run Empty You Can Change it To Your Own Api By Changing Here And Register here to get apikey RequirementsSome Text EditorNode JSGitFFMPEGAdd FFmpeg to PATH environment variableStart via HerokuScan QR In Your Whatsapp From HereFork This Repo By Clicking Herethen Deploy The Bot From HereWait 5-10 Min To DeployAfter Deploying On The Worker And Check The LogsInstallation on Termux> apt update> apt upgrade> pkg update && pkg upgrade> pkg install bash> pkg install libwebp> pkg install git -y> pkg install nodejs -y > pkg install ffmpeg -y > pkg install wget> pkg install imagemagick -y> git clone https://github.com/nexusNw/Gojo-Satoru> cd Gojo-Satoru> npm installEdit settings.jsglobal.APIKeys = {\t'https://zenzapis.xyz': 'YOURAPIKEY',}  global.owner = [\""9181XXXXXX\""]global.ownername = [\""YourName\""]For 24 Hours Activationnpm i -g pm2 && pm2 start index.js && pm2 save && pm2 logsAvailable FeaturesFeaturesAvailabilityConvert✅Database✅Owner✅Islami✅Downloader✅Webzone✅[Searching✅Textpro✅Ephoto✅Anime Web✅Stalker✅Random Text✅Random Image✅Nekos Life✅More Nsfw✅Creator✅ContactConnect With MeThanks To@adiwajshing/baileysAlien-AlfaDGXeonAflahXrdLicense: MIT"
82,bloominstituteoftechnology/web-module-challenge-prototypes,https://github.com/bloominstituteoftechnology/web-module-challenge-prototypes/blob/main/README.md,JavaScript,"Constructors, Prototypes and thisJavaScript FundamentalsObjectivesexplain the four principles of the 'this' keyword and demonstrate each explanation with an example of their usesdescribe, and use prototypes, constructor functions the new keyword, and pseudo-classical inheritance to build objectsIntroductionIn order to complete these tasks you will need your newly aquired knowledge of constructor functions, prototypes, and the this keyword.InstructionsTask 1: Set up ProjectUsing VSCode and Command Line:Fork the repoGo into canvas and connect your reop to codegradeClone your forked version of the repoDO NOT CREATE A BRANCH. You will be pushing your changes to the main/master todaycd into your repoopen the terminal in your vs code and type npm installnext type npm run test in your terminalComplete your work making regular commits to main/ master your codegrade score will update each time you make a push.Task 2 - MVPFind the file index.js and complete tasks 1, 2 and 3 until all of your tests pass.There is an additional task 4 which requires written explanations and has no tests.If you run into trouble while coding, fight the good fight for 20 minutes and then get on the help channel. Remember to formulate your help request in a professional manner - like you would at the job - by including error messages, screenshots, and any other pertinent information about the problem, as well as what things you have attempted already while trying to solve it.Testing & DebuggingOpen a second terminal inside of your project by clicking on the split terminal iconInside of your second terminal type npm startYou will be running your tests in one terminal and debugging in the other. As you work on your code you should make use of console.log to check your progress and debug.Task 3 - StretchThere are stretch goals found throughout index.js. Do not start work on these until you have finished MVP.ResourcesWhat the Beep is this in JavaScript?Submission formatPlease submit your project via codegrade by following these instructions See part 2, submitting an assignment with codegrade"
83,learn-co-students/javascript-strings-lab-js-apply-000,https://github.com/learn-co-students/javascript-strings-lab-js-apply-000/blob/master/README.md,JavaScript,"JavaScript Strings LabOverviewIn this lab, we're going to work with strings. Strings in JavaScript are wrapped in single or double quotes, or in back ticks.ObjectivesManipulate strings in JavaScriptPractice interpolating with template literalsIntroductionImagine we're planning a birthday party for Bill Nye. There are going to be a lot of people there, so we're going to use JavaScript to help us keep everything straight.First, we need to practice greeting everyone. (I don't know about you, but I sometimes get nervous and say the dumbest things — but we don't want to embarrass ourselves in front of Bill Nye!)One might think that we could just typeHello, everybody!in our browser's console and be done with it. Give it a try. (If you're on a Mac, that would be Command + Option + J together.)You should see something likeUncaught ReferenceError: Hello is not defined(…)Well, that won't work. (This is why we practice!) In order to greet our guests, we need to tell JavaScript that we're using a string. A string is a collection of characters (letters, numbers, and symbols) wrapped in single or double quotes (or, as we'll see, in back ticks). So to greet everyone, we can write,'Hello, everybody!'or\""Hello, everybody!\""Single or double quotation marks can contain a string variable..What if we want to say hi to a special guest, like Neil deGrasse Tyson? When we wrap strings in single or double quotes, we can join them together using the + operator:var specialGuest = \""Neil deGrasse Tyson\""\""Hello, \"" + specialGuest + \""!\"" // \""Hello, Neil deGrasse Tyson!\""This is called concatenation. Notice that the value of the specialGuest variable is also a string!TOP TIP: Your console might be getting a little full at this point. If at any point you'd like to clear it out and start fresh, you can either click the button in the top left corner of the console — in Chrome, it looks like this:Alternatively, you can press ctrl + L or command + K. As long as you don't refresh the page, anything you've declared will stick around for you to reference — you'll just get a nice blank slate on which to code.When we wrap strings in back ticks, we can use placeholders (${}) and insert variables or evaluated JavaScript directly:var specialGuest = \""Neil deGrasse Tyson\"";`Hello, ${specialGuest}! High ${3 + 2}!` // \""Hello, Neil deGrasse Tyson! High 5!\""This is called interpolation.LabYou'll find a file called index.js in this directory. Your mission, should you choose to accept it, is to get its tests (in tests/index-test.js) to pass.You can run the tests using the learn command in your terminal or the Learn IDE. Give that a go now.All three tests have failed! This is okay, and it's expected — you haven't written any code yet, after all.In index.js, you'll see five lines of code:var greeting = \""\"";var specialGuest = \""Neil deGrasse Tyson\""var greetSpecialGuest = \""\"" + specialGuest + \""!\"";var topic = \""space\"";var conversation = `${topic}`;Each line has a test associated with it. When the tests fail, they show us what the expected value is — your job is to make that expectation a reality by modifying the code provided.When you first run learn, you should see something like this:Let's walk through that first error together. First, we see the test title:1) strings defines `greeting`:The title tells us what the test expects our code to do. In this case,\""strings\"" refers to the general problem space in which we're working —we're handling strings.Continuing on with the test output, we can now make better sense of the next few lines:AssertionError: '!' == 'Hello, everybody!'+ expected - actual- !+Hello, everybody!This is a lot to take in, so we'll go through it slowly.What could AssertionError mean? Well, it probably means that our test asserted (or expected) that something would be true, and that thing wasn't true.What is that thing? The test expected the empty string, '', to be equal to the string 'Hello, everybody!' — but, of course, these strings are not equal.+ expected - actual is a key for reading the statements below it. + expected tells us that the expected output shows up in that yellowish green; - actual tells us what actually happened.But reading on, we only see +Hello, everybody! — what's going on? Why isn't there any - actual output? Well, there was no actual output — it's just an empty string! That must be the problem!Next, the title tells us that index.js \""defines greeting.\"" Let's look in index.js — sure enough, we see, at the top of the file, var greeting = \""\"";. Seems like a reasonable place to start.What if, instead of assigning \""\"" to greeting, we assign \""Hello, everybody!\"", like the test expects. Go ahead and change that line in index.js so it readsvar greeting = \""Hello, everybody!\"";save the file, and rerun your tests. You should seeNice! You got the first test to pass.Now use the skills that you learned above to read through the rest of the test output and fix those errors, too! Always remember to save your file before re-running your tests.NOTE: Because we're dealing with some low-level language features, you might spot some easy ways to \""cheat\"" on this lab, or this lab might seem frustratingly easy. We've given you some starter code to point you in the right direction — try to solve the lab as intended! You can then compare your solution with ours (found in the solution branch of this repository).When your tests are passing, submit your answer by typing in learn submit in the command line or else create a pull request (use learn submit if \""pull request\"" sounds a bit terrifying).Good luck!View JavaScript Strings Lab on Learn.co and start learning to code for free."
84,openlayers/openlayers,https://github.com/openlayers/openlayers/blob/main/README.md,JavaScript,"OpenLayersOpenLayers is a high-performance, feature-packed library for creating interactive maps on the web. It can display map tiles, vector data and markers loaded from any source on any web page. OpenLayers has been developed to further the use of geographic information of all kinds. It is completely free, Open Source JavaScript, released under the BSD 2-Clause License.Getting StartedInstall the ol package:npm install olImport just what you need for your application:import Map from 'ol/Map';import View from 'ol/View';import TileLayer from 'ol/layer/Tile';import XYZ from 'ol/source/XYZ';new Map({  target: 'map',  layers: [    new TileLayer({      source: new XYZ({        url: 'https://tile.openstreetmap.org/{z}/{x}/{y}.png'      })    })  ],  view: new View({    center: [0, 0],    zoom: 2  })});See the following examples for more detail on bundling OpenLayers with your application:Using ViteUsing RollupUsing webpackUsing ParcelFor more detail on quick prototyping without the use of a Node.js based setup, see the Skypack example.SponsorsOpenLayers appreciates contributions of all kinds.  We especially want to thank our fiscal sponsors who contribute to ongoing project maintenance.Pozi helps connect communities through spatial thinking.We love Openlayers and it forms a core part of our platform.https://pozi.com/ https://app.pozi.com/yey'maps is a scalable cloud GIS suite that is developed with thepowerful Openlayers API and the GDAL library.https://www.yeymaps.io/We develop leading Physical Security Information Management (PSIM) software.OpenLayers is the core of our map engine and we love it!https://ela.pl/We advance holistic utilization and availability of spatial information,for a better planned, built and managed society.https://www.ubigu.fi/Build custom maps and identify insights across real estate, engineering, research, business, exploration, construction, manufacturing - and so much more.https://www.scribblemaps.com/See our GitHub sponsors page or Open Collective if you too are interested in becoming a regular sponsor.TypeScript supportThe ol package includes auto-generated TypeScript declarations as *.d.ts files.Supported BrowsersOpenLayers runs on all modern browsers (with greater than 1% global usage).  This includes Chrome, Firefox, Safari and Edge. For older browsers, polyfills will likely need to be added.DocumentationCheck out the hosted examples, the workshop or the API documentation.BugsPlease use the GitHub issue tracker for all bugs and feature requests. Before creating a new issue, do a quick search to see if the problem has been reported already.ContributingPlease see our guide on contributing if you're interested in getting involved.CommunityNeed help? Find it on Stack Overflow using the tag 'openlayers'Follow @openlayers on Twitter"
85,learn-co-curriculum/phase-1-destructuring-assignment,https://github.com/learn-co-curriculum/phase-1-destructuring-assignment/blob/master/README.md,JavaScript,"Destructuring AssignmentLearning GoalsUse destructuring assignment to assign data to variablesIntroductionAs developers, sometimes we receive information in a collection (e.g., anObject) and we want to \""pick and choose\"" elements out of the collection. It'sa major pain to individually extract each property / value pair out of anObject and then assign it to a variable.Destructuring lets us type less and be more clear about what we want to pullout of an Object.  Not only does destructuring help when working with data inyour application, it's essential for understanding how to get JavaScript toinclude third-party code (like you find on npm).Use Destructuring Assignment to Assign Data to VariablesIn JavaScript, when we want to assign data from an object to single variables,we know how do it individually like so:const doggie = {  name: 'Buzz',  breed: 'Great Pyrenees',  furColor: 'black and white',  activityLevel: 'sloth-like',  favoriteFood: 'hot dogs'};const name = doggie.name;const breed = doggie.breed;name; // => \""Buzz\""breed; // => \""Great Pyrenees\""This is repetitive code. The process is:Declare a variable with a name (e.g. name or breed)Use that variable's name to point to an attribute in the Object whose namematches the name of the variable (e.g. doggie.breed or doggie.name)Assign the attribute's value to the created variableJavaScript gives us the ability to perform this task with one simple line ofcode.const doggie = {  name: 'Buzz',  breed: 'Great Pyrenees',  furColor: 'black and white',  activityLevel: 'sloth-like',  favoriteFood: 'hot dogs'};const { name, breed } = doggie;name; // => \""Buzz\""breed; // => \""Great Pyrenees\""The {} around the variable names tells the JavaScript engine that it's goingto be pulling values from an Object. The engine looks inside the doggieobject for the attributes name and breed and assigns the values associatedwith those keys to the corresponding variable names. This is known asdestructuring assignment.Note that because the engine is looking for the attributes by their keys, theorder inside the {} doesn't matter — this works as well:const { breed, name } = doggie;name; // => \""Buzz\""breed; // => \""Great Pyrenees\""We can also use destructuring assignment with a nested data structure:const doggie = {  name: 'Buzz',  breed: 'Great Pyrenees',  furColor: 'black and white',  activityLevel: 'sloth-like',  favoriteFoods: {    meats:{      ham: 'smoked',      hotDog: 'Oscar Meyer',    },    cheeses:{      american: 'kraft'    }  }};const { ham, hotDog } = doggie.favoriteFoods.meats;ham; // => \""smoked\""hotDog; // => \""Oscar Meyer\""We've simply \""drilled down\"" to the object we want to access by chaining thekeys: doggie.favoriteFoods.meats.Using Destructuring Assignment with ArraysDestructuring does not just work on objects — we can use the same syntaxwith Arrays.const dogs = ['Great Pyrenees', 'Pug', 'Bull Mastiff'];const [medium, small, giant] = dogs;console.log(medium, small, giant); // LOG: Great Pyrenees Pug Bull MastiffNote that, this time, we've wrapped the variables we're declaring in []instead, so the engine knows we're destructuring an Array. In this case, theorder does matter: the engine assigns the first element to medium, thesecond to small and the third to giant.The cool part is we can pick the parts of the Array that we want to assign!const dogs = ['Great Pyrenees', 'Pug', 'Bull Mastiff'];const [, small, giant] = dogs;console.log(small, giant); // LOG: Pug Bull MastiffThe initial comma tells the engine to skip the first element and start theassignments with the second element.Using Destructuring Assignment with StringsWe can also destructure with strings by using the String.prototype.split()method to turn the string into an array:const dogsName = 'Sir Woody BarksALot';const [title, firstName, lastName] = dogsName.split(' ');console.log(title, firstName, lastName); // LOG: Sir Woody BarksALotBecause the split() method returns an array, we can pick and choose just as wedid before:const dogsName = 'Sir Woody BarksALot';const [title, ,lastName] = dogsName.split(' ');console.log(title, lastName); // LOG: Sir BarksALotInstructionsTake a look in index.js. You'll see that we've given you several variablescontaining Strings, Arrays, and Objects. For this lab, you need to writeseveral destructuring assignments for each. Specific instructions are providedat the bottom of the index.js file. Let the test output guide you through theprocess.ConclusionDestructuring assignment is a fast, and efficient way to assign data tovariables from objects, arrays, and strings. It allows us to easily pick andchoose the pieces of data that we want to assign. With practice, you'll beproficient at it in no time.ResourcesDestructuring assignment"
86,airbnb/lottie-web,https://github.com/airbnb/lottie-web/blob/master/README.md,JavaScript,"Lottie for Web, Android, iOS, React Native, and WindowsLottie is a mobile library for Web,  and iOS that parses Adobe After Effects animations exported as json with Bodymovin and renders them natively on mobile!For the first time, designers can create and ship beautiful animations without an engineer painstakingly recreating it by hand. They say a picture is worth 1,000 words so here are 13,000:View documentation, FAQ, help, examples, and more at airbnb.io/lottiePlugin installationOption 1 (Recommended):Download it from from aescripts + aeplugins:https://aescripts.com/bodymovin/Option 2:Or get it from the adobe storehttps://exchange.adobe.com/creativecloud.details.12557.htmlCC 2014 and up.Other installation options:Option 3:download the ZIP from the repo.Extract content and get the .zxp file from '/build/extension'Use the ZXP installer from aescripts.com.Option 4:Close After EffectsExtract the zipped file on build/extension/bodymovin.zxp to the adobe CEP folder:WINDOWS:C:\\Program Files (x86)\\Common Files\\Adobe\\CEP\\extensions orC:\\<username>\\AppData\\Roaming\\Adobe\\CEP\\extensionsMAC:/Library/Application\\ Support/Adobe/CEP/extensions/bodymovin(you can open the terminal and type:$ cp -R YOURUNZIPEDFOLDERPATH/extension /Library/Application\\ Support/Adobe/CEP/extensions/bodymovinthen type:$ ls /Library/Application\\ Support/Adobe/CEP/extensions/bodymovinto make sure it was copied correctly type)Edit the registry key:WINDOWS:open the registry key HKEY_CURRENT_USER/Software/Adobe/CSXS.6 and add a key named PlayerDebugMode, of type String, and value 1.MAC:open the file ~/Library/Preferences/com.adobe.CSXS.6.plist and add a row with key PlayerDebugMode, of type String, and value 1.Option 5:Install the zxp manually following the instructions here:https://helpx.adobe.com/x-productkb/global/installingextensionsandaddons.htmlSkip directly to \""Install third-party extensions\""Option 6:Install with Homebrew-adobe:brew tap danielbayley/adobebrew cask install lottieAfter installingWindows: Go to Edit > Preferences > Scripting & Expressions... > and check on \""Allow Scripts to Write Files and Access Network\""Mac: Go to Adobe After Effects > Preferences > Scripting & Expressions... > and check on \""Allow Scripts to Write Files and Access Network\""Old VersionsWindows: Go to Edit > Preferences > General > and check on \""Allow Scripts to Write Files and Access Network\""Mac: Go to Adobe After Effects > Preferences > General > and check on \""Allow Scripts to Write Files and Access Network\""HTML player installation# with npmnpm install lottie-web# with bowerbower install bodymovinOr you can use the script file from here:https://cdnjs.com/libraries/bodymovinOr get it directly from the AE plugin clicking on Get PlayerDemoSee a basic implementation here. ExamplesSee examples on codepen. How it worksHere's a video tutorial explaining how to export a basic animation and load it in an html page After EffectsOpen your AE project and select the bodymovin extension on Window > Extensions > bodymovinA Panel will open with a Compositions tab listing all of your Project Compositions.Select the composition you want to export.Select a Destination Folder.Click Renderlook for the exported json file (if you had images or AI layers on your animation, there will be an images folder with the exported files)HTMLget the lottie.js file from the build/player/ folder for the latest buildinclude the .js file on your html (remember to gzip it for production)<script src=\""js/lottie.js\"" type=\""text/javascript\""></script>You can call lottie.loadAnimation() to start an animation.It takes an object as a unique param with:animationData: an Object with the exported animation data. Note: If your animation contains repeaters and you plan to call loadAnimation multiple times with the same animation, please deep clone the object before passing it (see #1159 and #2151.)path: the relative path to the animation object. (animationData and path are mutually exclusive)loop: true / false / numberautoplay: true / false it will start playing as soon as it is readyname: animation name for future referencerenderer: 'svg' / 'canvas' / 'html' to set the renderercontainer: the dom element on which to render the animationIt returns the animation instance you can control with play, pause, setSpeed, etc.lottie.loadAnimation({  container: element, // the dom element that will contain the animation  renderer: 'svg',  loop: true,  autoplay: true,  path: 'data.json' // the path to the animation json});Composition Settings:Check this wiki page for an explanation for each setting.https://github.com/airbnb/lottie-web/wiki/Composition-SettingsUsageAnimation instances have these main methods:playstoppausesetSpeed(speed)speed: 1 is normal speed.goToAndStop(value, isFrame)value: numeric value.isFrame: defines if first argument is a time based value or a frame based (default false).goToAndPlay(value, isFrame)value: numeric value.isFrame: defines if first argument is a time based value or a frame based (default false).setDirection(direction)direction: 1 is forward, -1 is reverse.playSegments(segments, forceFlag)segments: array. Can contain 2 numeric values that will be used as first and last frame of the animation. Or can contain a sequence of arrays each with 2 numeric values.forceFlag: boolean. If set to false, it will wait until the current segment is complete. If true, it will update values immediately.setSubframe(useSubFrames)useSubFrames:  If false, it will respect the original AE fps. If true, it will update on every requestAnimationFrame with intermediate values. Default is true.destroy()getDuration(inFrames)inFrames:  If true, returns duration in frames, if false, in seconds.Additional methods:updateDocumentData -- updates a text layer's dataMore InfoLottie has several global methods that will affect all animations:lottie.play() -- with 1 optional parameter name to target a specific animation lottie.stop() -- with 1 optional parameter name to target a specific animation lottie.goToAndStop(value, isFrame, name) -- Moves an animation with the specified name playback to the defined time. If name is omitted, moves all animation instances.lottie.setSpeed() -- first argument speed (1 is normal speed) -- with 1 optional parameter name to target a specific animation lottie.setDirection() -- first argument direction (1 is normal direction.) -- with 1 optional parameter name to target a specific animation lottie.searchAnimations() -- looks for elements with class \""lottie\"" or \""bodymovin\"" lottie.loadAnimation() -- Explained above. returns an animation instance to control individually. lottie.destroy(name) -- Destroys an animation with the specified name. If name is omitted, destroys all animation instances. The DOM element will be emptied.lottie.registerAnimation() -- you can register an element directly with registerAnimation. It must have the \""data-animation-path\"" attribute pointing at the data.json urllottie.getRegisteredAnimations() -- returns all animations instanceslottie.setQuality() -- default 'high', set 'high','medium','low', or a number > 1 to improve player performance. In some animations as low as 2 won't show any difference.lottie.setLocationHref() -- Sets the relative location from where svg elements with ids are referenced. It's useful when you experience mask issues in Safari.lottie.freeze() -- Freezes all playing animations or animations that will be loadedlottie.unfreeze() -- Unfreezes all animationslottie.inBrowser() -- true if the library is being run in a browserlottie.resize() -- Resizes all animation instancesEventsonCompleteonLoopCompleteonEnterFrameonSegmentStartyou can also use addEventListener with the following events:completeloopCompletedrawnFrameenterFramesegmentStartconfig_ready (when initial config is done)data_ready (when all parts of the animation have been loaded)data_failed (when part of the animation can not be loaded)loaded_images (when all image loads have either succeeded or errored)DOMLoaded (when elements have been added to the DOM)destroyOther loading optionsif you want to use an existing canvas to draw, you can pass an extra object: 'rendererSettings' with the following configuration:lottie.loadAnimation({  container: element, // the dom element  renderer: 'svg',  loop: true,  autoplay: true,  animationData: animationData, // the animation data  // ...or if your animation contains repeaters:  // animationData: cloneDeep(animationData), // e.g. lodash.clonedeep  rendererSettings: {    context: canvasContext, // the canvas context, only support \""2d\"" context    preserveAspectRatio: 'xMinYMin slice', // Supports the same options as the svg element's preserveAspectRatio property    title: 'Accessible Title', // Adds SVG title element for accessible animation title    description: 'Accessible description.', // Adds SVG desc element for accessible long description of animation    clearCanvas: false,    progressiveLoad: false, // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.    hideOnTransparent: true, //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)    className: 'some-css-class-name',    id: 'some-id',  }});Doing this you will have to handle the canvas clearing after each frameAnother way to load animations is adding specific attributes to a dom element.You have to include a div and set it's class to \""lottie\"".If you do it before page load, it will automatically search for all tags with the class \""lottie\"".Or you can call lottie.searchAnimations() after page load and it will search all elements with the class \""lottie\"".Add the data.json to a folder relative to the htmlCreate a div that will contain the animation.RequiredA class called \""lottie\""A \""data-animation-path\"" attribute with relative path to the data.jsonOptionalA \""data-anim-loop\"" attributeA \""data-name\"" attribute to specify a name to target play controls specificallyExample <div style=\""width:1067px;height:600px\""  class=\""lottie\"" data-animation-path=\""animation/\"" data-anim-loop=\""true\"" data-name=\""ninja\""></div>PreviewYou can preview or take an svg snapshot of the animation to use as poster. After you render your animation, you can take a snapshot of any frame in the animation and save it to your disk. I recommend to pass the svg through an svg optimizer like https://jakearchibald.github.io/svgomg/ and play around with their settings.RecommendationsFilesIf you have any images or AI layers that you haven't converted to shapes (I recommend that you convert them, so they get exported as vectors, right click each layer and do: \""Create shapes from Vector Layers\""), they will be saved to an images folder relative to the destination json folder.Beware not to overwrite an existing folder on that same location.PerformanceThis is real time rendering. Although it is pretty optimized, it always helps if you keep your AE project to what is necessaryMore optimizations are on their way, but try not to use huge shapes in AE only to mask a small part of it.Too many nodes will also affect performance.HelpIf you have any animations that don't work or want me to export them, don't hesitate to write. I'm really interested in seeing what kind of problems the plugin has. my email is hernantorrisi@gmail.comAE Feature SupportThe script supports precomps, shapes, solids, images, null objects, textsIt supports masks and inverted masks. Maybe other modes will come but it has a huge performance hit.It supports time remappingThe script supports shapes, rectangles, ellipses and stars.Expressions. Check the wiki page for more info.Not supported: image sequences, videos and audio are not supportedNo  negative layer stretching! No idea why, but stretching a layer messes with all the data.Developmentnpm install or bower install firstnpm startNotesIf you want to modify the parser or the player, there are some gulp commands that can simplify the tasklook at the great animations exported on codepen See examples on codepen.gzipping the animation jsons and the player have a huge reduction on the filesize. I recommend doing it if you use it for a project.IssuesFor missing mask in Safari browser, please call lottie.setLocationHref(locationHref) before animation is generated. It usually caused by usage of base tag in html. (see above for description of setLocationHref)ContributorsCode ContributorsThis project exists thanks to all the people who contribute. [Contribute].Financial ContributorsBecome a financial contributor and help us sustain our community. [Contribute]IndividualsOrganizationsSupport this project with your organization. Your logo will show up here with a link to your website. [Contribute]"
87,bloominstituteoftechnology/node-db3-project,https://github.com/bloominstituteoftechnology/node-db3-project/blob/main/README.md,JavaScript,"Node DB3 Project Starter CodeTask 1: Project Setup and SubmissionYour assignment page on Canvas should contain instructions for submitting this project. If you are still unsure, reach out to School Staff.Task 2: Project Minimum Viable ProductDatabaseOpen data/schemes.db3 using a graphical tool like SQLite Studio and study the data inside the schemes and steps tables. The data can be reset at any time by executing npm run seed.APIOpen api/schemes/scheme-router.js and study the specification for each endpoint. You do not need to make any changes to this file.[GET] /api/schemes[GET] /api/schemes/:scheme_id[GET] /api/schemes/:scheme_id/steps[POST] /api/schemes[POST] /api/schemes/:scheme_id/stepsMiddleware FunctionsWrite middleware functions in api/schemes/scheme-middleware.js following the instructions inside that file: checkSchemeId validateScheme validateStepDatabase FunctionsWrite db access functions in api/schemes/scheme-model.js following the instructions inside that file: find findById findSteps add addStepSchemes Schemafielddata typemetadatascheme_idunsigned integerprimary key, auto-increments, generated by dbscheme_namestringrequired, uniqueSteps Schemafielddata typemetadatastep_idunsigned integerprimary key, auto-increments, generated by dbscheme_idunsigned integerforeign key referencing scheme.scheme_id, requiredstep_numberunsigned integerrequiredinstructionsstringrequiredNotesRun tests locally executing npm test.You are welcome to create additional modules but do not move or rename existing files or folders.Do not change your package.json file except to install additional libraries or add additional scripts.In your solution it is essential that you follow best practices and produce clean and professional results.Schedule time to review, refine, and assess your work.Perform basic professional polishing including spell-checking and grammar-checking on your work.Task 3: Multi Table QueriesUse a graphical tool like SQLite Studio to open ./data/northwind.db3 and execute the following queries:(Write the queries inside ./queries.sql under the corresponding comment)Display the ProductName and CategoryName for all products in the database. Returns 77 records.Display the order Id and shipper CompanyName for all orders placed before August 9 2012. Returns 429 records.Display the name and quantity of the products ordered in order with Id 10251. Sort by ProductName. Returns 3 records.Display the OrderID, customer's Company Name and the employee's Last Name for every order. All columns should be labeled clearly. Returns 16,789 records.Task 4: Stretch ProblemsIn SQL Try Editor at W3Schools.com:Find the number of shipments by each shipper.Find the top 5 best performing employees measured in number of orders.Find the top 5 best performing employees measured in revenue.Find the category that brings in the least revenue.Find the customer country with the most orders.Find the shipper that moves the most cheese measured in units."
