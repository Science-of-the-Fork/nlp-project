,repo_name,url,language,readme_content
0,twbs/bootstrap,https://github.com/twbs/bootstrap/blob/main/README.md,JavaScript,"        Bootstrap  Sleek, intuitive, and powerful front-end framework for faster and easier web development.    Explore Bootstrap docs »      Report bug  ·  Request feature  ·  Themes  ·  BlogBootstrap 5Our default branch is for development of our Bootstrap 5 release. Head to the v4-dev branch to view the readme, documentation, and source code for Bootstrap 4.Table of contentsQuick startStatusWhat's includedBugs and feature requestsDocumentationContributingCommunityVersioningCreatorsThanksCopyright and licenseQuick startSeveral quick start options are available:Download the latest releaseClone the repo: git clone https://github.com/twbs/bootstrap.gitInstall with npm: npm install bootstrap@v5.3.1Install with yarn: yarn add bootstrap@v5.3.1Install with Composer: composer require twbs/bootstrap:5.3.1Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sassRead the Getting started page for information on the framework contents, templates, examples, and more.StatusWhat's includedWithin the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations.  Download contentsbootstrap/├── css/│   ├── bootstrap-grid.css│   ├── bootstrap-grid.css.map│   ├── bootstrap-grid.min.css│   ├── bootstrap-grid.min.css.map│   ├── bootstrap-grid.rtl.css│   ├── bootstrap-grid.rtl.css.map│   ├── bootstrap-grid.rtl.min.css│   ├── bootstrap-grid.rtl.min.css.map│   ├── bootstrap-reboot.css│   ├── bootstrap-reboot.css.map│   ├── bootstrap-reboot.min.css│   ├── bootstrap-reboot.min.css.map│   ├── bootstrap-reboot.rtl.css│   ├── bootstrap-reboot.rtl.css.map│   ├── bootstrap-reboot.rtl.min.css│   ├── bootstrap-reboot.rtl.min.css.map│   ├── bootstrap-utilities.css│   ├── bootstrap-utilities.css.map│   ├── bootstrap-utilities.min.css│   ├── bootstrap-utilities.min.css.map│   ├── bootstrap-utilities.rtl.css│   ├── bootstrap-utilities.rtl.css.map│   ├── bootstrap-utilities.rtl.min.css│   ├── bootstrap-utilities.rtl.min.css.map│   ├── bootstrap.css│   ├── bootstrap.css.map│   ├── bootstrap.min.css│   ├── bootstrap.min.css.map│   ├── bootstrap.rtl.css│   ├── bootstrap.rtl.css.map│   ├── bootstrap.rtl.min.css│   └── bootstrap.rtl.min.css.map└── js/    ├── bootstrap.bundle.js    ├── bootstrap.bundle.js.map    ├── bootstrap.bundle.min.js    ├── bootstrap.bundle.min.js.map    ├── bootstrap.esm.js    ├── bootstrap.esm.js.map    ├── bootstrap.esm.min.js    ├── bootstrap.esm.min.js.map    ├── bootstrap.js    ├── bootstrap.js.map    ├── bootstrap.min.js    └── bootstrap.min.js.mapWe provide compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). Source maps (bootstrap.*.map) are available for use with certain browsers' developer tools. Bundled JS files (bootstrap.bundle.js and minified bootstrap.bundle.min.js) include Popper.Bugs and feature requestsHave a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.DocumentationBootstrap's documentation, included in this repo in the root directory, is built with Hugo and publicly hosted on GitHub Pages at https://getbootstrap.com/. The docs may also be run locally.Documentation search is powered by Algolia's DocSearch.Running documentation locallyRun npm install to install the Node.js dependencies, including Hugo (the site builder).Run npm run test (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.From the root /bootstrap directory, run npm run docs-serve in the command line.Open http://localhost:9001/ in your browser, and voilà.Learn more about using Hugo by reading its documentation.Documentation for previous releasesYou can find all our previous releases docs on https://getbootstrap.com/docs/versions/.Previous releases and their documentation are also available for download.ContributingPlease read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.CommunityGet updates on Bootstrap's development and chat with the project maintainers and community members.Follow @getbootstrap on Twitter.Read and subscribe to The Official Bootstrap Blog.Ask and explore our GitHub Discussions.Chat with fellow Bootstrappers in IRC. On the irc.libera.chat server, in the #bootstrap channel.Implementation help may be found at Stack Overflow (tagged bootstrap-5).Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.VersioningFor transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines. Sometimes we screw up, but we adhere to those rules whenever possible.See the Releases section of our GitHub project for changelogs for each release version of Bootstrap. Release announcement posts on the official Bootstrap blog contain summaries of the most noteworthy changes made in each release.CreatorsMark Ottohttps://twitter.com/mdohttps://github.com/mdoJacob Thorntonhttps://twitter.com/fathttps://github.com/fatThanks  Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!  Thanks to Netlify for providing us with Deploy Previews!SponsorsSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]BackersThank you to all our backers! 🙏 [Become a backer]Copyright and licenseCode and documentation copyright 2011–2023 the Bootstrap Authors. Code released under the MIT License. Docs released under Creative Commons."
1,trekhleb/javascript-algorithms,https://github.com/trekhleb/javascript-algorithms/blob/master/README.ar-AR.md,JavaScript,"جافا سكريبت خوارزميات  وهياكل البياناتتحتوي هذا مقالة على أمثلة عديدة تستند إلى الخوارزميات الشائعة وهياكل البيانات في الجافا سكريبت.كل خوارزمية وهياكل البيانات لها برنامج README منفصل خاص بهامع التفسيرات والروابط ذات الصلة لمزيد من القراءة (بما في ذلك تلكإلى مقاطع فيديو YouTube).اقرأ هذا في لغات أخرى:简体中文,繁體中文,한국어,日本語,Polski,Français,Español,Português,Русский,Türk,Italiana,Tiếng Việt,Deutsch☝ ملاحضة هذا المشروع مخصص للاستخدام لأغراض التعلم والبحثفقط ، و ** ليست ** معدة للاستخدام في الإنتاجهياكل البياناتهياكل البيانات هي طريقة خاصة لتنظيم البيانات وتخزينها في جهاز الكمبيوتر بحيثيمكن الوصول إليها وتعديلها بكفاءة. بتعبير أدق ، هيكل البيانات هو مجموعة من البياناتالقيم والعلاقات فيما بينها والوظائف أو العمليات التي يمكن تطبيقها عليهاالبيانات.B - مبتدئ, A - المتقدمةB قائمة مرتبطةB قائمة مرتبطة بشكل مضاعفB طابور, QueueB كومةB جدول التجزئةB كومة -الحد الأقصى والحد الأدنى من إصدارات الكومةB طابور الأولويةA تريA شجرةA شجرة البحث الثنائيةA شجرة AVLA شجرة الأحمر والأسودA شجرة القطعة - مع أمثلة على استفسارات النطاق الأدنى / الأقصى / المجموعA شجرة فينويك (شجرة ثنائية مفهرسة)A Graph (كلاهما موجه وغير موجه)A مجموعة منفصلةA مرشح بلومالخوارزمياتالخوارزمية هي تحديد لا لبس فيه لكيفية حل فئة من المشاكل. أنهمجموعة من القواعد التي تحدد بدقة تسلسل العمليات.B - مبتدئ ، A - متقدمالخوارزميات حسب الموضوعرياضياتB معالجة البتB عامليB رقم فيبوناتشي - الإصدارات الكلاسيكية والمغلقةB اختبار البدائية (طريقة تقسيم المحاكمة)B الخوارزمية الإقليدية - احسب القاسم المشترك الأكبر (GCD)B أقل مضاعف مشترك (LCM)B منخل إراتوستينس - إيجاد جميع الأعداد الأولية حتى أي حد معينB هي قوة اثنين - تحقق مما إذا كان الرقم هو قوة اثنين (الخوارزميات الساذجة والبتية)B مثلث باسكالB عدد مركب - الأعداد المركبة والعمليات الأساسية معهمB راديان ودرجة - راديان لدرجة التحويل والعكسB تشغيل سريعB طريقة هورنر - تقييم متعدد الحدودA قسم صحيحA الجذر التربيعي - طريقة نيوتنA خوارزمية ليو هوي π - π حسابات تقريبية على أساس N-gonsA تحويل فورييه المنفصل - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهامجموعاتB المنتج الديكارتي - منتج من مجموعات متعددةB فيشر ييتس شافل - التقليب العشوائي لتسلسل محدودA مجموعة الطاقة - جميع المجموعات الفرعية للمجموعة (حلول البت والتتبع التراجعي)A التباديل (مع وبدون التكرار)A مجموعات (مع وبدون التكرار)A أطول نتيجة مشتركة (LCS)A أطول زيادة متتاليةA أقصر تسلسل فائق مشترك (SCS)A مشكلة حقيبة الظهر - \""0/1\"" و \""غير منضم\""A الحد الأقصى من Subarray -إصدارات \""القوة الغاشمة\"" و \""البرمجة الديناميكية\"" (كادان)A مجموع الجمع - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًاسلاسلB مسافة هامنج - عدد المواقف التي تختلف فيها الرموزA المسافة ليفنشتاين - الحد الأدنى لمسافة التحرير بين تسلسلينA خوارزمية كنوث - موريس - برات (خوارزمية KMP) - بحث السلسلة الفرعية (مطابقة النمط)A خوارزمية Z - بحث سلسلة فرعية (مطابقة النمط)A خوارزمية رابين كارب - بحث السلسلة الفرعيةA أطول سلسلة فرعية مشتركةA مطابقة التعبير العاديعمليات البحثB البحث الخطيB بحث سريع (أو حظر البحث) - ابحث في مصفوفة مرتبةB بحث ثنائي - البحث في مجموعة مرتبةB بحث الاستيفاء - البحث في مجموعة مرتبة موزعة بشكل موحدفرزB Bubble SortB Selection SortB Insertion SortB Heap SortB Merge SortB Quicksort - عمليات التنفيذ في المكان وغير في المكانB ShellsortB Counting SortB Radix Sortالقوائم المرتبطةB Straight TraversalB Reverse TraversalالأشجارB Depth-First Search (DFS)B Breadth-First Search (BFS)الرسوم البيانيةB Depth-First Search (DFS)B Breadth-First Search (BFS)B Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Dijkstra Algorithm -إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Bellman-Ford Algorithm - إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Detect Cycle - لكل من الرسوم البيانية الموجهة وغير الموجهة (الإصدارات القائمة على DFS و Disjoint Set)A Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Topological Sorting - طريقة البحث العمق الأول (DFS)A Articulation Points - خوارزمية تارجان (تعتمد على DFS)A Bridges - خوارزمية تعتمد على DFSA Eulerian Path and Eulerian Circuit - خوارزمية فلوري - قم بزيارة كل حافة مرة واحدة بالضبطA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA Strongly Connected Components - خوارزمية KosarajuA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصلية**التشفيرB Polynomial Hash - المتداول دالة التجزئة على أساس متعدد الحدودB Caesar Cipher - استبدال بسيط للشفراتالتعلم الاليB NanoNeuron - 7 وظائف JS بسيطة توضح كيف يمكن للآلات أن تتعلم بالفعل (الانتشار إلى الأمام / الخلف)غير مصنفB Tower of HanoiB Square Matrix Rotation - خوارزمية في المكانB Jump Game - التراجع ، البرمجة الديناميكية (من أعلى إلى أسفل + من أسفل إلى أعلى) والأمثلة الجشعةB Unique Paths - التراجع والبرمجة الديناميكية والأمثلة القائمة على مثلث باسكالB Rain Terraces - محاصرة مشكلة مياه الأمطار (البرمجة الديناميكية وإصدارات القوة الغاشمة)B Recursive Staircase - احسب عدد الطرق للوصول إلى القمة (4 حلول)A N-Queens ProblemA Knight's Tourالخوارزميات حسب النموذجالنموذج الحسابي هو طريقة أو نهج عام يكمن وراء تصميم الفصلمن الخوارزميات. إنه تجريد أعلى من مفهوم الخوارزمية ، تمامًا مثلالخوارزمية هي تجريد أعلى من برنامج الكمبيوتر.القوة الغاشمة - انظر في جميع الاحتمالات وحدد الحل الأفضلB Linear SearchB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Maximum SubarrayA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصليةA Discrete Fourier Transform - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهاجشع - اختر الخيار الأفضل في الوقت الحالي ، دون أي اعتبار للمستقبلB Jump GameA Unbound Knapsack ProblemA Dijkstra Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهفرق تسد - قسّم المشكلة إلى أجزاء أصغر ثم حل تلك الأجزاءB Binary SearchB Tower of HanoiB Pascal's TriangleB Euclidean Algorithm - حساب القاسم المشترك الأكبر (GCD)B Merge SortB QuicksortB Tree Depth-First Search (DFS)B Graph Depth-First Search (DFS)B Jump GameB Fast PoweringA Permutations (مع التكرار وبدونه)A Combinations (مع التكرار وبدونه)البرمجة الديناميكية - بناء حل باستخدام الحلول الفرعية التي تم العثور عليها مسبقًاB Fibonacci NumberB Jump GameB Unique PathsB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Levenshtein Distance - الحد الأدنى لمسافة التحرير بين تسلسلينA Longest Common Subsequence (LCS)A Longest Common SubstringA Longest Increasing SubsequenceA Shortest Common SupersequenceA 0/1 Knapsack ProblemA Integer PartitionA Maximum SubarrayA Bellman-Ford Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Regular Expression Matchingالتراجع - على غرار القوة الغاشمة ، حاول إنشاء جميع الحلول الممكنة ، ولكن في كل مرة تقوم فيها بإنشاء الحل التالي الذي تختبرهإذا استوفت جميع الشروط ، وعندها فقط استمر في إنشاء الحلول اللاحقة. خلاف ذلك ، تراجع ، واذهب إلىطريق مختلف لإيجاد حل. عادةً ما يتم استخدام اجتياز DFS لمساحة الدولة.B Jump GameB Unique PathsB Power Set - جميع المجموعات الفرعية للمجموعةA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA N-Queens ProblemA Knight's TourA Combination Sum - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًا** Branch & Bound ** - تذكر الحل الأقل تكلفة الموجود في كل مرحلة من مراحل التراجعالبحث ، واستخدام تكلفة الحل الأقل تكلفة الموجود حتى الآن بحد أدنى لتكلفةالحل الأقل تكلفة للمشكلة ، من أجل تجاهل الحلول الجزئية بتكاليف أكبر منتم العثور على حل بأقل تكلفة حتى الآن. اجتياز BFS عادةً بالاشتراك مع اجتياز DFS لمساحة الحالةيتم استخدام الشجرة.كيفية استخدام هذا المستودعتثبيت كل التبعياتnpm installقم بتشغيل ESLintقد ترغب في تشغيله للتحقق من جودة الكود.npm run lintقم بإجراء جميع الاختباراتnpm testقم بإجراء الاختبارات بالاسمnpm test -- 'LinkedList'ملعبيمكنك اللعب بهياكل البيانات والخوارزميات في ملف . /src/playground/playground.js والكتابةاختبارات لها في ./src/playground/__test__/playground.test.js.ثم قم ببساطة بتشغيل الأمر التالي لاختبار ما إذا كان كود الملعب الخاص بك يعمل كما هو متوقع:npm test -- 'playground'معلومات مفيدةالمراجع▶ هياكل البيانات والخوارزميات على موقع يوتيوبBig O Notationيتم استخدام Big O notation لتصنيف الخوارزميات وفقًا لكيفية نمو متطلبات وقت التشغيل أو المساحة مع نمو حجم الإدخال.قد تجد في الرسم البياني أدناه الأوامر الأكثر شيوعًا لنمو الخوارزميات المحددة في تBig O notation.مصدر: Big O Cheat Sheet.فيما يلي قائمة ببعض رموز Big O notation الأكثر استخدامًا ومقارنات أدائها مقابل أحجام مختلفة من بيانات الإدخال.Big O NotationComputations for 10 elementsComputations for 100 elementsComputations for 1000 elementsO(1)111O(log N)369O(N)101001000O(N log N)306009000O(N^2)100100001000000O(2^N)10241.26e+291.07e+301O(N!)36288009.3e+1574.02e+2567تعقيد عمليات بنية البياناتData StructureAccessSearchInsertionDeletionCommentsArray1nnnStacknn11Queuenn11Linked Listnn1nHash Table-nnnفي حالة وجود تكاليف دالة تجزئة مثالية ستكون O (1)Binary Search Treennnnفي حالة توازن تكاليف الشجرة ستكون O (log (n))B-Treelog(n)log(n)log(n)log(n)Red-Black Treelog(n)log(n)log(n)log(n)AVL Treelog(n)log(n)log(n)log(n)Bloom Filter-11-الإيجابيات الكاذبة ممكنة أثناء البحثتعقيد خوارزميات فرز الصفيفNameBestAverageWorstMemoryStableCommentsBubble sortnn2n21نعمInsertion sortnn2n21نعمSelection sortn2n2n21لاHeap sortn log(n)n log(n)n log(n)1لاMerge sortn log(n)n log(n)n log(n)nنعمQuick sortn log(n)n log(n)n2log(n)Noعادةً ما يتم إجراء الفرز السريع في مكانه مع مساحة مكدس O (log (n))Shell sortn log(n)depends on gap sequencen (log(n))21لاCounting sortn + rn + rn + rn + rYesr - أكبر رقم في المجموعةRadix sortn * kn * kn * kn + kYesك - طول أطول مفتاحمؤيدو المشروعيمكنك دعم هذا المشروع عبر ❤️️ GitHub أو ❤️️ Patreon.الناس الذين يدعمون هذا المشروع ∑ = 0ℹ️ A few more projects and articles about JavaScript and algorithms on trekhleb.dev"
2,angular/angular.js,https://github.com/angular/angular.js/blob/master/README.closure.md,JavaScript,"Using AngularJS with the Closure CompilerThe Closure Compiler project contains definitions for the AngularJS JavaScriptin its contrib/externs directory.The definitions contain externs for use with the Closure compiler (akaJSCompiler). Passing these files to the --externs parameter of a compilerpass allows using type annotations for AngularJS objects. For example,AngularJS's $scope objects can be annotated as:/** @type {angular.Scope} */var scope = $scope;This allows JSCompiler to type check accesses to scope, give warnings aboutmissing methods or incorrect arguments, and also prevents renaming of propertyaccesses with advanced compilation.The externs are incomplete and maintained on an as-needed basis, but strive tobe correct. Externs for individual modules should be added in separate files.See https://developers.google.com/closure/compiler/"
3,scutan90/DeepLearning-500-questions,https://github.com/scutan90/DeepLearning-500-questions/blob/master/README.md,JavaScript,京东售卖链接：https://item.jd.com/12785031.html京东商城100多家书店有现货。深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著内容简介本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。作者简介谈继勇 主编南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。郭子钊 副主编四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。李剑 副主编同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。佃松宜 副主编日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。王晋东 特邀编委中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。王超锋上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。郭晓锋中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。黄伟华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。陈方杰（Amusi）上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。李元伟国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。陈琳北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。目录第1章 数学基础 11.1 向量和矩阵 11.1.1 标量、向量、矩阵和张量 11.1.2 张量与矩阵的区别 21.1.3 矩阵和向量相乘的结果 21.1.4 向量和矩阵的范数归纳 21.1.5 判断一个矩阵是否为正定矩阵 41.2 导数和偏导数 51.2.1 导数偏导计算 51.2.2 导数和偏导数的区别 61.3 特征值和特征向量 61.3.1 特征值分解 61.3.2 奇异值和特征值的关系 61.4 概率分布与随机变量 71.4.1 机器学习为什么要使用概率 71.4.2 变量与随机变量的区别 71.4.3 随机变量与概率分布的联系 81.4.4 离散型随机变量和概率质量函数 81.4.5 连续型随机变量和概率密度函数 81.4.6 举例理解条件概率 91.4.7 联合概率与边缘概率的区别和联系 91.4.8 条件概率的链式法则 101.4.9 独立性和条件独立性 101.5 常见概率分布 111.5.1 伯努利分布 111.5.2 高斯分布 111.5.3 何时采用正态分布 121.5.4 指数分布 121.5.5 Laplace分布 131.5.6 Dirac分布和经验分布 131.6 期望、方差、协方差、相关系数 131.6.1 期望 131.6.2 方差 141.6.3 协方差 141.6.4 相关系数 15第2章 机器学习基础 162.1 基本概念 162.1.1 大话机器学习本质 162.1.2 什么是神经网络 162.1.3 各种常见算法图示 172.1.4 计算图的导数计算 172.1.5 理解局部最优与全局最优 182.1.6 大数据与深度学习之间的关系 192.2 机器学习的学习方式 202.2.1 监督学习 202.2.2 非监督学习 202.2.3 半监督学习 202.2.4 弱监督学习 202.2.5 监督学习模型的搭建步骤 212.3 分类算法 222.3.1 常用分类算法的优缺点 222.3.2 分类算法的评估方法 232.3.3 正确率能否很好地评估分类算法 252.3.4 什么样的分类器是最好的 262.4 逻辑回归 262.4.1 回归的种类 262.4.2 逻辑回归适用性 272.4.3 逻辑回归与朴素贝叶斯的区别 272.4.4 线性回归与逻辑回归的区别 272.5 代价函数 282.5.1 为什么需要代价函数 282.5.2 代价函数作用原理 282.5.3 常见代价函数 302.5.4 为什么代价函数要非负 312.5.5 为什么用交叉熵代替二次代价函数 312.6 损失函数 322.6.1 什么是损失函数 322.6.2 常见的损失函数 322.6.3 逻辑回归为什么使用对数损失函数 342.6.4 对数损失函数如何度量损失 342.7 梯度下降法 352.7.1 梯度下降法的作用 362.7.2 梯度下降法的直观理解 362.7.3 梯度下降法算法描述 372.7.4 梯度下降法的缺点 382.7.5 如何对梯度下降法进行调优 382.7.6 随机梯度下降和批量梯度下降的区别 382.7.7 各种梯度下降法性能比较 402.8 线性判别分析 402.8.1 LDA思想总结 402.8.2 图解LDA核心思想 412.8.3 二类LDA算法原理 412.8.4 LDA算法流程总结 422.8.5 LDA和PCA的异同 432.8.6 LDA的优缺点 432.9 主成分分析 432.9.1 图解PCA核心思想 432.9.2 PCA算法推理 442.9.3 PCA算法流程总结 452.9.4 PCA思想总结 462.9.5 PCA算法的优缺点 462.9.6 降维的必要性及目的 462.9.7 KPCA与PCA的区别 472.10 模型评估 472.10.1 模型评估常用方法 482.10.2 误差、偏差和方差的区别和联系 482.10.3 为什么使用标准差 492.10.4 经验误差与泛化误差 502.10.5 图解欠拟合与过拟合 502.10.6 如何解决欠拟合与过拟合 522.10.7 交叉验证的主要作用 522.10.8 理解K折交叉验证 532.10.9 理解混淆矩阵 532.10.10 理解查准率与查全率 532.10.11 理解ROC与AUC 542.10.12 如何绘制ROC曲线 552.10.13 如何计算TPR和FPR 562.10.14 如何计算AUC 582.10.15 直观理解AUC 582.10.16 ROC评估分类器 602.10.17 代价敏感错误率与代价曲线 602.10.18 比较检验方法 612.11 决策树 612.11.1 决策树的基本原理 622.11.2 决策树的生成过程 622.11.3 决策树学习基本算法步骤 622.11.4 决策树算法的优缺点 632.11.5 决策树和熵的联系 632.11.6 熵的概念及定义 632.11.7 理解信息增益 642.11.8 决策树中熵、条件熵和信息增益的联系 642.11.9 决策树算法中剪枝的作用及策略 652.12 支持向量机（SVM） 652.12.1 什么是SVM 652.12.2 SVM能解决的问题 662.12.3 核函数特点及其作用 672.12.4 SVM为什么引入对偶问题 672.12.5 如何理解SVM中的对偶问题 672.12.6 常见的核函数 692.12.7 SVM的主要特点 692.12.8 SVM的主要缺点 702.12.9 逻辑回归与SVM的异同 702.13 贝叶斯分类器 722.13.1 贝叶斯分类器的基本原理 722.13.2 朴素贝叶斯分类器 722.13.3 举例理解朴素贝叶斯分类器 732.13.4 半朴素贝叶斯分类器 752.13.5 极大似然估计和贝叶斯估计的联系与区别 752.13.6 极大似然估计原理 762.13.7 图解极大似然估计 762.14 EM算法 772.14.1 EM算法的基本思想 772.14.2 EM算法推导 772.14.3 图解EM算法 782.14.4 EM算法流程 792.15 降维和聚类 792.15.1 图解为什么会产生维数灾难 792.15.2 怎样避免维数灾难 832.15.3 聚类和降维 832.15.4 聚类算法优劣的衡量标准 842.15.5 聚类和分类 852.15.6 聚类算法的性能比较 852.15.7 4种常用聚类方法比较 85第3章 深度学习基础 893.1 基本概念 893.1.1 神经网络的类型 893.1.2 神经网络的常用模型结构 923.1.3 深度学习和机器学习的区别与联系 933.1.4 为什么使用深层表示 933.1.5 深度学习架构分类 943.1.6 如何选择深度学习开发平台 943.2 神经网络计算 953.2.1 前向传播和反向传播 953.2.2 如何计算神经网络的输出 963.2.3 如何计算卷积神经网络输出值 973.2.4 如何计算池化层输出值 1003.2.5 反向传播实例 1013.2.6 神经网络更“深”的意义 1043.3 激活函数 1043.3.1 为什么需要激活函数 1043.3.2 为什么激活函数需要非线性函数 1053.3.3 常见的激活函数及其图像 1053.3.4 常见激活函数的导数计算 1073.3.5 激活函数有哪些性质 1083.3.6 如何选择激活函数 1083.3.7 为什么tanh收敛速度比sigmoid快 1093.3.8 Relu激活函数的优点 1093.3.9 理解Relu激活函数的稀疏激活性 1093.3.10 什么时候可以用线性激活函数 1093.3.11 softmax函数的定义及作用 1103.3.12 softmax函数如何应用于多分类 1103.4 BATCH SIZE 1123.4.1 为什么需要Batch Size 1123.4.2 如何选择Batch Size值 1123.4.3 调节Batch Size对训练效果的影响 1133.4.4 在合理范围内增大Batch Size的好处 1133.4.5 盲目增大Batch Size的坏处 1143.5 归一化 1143.5.1 理解归一化含义 1143.5.2 归一化和标准化的联系与区别 1143.5.3 为什么要归一化或标准化 1153.5.4 图解为什么要归一化 1153.5.5 为什么归一化能提高求最优解速度 1153.5.6 归一化有哪些类型 1163.5.7 局部响应归一化作用 1163.5.8 局部响应归一化原理 1173.5.9 什么是批归一化 1183.5.10 批归一化的优点 1183.5.11 批归一化算法流程 1183.5.12 批归一化和组归一化比较 1193.5.13 权重归一化和批归一化比较 1193.5.14 批归一化适用范围 1203.5.15 BN、LN、IN和GN的对比 1203.6 参数初始化 1213.6.1 参数初始化应满足的条件 1213.6.2 常用的几种初始化方式 1213.6.3 全0初始化带来的问题 1213.6.4 全都初始化为同样的值 1223.6.5 初始化为小的随机数 1233.6.6 用 校准方差 1233.7 预训练与微调 1233.7.1 什么是预训练和微调 1233.7.2 预训练和微调的作用 1243.7.3 预训练模型的复用 1243.7.4 预训练和迁移学习 1253.7.5 微调时网络参数是否更新 1253.7.6 微调模型的三种状态 1253.7.7 为什么深层神经网络难以训练 1253.8 超参数 1273.8.1 超参数有哪些 1273.8.2 参数和模型的关系 1273.8.3 参数和超参数的区别 1273.8.4 如何寻找超参数的最优值 1283.8.5 超参数搜索的一般过程 1283.9 学习率 1293.9.1 学习率的作用 1293.9.2 学习率衰减的常用参数 1293.9.3 常用的学习率衰减方法 1293.10 正则化 1333.10.1 为什么要正则化 1333.10.2 常见正则化方法 1333.10.3 图解L1和L2正则化 1343.10.4 Dropout具体工作流程 1353.10.5 为什么Dropout可以解决过拟合问题 1373.10.6 Dropout的缺点
4,FortAwesome/Font-Awesome,https://github.com/FortAwesome/Font-Awesome/blob/6.x/README.md,JavaScript,"Version 6Font Awesome is the Internet's icon library and toolkit, used by millions ofdesigners, developers, and content creators.DocumentationLearn how to get started with Font Awesome and then dive deeper into other and advanced topics:Docs for version 6Where did Font Awesome 5, 4 (or 3) go?Now that Font Awesome 6 has been released we are marking version 5 as Long TermSupport (LTS). Version 5 will get critical bug fixes only. Version 3 and 4 arenow end-of-life and we don't plan on releasing any further versions of the 4.xor 3.x.You can see a complete list of versions on our Versionspage.Change logThe change log for releases is now available directly on our site.Looking for older versions of Font Awesome? Check the releases.UpgradingFrom time-to-time we'll have special upgrading instructions from one version to the next.Web upgrading guideDesktop upgrading guideCode of conductWe will behave ourselves if you behave yourselves. For more details see ourCODE_OF_CONDUCT.md.ContributingPlease read through our contributing guidelines.  Includedare directions for opening issues.VersioningFont Awesome will be maintained under the Semantic Versioning guidelines as much as possible. Releases will be numberedwith the following format:<major>.<minor>.<patch>For more information on SemVer, please visit https://semver.org.The major version \""6\"" is part of an umbrella release.  It includes many different types of files and technologies. Thereforewe deviate from normal SemVer in the following ways:Any release may update the design, look-and-feel, or branding of an existingiconWe will never intentionally release a patch version update that breaksbackward compatibilityA minor release may include backward-incompatible changes but we willwrite clear upgrading instructions in UPGRADING.mdA minor or patch release will never remove iconsBug fixes will be addressed as patch releases unless they include backwardincompatibility then they will be minor releasesLicenseFont Awesome Free is free, open source, and GPL friendly. You can use it forcommercial projects, open source projects, or really almost whatever you want.Icons — CC BY 4.0 LicenseIn the Font Awesome Free download, the CC BY 4.0 license applies to all icons packaged as .svg and .js files types.Fonts — SIL OFL 1.1 LicenseIn the Font Awesome Free download, the SIL OLF license applies to all icons packaged as web and desktop font files.Code — MIT LicenseIn the Font Awesome Free download, the MIT license applies to all non-font and non-icon files.Attribution is required by MIT, SIL OLF, and CC BY licenses. Downloaded FontAwesome Free files already contain embedded comments with sufficientattribution, so you shouldn't need to do anything additional when using thesefiles normally.We've kept attribution comments terse, so we ask that you do not actively workto remove them from files, especially code. They're a great way for folks tolearn about Font Awesome.Teamhttps://github.com/orgs/FortAwesome/people"
5,OpenZeppelin/openzeppelin-contracts,https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/README.md,JavaScript,"WarningVersion 5.0 is under active development. The code in this branch is not recommended for use.A library for secure smart contract development. Build on a solid foundation of community-vetted code.Implementations of standards like ERC20 and ERC721.Flexible role-based permissioning scheme.Reusable Solidity components to build custom contracts and complex decentralized systems.🧙 Not sure how to get started? Check out Contracts Wizard — an interactive smart contract generator.🏗️ Want to scale your decentralized application? Check out OpenZeppelin Defender — a secure platform for automating and monitoring your operations.OverviewInstallationHardhat, Truffle (npm)$ npm install @openzeppelin/contractsOpenZeppelin Contracts features a stable API, which means that your contracts won't break unexpectedly when upgrading to a newer minor version.Foundry (git)Warning When installing via git, it is a common error to use the master branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the master branch does not guarantee.Warning Foundry installs the latest version initially, but subsequent forge update commands will use the master branch.$ forge install OpenZeppelin/openzeppelin-contractsAdd @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/ in remappings.txt.UsageOnce installed, you can use the contracts in the library by importing them:pragma solidity ^0.8.20;import {ERC721} from \""@openzeppelin/contracts/token/ERC721/ERC721.sol\"";contract MyCollectible is ERC721 {    constructor() ERC721(\""MyCollectible\"", \""MCO\"") {    }}If you're new to smart contract development, head to Developing Smart Contracts to learn about creating a new project and compiling your contracts.To keep your system secure, you should always use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.Learn MoreThe guides in the documentation site will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:Access Control: decide who can perform each of the actions on your system.Tokens: create tradeable assets or collectives, and distribute them via Crowdsales.Utilities: generic useful tools including non-overflowing math, signature verification, and trustless paying systems.The full API is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts's development in the community forum.Finally, you may want to take a look at the guides on our blog, which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.The Hitchhiker’s Guide to Smart Contracts in Ethereum will help you get an overview of the various tools available for smart contract development, and help you set up your environment.A Gentle Introduction to Ethereum Programming, Part 1 provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.For a more in-depth dive, you may read the guide Designing the Architecture for Your Ethereum Application, which discusses how to better structure your application and its relationship to the real world.SecurityThis project is maintained by OpenZeppelin with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.The OpenZeppelin Contracts Security Center contains more details about the secure development process.The security policy is detailed in SECURITY.md as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a bug bounty program on Immunefi to reward the responsible disclosure of vulnerabilities.The engineering guidelines we follow to promote project quality can be found in GUIDELINES.md.Past audits can be found in audits/.Smart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.OpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.ContributeOpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the contribution guide!LicenseOpenZeppelin Contracts is released under the MIT License.LegalYour use of this Project is governed by the terms found at www.openzeppelin.com/tos (the \""Terms\"")."
6,AlreadyBored/basic-js,https://github.com/AlreadyBored/basic-js/blob/master/README.md,JavaScript,"BasicJS⚠️ DO NOT SUBMIT PULL REQUESTS TO THIS REPO ⚠️PrerequisitesInstall Node.jsFork this repository: https://github.com/AlreadyBored/basic-jsClone your newly created repo: https://github.com/<%your_github_username%>/basic-js/Go to folder basic-jsTo install all dependencies use npm installRun npm run test in command line.You will see the number of pending, passing and failing tests. 100% of passing tests is equal to max score for the taskTroubleshootingIf you catch error like this you can try to make npm install -g node-gypSubmit to rs appOpen rs app and loginGo to submit task pageSelect your task (BasicJS)Press the submit button and enjoyNotesWe recommend you to use Node.js of version 16.x.x LTS. If you use any of features, that does not supported by Node.js v16, there may be problems with task submit.Please, be sure that each of your tests is limited to 30 sec.General task descriptionYour task is to write several functions that are the solution to the subtasks. Subtasks descriptions, as well as instructions on how to run tests and submit solutions are below.Count cats!Your task is to count the cats hidden in the backyard (presented by two-dimensional Array). Cats hide well, but their ears (\""^^\"") are clearly visible. Your task is to implement the countCats(backyard) function that will count cats. Good luck!Number of cats found should be number. If no cats found, function should return 0.For example:countCats([ [0, 1, '^^'], [0, '^^', 2], ['^^', 1, 2] ]) => 3Write your code in src/count-cats.js.Carbon datingTo determine the age of archaeological finds, radioisotope dating is widely used. One of its types is radiocarbon dating.The approximate age of the sample is calculated by measuring the ratio of the modern activity of the C14 isotope to the activity of the same isotope in the sample.Read about method  About calculations  You can use the formula from the article at the link above. 0.693 is an approximation of the natural logarithm of two.Your task is to implement the function dateSample(sampleActivity) that calculates sample approximate age (in years). Please use given MODERN_ACTIVITY and HALF_LIFE_PERIOD.Function parameter sampleActivity is a string. Calculated sample age must be number.Age must be integer. Age must be rounded up (ceiling). In case of wrong input parameter type or inadequate activity value or absence of argument function must return false.For example:dateSample('1') => 22387 (or 22392 depending on formula used)dateSample('WOOT!') => falseWrite your code in src/carbon-dating.js.Dream teamImagine you and your friends decide to create a dream team. This team should have a cool secret name that contains encrypted information about it. For example, these may be the first letters of the names of its members in upper case sorted alphabetically.Your task is to implement the createDreamTeam(members) function that returns name of a newly made team (string) based on the names of its members (Array). Good luck!Names of the members should be strings. Values with other type should be ignored. In case of wrong members type function must return false.NB! Team member name may contain whitespaces.For example:createDreamTeam(['Matt', 'Ann', 'Dmitry', 'Max']) => 'ADMM'createDreamTeam(['Olivia', 1111, 'Lily', 'Oscar', true, null]) => 'LOO'Write your code in src/dream-team.js.What season?Your task is to implement the function getSeason(date) that accepts Date object and returns the time of the year that matches it.Time of the year must be string.Seasons in EnglishThe names of the seasons in English are: spring, summer, autumn (fall), winter.If the date argument was not passed, the function must return the string 'Unable to determine the time of year!'. If the date argument is invalid, the function must throw an Error with message Invalid date!.Shh! An enemy scout has lurked among the arguments that come into this function.He is guided by the famous proverb: “If it looks like a duck, swims like a duck and quacks like a duck, then it probably is a duck (who cares what it really is)”. He is expertly disguised as a real date, but a clever javascript developer can catch him and throw an Error with message Invalid date! just in time!For example:const springDate = new Date(2020, 02, 31)getSeason(springDate) => 'spring'Write your code in src/what-season.js.Tower of HanoiTower of Hanoi is famous mathematical puzzle of the 18th century.It consists of three rods and a number of disks of different sizes, which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:Only one disk can be moved at a time.Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.No larger disk may be placed on top of a smaller disk.Your task is much easier than coming up with an algorithm that solves this puzzle :)Implement the function calculateHanoi that accepts diskNumber and turnsSpeed parameters. diskNumber is a number of disks and turnsSpeed is the speed of moving discs (in turns per hour).Both parameters are numbers.calculateHanoi function returns an object with 2 properties:turns (minimum number of turns to solve the puzzle)seconds (minimum number of seconds to solve the puzzle at a given turnsSpeed, seconds must be an integer, obtained  from rounded down (floor) calculation result)You don't need to validate parameters.For example:calculateHanoi(9, 4308) => { turns: 511, seconds: 427 }Write your code in src/hanoi-tower.js.Transform arrayYour task is to implement the function transform(arr) that takes an array and returns transformed array, based on the control sequences that arr contains.Control sequences are defined string elements of the mentioned array:--discard-next excludes the next element of the array from the transformed array.--discard-prev excludes the previous element of the array from the transformed array.--double-next duplicates the next element of the array in the transformed array.--double-prev duplicates the previous element of the array in the transformed array.For example:transform([1, 2, 3, '--double-next', 4, 5]) => [1, 2, 3, 4, 4, 5]transform([1, 2, 3, '--discard-prev', 4, 5]) => [1, 2, 4, 5]The function must not affect inital array. Control sequences are applied from left to right to initial array elements. Control sequences do not fall into the transformed array. Control sequences in initial array don't occur in a row. If there is no element next to the control sequence to which it can be applied in the initial array, or this element was previously deleted, it does nothing. The function should throw an Error with message 'arr' parameter must be an instance of the Array! if the arr is not an Array.Write your code in src/transform-array.js.Chain makerLet's practice in chaining!Your task is to create the object chainMaker that creates chains. The finished chain is a string and looks like this: '( value1 )~~( value2 )~~( value3 )'.The chainMaker has several methods for creating chains and modifying them:getLength returns the current chain length as a number;addLink(value) adds a link containing a string representation of the value to the chain;removeLink(position) removes a chain link in the specified position;reverseChain reverses the chain;finishChain ends the chain and returns it.addLink, reverseChain and removeLink methods are chainable, while the another ones are not. If addLink is called with no arguments, it adds an empty link ('(  )') to the chain. If removeLink accepts invalid position (e.g. not a number, or a fractional number, or corresponding to a nonexistent link), it must throw an Error with message You can't remove incorrect link!. After calling the finishChain method, the existing chain must be deleted, as if an Error was thrown.For example:chainMaker.addLink(1).addLink(2).addLink(3).finishChain() => '( 1 )~~( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).removeLink(1).addLink(3).finishChain() => '( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).reverseChain().addLink(3).finishChain() => '( 2 )~~( 1 )~~( 3 )'Write your code in src/simple-chain.js.Recursive depth calculatorYour task is to implement the class DepthCalculator with method calculateDepth that takes an array and returns its depth.calculateDepth method must pass the given array recursively. Depth of a flat array is 1. Method must correctly work with arrays that contain no elements or contain empty arrays.For example:const depthCalc = new DepthCalculator();depthCalc.calculateDepth([1, 2, 3, 4, 5]) => 1depthCalc.calculateDepth([1, 2, 3, [4, 5]]) => 2depthCalc.calculateDepth([[[]]]) => 3Write your code in src/recursive-depth.js.Extended repeaterYour task is to implement the function repeater(str, options).This function returns a repeating string based on the given parameters:str is a string to repeat;options is an object of options, that contains properties:repeatTimes sets the number of repetitions of the str;separator is a string separating repetitions of the str;addition is an additional string that will be added to each repetition of the str;additionRepeatTimes sets the number of repetitions of the addition;additionSeparator is a string separating repetitions of the addition.The str and addition parameters are strings by default. In case when type of these parameters is different, they must be converted to a string.separator and additionSeparator parameters are strings.repeatTimes and additionRepeatTimes are integer numbers (in the absence of any of them, the corresponding string is not repeated).The only indispensable parameter is str, any others may be not defined. separator default value is '+'. additionSeparator default value is '|'.For example: repeater('STRING', { repeatTimes: 3, separator: '**', addition: 'PLUS', additionRepeatTimes: 3, additionSeparator: '00' }) => 'STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS'Write your code in src/extended-repeater.js.Vigenere cipherCryptography is awesome! Let's try to organize production of encryption machines. Our machines will use one of the encryption methods that are easy to understand, but also not amenable to simple cryptanalysis - the Vigenere cipher.Our machine will have 2 modifications: direct and reverse (the type of machine is determined at the moment of creation). The direct machine simply encodes and decodes the string that was transmitted to it, and the reverse machine returns an inverted string after encoding and decoding.Your task is to implement the class VigenereCipheringMachine. constructor of this class accepts true (or nothing) to create direct machine and false to create reverse machine.Each instance of VigenereCipheringMachine must have 2 methods: encrypt and decrypt.encrypt method accepts 2 parameters: message (string to encode) and key (string-keyword).decrypt method accepts 2 parameters: encryptedMessage (string to decode) and key (string-keyword).These parameters for both methods are mandatory. If at least one of them has not been given, an Error with message Incorrect arguments! must be thrown. The text returned by these methods must be uppercase. Machines encrypt and decrypt only latin alphabet (all other symbols remain unchanged).You don't need to validate value sent to constructor and to encrypt and decrypt methods (except throwing an Error on absence of argument for these methods).For example:const directMachine = new VigenereCipheringMachine();const reverseMachine = new VigenereCipheringMachine(false);directMachine.encrypt('attack at dawn!', 'alphonse') => 'AEIHQX SX DLLU!'directMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => 'ATTACK AT DAWN!'reverseMachine.encrypt('attack at dawn!', 'alphonse') => '!ULLD XS XQHIEA'reverseMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => '!NWAD TA KCATTA'Write your code in src/vigenere-cipher.js.(ST) Common character countYour task is to implement function that accepts two strings (s1 and s2) and returns number of common characters between them.For example:getCommonCharacterCount('aabcc', 'adcaa') => 3Write your code in src/common-character-count.js.(ST) Delete digitYour task is to implement function that accepts integer number (n) and returns maximal number you can obtain by deleting exactly one digit of the given number.For example:deleteDigit(152) => 52Write your code in src/delete-digit.js.(ST) DNS statYour task is to implement function that accepts an array of domains (domains) and returns the object with the appearances of the DNS.For example:getDNSStats(['code.yandex.ru', 'music.yandex.ru', 'yandex.ru']) => {'.ru': 3, '.ru.yandex': 3, '.ru.yandex.code': 1,'.ru.yandex.music': 1}Write your code in src/dns-stats.js.(ST) Encode lineYour task is to implement function that accepts string (str) and returns its encoded version.For example:encodeLine('aabbbc') => '2a3bc'Write your code in src/encode-line.js.(ST) File namesThere's a list of file, since two files cannot have equal names, the one which comes later will have a suffix (k), where k is the smallest integer such that the found name is not used yet.Your task is to implement function that accepts array of names (names) and returns an array of names that will be given to the files.For example:renameFiles([\""file\"", \""file\"", \""image\"", \""file(1)\"", \""file\""]) => [\""file\"", \""file(1)\"", \""image\"", \""file(1)(1)\"", \""file(2)\""]Write your code in src/file-names.js.(ST) Get email domainYour task is to implement function that accepts email address (email) and returns it's domain.For example:getEmailDomain('prettyandsimple@example.com') => 'example.com'Write your code in src/get-email-domain.js.(ST) Is MAC-48 Address?The MAC-48 address is six groups of two hexadecimal digits (0 to 9 or A to F) separated by hyphens.Your task is to implement function that accepts string (inputString) and returns true if string is valid MAC-48 address.For example:isMAC48Address('00-1B-63-84-45-E6') => trueWrite your code in src/mac-adress.js.(ST) Matrix elements sumGiven matrix, a rectangular matrix of integers, just add up all the values that don't appear below a \""0\"".For example:const matrix = [ [0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]];getMatrixElementsSum(matrix) => 9Write your code in src/matrix-elements-sum.js.(ST) MinesweeperIn the popular Minesweeper game you have a board with some mines and cells that have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.For example:const matrix = [ [true, false, false], [false, true, false], [false, false, false]];minesweeper(matrix) => [ [1, 2, 1], [2, 1, 1], [1, 1, 1]];Write your code in src/mine-sweeper.js.(ST) Sort by heightGiven an array with heights, sort them except if the value is -1.Your task is to implement function that accepts array (arr) and returns it sortedFor example:sortByHeight([-1, 150, 190, 170, -1, -1, 160, 180]) => [-1, 150, 160, 170, -1, -1, 180, 190]Write your code in src/sort-by-height.js.(ST) Sum digitsYour task is to implement function that accepts a number (n) and returns the sum of its digits until we get to a one digit number.For example:For 100, the result should be 1 (1 + 0 + 0 = 1)getSumOfDigits(100) => 1For 91, the result should be 1 (9 + 1 = 10, 1 + 0 = 1)getSumOfDigits(91) => 1Write your code in src/sum-digits.js.© AlreadyBored& tasks:Common character countDelete digitDNS statEncode lineFile namesGet email domainIs MAC-48 Adress?Matrix elements sumMinesweeperSort by heightSum digitsare integrated from Short track 2021 repo& Thanks mikhama for assistance!"
7,twilio-labs/open-pixel-art,https://github.com/twilio-labs/open-pixel-art/blob/master/README.md,JavaScript,"Open Pixel Art by Twilio   This is an art project created with the intention to teach you how to create a pull request.Visit open-pixel-art.com to see the full artwork!Anyone who wishes to learn how to create a pull request for a project on GitHub can use this project to contribute a pixel to the canvas. You will only be able to ever create one pixel but you can pick whatever color you prefer as long as it is a valid HEX code. For example: #F22F46 the brand color of TwilioIf you are new to open-source, GitHub or git in general, fear not, we created a tutorial in TwilioQuest for you. It will teach you step by step on how you can get started and will guide you on your quest of creating your pull request.🕹 Download TwilioQuestThe entire project is automated and is largely maintained by a set of bots that will verify any pixel contributions. However, if you'd like to know more about the project or submit other contributions to the project that are not a pixel, feel free to create a GitHub issue inside the Open Pixel Art project.ContributingIn order to contribute a pixel to the canvas, you'll have to create a pull request to the Open Pixel Art project on GitHub.If you are already familiar with git and how to create a pull request on GitHub, you can go ahead and check out the contributing guide.We understand that contributing to open-source can be intimidating and as a result we created a mission in our interactive coding game TwilioQuest that will walk you step by step through creating a pull request for this project and help you embark on your new quest into open-source!Download TwilioQuestCheck out the Contribution Guides:EnglishEspañolDeutschBrazilian PortugueseChinese MandarinDutchCode of ConductWe want to make sure that this project is as welcoming to people as possible. By interacting with the project in any shape or form you are agreeing to the project's Code of Conduct:EnglishEspañolDeutschBrazilian PortugueseIf you feel like another individual has violated the code of conduct, please raise a complaint to open-source@twilio.com.ContributorsThanks goes to these wonderful people (emoji key):      Dominik Kundel💻 🤔    Amy Kapernick💻    Kevin Whinnery💻    Ricky Robinett💻    André Felipe Scalco💻    Teddy Gustiaux💻    Aidan Smith💻        Scott O'Malley💻    Todd Moy💻    Samuel Durkin💻    ChatterboxCoder💻    Simey de Klerk💻    Tilde Ann Thurium👀    Daniel Peukert📖        izontm📖    Carly Robison📖  This project follows the all-contributors specification. Contributions of any kind welcome!Technology Thank YouThis project is powered by various open-source projects. Among others:Eleventy for the static site generationDanger for the automated code reviewMergify for automated PR mergingAll Contributors Bot to recognize the contributions of everyoneJest for Unit TestingNES.css for the CSS stylingWelcome Bot to welcome new contributorsLicenseMIT"
8,microsoft/Windows-universal-samples,https://github.com/microsoft/Windows-universal-samples/blob/main/README.md,JavaScript,"Universal Windows Platform (UWP) app samplesThis repo contains the samples that demonstrate the API usage patterns for the Universal Windows Platform (UWP) in the Windows Software Development Kit (SDK) for Windows 10. These code samples were created with the Universal Windows Platform templates available in Visual Studio, and are designed to run on desktop, mobile, and future devices that support the Universal Windows Platform.Note: If you are unfamiliar with Git and GitHub, you can download the entire collection as aZIP file, but besure to unzip everything to access shared dependencies. For more info on working with the ZIP file,the samples collection, and GitHub, see Get the UWP samples from GitHub.For more samples, see the Samples portal on the Windows Dev Center.Universal Windows Platform developmentThese samples require Visual Studio and the Windows Software Development Kit (SDK) for Windows 10.Get a free copy of Visual Studio Community Edition with support for building Universal Windows Platform appsAdditionally, to stay on top of the latest updates to Windows and the development tools, become a Windows Insider by joining the Windows Insider Program.Become a Windows InsiderUsing the samplesThe easiest way to use these samples without using Git is to download the zip file containing the current version (using the following link or by clicking the \""Download ZIP\"" button on the repo page). You can then unzip the entire archive and use the samples in Visual Studio.Download the samples ZIPNotes:Before you unzip the archive, right-click it, select Properties, and then select Unblock.Be sure to unzip the entire archive, and not just individual samples. The samples all depend on the SharedContent folder in the archive.In Visual Studio, the platform target defaults to ARM, so be sure to change that to x64 or x86 if you want to test on a non-ARM device.The samples use Linked files in Visual Studio to reduce duplication of common files, including sample template files and image assets. These common files are stored in the SharedContent folder at the root of the repository, and are referred to in the project files using links.Reminder: If you unzip individual samples, they will not build due to references to other portions of the ZIP file that were not unzipped. You must unzip the entire archive if you intend to build the samples.For more info about the programming models, platforms, languages, and APIs demonstrated in these samples, please refer to the guidance, tutorials, and reference topics provided in the Windows 10 documentation available in the Windows Developer Center. These samples are provided as-is in order to indicate or demonstrate the functionality of the programming models and feature APIs for Windows.ContributionsThese samples are direct from the feature teams and we welcome your input on issues and suggestions for new samples. At this time we are not accepting new samples from the public, but check back here as we evolve our contribution model.This project has adopted the Microsoft Open Source Code of Conduct.For more information, see the Code of Conduct FAQor contact opencode@microsoft.com with any additional questions or comments.See alsoFor additional Windows samples, see Windows on GitHub.Samples by categoryApp settings   App package information  Application data  Store Audio, video, and camera   360-degree video playback  Adaptive streaming  Advanced capture    Advanced casting  Audio categories  Audio graphs    Background media playback  Basic camera app  Basic face detection    Basic face tracking  Basic media casting  Camera face detection    Camera frames  Camera preview frame  Camera profiles    Camera resolution  Camera stream coordinate mapper  Camera stream correlation    DASH streaming  Direct2D photo adjustment  Media editing    Media import  Media transport controls  MIDI    Playlists  PlayReady  Processing frames with OpenCV    Simple imaging  Spatial audio  System media transport controls    Transcoding media  Video playback  Video playback synchronization    Video stabilization  Windows audio session (WASAPI) Communications   Bluetooth RFCOMM chat  Real-time communication  SMS send and receive Contacts and calendar   Appointment calendar  Contact cards  Contact panel    Contact picker  UserDataAccountManager Controls, layout, and text   3D Printing  3D Printing from Unity  Bottom-up list (XAML)    Clipboard  Colored glyphs (DirectWrite)  Commanding    Context menu  Context menu (XAML)  Custom text edit control    Data virtualization  Display orientation  Downloadable fonts (DirectWrite)    Downloadable fonts (XAML)  Drag and drop  Focus visuals    Full screen mode  Gamepad-style navigation (XAML)  Line spacing (DirectWrite)    ListView and GridView  Lock screen apps  Message dialog    Multiple views  OCR  Printing    Scaling according to DPI  Secondary windows  Splash screen    State triggers  Tailored multiple views  Title bar    UI basics (XAML)  User interaction mode  WebView control (XAML)    Window resizing Custom user interactions   Basic input  Complex inking  Ink analysis    Low latency input  Pen haptics  Simple inking    Touch keyboard  Touch keyboard text input Data   Compression  Content indexer  Logging    PDF document  Serializing and deserializing data  x:Bind    x:DeferLoadStrategy  XML DOM  XmlLite Deep links and app-to-app communication   App services  Jump list customization  Remote systems    Sharing content source app  Sharing content target app  User activities Devices and sensors   Accelerometer  Activity detection sensor  AllJoyn consumer experiences    AllJoyn producer experiences  Altimeter  Background sensors    Barcode scanner  Barcode scanner provider  Barometer    Bluetooth advertisement  Bluetooth Low Energy  Cash drawer    Compass  Custom HID device  Custom sensors    Custom serial device  Custom USB device  Device enumeration and pairing    General Purpose Input/Output (GPIO)  Gyrometer  Presence sensor    Inclinometer  Inter-Integrated Circuit (I2C)  Lamp device    Light sensor  Line display  Magnetometer    Magnetic stripe reader  Near field communication (NFC)  NFC enterprise provisioner    Orientation sensor  Pedometer  POS printer    Proximity sensor  Radial controller  Relative inclinometer    Serial Arduino  Serial Peripheral Interface (SPI)  Simple orientation sensor Files, folders, and libraries   File access  File and folder thumbnail  File picker    File picker provider  File search  Folder enumeration    Library management  Semantic text query Gaming   Direct3D game  DirectX and XAML game Globalization and localization   Application resources and localization  Calendar  Date and time formatting    Globalization preferences  Japanese phonetic analysis  Language font mapping    Linguistic services  Number formatting and parsing  Text segmentation    Text suggestions  Unicode string processing Graphics and animation   Animated GIF playback (XAML)  Animation metrics  Composition visual without framework    Direct2D advanced color image rendering  Direct2D custom image effects  Direct2D gradient mesh    Direct2D SVG image rendering  Transform3D animations Holographic   Basic hologram  Holographic face tracking  Holographic mixed reality capture    Holographic spatial mapping  Holographic spatial stage  Holographic voice input    Spatial interaction source  Tag-along hologram    Mixed Reality Model Identity, security, and encryption   Credential locker  Client Device Information  Credential picker    Disabling screen capture  Enterprise data protection  KeyCredentialManager    Lock screen personalization  Microsoft Passport and Windows Hello  Smart cards    User information  UserCertificateStore  UserConsentVerifier    Web account management  WebAuthenticationBroker Launching and background tasks   Association launching  Background activation  Background task    Extended execution  Multi-instance apps  Suspend and resume Maps and location   Geolocation  Geotag  MapControl Navigation   Back Button  Master/detail  Pivot    Projection Networking and web services   Background transfer  DatagramSocket  HttpClient    JSON  Mobile broadband  Network connectivity    On-Demand Wi-Fi hotspot  Radios  Socket activity trigger stream socket    StreamSocket  Syndication  USSD protocol    WebSocket  Wi-Fi Direct  Wi-Fi Direct services    Wi-Fi hotspot authentication  Wi-Fi scanning Platform architecture   Capabilities  Custom capabilities  In-process component authoring    In-process component authoring  Out-of-process component authoring  Version adaptive code Speech and Cortana   Cortana voice command  Speech recognition and synthesis Tiles, toasts, and notifications   Notifications  Secondary tiles "
9,SheetJS/sheetjs,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
10,chartjs/Chart.js,https://github.com/chartjs/Chart.js/blob/master/README.md,JavaScript,"            Simple yet flexible JavaScript charting for designers & developers                    DocumentationAll the links point to the new version 4 of the lib.IntroductionGetting StartedGeneralConfigurationChartsAxesDevelopersPopular ExtensionsSamplesIn case you are looking for an older version of the docs, you will have to specify the specific version in the url like this: https://www.chartjs.org/docs/2.9.4/ContributingInstructions on building and testing Chart.js can be found in the documentation. Before submitting an issue or a pull request, please take a moment to look over the contributing guidelines first. For support, please post questions on Stack Overflow with the chart.js tag.LicenseChart.js is available under the MIT license."
11,adam-p/markdown-here,https://github.com/adam-p/markdown-here/blob/master/README.md,JavaScript," Markdown HereVisit the website.Get it for Chrome.Get it for Firefox.Get it for Safari.Get it for Thunderbird and Postbox.Get it for Opera.Discuss it and ask questions in the Google Group.Markdown Here is a Google Chrome, Firefox, Safari, Opera, and Thunderbird extension that lets you write email† in Markdown‡ and render them before sending. It also supports syntax highlighting (just specify the language in a fenced code block).Writing email with code in it is pretty tedious. Writing Markdown with code in it is easy. I found myself writing email in Markdown in the Github in-browser editor, then copying the preview into email. This is a pretty absurd workflow, so I decided create a tool to write and render Markdown right in the email.To discover what can be done with Markdown in Markdown Here, check out the Markdown Here Cheatsheet and the other wiki pages.†: And Google Groups posts, and Blogger posts, and Evernote notes, and Wordpress posts! See more.‡: And TeX mathematical formulae!Table of ContentsInstallation InstructionsUsage InstructionsTroubleshootingCompatibilityNotes and MiscellaneousBuilding the Extension BundlesNext Steps, Credits, Feedback, LicenseInstallation InstructionsChromeChrome Web StoreGo to the Chrome Web Store page for Markdown Here and install normally.After installing, make sure to reload your webmail or restart Chrome!Manual/DevelopmentClone this repo.In Chrome, open the Extensions settings. (Wrench button, Tools, Extensions.)On the Extensions settings page, click the \""Developer Mode\"" checkbox.Click the now-visible \""Load unpacked extension…\"" button. Navigate to the directory where you cloned the repo, then the src directory under that.The Markdown Here extension should now be visible in your extensions list.Reload your webmail page (and maybe application) before trying to convert an email.Firefox and ThunderbirdMozilla Add-ons siteGo to the Firefox Add-ons page for Markdown Here and install normally.Or go to the \""Tools > Add-ons\"" menu and then search for \""Markdown Here\"".After installing, make sure to restart Firefox/Thunderbird!Note: It takes up to a month for Mozilla to approve changes to the Firefox/Thunderbird extension, so updates (features, fixes) will lag behind what is shown here. You can manually choose to install the newest version before it's reviewed from the list of versions: https://addons.mozilla.org/en-US/firefox/addon/markdown-here/versions/Manual/DevelopmentClone this repo.Follow the instructions in the MDN \""Setting up an extension development environment\"" article.SafariDownload the extension directly. When it has finished downloading, double click it to install.PreferencesTo get to the Markdown Here preferences, open the Safari preferences and then go to the \""Extensions\"" tab. Then click the \""Click me to show Markdown Here options\"" box.OperaNote that Markdown Here only works with Opera versions 16 and higher (i.e., the ones that are based on Chromium).Go to the Opera Add-ons store page for Markdown Here and install normally.After installing, make sure to reload your webmail or restart Chrome!Usage InstructionsInstall it, and then…In Chrome/Safari/Opera, make sure you reload your web mail page before trying to use Markdown Here.In Chrome/Firefox/Safari/Opera, log into your Gmail, Hotmail, or Yahoo account and start a new email. In Thunderbird, start a new message.Make sure you're using the rich editor.In Gmail, click the \""Rich formatting\"" link, if it's visible.In Thunderbird, make sure \""Compose messages in HTML format\"" is enabled in your \""Account Settings\"", \""Composition & Addressing\"" pane.Compose an email in Markdown. For example:**Hello** `world`.```javascriptalert('Hello syntax highlighting.');```Right-click in the compose box and choose the \""Markdown Toggle\"" item from the context menu. Or click the button that appears in your address bar. Or use the hotkey (CTRL+ALT+M by default).You should see your email rendered correctly from Markdown into rich HTML.Send your awesome email to everyone you know. It will appear to them the same way it looks to you.Revert to MarkdownAfter rendering your Markdown to pretty HTML, you can still get back to your original Markdown. Just right-click anywhere in the newly rendered Markdown and click \""Markdown Toggle\"" -- your email compose body will change back to the Markdown you had written.Note that any changes you make to the pretty HTML will be lost when you revert to Markdown.In Gmail, you can also use the browser's Undo command (CTRL+Z / CMD+Z, or from the Edit menu). Be warned that you might also lose the last few characters you entered.RepliesIn Gmail, Thunderbird, and Google Groups, you can use \""Markdown Toggle\"" normally: just write your reply (top, bottom, inline, wherever) and then convert. The original email that you're replying to will be left alone. (Technically: Existing blockquote blocks will be left intact.)In Hotmail and Yahoo (which don't put the original in a blockquote), and optionally in Gmail, Thunderbird, and Google Groups, you can ensure that only the part of the reply that you wrote gets converted by selecting what you want to convert and then clicking \""Markdown Toggle\"" -- see the next section.Selection/Piecemeal ConversionSometimes you don't want to convert the entire email; sometimes your email isn't entirely Markdown. To convert only part of the email, select the text (with your mouse or keyboard), right-click on it, and click the \""Markdown Toggle\"" menu item. Your selection is magically rendered into pretty HTML.To revert back to Markdown, just put your cursor anywhere in the block of converted text, right click, and click the \""Markdown Toggle\"" menu item again. Now it's magically back to the original Markdown.Things to know about converting/reverting a selectionIf you select only part of a block of text, only that text will be converted. The converted block will be wrapped in a paragraph element, so the original line will be broken up. You probably don't want to ever do this.You can select and revert multiple converted blocks at the same time. One upshot of this is that you can select your entire email, click \""Markdown Toggle\"", and all portions of it that you had converted will be reverted.If you don't have anything selected when you click \""Markdown Toggle\"", Markdown Here will check if there are converted blocks anywhere in the message and revert them. If there no converted blocks are found, it will convert the entire email.OptionsThe Markdown Here Options page can be accessed via the Chrome, Firefox, Safari, or Thunderbird extensions list. The available options include:Styling modifications for the rendered Markdown.Syntax highlighting theme selection and modification.TeX math formulae processing enabling and customization.What the hotkey should be.For Chrome and Firefox, any changes made in the Markdown Here Options are automatically synchronized between your other installations of that browser (if you have the sync feature enabled in the browser).TroubleshootingSee the Troubleshooting wiki page.CompatibilitySee the Compatibility wiki page.Notes and MiscellaneousMarkdown Here uses Github Flavored Markdown, with the limitation that GFM special links are not supported (issue #11); nor will they be, as MDH is not Github-specific.Available languages for syntax highlighting (and the way they should be written in the fenced code block) can be seen on the highlight.js demo page.Images embedded inline in your Markdown will be retained when you \""Markdown Toggle\"". Gmail allows you to put images inline in your email -- this can be much easier than referencing an external image.Email signatures are automatically excluded from conversion. Specifically, anything after the semi-standard '-- ' (note the trailing space) is left alone.Note that Hotmail and Yahoo do not automatically add the '-- ' to signatures, so you have to add it yourself.The \""Markdown Toggle\"" menu item shows up for more element types than it can correctly render. This is intended to help people realize that they're not using a rich editor. Otherwise they just don't see the menu item and don't know why.Styling:The use of browser-specific styles (-moz-, -webkit-) should be avoided. If used, they may not render correctly for people reading the email in a different browser from the one where the email was sent.The use of state-dependent styles (like a:hover) don't work because they don't match at the time the styles are made explicit. (In email, styles must be explicitly applied to all elements -- stylesheets get stripped.)For more tweaky features, visit the Tips and Tricks section.Building the Extension Bundlescd utilsnode build.jsChrome and Opera extensionCreate a file with a .zip extension containing these files and directories:manifest.jsoncommon/chrome/Firefox/Thunderbird extensionCreate a file with a .xpi extension containing these files and directories:chrome.manifestinstall.rdfcommon/firefox/Safari extensionThe browser-specific code is located in the markdown-here-safari project.Use the Safari Extension Builder.Next StepsSee the issues list and the Notes Wiki. All ideas, bugs, plans, complaints, and dreams will end up in one of those two places.Feel free to create a feature request issue if what you want isn't already there. If you'd prefer a less formal approach to floating an idea, post to the \""markdown-here\"" Google Group.It also takes a fair bit of work to stay up-to-date with the latest changes in all the applications and web sites where Markdown Here works.CreditsMarkdown Here was coded on the shoulders of giants.Markdown-to-HTML: chjj / markedSyntax highlighting: isagalaev / highlight.jsHTML-to-text: mtrimpe / jsHtmlToTextFeedbackAll bugs, feature requests, pull requests, feedback, etc., are welcome. Create an issue. Or post to the \""markdown-here\"" Google Group.LicenseCodeMIT License: http://adampritchard.mit-license.org/ or see the LICENSE file.LogoCopyright 2015, Austin Anderson. Licensed to Markdown Here under the MDH contributor license agreement.Other imagesCreative Commons Attribution 3.0 Unported (CC BY 3.0) License"
12,TryGhost/Ghost,https://github.com/TryGhost/Ghost/blob/main/README.md,JavaScript,"                      Ghost.org •    Forum •    Docs •    Contributing •    Twitter                                                                      Love open source? We're hiring JavaScript engineers to work on Ghost full-time.  The easiest way to get a production instance deployed is with our official Ghost(Pro) managed service. It takes about 2 minutes to launch a new site with worldwide CDN, backups, security and maintenance all done for you.For most people this ends up being the best value option because of how much time it saves — and 100% of revenue goes to the Ghost Foundation; funding the maintenance and further development of the project itself. So you’ll be supporting open source software and getting a great service! Quickstart installIf you want to run your own instance of Ghost, in most cases the best way is to use our CLI toolnpm install ghost-cli -g Then, if installing locally add the local flag to get up and running in under a minute - Local install docsghost install local or on a server run the full install, including automatic SSL setup using LetsEncrypt - Production install docsghost install Check out our official documentation for more information about our recommended hosting stack & properly upgrading Ghost, plus everything you need to develop your own Ghost themes or work with our API.Contributors & advanced developersFor anyone wishing to contribute to Ghost or to hack/customize core files we recommend following our full development setup guides: Contributor guide • Developer setup Ghost sponsorsWe'd like to extend big thanks to our sponsors and partners who make Ghost possible. If you're interested in sponsoring Ghost and supporting the project, please check out our profile on GitHub sponsors ❤️DigitalOcean • Fastly Getting helpYou can find answers to a huge variety of questions, along with a large community of helpful developers over on the Ghost forum - replies are generally very quick. Ghost(Pro) customers also have access to 24/7 email support.To stay up to date with all the latest news and product updates, make sure you subscribe to our blog — or you can always follow us on Twitter, if you prefer your updates bite-sized and facetious. 🎷🐢 Copyright & licenseCopyright (c) 2013-2023 Ghost Foundation - Released under the MIT license. Ghost and the Ghost Logo are trademarks of Ghost Foundation Ltd. Please see our trademark policy for info on acceptable usage."
13,bettiolo/node-echo,https://github.com/bettiolo/node-echo/blob/master/README.md,JavaScript,"node-echonode.js echo server, returns request data to response"
14,hasura/imad-app,https://github.com/hasura/imad-app/blob/master/README.md,JavaScript,imad-appIMAD course application.
15,videojs/video.js,https://github.com/videojs/video.js/blob/main/README.md,JavaScript,"Video.js - HTML5 Video PlayerVideo.js is a web video player built from the ground up for an HTML5 world. It supports HTML5 video and Media Source Extensions, as well as other playback techs like YouTube and Vimeo (through plugins). It supports video playback on desktops and mobile devices. This project was started mid 2010, and the player is now used on over 50,000 100,000 200,000 400,000 700,000 websites.Table of ContentsQuick StartContributingCode of ConductLicenseQuick StartThanks to the awesome folks over at Fastly, there's a free, CDN hosted version of Video.js that anyone can use. Add these tags to your document's <head>:<link href=\""//vjs.zencdn.net/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""//vjs.zencdn.net/8.3.0/video.min.js\""></script>For the latest version of video.js and URLs to use, check out the Getting Started page on our website.Video.js version 7 (and newer) CDN builds do not send any data to Google Analytics.In older versions of Video.js (6 and earlier), in the vjs.zencdn.net CDN-hosted versions we include a stripped down Google Analytics pixel that tracks a random sampling (currently 1%) of players loaded from the CDN. This allows us to see (roughly) what browsers are in use in the wild, along with other useful metrics such as OS and device. If you'd like to disable analytics, you can simply include the following global before including Video.js via the free CDN:<script>window.HELP_IMPROVE_VIDEOJS = false;</script>Alternatively, you can include Video.js by getting it from npm, downloading from GitHub releases or by including it via unpkg or another JavaScript CDN like CDNjs. These releases do not include Google Analytics tracking at all.<!-- unpkg : use the latest version of Video.js --><link href=\""https://unpkg.com/video.js/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js/dist/video.min.js\""></script><!-- unpkg : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://unpkg.com/video.js@8.3.0/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js@8.3.0/dist/video.min.js\""></script><!-- cdnjs : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video.min.js\""></script>Next, using Video.js is as simple as creating a <video> element, but with an additional data-setup attribute. At a minimum, this attribute must have a value of '{}', but it can include any Video.js options - just make sure it contains valid JSON!<video    id=\""my-player\""    class=\""video-js\""    controls    preload=\""auto\""    poster=\""//vjs.zencdn.net/v/oceans.png\""    data-setup='{}'>  <source src=\""//vjs.zencdn.net/v/oceans.mp4\"" type=\""video/mp4\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.webm\"" type=\""video/webm\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.ogv\"" type=\""video/ogg\""></source>  <p class=\""vjs-no-js\"">    To view this video please enable JavaScript, and consider upgrading to a    web browser that    <a href=\""https://videojs.com/html5-video-support/\"" target=\""_blank\"">      supports HTML5 video    </a>  </p></video>When the page loads, Video.js will find this element and automatically setup a player in its place.If you don't want to use automatic setup, you can leave off the data-setup attribute and initialize a <video> element manually using the videojs function:var player = videojs('my-player');The videojs function also accepts an options object and a callback to be invokedwhen the player is ready:var options = {};var player = videojs('my-player', options, function onPlayerReady() {  videojs.log('Your player is ready!');  // In this context, `this` is the player that was created by Video.js.  this.play();  // How about an event listener?  this.on('ended', function() {    videojs.log('Awww...over so soon?!');  });});If you're ready to dive in, the Getting Started page and documentation are the best places to go for more information. If you get stuck, head over to our Slack channel!ContributingVideo.js is a free and open source library, and we appreciate any help you're willing to give - whether it's fixing bugs, improving documentation, or suggesting new features. Check out the contributing guide for more!Video.js uses BrowserStack for compatibility testing.Code of ConductPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.LicenseVideo.js is licensed under the Apache License, Version 2.0."
16,learn-co-curriculum/phase-0-html-images-lab,https://github.com/learn-co-curriculum/phase-0-html-images-lab/blob/master/README.md,JavaScript,"HTML ImagesLearning GoalsRecognize the img tagUse img tag attributesCreate imagesIntroductionImages are absolutely critical to making appealing and engaging websites. Canyou imagine the web without them? No cat memes. No animated dancing bananas! NoInstagram, at all. The internet would be a pretty boring and sad place!In this lesson, we will be discussing how to include images in your HTML, alongwith some important attributes of the tag. With images, you can make your webpages much more engaging and visually appealing.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize the img TagImages are inserted into HTML using the img tag. The tag can display a varietyof image types, including animated GIFs, bitmaps and vector graphics, thoughmost often, the images we see on the internet are JPEG and PNG files.The img tag is self closing, meaning it doesn't wrap around content or text.Instead, the relevant information is stored in attributes within the tag itself.There are two main attributes, src, the source of the image, and alt, thealternate text.Use the img Tag AttributesThe Image Source AttributeThe src attribute provides the relative path or URL to the image file we wantto display. The image file can be local; for example, if you're publishing awebsite and have your images stored in a folder within your file structure, yoursource may look like this:<img src=\""../images/my_company_logo.png\"" />However, it's very common, even when publishing your own websites, to haveimages hosted somewhere else on the internet. In these situations, we need toprovide a full URL as the source:<img src=\""https://i.imgur.com/H1qsYEl.png\"" />The src attribute is always necessary, as without it, the img tag would havenothing to display.The Image Alt AttributeThe alt attribute contains text relevant to the image we're displaying, andwill appear in its place if the image fails to load.Alt text is important for screen readers for the visually impaired, as the textwill be read out loud to the site visitor. Alt text also improves accessibilityfor non-disabled users, who will get a message if the image fails to load. It isespecially important if the image is used as additional content that expandsupon the written content.Alt text on a failed image will appear along with a small 'broken image' icon:To include an alt attribute, add it in along with the src attribute:<img  src=\""https://i.imgur.com/H1qsYEl.png\""  alt=\""comedic crow gets wholesome support\""/>Note that we've separated out each attribute on its own line in the HTML above.When an element gets too long for one line in your text editor, separating thecode as shown above will keep your HTML code more readable.Note: While alt text isn't required for the browser, adherence to theAmericans with Disabilities Act is often enforced through legislation. Yourbrowser will not throw an error if there is no alt text with an image, so itis up to you as the developer to adhere to best practices for accessibility.The Image Title AttributeOne additional attribute that can be useful is the title. Content added tothis attribute will display when we hover over the image with our mouse. If wewere creating an img tag with src, alt and title for a company logo, itmight look something like this:<img  src=\""../images/my_company_logo.png\""  alt=\""my company name\""  title=\""We're here to help you!\""/>When a visitor to your company site hovers over the logo, they'll see a messageappear saying 'We're here to help you!'The title attribute isn't necessary and is often left out, but can be a nicedetail to include.Create ImagesIts time to practice creating some images! For this challenge, feel free to useany images you'd like — the tests are looking for the correct tag andattributes, not the content. If you're not sure what to use, feel free to usethe following URL as your source:https://s3.amazonaws.com/ironboard-learn/lion.jpgYour challenge is to write three image tags:The first should have just a source attributeThe second should include an alt attribute, in addition to a sourceThe third should have both an alt and source attribute, as well as a titleattributeRun npm test and read the tests as you go.ConclusionWith images, we can fill our web pages with visual content in addition to text.Brand logos, animated instructional guides, personal artwork and photography, orpictures of you and your friends — you now have the ability to create visuallyappealing content of any type!"
17,learn-co-curriculum/phase-0-html-album-cover-lab,https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/blob/master/README.md,JavaScript,"HTML Album CoverLearning GoalsUse common HTML tags to produce a webpage based on a mock-upIntroductionLearning all the individual pieces that make up a web page is a necessary firststep in the process of learning HTML, but one of the best ways to solidify theconcepts we've learned is to apply concepts together. In this lab, your taskwill be to update index.html based on commented notes in the file, using whatwe've learned about text formatting and displaying images.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Apply Header, Paragraph, Image and Span TagsPharrell isn't quite happy, he needs some help coding the album cover for hishit song \""Happy.\"" His dev chops aren't quite as skilled as yours, so he's hiredyou to take care of business.Pharrell did provide us with a mock-up of what he would like to see for thedesign of the album cover:In the industry, front-end developers are typically given specs just like thisfrom the product team and then asked to write the code to make a website lookjust like the spec. Today, you're the developer and Pharrell is the productteam.Use SOURCE.mdPharrell has provided us with the text for the album and all the legalmumbo-jumbo to give credit where credit is due. You can find that text inSOURCE.md. Again, this is a typical industry standard workflow, where thedevelopers are given a copy for the site from the product team.Each line of text in this file corresponds to a note in index.html that willindicate where you'll need to add this information. It will be up to you to pickwhich HTML tags to use.DeliverablesWrite your code in index.html. Your job is to make sure the text fromSOURCE.md makes it into index.html surrounded by the appropriate HTML tags.You can see the images you'll be using in the 'images' folder, but you'll haveto write the correct URL paths (like http://..../image-name) in order for themto display correctly. The comments in the index.html will help you with this.You may not have encountered the span tag before, so if you are curious, takea moment to read up on some reference material to better understand its use.Open index.html in a separate browser tab to see your progress on the AlbumCover as you build it.Run npm test to make sure you've met all the deliverables and passed thetests.ConclusionA lot of the formatting in this lab is done using CSS, or Cascading StyleSheets, a language that defines styling for HTML. Before we can get to moreelaborate styling, though, it is important to have a strong understanding ofHTML fundamentals.In this lab, we've tested that understanding by having you practice applyingheaders, image, and paragraphs. Completing this lab means that you have a solidfoundation that we can build upon as we continue to learn about web development.Clap along if you feel you're getting the hang of HTML!"
18,learn-co-curriculum/phase-0-css-intro-lab,https://github.com/learn-co-curriculum/phase-0-css-intro-lab/blob/master/README.md,JavaScript,"Introduction to CSS LabLearning GoalsImport a CSS file in our HTMLImplement CSS declarationsIntroductionHTML's role in our websites is to provide structure, content, and link resources(e.g. CSS files). Its role in describing the style (\""presentation\"") of contentis minimal. HTML's ability to style is pretty much limited to \""pretty good\""defaults.In order to further customize the style, appearance, and interactive behavior ofour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we willwork on implementing CSS declarations in our HTML.Writing HTML vs. Writing CSSHTMLCSSDeals with:Content layerPresentation layerConcerns:Structure, hierarchy & meaningAesthetic & displayQuestions:- Should the order of items within a list matter?- Should the layout of the text be in a single or double column?- Should we wrap a list of links inside a navigation tag?- Should we use a different font color for the header?- Is this the most important header in the HTML document?- How should the content appear on a desktop vs. a mobile device?Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Import a CSS File in Our HTMLFirst things first: we need to make sure our HTML is loading our style sheet.We have two options:Write CSS rules inside of a <style> tag (\""internal CSS\""), which tells HTML\""Hey, I want to define some CSS styling here.\""Write CSS rules in an external file that is specified with the <link> tag(\""external CSS\"").In our case, we want to provide a link to our style sheet, instead of writingall of our CSS code directly in the <style> tag. This allows us to only haveto write styles for the entire site once, instead of repeating every <style>element on every page. A common workflow is to see developers work on CSS insideof the <style> tag until their styling is done. At that point they move it totheir external file and remove the <style> element from the HTML page. Feelfree to try it out!In index.html, provide a <link> tag which correctly sources the CSS filelocated in this directory. The <link> tag will link to our file with an hrefattribute, like so:<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />The href attribute should point to the file style.css which is located inthis directory using a relative path. The rel attribute is used to note thatthe file which is being linked has a relation of being a \""stylesheet.\""Now, what is a relative path? You could write href=\""style.css\"" and the contentof style.css would change your index.html file. But we want to teach you torequire external resources (like CSS or JavaScript) by using relative paths.Relative paths make it crystal clear which file is being used. Relative pathsstart with ./ which means \""from the directory I am currently in.\"" So, when weuse link to associate with a style sheet and we write href=\""./style.css\""we're saying: \""From the directory in which I, the index.html file live, lookfor a file called style.css and use it. This pattern will help you and otherdevelopers remove any possible confusion.<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />Links to style sheets should go at the end of the <head> section! Make sureyou provide a relative path to the style sheet. Hint: Open index.html in thebrowser. You can test whether your link is working or not by the color of yourheadline. If it's red, it's working! If it's black, keep going - you'll get it.Implement CSS DeclarationsNow, we are going to create some CSS declarations and add styling to ourdocument! First, open index.html in the browser to get a good idea of whatour un-styled page page looks like.What we would really like is something a little more jazzed up! Let'swork towards that. Set the following properties to specific values. Makesure to, after each update, look at index.html in the browser to see how ithas changed:Set the background of the <body> element (whole document) to #00b3e6(light blue)Set the <div> elements:width to 700pxmargin to auto (centers our element)font-family to \""Helvetica Neue\""background to whitepadding to 30px (creates an invisible space around the element)Set the element with the id of #main-header to a font-size of 22pxSet the elements with the class of .perspective-questions to a font-styleof italicRun npm test to test your work. Remember to push and submit your work usingCodeGrade when you're done.ConclusionCSS allows us to easily separate our 'styling' logic into separate files thatfollow the 'cascading' rule set. This enables us to keep our HTML clean andsimple to read, without sacrificing the customization that we have come toexpect on websites.ResourcesW3 Introduction to CSS"
19,videojs/video.js,https://github.com/videojs/video.js/blob/main/README.md,JavaScript,"Video.js - HTML5 Video PlayerVideo.js is a web video player built from the ground up for an HTML5 world. It supports HTML5 video and Media Source Extensions, as well as other playback techs like YouTube and Vimeo (through plugins). It supports video playback on desktops and mobile devices. This project was started mid 2010, and the player is now used on over 50,000 100,000 200,000 400,000 700,000 websites.Table of ContentsQuick StartContributingCode of ConductLicenseQuick StartThanks to the awesome folks over at Fastly, there's a free, CDN hosted version of Video.js that anyone can use. Add these tags to your document's <head>:<link href=\""//vjs.zencdn.net/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""//vjs.zencdn.net/8.3.0/video.min.js\""></script>For the latest version of video.js and URLs to use, check out the Getting Started page on our website.Video.js version 7 (and newer) CDN builds do not send any data to Google Analytics.In older versions of Video.js (6 and earlier), in the vjs.zencdn.net CDN-hosted versions we include a stripped down Google Analytics pixel that tracks a random sampling (currently 1%) of players loaded from the CDN. This allows us to see (roughly) what browsers are in use in the wild, along with other useful metrics such as OS and device. If you'd like to disable analytics, you can simply include the following global before including Video.js via the free CDN:<script>window.HELP_IMPROVE_VIDEOJS = false;</script>Alternatively, you can include Video.js by getting it from npm, downloading from GitHub releases or by including it via unpkg or another JavaScript CDN like CDNjs. These releases do not include Google Analytics tracking at all.<!-- unpkg : use the latest version of Video.js --><link href=\""https://unpkg.com/video.js/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js/dist/video.min.js\""></script><!-- unpkg : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://unpkg.com/video.js@8.3.0/dist/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://unpkg.com/video.js@8.3.0/dist/video.min.js\""></script><!-- cdnjs : use a specific version of Video.js (change the version numbers as necessary) --><link href=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video-js.min.css\"" rel=\""stylesheet\""><script src=\""https://cdnjs.cloudflare.com/ajax/libs/video.js/8.3.0/video.min.js\""></script>Next, using Video.js is as simple as creating a <video> element, but with an additional data-setup attribute. At a minimum, this attribute must have a value of '{}', but it can include any Video.js options - just make sure it contains valid JSON!<video    id=\""my-player\""    class=\""video-js\""    controls    preload=\""auto\""    poster=\""//vjs.zencdn.net/v/oceans.png\""    data-setup='{}'>  <source src=\""//vjs.zencdn.net/v/oceans.mp4\"" type=\""video/mp4\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.webm\"" type=\""video/webm\""></source>  <source src=\""//vjs.zencdn.net/v/oceans.ogv\"" type=\""video/ogg\""></source>  <p class=\""vjs-no-js\"">    To view this video please enable JavaScript, and consider upgrading to a    web browser that    <a href=\""https://videojs.com/html5-video-support/\"" target=\""_blank\"">      supports HTML5 video    </a>  </p></video>When the page loads, Video.js will find this element and automatically setup a player in its place.If you don't want to use automatic setup, you can leave off the data-setup attribute and initialize a <video> element manually using the videojs function:var player = videojs('my-player');The videojs function also accepts an options object and a callback to be invokedwhen the player is ready:var options = {};var player = videojs('my-player', options, function onPlayerReady() {  videojs.log('Your player is ready!');  // In this context, `this` is the player that was created by Video.js.  this.play();  // How about an event listener?  this.on('ended', function() {    videojs.log('Awww...over so soon?!');  });});If you're ready to dive in, the Getting Started page and documentation are the best places to go for more information. If you get stuck, head over to our Slack channel!ContributingVideo.js is a free and open source library, and we appreciate any help you're willing to give - whether it's fixing bugs, improving documentation, or suggesting new features. Check out the contributing guide for more!Video.js uses BrowserStack for compatibility testing.Code of ConductPlease note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.LicenseVideo.js is licensed under the Apache License, Version 2.0."
20,learn-co-curriculum/phase-0-html-images-lab,https://github.com/learn-co-curriculum/phase-0-html-images-lab/blob/master/README.md,JavaScript,"HTML ImagesLearning GoalsRecognize the img tagUse img tag attributesCreate imagesIntroductionImages are absolutely critical to making appealing and engaging websites. Canyou imagine the web without them? No cat memes. No animated dancing bananas! NoInstagram, at all. The internet would be a pretty boring and sad place!In this lesson, we will be discussing how to include images in your HTML, alongwith some important attributes of the tag. With images, you can make your webpages much more engaging and visually appealing.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize the img TagImages are inserted into HTML using the img tag. The tag can display a varietyof image types, including animated GIFs, bitmaps and vector graphics, thoughmost often, the images we see on the internet are JPEG and PNG files.The img tag is self closing, meaning it doesn't wrap around content or text.Instead, the relevant information is stored in attributes within the tag itself.There are two main attributes, src, the source of the image, and alt, thealternate text.Use the img Tag AttributesThe Image Source AttributeThe src attribute provides the relative path or URL to the image file we wantto display. The image file can be local; for example, if you're publishing awebsite and have your images stored in a folder within your file structure, yoursource may look like this:<img src=\""../images/my_company_logo.png\"" />However, it's very common, even when publishing your own websites, to haveimages hosted somewhere else on the internet. In these situations, we need toprovide a full URL as the source:<img src=\""https://i.imgur.com/H1qsYEl.png\"" />The src attribute is always necessary, as without it, the img tag would havenothing to display.The Image Alt AttributeThe alt attribute contains text relevant to the image we're displaying, andwill appear in its place if the image fails to load.Alt text is important for screen readers for the visually impaired, as the textwill be read out loud to the site visitor. Alt text also improves accessibilityfor non-disabled users, who will get a message if the image fails to load. It isespecially important if the image is used as additional content that expandsupon the written content.Alt text on a failed image will appear along with a small 'broken image' icon:To include an alt attribute, add it in along with the src attribute:<img  src=\""https://i.imgur.com/H1qsYEl.png\""  alt=\""comedic crow gets wholesome support\""/>Note that we've separated out each attribute on its own line in the HTML above.When an element gets too long for one line in your text editor, separating thecode as shown above will keep your HTML code more readable.Note: While alt text isn't required for the browser, adherence to theAmericans with Disabilities Act is often enforced through legislation. Yourbrowser will not throw an error if there is no alt text with an image, so itis up to you as the developer to adhere to best practices for accessibility.The Image Title AttributeOne additional attribute that can be useful is the title. Content added tothis attribute will display when we hover over the image with our mouse. If wewere creating an img tag with src, alt and title for a company logo, itmight look something like this:<img  src=\""../images/my_company_logo.png\""  alt=\""my company name\""  title=\""We're here to help you!\""/>When a visitor to your company site hovers over the logo, they'll see a messageappear saying 'We're here to help you!'The title attribute isn't necessary and is often left out, but can be a nicedetail to include.Create ImagesIts time to practice creating some images! For this challenge, feel free to useany images you'd like — the tests are looking for the correct tag andattributes, not the content. If you're not sure what to use, feel free to usethe following URL as your source:https://s3.amazonaws.com/ironboard-learn/lion.jpgYour challenge is to write three image tags:The first should have just a source attributeThe second should include an alt attribute, in addition to a sourceThe third should have both an alt and source attribute, as well as a titleattributeRun npm test and read the tests as you go.ConclusionWith images, we can fill our web pages with visual content in addition to text.Brand logos, animated instructional guides, personal artwork and photography, orpictures of you and your friends — you now have the ability to create visuallyappealing content of any type!"
21,learn-co-curriculum/phase-0-html-album-cover-lab,https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/blob/master/README.md,JavaScript,"HTML Album CoverLearning GoalsUse common HTML tags to produce a webpage based on a mock-upIntroductionLearning all the individual pieces that make up a web page is a necessary firststep in the process of learning HTML, but one of the best ways to solidify theconcepts we've learned is to apply concepts together. In this lab, your taskwill be to update index.html based on commented notes in the file, using whatwe've learned about text formatting and displaying images.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Apply Header, Paragraph, Image and Span TagsPharrell isn't quite happy, he needs some help coding the album cover for hishit song \""Happy.\"" His dev chops aren't quite as skilled as yours, so he's hiredyou to take care of business.Pharrell did provide us with a mock-up of what he would like to see for thedesign of the album cover:In the industry, front-end developers are typically given specs just like thisfrom the product team and then asked to write the code to make a website lookjust like the spec. Today, you're the developer and Pharrell is the productteam.Use SOURCE.mdPharrell has provided us with the text for the album and all the legalmumbo-jumbo to give credit where credit is due. You can find that text inSOURCE.md. Again, this is a typical industry standard workflow, where thedevelopers are given a copy for the site from the product team.Each line of text in this file corresponds to a note in index.html that willindicate where you'll need to add this information. It will be up to you to pickwhich HTML tags to use.DeliverablesWrite your code in index.html. Your job is to make sure the text fromSOURCE.md makes it into index.html surrounded by the appropriate HTML tags.You can see the images you'll be using in the 'images' folder, but you'll haveto write the correct URL paths (like http://..../image-name) in order for themto display correctly. The comments in the index.html will help you with this.You may not have encountered the span tag before, so if you are curious, takea moment to read up on some reference material to better understand its use.Open index.html in a separate browser tab to see your progress on the AlbumCover as you build it.Run npm test to make sure you've met all the deliverables and passed thetests.ConclusionA lot of the formatting in this lab is done using CSS, or Cascading StyleSheets, a language that defines styling for HTML. Before we can get to moreelaborate styling, though, it is important to have a strong understanding ofHTML fundamentals.In this lab, we've tested that understanding by having you practice applyingheaders, image, and paragraphs. Completing this lab means that you have a solidfoundation that we can build upon as we continue to learn about web development.Clap along if you feel you're getting the hang of HTML!"
22,learn-co-curriculum/phase-0-css-intro-lab,https://github.com/learn-co-curriculum/phase-0-css-intro-lab/blob/master/README.md,JavaScript,"Introduction to CSS LabLearning GoalsImport a CSS file in our HTMLImplement CSS declarationsIntroductionHTML's role in our websites is to provide structure, content, and link resources(e.g. CSS files). Its role in describing the style (\""presentation\"") of contentis minimal. HTML's ability to style is pretty much limited to \""pretty good\""defaults.In order to further customize the style, appearance, and interactive behavior ofour websites, we turn to Cascading Style Sheets, or CSS. In this lab, we willwork on implementing CSS declarations in our HTML.Writing HTML vs. Writing CSSHTMLCSSDeals with:Content layerPresentation layerConcerns:Structure, hierarchy & meaningAesthetic & displayQuestions:- Should the order of items within a list matter?- Should the layout of the text be in a single or double column?- Should we wrap a list of links inside a navigation tag?- Should we use a different font color for the header?- Is this the most important header in the HTML document?- How should the content appear on a desktop vs. a mobile device?Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Import a CSS File in Our HTMLFirst things first: we need to make sure our HTML is loading our style sheet.We have two options:Write CSS rules inside of a <style> tag (\""internal CSS\""), which tells HTML\""Hey, I want to define some CSS styling here.\""Write CSS rules in an external file that is specified with the <link> tag(\""external CSS\"").In our case, we want to provide a link to our style sheet, instead of writingall of our CSS code directly in the <style> tag. This allows us to only haveto write styles for the entire site once, instead of repeating every <style>element on every page. A common workflow is to see developers work on CSS insideof the <style> tag until their styling is done. At that point they move it totheir external file and remove the <style> element from the HTML page. Feelfree to try it out!In index.html, provide a <link> tag which correctly sources the CSS filelocated in this directory. The <link> tag will link to our file with an hrefattribute, like so:<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />The href attribute should point to the file style.css which is located inthis directory using a relative path. The rel attribute is used to note thatthe file which is being linked has a relation of being a \""stylesheet.\""Now, what is a relative path? You could write href=\""style.css\"" and the contentof style.css would change your index.html file. But we want to teach you torequire external resources (like CSS or JavaScript) by using relative paths.Relative paths make it crystal clear which file is being used. Relative pathsstart with ./ which means \""from the directory I am currently in.\"" So, when weuse link to associate with a style sheet and we write href=\""./style.css\""we're saying: \""From the directory in which I, the index.html file live, lookfor a file called style.css and use it. This pattern will help you and otherdevelopers remove any possible confusion.<link rel=\""stylesheet\"" href=\""relative path to CSS file\"" />Links to style sheets should go at the end of the <head> section! Make sureyou provide a relative path to the style sheet. Hint: Open index.html in thebrowser. You can test whether your link is working or not by the color of yourheadline. If it's red, it's working! If it's black, keep going - you'll get it.Implement CSS DeclarationsNow, we are going to create some CSS declarations and add styling to ourdocument! First, open index.html in the browser to get a good idea of whatour un-styled page page looks like.What we would really like is something a little more jazzed up! Let'swork towards that. Set the following properties to specific values. Makesure to, after each update, look at index.html in the browser to see how ithas changed:Set the background of the <body> element (whole document) to #00b3e6(light blue)Set the <div> elements:width to 700pxmargin to auto (centers our element)font-family to \""Helvetica Neue\""background to whitepadding to 30px (creates an invisible space around the element)Set the element with the id of #main-header to a font-size of 22pxSet the elements with the class of .perspective-questions to a font-styleof italicRun npm test to test your work. Remember to push and submit your work usingCodeGrade when you're done.ConclusionCSS allows us to easily separate our 'styling' logic into separate files thatfollow the 'cascading' rule set. This enables us to keep our HTML clean andsimple to read, without sacrificing the customization that we have come toexpect on websites.ResourcesW3 Introduction to CSS"
23,DarkMakerofc/QUEEN-ELISA-MD,https://github.com/DarkMakerofc/QUEEN-ELISA-MD/blob/3.9.5-V/README.md,JavaScript," ♥️ ᴀɴ ᴡʜᴀᴛsᴀᴘᴘ ᴜsᴇʀ ʙᴏᴛ ʙʏ ᴍʀ ɴɪᴍᴀ ♥️    Please Give One Star ✨ & follow for me notify my updates 💗Version -> 3.9.5Queen elisa whatsapp bot is,  Queen elisa whatsapp bot is an easy to use whatsapp robot.   |  Queen elisa whatsapp bot යනු ඔබට පහසුවෙන් බාවිතකර හැකි whatsapp robo වරයෙකි.𝗙𝗢𝗥𝗞 𝗡𝗢𝗪𝗦𝗖𝗔𝗡 𝗤𝗥 𝗖𝗢𝗗𝗘ℹ️ if there any error please infrom it support group.  | මෙහිදී යම් ගැටලුවක් ඇති උවහොත් සහය සමූහය වෙත සම්බන්ධ වන්න.𝗖𝗟𝗜𝗖𝗞 𝗧𝗢 𝗗𝗘𝗣𝗟𝗢𝗬Deploy on RailwayDeploy on KoyebDeploy on MogeniusDeploy on herokuDeploy on ReplitDeploy on UffizziWATCH YOUTUBE VIDEOS##* How To setup Github 1st stepDeploy on Heroku Video ⇓ Deploy on Railway Video ⇓ Deploy on Replit Video ⇓ DEPLOY STEPSFork This RepositoryUpdate settings.jsUplode creds.json file to sessions folderMake acount on your hostConnect Your Repository to your web host siteWatch Videos[ DEPLY ON TERMUX ]apt updateapt upgradepkg update && pkg upgradepkg install bashpkg install libwebppkg install git -ypkg install nodejs -y pkg install ffmpeg -y pkg install wgetpkg install imagemagick -ygit clone https://github.com/DarkMakerofc/Queen-Elisa-Md-V2cd Queen-Elisa-Md-V2npm installnpm start✅ New Updates◉ Fix Downloaders ( fb , insta , tiktok )◉ Fix Logo errorℹ️ How To Update 🌐 Support For Deploy THANAKS FOR USNING QUEEN ELISA 💃💖🧑‍💻 Join Queen Elisa Support Group 🧑‍💻🦄 Join Public Group 🦄 ⚠️ We are not responsible for any inconvenience caused by your mistakes!   | ඔබගේ අත්වැරදීම් නිසා සිදුවන අපහසුතාවයන් සඳහා අප වගකිවයනු නොලැබේ !TOTAL PROFILE VIEWS 🧚💗 Thanks For -thashi 💖 for Voice ,slrealtech , darkalpha and isuru thanks for helps 💖 WHATSAPP GROUPS "
24,learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/blob/master/README.md,JavaScript,"Looping LabLearning GoalsBuild a for loop.Build a while loop.Explain the purpose of a loop.Understand when to use each type of loop.IntroductionIn an earlier lesson, we learned about repetition statements —statements that allow us to break out of the default sequence and repeat asection of code multiple times. We also learned about two of JavaScript'srepetition constructs: the while loop and the do...while loop. In this lessonwe will learn about a third: the for loop.Let's say we have a bunch of gifts to wrap. They all happen to be the same sizeand shape, so for every gift, we need to cut a similarly sized piece of wrappingpaper, fold it up over the edges of the gift, tape it together, and add a nicelittle card. Then we set the wrapped gift aside and move on to the next gift.In programming terms, we can think of our collection of gifts as anArray and the act of wrapping them as a function. For example:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGift(gift) {  console.log(`Wrapped ${gift} and added a bow!`);}We could then call wrapGift() on each gift individually:wrapGift(gifts[0]);wrapGift(gifts[1]);wrapGift(gifts[2]);However, this isn't very efficient or extensible. It's a lot of repetitive codeto write out, and if we had more gifts we'd have to write a whole new line foreach.This is where loops come in handy! With a loop, we can just write the repeatedaction once and perform the action on every item in the collection.This is a code-along, so follow along with the instructions in each section.There are tests to make sure you're coding your solutions correctly. If youhaven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.The for loopOf the loops in JavaScript, the for loop is the most common. The for loop ismade up of four statements in the following structure:for ([initialization]; [condition]; [iteration]) {  [loop body]}InitializationTypically used to initialize a counter variable.ConditionAn expression evaluated before each pass through the loop. If this expressionevaluates to true, the statements in the loop body are executed. If theexpression evaluates to false, the loop exits.IterationAn expression executed at the end of each iteration. Typically, this will involveincrementing or decrementing a counter, bringing the loop ever closer tocompletion.Loop bodyCode that runs on each pass through the loop.Usage: Use a for loop when you know how many times you want the loop torun (for example, when you're looping through elements in an array).ExamplesLet's take a look at an example and get some practice using the Node debugger.Enter the code below into the index.js file.Note: You can, of course, copy/paste the code rather than typing it inyourself, but we recommend typing it in for now. The act of typing codedevelops muscle memory and helps your brain understand and internalize thesyntax.for (let age = 30; age < 40; age++) {  console.log(`I'm ${age} years old. Happy birthday to me!`);  debugger;}In the above code, let age = 30 is the initialization: we're creating avariable, age, that we'll use in the next three phases of the loop. Noticethat we use let instead of const because we need to increment the value ofage.The condition for the above loop is age < 40, or, in other words, \""Run thecode in the loop body until age is NOT less than 40.\"" As long as thecondition evaluates to true, the code in the loop body is executed, the valueof age is incremented, and the condition is reevaluated. As soon as thecondition evaluates to false, the loop ends.The iteration is age++, which increments the value of age by 1 afterevery pass through the loop. We initialized age as 30, and it retains thatvalue during the first pass through the loop. At the end of the first pass, weincrement age to 31, check whether the condition still holds true, and,since it does, run the loop body again with age as 31. After that secondloop, we increment age to 32, and so on.The loop body is the set of statements that we want to run when thecondition evaluates to true.Let's take a look at what's happening in our loop using debugger. Runnode inspect index.js in the terminal to start the debugger. You should seethe following:Now run cont at the debug prompt to start executing the loop and advance tothe breakpoint. It should look like this:Note, in the first line, that the message has been logged and that age isequal to 30. To verify that, enter repl at the debug prompt to open theREPL, then enter age. You should see 30 output. Now type Ctrl-C to exitthe repl, and enter cont at the debug prompt to advance to the nextiteration of the loop. You should see the following:Note that the logged output now shows that age is 31. You can continue to stepthrough the iterations by running cont at the debug prompt. At any point youcan verify the value of age by entering the REPL and typing age at theprompt, then exit the REPL to continue stepping through. When you're done, enter.exit or Ctrl-C twice to exit the debugger.Now let's remove debugger; from our code and execute it by runningnode index.js. You should see the following:Using for with ArraysThe for loop is often used to iterate over every element in an array. Let'srewrite our gift-wrapping action above as a for loop. Enter the following codeinto index.js:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  for (let i = 0; i < gifts.length; i++) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    debugger;  }  return gifts;}wrapGifts(gifts);We started our counter, i, at 0 because arrays have zero-based indexes. Ourcondition states that we should run the code in the loop body while i is lessthan gifts.length (3 in the above example). Our iteration, i++, incrementsour counter by 1 at the end of each pass through the loop.Run node inspect index.js in the terminal to enter the debugger, and cont atthe debug prompt to advance to the breakpoint. You should seeWrapped teddy bear and added a bow! logged. In our loop body, we referencegifts[i]. Since i starts out as 0, during the first pass through the loopgifts[i] is gifts[0], which is 'teddy bear'. Continue stepping through theloop by entering cont at thedebug prompt and remember you can enter the REPLat any point to check the values of our variables, i and gifts[i].When you're done, remove the debugger and execute the code by runningnode index.js. You should see the following logged to the terminal:Wrapped teddy bear and added a bow!Wrapped drone and added a bow!Wrapped doll and added a bow!AssignmentIn the previous section, the wrapGifts() function allowed us to take any arrayof gifts and loop over them, logging our own message. Let's practice that with aslightly different idea. To complement our gift wrapping function, your task isto create a thank you card creator.Note: Recall the difference between logging and returning values from afunction. When we log information we are simply outputting text to a terminalor console. When we return data from a function we will be able to referenceand use that information elsewhere because the data is being passed out of thefunction.In index.js, build a function named writeCards() that accepts two arguments:an array of string names, and an event name. Create a for loop with a counterthat starts at 0 and increments at the end of each loop. The for loop shouldstop once it has iterated over the length of the array.As with our previous wrapGifts() function, you will create a custom messagefor each name inside the loop. Unlike that example, however, instead of simplylogging the messages to the console, you will collect them in a new array andreturn this array at the end of the function. (Refer back to the ArrayMethods lesson if you need a refresher on how we can add an element to anarray.) The overall process should be:create a new, empty array to hold the messages;iterate through the input array and, inside the loop, build out the 'thankyou' message for each name using string interpolation, then add that messageto the new array you created;after the loop finishes and all of the messages have been added to the newarray, return the new array.Here is an example of what a call to the writeCards() function might look like:writeCards([\""Charlie\"", \""Samip\"", \""Ali\""], \""birthday\"");If we were to call the function using this function call, it should produce thefollowing array as the return value:[  \""Thank you, Charlie, for the wonderful birthday gift!\"",  \""Thank you, Samip, for the wonderful birthday gift!\"",  \""Thank you, Ali, for the wonderful birthday gift!\"",];Top Tip: The debugger isn't just for debugging code — you can also use itto help you write your function! Try building the structure of the loop,putting the debugger inside the loop body. Even before you start writing thecode, you can enter the debugger's REPL and try out code until you figure outhow to create the message and add it to an array. Once it's working in theREPL, transfer the code to index.js, exit the debugger, and run the tests.The while loopRecall from the earlier lesson that the while loop is similar to a for loop,repeating an action in a loop based on a condition. Both will continue to loopuntil that condition evaluates to false. Unlike for, while only requirescondition and loop statements:while ([condition]) {  [loop body]}The initialization and iteration statements of the for loop have notdisappeared, though. In fact, we could rewrite our original for loop giftwrapping example using a while loop and achieve the exact same result:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  let i = 0; // the initialization moves OUTSIDE the body of the loop!  while (i < gifts.length) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    i++; // the iteration moves INSIDE the body of the loop!  }  return gifts;}wrapGifts(gifts);// LOG: Wrapped teddy bear and added a bow!// LOG: Wrapped drone and added a bow!// LOG: Wrapped doll and added a bow!// => [\""teddy bear\"", \""drone\"", \""doll\""]Notice that we've just moved the initialization and iteration statements —declaring the i variable outside the loop, and incrementing it inside theloop.CAUTION: When using while loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that always evaluates to true, causing an infinite loop!Using a while loop enables us to check conditions that aren't based on acounter. Take a look at the following pseudocode for an example of howwe could use while in a program for planting a garden:function plantGarden() {  let keepWorking = true;  while (keepWorking) {    chooseSeedLocation();    plantSeed();    waterSeed();    keepWorking = checkForMoreSeeds();  }}We can imagine that while we have seeds, we take the same steps over and over:choose a location for a seed; plant it; water it. Then, check if there are moreseeds. If not, do not keep working.When to Use for and whileJavaScript, like many programming languages, provides a variety of loopingoptions. Loops like for and while are actually just slight variations of thesame process. By providing a variety, we as programmers have a larger vocabularyto work with.Often, you will see while loops simply being used as an alternative to forloops:let countup = 0;while (countup < 10) {  console.log(countup++);}This is perfectly fine as an alternative way to describe:for (let countup = 0; countup < 10; countup++) {  console.log(countup);}If you're feeling a bit lost about when to use a for vs. a while loop, takea deep breath. Most of the time, a regular for loop will suffice. It's by farthe most common looping construct in JavaScript. A general heuristic forchoosing which loop to use is to first try a for loop. If that doesn't serveyour purposes, then go ahead and try a while loop. Also, remember that you canalways refer to the documentation on these loops at anytime.Just don't forget: with while, make sure you are updating the conditionon each loop so that the loop eventually terminates!AssignmentTo get more acquainted with while, your task is to write a function,countDown, that takes in any positive integer and, starting from that number,counts down to zero using console.log(). Note that this means that runningcountDown(10); would actually log 11 times:109876543210Remember the workflow:Install the dependencies using npm install.Run the tests using npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 2 and 3 often until a test passes.Repeat as needed for the remaining tests.ConclusionAfter some time programming in JavaScript, writing a for loop will come asnaturally to you as wrapping one gift after another. Just as you slowly becomecomfortable using different words and vocabulary to better express yourself,you will become more acquainted with concepts like for and while until youare able to discern the nuanced differences in usage between them.ResourcesCodecademyfor loopwhile loopMDNfor loopwhile loopLoops and iteration"
25,jenkins-docs/simple-node-js-react-npm-app,https://github.com/jenkins-docs/simple-node-js-react-npm-app/blob/master/README.md,JavaScript,"simple-node-js-react-npm-appThis repository is for theBuild a Node.js and React app with npmtutorial in the Jenkins User Documentation.The repository contains a simple Node.js and React application which generatesa web page with the content \""Welcome to React\"" and is accompanied by a test tocheck that the application renders satisfactorily.The jenkins directory contains an example of the Jenkinsfile (i.e. Pipeline)you'll be creating yourself during the tutorial and the scripts subdirectorycontains shell scripts with commands that are executed when Jenkins processesthe \""Test\"" and \""Deliver\"" stages of your Pipeline."
26,angular-ui/bootstrap,https://github.com/angular-ui/bootstrap/blob/master/README.md,JavaScript,"Project Status (please read)Due to Angular's continued adoption, our creation of the Angular version of this library, and the the project maintainers' moving on to other things, this project is considered feature-complete and is no longer being maintained.We thank you for all your contributions over the years and hope you've enjoyed using this library as much as we've had developing and maintaining it.  It would not have been successful without them.UI Bootstrap - AngularJS directives specific to BootstrapQuick linksDemoAngular 2InstallationNPMBowerNuGetCustomManualWebpack / JSPMSupportFAQCode of ConductPREFIX MIGRATION GUIDESupported browsersNeed help?Found a bug?Contributing to the projectDevelopment, meeting minutes, roadmap and more.DemoDo you want to see directives in action? Visit https://angular-ui.github.io/bootstrap/!Angular 2Are you interested in Angular 2? We are on our way! Check out ng-bootstrap.InstallationInstallation is easy as UI Bootstrap has minimal dependencies - only the AngularJS and Twitter Bootstrap's CSS are required.Notes:Since version 0.13.0, UI Bootstrap depends on ngAnimate for transitions and animations, such as the accordion, carousel, etc. Include ngAnimate in the module dependencies for your app in order to enable animation.UI Bootstrap depends on ngTouch for swipe actions. Include ngTouch in the module dependencies for your app in order to enable swiping.Angular RequirementsUI Bootstrap 1.0 and higher requires Angular 1.4.x or higher and it has been tested with Angular 1.4.8.UI Bootstrap 0.14.3 is the last version that supports Angular 1.3.x.UI Bootstrap 0.12.0 is the last version that supports Angular 1.2.x.Bootstrap RequirementsUI Bootstrap requires Bootstrap CSS version 3.x or higher and it has been tested with Bootstrap CSS 3.3.6.UI Bootstrap 0.8 is the last version that supports Bootstrap CSS 2.3.x.Install with NPM$ npm install angular-ui-bootstrapThis will install AngularJS and Bootstrap NPM packages.Install with Bower$ bower install angular-bootstrapNote: do not install 'angular-ui-bootstrap'.  A separate repository - bootstrap-bower - hosts the compiled javascript file and bower.json.Install with NuGetTo install AngularJS UI Bootstrap, run the following command in the Package Manager ConsolePM> Install-Package Angular.UI.BootstrapCustom buildHead over to https://angular-ui.github.io/bootstrap/ and hit the Custom build button to create your own custom UI Bootstrap build, just the way you like it.Manual downloadAfter downloading dependencies (or better yet, referencing them from your favorite CDN) you need to download build version of this project. All the files and their purposes are described here:https://github.com/angular-ui/bootstrap/tree/gh-pages#build-filesDon't worry, if you are not sure which file to take, opt for ui-bootstrap-tpls-[version].min.js.Adding dependency to your projectWhen you are done downloading all the dependencies and project files the only remaining part is to add dependencies on the ui.bootstrap AngularJS module:angular.module('myModule', ['ui.bootstrap']);Webpack / JSPMTo use this project with webpack, follow the NPM instructions.Now, if you want to use only the accordion, you can do:import accordion from 'angular-ui-bootstrap/src/accordion';angular.module('myModule', [accordion]);You can import all the pieces you need in the same way:import accordion from 'angular-ui-bootstrap/src/accordion';import datepicker from 'angular-ui-bootstrap/src/datepicker';angular.module('myModule', [accordion, datepicker]);This will load all the dependencies (if any) and also the templates (if any).Be sure to have a loader able to process css files like css-loader.If you would prefer not to load your css through your JavaScript file loader/bundler, you can choose to import the index-nocss.js file instead, which is available for the modules:carouseldatepickerdatepickerPopupdropdownmodalpopoverpositiontimepickertooltiptypeaheadThe other modules, such as accordion in the example below, do not have CSS resources to load, so you should continue to import them as normal:import accordion from 'angular-ui-bootstrap/src/accordion';import typeahead from 'angular-ui-bootstrap/src/typeahead/index-nocss.js';angular.module('myModule', [accordion, typeahead]);VersioningPre-2.0.0 does not follow a particular versioning system. 2.0.0 and onwards follows semantic versioning. All release changes can be viewed on our changelog.SupportFAQhttps://github.com/angular-ui/bootstrap/wiki/FAQCode of ConductTake a moment to read our Code of ConductPREFIX MIGRATION GUIDEIf you're updating your application to use prefixes, please check the migration guide.Supported browsersDirectives from this repository are automatically tested with the following browsers:Chrome (stable and canary channel)FirefoxIE 9 and 10OperaSafariModern mobile browsers should work without problems.Need help?Need help using UI Bootstrap?Live help in the IRC (#angularjs channel at the freenode network). Use this webchat or your own IRC client.Ask a question in StackOverflow under the angular-ui-bootstrap tag.Please do not create new issues in this repository to ask questions about using UI BootstrapFound a bug?Please take a look at CONTRIBUTING.md and submit your issue here.Contributing to the projectWe are always looking for the quality contributions! Please check the CONTRIBUTING.md for the contribution guidelines.Development, meeting minutes, roadmap and more.Head over to the Wiki for notes on development for UI Bootstrap, meeting minutes from the UI Bootstrap team, roadmap plans, project philosophy and more."
27,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
28,freeCodeCamp/boilerplate-npm,https://github.com/freeCodeCamp/boilerplate-npm/blob/main/README.md,JavaScript,Backend Challenges boilerplate - package.json
29,AlreadyBored/basic-js-ds,https://github.com/AlreadyBored/basic-js-ds/blob/master/README.md,JavaScript,"BasicJS. Data structures⚠️ DO NOT SUBMIT PULL REQUESTS TO THIS REPO ⚠️PrerequisitesInstall Node.jsFork this repository: https://github.com/AlreadyBored/basic-js-dsClone your newly created repo: https://github.com/<%your_github_username%>/basic-js-dsGo to folder basic-js-dsTo install all dependencies use npm installRun npm run test in command line.You will see the number of pending, passing and failing tests. 100% of passing tests is equal to max score for the taskTroubleshootingIf you catch error like this you can try to make npm install -g node-gypSubmit to rs appOpen rs app and loginGo to submit task pageSelect your task (BasicJS Data Structures)Press the submit button and enjoyNotesWe recommend you to use Node.js of version 16.x.x LTS. If you use any of features, that does not supported by Node.js v16, there may be problems with task submit.Please, be sure that each of your tests is limited to 30 sec.General task descriptionYour task is to deal with some data structures to solve the subtasks. Subtasks descriptions, as well as instructions on how to run tests and submit solutions are below.Binary search treeA binary tree is a hierarchical data structure in which each node has a value (in this case, it is also a key) and links to the left and right children. The node that is at the topmost level (which is not someone else's child) is called the root. Nodes that have no children are called leaves.A binary search tree is a binary tree with additional properties: the value of the left child is less than the value of the parent, and the value of the right child is greater than the value of the parent for each tree node. That is, the data in the binary search tree is stored sorted. Each time you add a new or remove an existing node, the sorted order of the tree is preserved. When searching for an element, the search value is compared with the root. If the desired is greater than the root, then the search continues in the right child of the root, if less, then in the left, if equal, then the value is found and the search stops.Your task is to implement the class BinarySearchTree.Each instance of BinarySearchTree must have following methods:root — return root node of the treeadd(data) — add node with data to the treehas(data) — returns true if node with the data exists in the tree and false otherwisefind(data) — returns node with the data if node with the data exists in the tree and null otherwiseremove(data) — removes node with the data from the tree if node with the data existsmin — returns minimal value stored in the tree (or null if tree has no nodes)max — returns maximal value stored in the tree (or null if tree has no nodes)For example:const tree = new BinarySearchTree();tree.add(1);tree.add(2);tree.add(3);tree.add(4);tree.add(5);tree.root().data => 1;tree.min() => 1tree.max() => 5tree.remove(5);tree.has(5) => falsetree.max() => 4Write your code in src/binary-search-tree.js.Remove from listGiven a singly linked list of integers l and an integer k, remove all elements from list l that have a value equal to k.For example, for l = [3, 1, 2, 3, 4, 5] and k = 3,the output should be [1, 2, 4, 5]Singly linked lists are already defined with this interfaceclass ListNode {  constructor(x) {    this.value = x;    this.next = null;  }}Write your code in src/remove-from-list.js.StackImplement the Stack with a given interface via array.For example:const stack = new Stack();stack.push(1); // adds the element to the stackstack.peek(); // returns the peek, but doesn't delete it, returns 1stack.pop(); // returns the top element from stack and deletes it, returns 1stack.pop(); // undefinedWrite your code in src/stack.js.QueueImplement the Queue with a given interface via linked list (use ListNode extension).Each instance of queue must have 3 methods:* enqueue(value) — puts the value at the end of the queue* dequeue — retrieves a value from the head of the queue and deletes it* getUnderlyingList - returns underlying linked listFor example:const queue = new Queue();queue.enqueue(1); // adds the element to the queuequeue.enqueue(3); // adds the element to the queuequeue.dequeue(); // returns the top element from queue and deletes it, returns 1queue.getUnderlyingList() // returns { value: 3, next: null }Write your code in src/queue.js.© AlreadyBored& tasks:Remove from listStackQueueare integrated from Short track 2021 repo& Thanks mikhama for assistance!"
30,davidshimjs/qrcodejs,https://github.com/davidshimjs/qrcodejs/blob/master/README.md,JavaScript,"QRCode.jsQRCode.js is javascript library for making QRCode. QRCode.js supports Cross-browser with HTML5 Canvas and table tag in DOM.QRCode.js has no dependencies.Basic Usages<div id=\""qrcode\""></div><script type=\""text/javascript\"">new QRCode(document.getElementById(\""qrcode\""), \""http://jindo.dev.naver.com/collie\"");</script>or with some options<div id=\""qrcode\""></div><script type=\""text/javascript\"">var qrcode = new QRCode(document.getElementById(\""qrcode\""), {\ttext: \""http://jindo.dev.naver.com/collie\"",\twidth: 128,\theight: 128,\tcolorDark : \""#000000\"",\tcolorLight : \""#ffffff\"",\tcorrectLevel : QRCode.CorrectLevel.H});</script>and you can use some methodsqrcode.clear(); // clear the code.qrcode.makeCode(\""http://naver.com\""); // make another code.Browser CompatibilityIE6~10, Chrome, Firefox, Safari, Opera, Mobile Safari, Android, Windows Mobile, ETC.LicenseMIT LicenseContacttwitter @davidshimjs"
31,StephenGrider/ReduxSimpleStarter,https://github.com/StephenGrider/ReduxSimpleStarter/blob/master/README.md,JavaScript,"ReduxSimpleStarterInterested in learning Redux?Getting StartedThere are two methods for getting started with this repo.Familiar with Git?Checkout this repo, install dependencies, then start the gulp process with the following:> git clone https://github.com/StephenGrider/ReduxSimpleStarter.git> cd ReduxSimpleStarter> npm install> npm startNot Familiar with Git?Click here then download the .zip file.  Extract the contents of the zip file, then open your terminal, change to the project directory, and:> npm install> npm start"
32,learn-co-curriculum/phase-1-scope-lab,https://github.com/learn-co-curriculum/phase-1-scope-lab/blob/master/README.md,JavaScript,"Scope LabLearning GoalsUnderstand how functions determine scope in JavaScriptIntroductionScuber's drivers are beginning to take down some notes about their customers.Use your knowledge of scope to access and change some of these variables.InstructionsA word of warning. In this lab, you will practice doing some bad things. Forexample, we'll ask you to declare variables in global scope, and write functionsthat break down. You'll also need to use var to declare all variables exceptwhen specifically instructed otherwise. We do this because, by testing thelimits and exposing the underbelly of a language, you can better understand itand know what to avoid in the future.Fork and clone this lab into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Ok, these are your tasks:customerName: Declare a variable in global scope called customerName usingthe var keyword and assign it the value 'bob'.upperCaseCustomerName(): Write a function that accesses that globalcustomerName variable, and uppercases it.setBestCustomer(): Write a function that when called, declares a variablecalled bestCustomer in global scope and assigns it to be 'not bob'. (PoorBob.) Also, poor us, declaring a global variable from inside a function isone of those things we would never want to do normally, but is good for us toexplore right now.overwriteBestCustomer(): See the consequences of declaring a variable inglobal scope, by writing a new function called overwriteBestCustomer() thatchanges that bestCustomer variable to 'maybe bob'.leastFavoriteCustomer and changeLeastFavoriteCustomer(): Now declare aconstant (using the const keyword) in global scope calledleastFavoriteCustomer; be sure to assign it some initial value. Finally,write a function called changeLeastFavoriteCustomer() that attempts tochange that constant - notice what JavaScript does when you try to change theconstant.When you're done, remember to commit and push your changes up to GitHub, thensubmit your work to Canvas using CodeGrade."
33,learn-co-students/javascript-arrays-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-arrays-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Arrays LabObjectivesPractice writing arraysPractice manipulating arraysExplain how to manipulate arrays in a non-destructive wayIntroductionPreviously, we've learned about how arrays work. We know that push() pusheselements onto the ends of arrays, and pop() pops them off; similarly,unshift() adds elements to the beginnings of arrays, and shift() pulls themoff.Now it's time to put what we've learned to the test.What's with all this destruction?You might have noticed that our tests are looking for functions likedestructivelyAppendKitten() — what's up with that? (Rest assured, no kittenswill be harmed.)We want to distinguish between actions that mutate (\""change\"") their underlyingstructures (like pop(), push(), shift(), and unshift()) and thosefunctions that leave those structures untouched.In general, it's good practice to avoid mutating a program's state wheneverpossible. So we want to call out these methods as destructive, since mutatingstate means we don't always know what we're dealing with. Indeed, thesemutations mean that we need to refresh the test environment after every test tomake sure that we're not working with mutated data!By contrast, we also have methods like appendKitten(), which simply adds akitten to the end of the kittens array and returns the new array, leavingthe existing array untouched. This flow is preferable to mutating state becausewe have complete control over what's going into and coming out of the function.Try to use methods like slice() or concat() to return a newarray when keeping the original array intact.concat()slice()Think of it this way: you're making a peanut butter and jelly sandwich. Wouldyou rather work with a sandwich where someone had put an unspecified amount ofpeanut butter or jelly on the bread before you start making it (or, worse, wheresomeone had taken a bite out of the bread), or would you rather start fresh?Regardless of your feelings about stale peanut butter and jelly, we're going tostate unequivocally that fresh sandwiches are preferable — and fresh functions(ones that don't mutate shared state) are preferable, too.Run those tests!You'll notice that the first test asks for an array called kittens, set to aninitial value of [\""Milo\"", \""Otis\"", \""Garfield\""].In our test file, we're going to reset this array to your initial value afterevery test. Some of our tests manipulate arrays in place, and we want to be surethat we can get back to a blank slate between tests.Why is a blank slate important? We want our programs to be predictable: thismakes them more robust, easier to maintain, and less prone to bugs. One way toachieve predictability is by isolating our tests from one another, meaning thatno test should depend on the outcome or process of any other test. That way,tests can run in any order and test known inputs and environments, rather thandepending on other tests running first and modifying the entire environment.Remember the workflow:Run learn test.Read the errors; vocalize what they're asking you to do.Write code, save, and repeat steps 1 and 2 often until a test passes.Repeat as needed for further tests.Run learn submit when finished!Normally, resetting the array and the array itself would be decoupled — thatis, independent. But because of the nature of this lab, we need to be a bitprescriptive and give you some initial values so that we can focus on whatreally matters — understanding how to manipulate arrays in JavaScript.Resourcesnpm"
34,linuxacademy/cicd-pipeline-train-schedule-cd,https://github.com/linuxacademy/cicd-pipeline-train-schedule-cd/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-cdThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appYou need a Java JDK 7 or later to run the build. You can run the build like this:./gradlew buildYou can run the app with:./gradlew npm_startOnce it is running, you can access it in a browser at http://localhost:3000"
35,MetaMask/metamask-extension,https://github.com/MetaMask/metamask-extension/blob/develop/README.md,JavaScript,"MetaMask Browser ExtensionYou can find the latest version of MetaMask on our official website. For help using MetaMask, visit our User Support Site.For general questions, feature requests, or developer questions, visit our Community Forum.MetaMask supports Firefox, Google Chrome, and Chromium-based browsers. We recommend using the latest available browser version.For up to the minute news, follow our Twitter or Medium pages.To learn how to develop MetaMask-compatible applications, visit our Developer Docs.To learn how to contribute to the MetaMask project itself, visit our Internal Docs.Building locallyInstall Node.js version 18If you are using nvm (recommended) running nvm use will automatically choose the right node version for you.Install Yarn v3ONLY follow the steps in the \""Install Corepack\"" and \""Updating the global Yarn version\"" sectionsDO NOT take any of the steps in the \""Initializing your project\"", \""Updating to the latest versions\"" or \""Installing the latest build fresh from master\"" sections. These steps could result in your repo being reset or installing the wrong yarn version, which can break your build.Duplicate .metamaskrc.dist within the root and rename it to .metamaskrcReplace the INFURA_PROJECT_ID value with your own personal Infura Project ID.If debugging MetaMetrics, you'll need to add a value for SEGMENT_WRITE_KEY Segment write key, see Developing on MetaMask - Segment.If debugging unhandled exceptions, you'll need to add a value for SENTRY_DSN Sentry Dsn, see Developing on MetaMask - Sentry.Optionally, replace the PASSWORD value with your development wallet password to avoid entering it each time you open the app.Build the project to the ./dist/ folder with yarn dist.Optionally, you may run yarn start to run dev mode.Uncompressed builds can be found in /dist, compressed builds can be found in /builds once they're built.See the build system readme for build system usage information.Git HooksTo get quick feedback from our shared code quality fitness functions before committing the code, you can install our git hooks with Husky.$ yarn githooks:installYou can read more about them in our testing documentation.ContributingDevelopment buildsTo start a development build (e.g. with logging and file watching) run yarn start.React and Redux DevToolsTo start the React DevTools, run yarn devtools:react with a development build installed in a browser. This will open in a separate window; no browser extension is required.To start the Redux DevTools Extension:Install the package remotedev-server globally (e.g. yarn global add remotedev-server)Install the Redux Devtools extension.Open the Redux DevTools extension and check the \""Use custom (local) server\"" checkbox in the Remote DevTools Settings, using the default server configuration (host localhost, port 8000, secure connection checkbox unchecked).Then run the command yarn devtools:redux with a development build installed in a browser. This will enable you to use the Redux DevTools extension to inspect MetaMask.To create a development build and run both of these tools simultaneously, run yarn start:dev.Test DappThis test site can be used to execute different user flows.Running Unit Tests and LintingRun unit tests and the linter with yarn test. To run just unit tests, run yarn test:unit.You can run the linter by itself with yarn lint, and you can automatically fix some lint problems with yarn lint:fix. You can also run these two commands just on your local changes to save time with yarn lint:changed and yarn lint:changed:fix respectively.For Jest debugging guide using Node.js, see docs/tests/jest.md.Running E2E TestsOur e2e test suite can be run on either Firefox or Chrome.required yarn build:test to create a test build.run tests, targetting the browser:Firefox e2e tests can be run with yarn test:e2e:firefox.Chrome e2e tests can be run with yarn test:e2e:chrome. The chromedriver package major version must match the major version of your local Chrome installation. If they don't match, update whichever is behind before running Chrome e2e tests.These test scripts all support additional options, which might be helpful for debugging. Run the script with the flag --help to see all options.Running a single e2e testSingle e2e tests can be run with yarn test:e2e:single test/e2e/tests/TEST_NAME.spec.js along with the options below.  --browser           Set the browser used; either 'chrome' or 'firefox'.                                            [string] [choices: \""chrome\"", \""firefox\""]  --debug             Run tests in debug mode, logging each driver interaction                                                         [boolean] [default: false]  --retries           Set how many times the test should be retried upon failure.                                                              [number] [default: 0]  --leave-running     Leaves the browser running after a test fails, along with                      anything else that the test used (ganache, the test dapp,                      etc.)                              [boolean] [default: false]  --update-snapshot   Update E2E test snapshots                                             [alias: -u] [boolean] [default: false]For example, to run the account-details tests using Chrome, with debug logging and with the browser set to remain open upon failure, you would use:yarn test:e2e:single test/e2e/tests/account-details.spec.js --browser=chrome --debug --leave-runningChanging dependenciesWhenever you change dependencies (adding, removing, or updating, either in package.json or yarn.lock), there are various files that must be kept up-to-date.yarn.lock:Run yarn again after your changes to ensure yarn.lock has been properly updated.Run yarn lint:lockfile:dedupe:fix to remove duplicate dependencies from the lockfile.The allow-scripts configuration in package.jsonRun yarn allow-scripts auto to update the allow-scripts configuration automatically. This config determines whether the package's install/postinstall scripts are allowed to run. Review each new package to determine whether the install script needs to run or not, testing if necessary.Unfortunately, yarn allow-scripts auto will behave inconsistently on different platforms. macOS and Windows users may see extraneous changes relating to optional dependencies.The LavaMoat policy filesIf you are a MetaMask team member and your PR is on a repository branch, you can use the bot command @metamaskbot update-policies to ask the MetaMask bot to automatically update the policies for you.If your PR is from a fork, you can ask a MetaMask team member to help with updating the policy files.Manual update instructions: The tl;dr is to run yarn lavamoat:auto to update these files, but there can be devils in the details:There are two sets of LavaMoat policy files:The production LavaMoat policy files (lavamoat/browserify/*/policy.json), which are re-generated using yarn lavamoat:background:auto. Add --help for usage.These should be regenerated whenever the production dependencies for the background change.The build system LavaMoat policy file (lavamoat/build-system/policy.json), which is re-generated using yarn lavamoat:build:auto.This should be regenerated whenever the dependencies used by the build system itself change.Whenever you regenerate a policy file, review the changes to determine whether the access granted to each package seems appropriate.Unfortunately, yarn lavamoat:auto will behave inconsistently on different platforms.macOS and Windows users may see extraneous changes relating to optional dependencies.If you keep getting policy failures even after regenerating the policy files, try regenerating the policies after a clean install by doing:rm -rf node_modules/ && yarn && yarn lavamoat:autoKeep in mind that any kind of dynamic import or dynamic use of globals may elude LavaMoat's static analysis.Refer to the LavaMoat documentation or ask for help if you run into any issues.ArchitectureVisual of the controller hierarchy and dependencies as of summer 2022.Visual of the entire codebase.Other DocsHow to add custom build to ChromeHow to add custom build to FirefoxHow to add a new translation to MetaMaskPublishing GuideHow to use the TREZOR emulatorDeveloping on MetaMaskHow to generate a visualization of this repository's developmentHow to add new confirmationsDapp Developer ResourcesExtend MetaMask's features w/ MetaMask Snaps.Prompt your users to add and switch to a new network.Change the logo that appears when your dapp connects to MetaMask."
36,learn-co-students/javascript-objects-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript ObjectsOverviewIn this lesson, we'll introduce, define, and work with objects.ObjectivesCreate an object in JSAccess a value from an objectAdd a key-value pair to an objectDelete a key-value pair from an objectIntroductionWhen we run across a word that we don't know, we often consult a dictionary. A dictionary is, at its core, a list of words; below each word is a definition or set of definitions. If we know the word that we're looking for, we can just look it up in the dictionary and get all its information.To offer another example, imagine a planner. The planner has a list of dates, and each date has a list of times; at each time, there's an event (or not). The planner gives us a way of associating what's happening with the time when it happens. If we look up a given time, we will see what (if anything) is happening then.In programming, structures like dictionaries are called \""associative data structures\"": they contain pairs of keys (words in our dictionary analogy) and values (definitions in our dictionary analogy).In JavaScript, the barebones associative data structure is called an object. That means that in an object, you can look something up by its key and get back its value — just like in a dictionary. In fact, you might hear some people refer to objects as \""dictionaries.\"" We're going to call them \""objects\"" because they're instances of JavaScript's capital-O Object.Creating ObjectsYou can create an object in two different ways, with the literal syntax and with the Object constructor. A constructor does just what its name implies: it constructs objects (in this case, Object objects). Be sure to follow along in your console.Literal Syntax:var meals = {};The curly braces ({}) are an object! You just created your first one!Object Constructor:var meals = new Object();You just created another object!You can also initialize an object with key-value pairs when you create it:var meals = { breakfast: \""oatmeal\"" };// or, equivalentlyvar meals = new Object({ breakfast: 'oatmeal' })In this case, breakfast is the key and \""oatmeal\"" is the value.Note that all keys in JavaScript objects are strings. This means that even though you can create an object {1: 'is the loneliest number'}, the key here, 1 gets turned into the string '1'. Values can be of any type.Note also that keys must be unique. If you were to initialize the following objectvar meals = {  breakfast: 'eggs',  breakfast: 'bacon'}And then check on the value of meals, you'd see{ breakfast: 'bacon' }Only the last key-value pair to use breakfast as the key gets saved! Values don't have to be unique, though:var meals = {  breakfast: 'avocado',  lunch: 'avocado',  dinner: 'avocado'}We might want to consider diversifying our diet, but otherwise the above object works as expected.Similarly, if you have a variable const firstMeal = 'breakfast' and tried to create an object var meals = { firstMeal: 'oatmeal' }, the meals object's key would be 'firstMeal', not 'breakfast'.Top Tip: ES 6 provides a way to use variables as object keys — you have to wrap the key in square brackets ([]). Using the above example, you could write var meals = { [firstMeal]: 'oatmeal' } and then meals would be { breakfast: 'oatmeal' }. Pretty cool, right?We can access the values in an object using dot notationmeals.breakfast // 'oatmeal'or square-bracket notationmeals['breakfast'] // 'oatmeal'Note that when we use dot syntax, we do not wrap the key in quotes, and the key must be able to be treated as a string. Square-bracket syntax requires quotes if we're referencing the key directly, but it also gives us additional flexibility — we could also domeals[firstMeal] // 'oatmeal'using the firstMeal variable (which is equal to the string 'breakfast').  What if we tried using dot notation with our firstMeal variable?meals.firstMeal //undefinedWhen we use dot notation the key is always taken as the literal string provided. We must use bracket notation if we want to access (or delete) values that belong to a variable key.Adding to an ObjectIt's great that we can initialize an object with some key-value pairsvar meals = {  breakfast: 'oatmeal',  lunch: 'burrito',  dinner: 'steak'}but we might not always know what keys and values we're going to have ahead of time. Luckily, we can add new key-value pairs to objects.If we know the name of the key and its value, we can use the dot syntax to add the new pair:meals.snack = 'yogurt';See that dot .? That has a special meaning for objects — it tells JavaScript that we're going to be accessing the property that goes by the string that comes after it (in this case, 'snack'. So here, we assign (=) the value 'yogurt' to the key 'snack' in the object. We can access this new value as before:meals.snack // 'yogurt'meals['snack'] // 'yogurt'meals.lunch // 'burrito'We can also add key-value pairs using bracket notation:meals['second breakfast'] = 'bagel'This comes in handy, as in the above example, when our key is not a simple string. We can also use variables as keys this way:var sweetMeal = 'dessert'meals[sweetMeal] = 'cake';meals.dessert // 'cake'meals[sweetMeal] // 'cake'Note: In JavaScript, when we name variables and functions, we use the 'camelCase'naming convention. That is to say - if a variable or function is named using a single word,that word starts with a lowercase letter. If multiple words are used, every subsequent wordafter the first starts with a capitalized letter. sweetMeal is an example of this. We willsee more examples in a moment. Keep this in mind as tests will often expect this conventionas well!Lest it seem like we can only add new things, we can update existing key-value pairs by using the key:meals.breakfast = 'cereal'Note that all of the changes highlighted above are destructive. This means that if we apply these changes to an object by passing the object to a function, the original object will change. Let's try it out:function destructivelyUpdateObjectWithKeyAndValue(obj, key, value) {  obj[key] = value  return obj}const recipe = { eggs: 3 }destructivelyUpdateObjectWithKeyAndValue(recipe, 'flour', '3 cups')// returns { eggs: 3, flour: '3 cups' }// but also:recipe // { eggs: 3, flour: '3 cups' }Hm, but what if that's not what we wanted to do? What if we wanted to create a new object that stores both the old and the new properties?Object.assign()We can use Object.assign() to create a new object and pass it properties from existing objects. The first value is the target object that gets modified. All the values afterward can be any number of objects. It then copies them from left to right onto the target object (so if two objects share a key, the right-most object's value for that key will win). Let's try it out:Object.assign({}, { foo: 'bar' })// { foo: 'bar' }Object.assign({ eggs: 3 }, { flour: '1 cup' })// { eggs: 3, flour: '1 cup' }Object.assign({ eggs: 3 }, { chocolate: '1 cup', flour: '2 cups' }, { flour: '1/2 cup' })// { eggs: 3, chocolate: '1 cup', flour: '1/2 cup' }The power of Object.assign allows us to rewrite the above update function in a non-destructive way:function updateObjectWithKeyAndValue(obj, key, value) {   return Object.assign({}, obj, { [key]: value })}  // it's important that we merge everything into  // a new object such as the empty {}. \t// Otherwise, the object obj will be modified. \t// Test what happens if this line was written as:\t// return Object.assign(obj, { [key]: value })\tconst recipe = { eggs: 3 }updateObjectWithKeyAndValue(recipe, 'chocolate', '1 cup')// returns `{ eggs: 3, chocolate: '1 cup' }`recipe // { eggs: 3 }Sweet (and not just because of the chocolate)! We can make our update function even terser:function updateObjectWithObject(targetObject, updatesObject) {  return Object.assign({}, targetObject, updatesObject)}Deleting a Key-Value PairLet's say it's only 5 p.m. and we've changed our mind about dinner, so we want to delete the dinner key-value pair:var meals = { breakfast: \""oatmeal\"", lunch: \""turkey sandwich\"", dinner: \""steak and potatoes\"" };// the `delete` operator returns `true` if it has successfully// deleted, `false` otherwisedelete meals.dinner; // truemeals;// returns { breakfast: \""oatmeal\"", lunch: \""turkey sandwich\"" }Changing a ValueLet's say we actually ate oatmeal and a banana for breakfast, and we want to update the value the breakfast key is storing:var meals = {  breakfast: \""oatmeal\"",  lunch: \""turkey sandwich\"",  dinner: \""steak and potatoes\""};meals.breakfast = [\""oatmeal\"", \""banana\""];meals;// {//   breakfast: [\""oatmeal\"", \""banana\""],//   lunch: \""turkey sandwich\"",//   dinner: \""steak and potatoes\""//  }Again, we can change a value non-destructively (preserving the original object) using Object.assign:var meals = {  breakfast: \""oatmeal\"",  lunch: \""turkey sandwich\"",  dinner: \""steak and potatoes\""};Object.assign({}, meals, { breakfast: ['oatmeal', 'banana'] })// returns {//   breakfast: [\""oatmeal\"", \""banana\""],//   lunch: \""turkey sandwich\"",//   dinner: \""steak and potatoes\""//  }meals// still {//   breakfast: \""oatmeal\"",//   lunch: \""turkey sandwich\"",//   dinner: \""steak and potatoes\""// };InstructionsOpen objects.jsAssign an object to the variable playlist and initialize the object with a key-value pair — the keys will be artist names and the values will be song titles. (What limitation does this impose on our playlist?)Create a function updatePlaylist that accepts three parameters: the playlist (an object), an artist name (a string), and a song title. The body of the function should add the song and artist as a key-value pair to the playlist object. The function should return the whole playlist.Create a function removeFromPlaylist that accepts two arguments (the playlist object and the artist name). The body of the function should delete the key-value pair from the playlist and return the updated playlist."
37,eslint/eslint,https://github.com/eslint/eslint/blob/main/README.md,JavaScript,"ESLintWebsite |Configure ESLint |Rules |Contribute to ESLint |Report Bugs |Code of Conduct |Twitter |Discord |MastodonESLint is a tool for identifying and reporting on patterns found in ECMAScript/JavaScript code. In many ways, it is similar to JSLint and JSHint with a few exceptions:ESLint uses Espree for JavaScript parsing.ESLint uses an AST to evaluate patterns in code.ESLint is completely pluggable, every single rule is a plugin and you can add more at runtime.Table of ContentsInstallation and UsageConfigurationCode of ConductFiling IssuesFrequently Asked QuestionsReleasesSecurity PolicySemantic Versioning PolicyStylistic Rule UpdatesLicenseTeamSponsorsTechnology SponsorsInstallation and UsagePrerequisites: Node.js (^12.22.0, ^14.17.0, or >=16.0.0) built with SSL support. (If you are using an official Node.js distribution, SSL is always built in.)You can install and configure ESLint using this command:npm init @eslint/configAfter that, you can run ESLint on any file or directory like this:./node_modules/.bin/eslint yourfile.jsConfigurationAfter running npm init @eslint/config, you'll have an .eslintrc file in your directory. In it, you'll see some rules configured like this:{    \""rules\"": {        \""semi\"": [\""error\"", \""always\""],        \""quotes\"": [\""error\"", \""double\""]    }}The names \""semi\"" and \""quotes\"" are the names of rules in ESLint. The first value is the error level of the rule and can be one of these values:\""off\"" or 0 - turn the rule off\""warn\"" or 1 - turn the rule on as a warning (doesn't affect exit code)\""error\"" or 2 - turn the rule on as an error (exit code will be 1)The three error levels allow you fine-grained control over how ESLint applies rules (for more configuration options and details, see the configuration docs).Code of ConductESLint adheres to the JS Foundation Code of Conduct.Filing IssuesBefore filing an issue, please be sure to read the guidelines for what you're reporting:Bug ReportPropose a New RuleProposing a Rule ChangeRequest a ChangeFrequently Asked QuestionsI'm using JSCS, should I migrate to ESLint?Yes. JSCS has reached end of life and is no longer supported.We have prepared a migration guide to help you convert your JSCS settings to an ESLint configuration.We are now at or near 100% compatibility with JSCS. If you try ESLint and believe we are not yet compatible with a JSCS rule/configuration, please create an issue (mentioning that it is a JSCS compatibility issue) and we will evaluate it as per our normal process.Does Prettier replace ESLint?No, ESLint does both traditional linting (looking for problematic patterns) and style checking (enforcement of conventions). You can use ESLint for everything, or you can combine both using Prettier to format your code and ESLint to catch possible errors.Why can't ESLint find my plugins?Make sure your plugins (and ESLint) are both in your project's package.json as devDependencies (or dependencies, if your project uses ESLint at runtime).Make sure you have run npm install and all your dependencies are installed.Make sure your plugins' peerDependencies have been installed as well. You can use npm view eslint-plugin-myplugin peerDependencies to see what peer dependencies eslint-plugin-myplugin has.Does ESLint support JSX?Yes, ESLint natively supports parsing JSX syntax (this must be enabled in configuration). Please note that supporting JSX syntax is not the same as supporting React. React applies specific semantics to JSX syntax that ESLint doesn't recognize. We recommend using eslint-plugin-react if you are using React and want React semantics.What ECMAScript versions does ESLint support?ESLint has full support for ECMAScript 3, 5 (default), 2015, 2016, 2017, 2018, 2019, 2020, 2021, 2022, and 2023. You can set your desired ECMAScript syntax (and other settings, like global variables or your target environments) through configuration.What about experimental features?ESLint's parser only officially supports the latest final ECMAScript standard. We will make changes to core rules in order to avoid crashes on stage 3 ECMAScript syntax proposals (as long as they are implemented using the correct experimental ESTree syntax). We may make changes to core rules to better work with language extensions (such as JSX, Flow, and TypeScript) on a case-by-case basis.In other cases (including if rules need to warn on more or fewer cases due to new syntax, rather than just not crashing), we recommend you use other parsers and/or rule plugins. If you are using Babel, you can use @babel/eslint-parser and @babel/eslint-plugin to use any option available in Babel.Once a language feature has been adopted into the ECMAScript standard (stage 4 according to the TC39 process), we will accept issues and pull requests related to the new feature, subject to our contributing guidelines. Until then, please use the appropriate parser and plugin(s) for your experimental feature.Where to ask for help?Open a discussion or stop by our Discord server.Why doesn't ESLint lock dependency versions?Lock files like package-lock.json are helpful for deployed applications. They ensure that dependencies are consistent between environments and across deployments.Packages like eslint that get published to the npm registry do not include lock files. npm install eslint as a user will respect version constraints in ESLint's package.json. ESLint and its dependencies will be included in the user's lock file if one exists, but ESLint's own lock file would not be used.We intentionally don't lock dependency versions so that we have the latest compatible dependency versions in development and CI that our users get when installing ESLint in a project.The Twilio blog has a deeper dive to learn more.ReleasesWe have scheduled releases every two weeks on Friday or Saturday. You can follow a release issue for updates about the scheduling of any particular release.Security PolicyESLint takes security seriously. We work hard to ensure that ESLint is safe for everyone and that security issues are addressed quickly and responsibly. Read the full security policy.Semantic Versioning PolicyESLint follows semantic versioning. However, due to the nature of ESLint as a code quality tool, it's not always clear when a minor or major version bump occurs. To help clarify this for everyone, we've defined the following semantic versioning policy for ESLint:Patch release (intended to not break your lint build)A bug fix in a rule that results in ESLint reporting fewer linting errors.A bug fix to the CLI or core (including formatters).Improvements to documentation.Non-user-facing changes such as refactoring code, adding, deleting, or modifying tests, and increasing test coverage.Re-releasing after a failed release (i.e., publishing a release that doesn't work for anyone).Minor release (might break your lint build)A bug fix in a rule that results in ESLint reporting more linting errors.A new rule is created.A new option to an existing rule that does not result in ESLint reporting more linting errors by default.A new addition to an existing rule to support a newly-added language feature (within the last 12 months) that will result in ESLint reporting more linting errors by default.An existing rule is deprecated.A new CLI capability is created.New capabilities to the public API are added (new classes, new methods, new arguments to existing methods, etc.).A new formatter is created.eslint:recommended is updated and will result in strictly fewer linting errors (e.g., rule removals).Major release (likely to break your lint build)eslint:recommended is updated and may result in new linting errors (e.g., rule additions, most rule option updates).A new option to an existing rule that results in ESLint reporting more linting errors by default.An existing formatter is removed.Part of the public API is removed or changed in an incompatible way. The public API includes:Rule schemasConfiguration schemaCommand-line optionsNode.js APIRule, formatter, parser, plugin APIsAccording to our policy, any minor update may report more linting errors than the previous release (ex: from a bug fix). As such, we recommend using the tilde (~) in package.json e.g. \""eslint\"": \""~3.1.0\"" to guarantee the results of your builds.Stylistic Rule UpdatesStylistic rules are frozen according to our policy on how we evaluate new rules and rule changes.This means:Bug fixes: We will still fix bugs in stylistic rules.New ECMAScript features: We will also make sure stylistic rules are compatible with new ECMAScript features.New options: We will not add any new options to stylistic rules unless an option is the only way to fix a bug or support a newly-added ECMAScript feature.LicenseTeamThese folks keep the project moving and are resources for help.Technical Steering Committee (TSC)The people who manage releases, review feature requests, and meet regularly to ensure ESLint is properly maintained.Nicholas C. ZakasMilos DjermanovicReviewersThe people who review and implement new features.唯然Nitin KumarCommittersThe people who review and fix bugs and help triage issues.Bryan MishkinFrancesco TrottaYosuke OtaWebsite TeamTeam members who focus specifically on eslint.orgAmaresh  S MStrekPercy MaSponsorsThe following companies, organizations, and individuals support ESLint's ongoing maintenance and development. Become a Sponsor to get your logo on our README and website.Platinum Sponsors Gold Sponsors Silver Sponsors  Bronze Sponsors         Technology SponsorsSite search (eslint.org) is sponsored by AlgoliaHosting for (eslint.org) is sponsored by NetlifyPassword management is sponsored by 1Password"
38,matthieua/WOW,https://github.com/matthieua/WOW/blob/master/README.md,JavaScript,"WOW.js Reveal CSS animation as you scroll down a page.By default, you can use it to trigger animate.css animations.But you can easily change the settings to your favorite animation library.Advantages:Smaller than other JavaScript parallax plugins, like Scrollorama (they do fantastic things, but can be too heavy for simple needs)Super simple to install, and works with animate.css, so if you already use it, that will be very fast to setupFast execution and lightweight code: the browser will like it ;-)You can change the settings - see belowFollow @mattdelac_ for updates as WOW evolves.LIVE DEMO ➫Version1.1.3LicenseCommercial licenseIf you want to use WOW.js to develop commercial sites, themes, projects, and applications, the Commercial license is the appropriate license. With this option, your source code is kept proprietary. Purchase a WOW.js Commercial License at uplabs.com/posts/wow-js-commercialOpen source licenseIf you are creating an open source application under a license compatible with the GNU GPL license v3, you may use this project under the terms of the GPLv3.DocumentationIt just take seconds to install and use WOW.js!Read the documentation ➫Dependenciesanimate.cssInstallationBower   bower install wowjsNPM   npm install wowjsBasic usageIn order to hide all elements when they are supposed to be hidden. (Anti Flickering)CSS.wow {visibility: hidden;}HTML  <section class=\""wow slideInLeft\""></section>  <section class=\""wow slideInRight\""></section>JavaScriptnew WOW().init();Advanced usageHTML  <section class=\""wow slideInLeft\"" data-wow-duration=\""2s\"" data-wow-delay=\""5s\""></section>  <section class=\""wow slideInRight\"" data-wow-offset=\""10\""  data-wow-iteration=\""10\""></section>JavaScriptvar wow = new WOW(  {    boxClass:     'wow',      // animated element css class (default is wow)    animateClass: 'animated', // animation css class (default is animated)    offset:       0,          // distance to the element when triggering the animation (default is 0)    mobile:       true,       // trigger animations on mobile devices (default is true)    live:         true,       // act on asynchronously loaded content (default is true)    callback:     function(box) {      // the callback is fired every time an animation is started      // the argument that is passed in is the DOM node being animated    },    scrollContainer: null // optional scroll container selector, otherwise use window  });wow.init();Asynchronous content supportIn IE 10+, Chrome 18+ and Firefox 14+, animations will be automaticallytriggered for any DOM nodes you add after calling wow.init(). If you do notlike that, you can disable this by setting live to false.If you want to support older browsers (e.g. IE9+), as a fallback, you can callthe wow.sync() method after you have added new DOM elements to animate (butlive should still be set to true). Calling wow.sync() has no sideeffects.ContributeYou're more than welcome to contribute to this project. Please note: your code may be used as part of a commercial product if merged. Be clear about what license applies to your patch. The MIT license or public domain unlicense are permissive, and allow integration of your patch into this project as part of a commercial product.The library is written in CoffeeScript, please update wow.coffee file.We use grunt to compile and minify the library:Install needed librariesnpm installGet the compilation running in the backgroundgrunt watchEnjoy!Bug trackerIf you find a bug, please report it here on Github!DeveloperDeveloped by Matt Delac, delac.io@mattdelacGithub ProfileContributorsThanks to everyone who has contributed to the project so far:Attila Oláh - @attilaolah - Github Profileand many othersInitiated and designed by Vincent Le Moign, @webalys"
39,learn-co-students/javascript-objects-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
40,learn-co-curriculum/react-hooks-npm-lab,https://github.com/learn-co-curriculum/react-hooks-npm-lab/blob/main/README.md,JavaScript,"npm Code-AlongLearning GoalsUse a package.json file to manage project dependenciesInstall a project dependency using npmImport code from a package into a JavaScript fileIntroductionWhen using npm, it is often the case that we aren't familiar with all of thecode in the dependency tree. Building modern JavaScript applications relies onour ability to use the tools built for us by others. As it turns out, most ofthose tools are also built using other people's tools. One package may beused in another, which is used in another, and another, and so on...Using npm, we download specific packages of code. If those packages havedependencies, the dependencies are also downloaded in a recursive manner. Forthe purposes of our own application, however, we only need to know about thenode packages we specifically need to get our app working. We don't need toworry about what packages those packages need. Why? Because every node packageincludes a package.json file that lists out all dependencies. This file letsNode know what to download when we run npm install. Node will download all thepackages, check the package.json files present in each of those packages,download any additional packages, and repeat.We will see in future labs that as the number of packages increases, more andmore happens when we run npm install. All we need to worry about, though, isthe top level — what is listed in our application's package.json file.In this code-along, we are going to practice the process of setting up apackage.json file. We will also install an npm package or two and use theirfunctionality in new code we write.Getting StartedBefore we create our package.json file, take a moment to look at thepackage.json file that is already at the top level of the directory for thiscode-along. If you look at the \""name\"" attribute at the top, you will see that itis the same as the name of the directory, react-hooks-npm-lab. This is thepackage.json file that belongs to this code-along; you should not make anychanges to this file! Instead, we will build out a simple application withinthis lesson's directory and create a package.json file for that application.Note that this lesson's files include a sub-folder, color-clock, that containssome basic starter files for a project. If you look at color-clock/index.html,you'll see a script tag:<script src=\""index.js\"" type=\""module\""></script>Taking a look inside index.js, we can see that this script relies on a uniquefunction call, format(new Date(), \""MMMM do yyyy, h:mm:ss a\""). We're alsoimporting that function from a node_modules folder that contains a dateformatting library called date-fns. Our goal is to get this code working. Wedo not need to change index.js. Instead, we will need to set up apackage.json file and install thedate-fns package.Navigate to the Project DirectoryThe first thing to do is change directory into this folder in your terminal bytyping the command cd color-clock.The next step is to create a package.json file in the color-clock directory,which in turn will be where the node_modules folder is.Important: to avoid overwriting the package.json file for this code-alongbe sure to change directory into color-clock before creating thepackage.json file!Create a package.json FileThe package.json can be written quickly from scratch, but we actually have ahandy command for creating these files: npm init.Run npm init and you will be prompted to confirm the information that will bestored in package.json, starting with the name of the project.Most prompts will provide a default value. Some are blank and can be left thisway for now. Follow the prompts by pressing enter in the terminal on each promptuntil you reach the end, when you will be prompted to type 'yes' to confirm. Afully constructed package.json file will then appear in the color-clockdirectory.Add a ScriptIn the process of creating the package.json file, you were prompted to write atest script. We left it blank at that time, but we can add it to thepackage.json file ourselves. Let's do that now to see how this works.Open the newly created package.json file and look for a section titled\""scripts\"". Let's replace the default \""test\"" script with a shell command:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\""}We can now call this script and have it run by using the command npm test inthe terminal (if that doesn't work, try npm run test). You should see aprintout of Hello World!.In all the JavaScript-based labs you've encountered so far, this sort of scriptis how we run tests. If you look at the \""test\"" script on JavaScript labs inthe previous phase, most will have something like this:\""test\"": \""mocha -R mocha-multi --reporter-options spec=-,json=.results.json\""The mocha command is actually a command that you can run in the terminal. Thisis a call to the testing package, mocha, along with a second package,mocha-multi that helps with reporting. When you run npm test in a lab, thecommand specified in the \""test\"" script is what gets called.Scripts are often useful for things like testing or to start a necessaryprocess, like a local server.Install a PackageWith package.json set up, we can now add a package we want to include in ourproject.Now, we're building a colorful clock — the project is simple enough that wecould build it entirely out of custom code. Here's the thing though: one ofthe reasons packages exist and are so useful is because programmers often runinto the same problems over and over. Node packages are written so we don't haveto recreate a solution to a problem other programmers have already solved.In the case of a colorful clock, we have to deal with formatting time. This issuch a common problem, that a package has been created to help us:date-fns. date-fns is a handy package that comes with a numberof functions that make displaying dates and times simpler than trying to figureout JavaScript's built-in functions.Let's install date-fns and incorporate it into our clock. To install a packageand save it to your package.json file, run npm install followed by thepackage name. In our case, that would be:$ npm install date-fnsThis command will add the package to the list of dependencies in package.json.When npm install is run, all dependencies are installed. If you were topublish this repository on GitHub, other users would now be able to clone downthe repo and install whatever is listed in package.json to get the programworking.The second package we'll need to run our application in the browser isserve, which will run a lightweight server. To install it, we run:$ npm install serveNext, in the \""scripts\"" section in package.json, let's add an npm script torun the server using the serve package:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\"",  \""start\"": \""serve\""}If you run npm start to run the script and openlocalhost:3000 in the browser, you will see that theclock is not appearing. Go ahead and open the console and you'll see thatwe're getting an error:Uncaught TypeError: Failed to resolve module specifier \""@babel/runtime/helpers/esm/typeof\"". Relative references must start with either \""/\"", \""./\"", or \""../\"".The specifics of this error are beyond the scope of this lesson, but basicallywhat it means is that not all of the files in our project are currently set upto be interpretable by the browser. Before we can get our clock runningcorrectly, we need to install one more tool, esbuild. esbuild is aJavaScript bundler, which is a tool that handles all of a project'sdependencies, and combines the code into a single file that is browser-ready.There are a number of different JavaScript bundlers available; we're usingesbuild because it is relatively easy to configure and works fine for oursimple application.Stop the server with ctrl-c, then install esbuild:$ npm install esbuildThen we'll add one more script to run the build:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\"",  \""start\"": \""serve\"",  \""build\"": \""esbuild index.js --bundle --outfile=dist/out.js\""}When we run a build using esbuild, it makes sure that all the dependencies areincluded and up to date, and combines the code from multiple files into a singlefile that is ready to be loaded in the browser. Note that the name of this fileis specified in the build command above: dist/out.js.Go ahead and run npm run build. You should now see the dist folder in yourfile tree and the out.js file inside it. The final step is to update thescript in the index.html file to use this new file. Find this line:<script src=\""index.js\"" type=\""module\""></script>Change the src property to dist/out.js. Now we're finally ready to start theserver. Run npm start then open up localhost:3000 inthe browser. You should now see a colorful clock appear!ConclusionWhen building our own applications, we will often rely on existing packages tohandle specific pieces of a project. Although we only installed a couple ofpackages for this code-along, there were additional layers of dependencies forthem so many additional dependencies were installed as well. It isn't necessaryto understand how each of these works. The main thing to grasp is how toimplement and use the specific dependencies you need."
41,ironhack-labs/lab-react-ironbeers,https://github.com/ironhack-labs/lab-react-ironbeers/blob/master/README.md,JavaScript,"LAB | React IronBeersSince beer is one of the most consumed drinks between Ironhackers 🍻 , our mission here is to create an app to showcase some of the best-handcrafted beers, but not just that - to save some as well so the rest of Ironhack community is informed 😌. Our end goal is creating something like this:SetupFork this repoClone this repocd lab-react-ironbeersnpm installnpm startSubmissionUpon completion, run the following commands:git add .git commit -m \""done\""git push origin masterCreate Pull Request so that your TAs can check up your work.IntroductionWe will be building a React app so the API (server) needs to be built somewhere for us, right? You are completely right, it's deployed on heroku and the root fo the API is:https://ih-beers-api2.herokuapp.com/beers.The available endpoints are the following:MethodEndpointResponse (200)ActionGET/[beers]Get all the beers from the DBGET/:id{ beer }Get the a single/specific beerGET/random{ beer }Get a random beer from the DBPOST/new{ message: \""New beer successfully saved to database!\""}Create a new beer (the fields are specified in the instructions)GET/search?q={query}[beers]Get beers from the DB whose name contains the search term. For example /search?q=lager searches for all beers with lager in the name.On each iteration, we will explain which endpoint you should use!The IronBeers project will include the following features:A Home page with three different options:All BeersRandom BeerNew BeerA List Beers page where you should display all the beersA Single Beer page to display the details of the beer the user clicked onA Random Beer page to display a Random BeerA New Beer page to show a form where a user can create new beersInstructions❗ At the very beginning we will offer you to shoot for the stars: as a bonus focus on mobile first design! As we said this is bonus, so it's up to you. 👍Iteration 1 | Home PageCreate a Home Page. This view should include three links to separate pages:/beers/random-beer/new-beerFeel free to design it however you wish, but in case you want to do it the way we did it, you can find the following images in src/assets folder:  Iteration 2 | HeaderOn every view (except for the home), we should add a header with a link to the root of the app.  Iteration 3 | List all the beersOn the /beers route, we should display all the beers from the database. So, in this case, you need to \""hit\"" the API's route https://ih-beers-api2.herokuapp.com/beers and the API will return an array of beers.Hint: The array of beers is array of objects. We strongly advise you to console log the response from the API so you can see the structure of it.You should display the following from each of the beers:imagenametaglinecontributed_byAlso, add the link to check the details of each beer. The link should navigate to /beers/:beerId.  The first time you call the API, it might take a bit to respond. It's hosted on Heroku, and it goes to sleep after 30 minutes, you know! 😉Iteration 4 | Display a single beerWhen a user click on one of the beers, you should display a detailed view of it, including the following fields:imagenametaglinefirst_brewedattenuation_leveldescriptioncontributed_byAgain, we strongly recommend to console log the response from the API.  Iteration 5 | A random beerOn the /random-beer route, we will render a single beer that will be retrieved from the database. The endpoint will do all the job for us, all we need to do is to call https://ih-beers-api2.herokuapp.com/beers/random. We should receive an object including all the info about a beer.The same way we did with the Single Beer view, we should render the following fields:imagenametaglinefirst_brewedattenuation_leveldescriptioncontributed_by  Iteration 6 | Create a new beerFinally, on the /new-beer route (remember, this is you react route, you're displaying the form on this route), we should render a form where user can create new beers. The form should include the following fields:name - must be type texttagline - must be type textdescription - must be type textfirst_brewed - must be type textbrewers_tips - must be type textattenuation_level - must be type number !!!contributed_by - must be type textWhy we pointed out the type? Well, since we already console log response from the API, we could notice that all the fields are strings but attenuation_level, which is number. Using our knowledge from module II, we can make conclusion that in the beer model all the properties are type String except attenuation_level, which is type Number.When you have built the form, you should do a POST request to https://ih-beers-api2.herokuapp.com/beers/new, passing all the data on the body object. If everything went ok, you would receive a 200 response from the server.Notice that the fields on the body should have those specific names so the API can create a new beer.What could go wrong?: You inputted string instead of number in the attenuation_level field and the server sent you 500 error.Since we didn't cover how to upload images yet, don't worry about it now - the API will assign a random image to the new beer. 🍺  Iteration 7 | Bonus | Filter the beersYes! One endpoint left! On the /beers route, add an input where users can search for beers. Every time a new letter is typed, you should call to https://ih-beers-api2.herokuapp.com/beers/search?q={query} passing the value of the input in the q param.We are done! 🏆Awesome! Grab a beer (if you're not underage 😉 )! Now you are a React Warrior, keep training to become the Ninja!Happy coding! ❤️FAQs  I am stuck and don't know how to solve the problem or where to start. What should I do?  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.  Back to top  I got the error: \""Cannot find module 'Node.js'\"". How can I resolve it?  The error \""Cannot find module\"" in a Node.js application means that the module you are trying to import or use does not exist in your project or cannot be found by Node.js.There are a few things you can try to resolve the issue:Dependencies are not installed: Make sure that all dependencies are installed.To do this, run the command npm install in the root folder of your project.This will install all of the dependencies listed in the project's package.json file, and ensure that all of the modules that your Node'js application requires are available.Module is not installed: Make sure that the package you are trying to use is listed in the project's package.json and that it is installed.To do this, run the command npm install <package_name>, replacing the <package_name> with the name of the package.This will add the package to the list of dependencies in the package.json file, and install it in the project.Module is not imported: Make sure that you've imported the module/package correctly and that the import statement is spelled correctly and available in the correct place in your code.Wrong file path: If you are importing another file as a module, make sure that the file you are trying to import is located in the correct folder and that you are using the correct file path.Wrong module/package name: Check the spelling of the package name you are trying to import.  Back to top  I got the message: \""Something is already running at ... Would you like to run the app at another port instead? [Y/n]\"". What should I do?  This message means that another process is already using the specified port. This could be another instance of your React app, or it could be another application that is using that port.To resolve this, you can change the port your React app is running on by typing Y when prompted. This will kill the process and automatically start the server on another port.Another approach is to manually terminate the process using the port in question and then try running the app again.  Back to top  How do I display an image in a React component?  To display an image in a React component, you should first import the image in the component and then render it. Here is an example of how to do this:import example from \""./example.png\""; // Import the image filefunction App() {  return (    <img src={example} alt=\""example\"" /> // Display the image  )}export default App;In the above example, the example variable is assigned the value of the imported image file. The image is then displayed using the <img> element, with the src attribute set to the example variable.  Back to top  I got the warning in my React app:\"" 'variable' is assigned a value but never used: no-unused-vars\"". What should I do?  This warning is a linting error thrown by a linting tool in your React project, and it is warning you that the variable is created, but that it is never being used in your code.To resolve this issue, you can either use the variable in your code, or you can simply remove the variable if you don't need it.  Back to top  I got the warning: \""Each child in a list should have a unique 'key' prop\"". How can I resolve it?  The warning \""Each child in a list should have a unique “key” prop\""  means that you are trying to render a list of elements, but one or more elements is missing the key prop.To fix this, add a key prop to each element you return from the map() when rendering the list. The key should be a unique identifier for that element, such as an item ID or the id of the document from the database.For example, if you have an array of objects with the following structure:const projects = [  { id: \""127fae\"", name: \""EatBCN\"", stack: \""React, Express\"" },  { id: \""985afw\"", name: \""Levels\"", stack: \""React, Express\"" },  { id: \""347eef\"", name: \""IronClub\"", stack: \""React, Java\"" }];  Inside your component, you would render the list in the following way:{  projects.map((el) => {    return (      <div key={el.id}>        <h3>{project.name}</h3>        <p> Tech Stack: {project.stack} </p>      </div>      })}In the above example, the objects in the projects array all have a common property id,  which is a unique id string, and therefore we can use it to set the key prop.When creating lists we must always assign the key prop to the outermost (enclosing) element returned from the map(), in this case the div. We are setting the key prop to each div element we render in the list.Important: You should not use index of the map as key. This is considered an anti-pattern that may lead to unpredictable results.  For more information, check: React Docs - Rendering Lists  Back to top  How to render a list of elements from an array in a React component?  To render a list of elements from an array in a React component, you can use the method map() to loop over the projects array and return JSX elements to be rendered.To render a filtered list, where some items are skipped, you can use the filter() method.Each element returned should have a unique key prop assigned to them. It's important to note that the key prop should always be assigned to the outermost (enclosing) element returned from the map().Here is an example of rendering a list of elements using the map() method:const projects = [  { id: \""127fae\"", name: \""EatBCN\"", stack: \""React, Express\"" },  { id: \""985afw\"", name: \""Levels\"", stack: \""React, Express\"" },  { id: \""347eef\"", name: \""IronClub\"", stack: \""React, Java\"" }]function ProjectList() {  return (    <div>      {        projects.map((el) => {          return (            <div key={el.id}>              <h3>{el.name}</h3>              <p>Tech Stack: {el.stack}</p>            </div>          )        })      }    </div>  )}export default ProjectList;In the above code example, we use map() inside of the component to loop over the projects array, and for each project, return a div element with the project.name and the project.stack as its contents.Each object in the projects array contains a common property id which we use as the key prop.The key prop must be set on the outermost element returned from the map(), in this case, the div element.Important: You should not use index of the map as key. This is considered an anti-pattern that may lead to unpredictable results.For more information, check: React Docs - Rendering Lists  Back to top  How do I update a state variable in my React component? How do I use the useState hook in my React component?  To update a state variable in a React component, you should use the useState hook. This hook returns an array with two elements: the current value of the state variable and a function to update it. Here is an example of how to use useState to update the count state variable:import { useState } from \""react\"";function MyComponent() {  const [count, setCount] = useState(0);  const handleClick = () => {    setCount(count + 1);  }  return (    <div>      <button onClick={handleClick}> Increment </button>      <p>Count: {count}</p>    </div>  )}In the above example, the handleClick function is called when the button is clicked, and it updates the count state variable by calling the setCount function with the new value: setCount(count + 1).The component will re-render every time a state variable gets updated.  Back to top  How do I use the useEffect hook in my React component?  The useEffect hook (also called the Effect Hook) allows you to run your side effects. Data fetching, setting up a subscription, starting a timer, and manually changing the DOM in React components are all examples of common actions (aka side effects) that you may want to set up in your components.The useEffect hook allows you to run side effects during all three lifecycle phases:Mounting phaseUpdate phaseUnmounting phase  SyntaxThe syntax of the useEffect is the following:// Actual syntaxuseEffect(() => {}, [])As you can see useEffect takes two arguments:// Pseudo code:useEffect(didUpdate, dependencyArray)didUpdate - a function containing the code (side effect) we want to run.dependencyArray - the array of values that the effect depends on. React watches this array for any change and when a value in this array changes, the effect will run.  useEffect - Mounting phaseWe can set the useEffect to run code in the mounting phase, only once right after the component is rendered for the first time.To do so, we use the useEffect Hook with the following syntax:// Run the effect only once // during the mounting phaseuseEffect(() => {  // Do something ...}, [])The empty array [] means that “this effect doesn’t depend on anything”, and will therefore run only once, after the initial render.  useEffect - Unmounting phaseOften, effects create resources that need to be cleaned up before the component leaves the screen, such as a subscription or a timer, like in the previous example. Before the component unmounts, we should cancel all remaining processes to prevent memory leaks.To do this, the function passed to useEffect may return a cleanup function. Example:useEffect(() => {  // Do something ...  // Returned function is known as a \""cleanup function\"",  // which React will automatically run  // right before the component is removed from the DOM  return () => {    // Perform clean up actions here  };  }, [])  useEffect - Conditional updates (Update phase)The useEffect Hook can also be used to run code during the Update phase, whenever there is an update of state or props.As you may have noticed, useEffect takes a second argument [] the dependency array. A dependency array is used to specify the values that the effect depends on. Additionally, React keeps track of this array to know if it should re-run the effect. Example:useEffect(() => {  // Do something ...    // Effect will run again if either `a` or `b` change or are updated}, [a, b]  Important: Whenever a value specified in the dependency array updates, React re-runs the effect.  For detailed explanation, check the following documentation pages:React Docs: Synchronizing with EffectsReact Docs: useEffect  Back to top  I am getting an error: \""not defined\"". How do I fix it?  The \""ReferenceError: variable is not defined\"" error in JavaScript occurs when you try to access a variable or a function that has not been defined yet or is out of scope.To fix the issue, check that you have defined the variable or function that you are trying to use and double-check the spelling to make sure you are using the correct name.In case the variable or a function is defined in another file, make sure that the file has been imported or loaded correctly.  Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first, and then clone your fork to your local machine to be able to push the changes.Note: You may want to make a copy of the code you have locally, to avoid losing it in the process.  Back to top"
42,linuxacademy/cicd-pipeline-train-schedule-gradle,https://github.com/linuxacademy/cicd-pipeline-train-schedule-gradle/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gradleThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
43,ironhack-labs/lab-express-basic-auth,https://github.com/linuxacademy/cicd-pipeline-train-schedule-gradle/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gradleThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
44,progedu/adding-up,https://github.com/linuxacademy/cicd-pipeline-train-schedule-gradle/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gradleThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
45,hasura-imad/imad-2016-app,https://github.com/linuxacademy/cicd-pipeline-train-schedule-gradle/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-gradleThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appIt is not necessary to run this app locally in order to complete the learning activities, but if you wish to do so you will need a local installation of npm. Begin by installing the npm dependencies with:npm installThen, you can run the app with:npm startOnce it is running, you can access it in a browser at http://localhost:3000"
46,learn-co-curriculum/react-hooks-props-basics-lab,https://github.com/learn-co-curriculum/react-hooks-props-basics-lab/blob/master/README.md,JavaScript,"Props Basics LabLearning GoalsUse props to make a dynamic component templatePass props from a parent component to a child componentIntroductionPreviously, we had been importing some data directly into each component thatneeded it using import. When we're working with React, we'll often access databy passing it down as a prop rather than importing it. This will beparticularly true once we start working with data from external sources, such asAPIs.In this lab, you'll write React components and render them dynamically based onprops they receive from their parent components. This will enable us to usecomponents as templates with the ability to render variable content.We'll continue building the portfolio site we started in the previous labs, andmake the content dynamic by using props.Here is an image of what we want once we are finished:...and here is a tree view of our component parent-child structure:└── App    ├── NavBar    ├── Home    └── About        └── LinksDeliverablesIt's recommended that you run npm start and work on this in the browserbefore running tests. Try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.AppIn the App component, pass down data from the user object as props to theHome component so that it renders correctly. There is some starter code foryou in the Home component that should give you a clue as to what props thiscomponent takes in.App should also pass down a prop of bio to the About component.Finally, App should also pass down the github and linkedin links tothe About component, so that About can pass those props down to the Linkscomponent you will create.AboutUpdate the About component so that:If a prop of bio is passed to this component, it is displayed inside of a<p> tagIf a prop of bio is not passed down, or if bio is an empty string,don't display the <p> tagHint: you'll need to do some conditionalrendering here to determine whether or not to displaythe <p> tagLinksCreate a new component called Links. In this component, display the following:an <h3> element with the text of \""Links\""an <a> element with its href and text content set to URL of the user'sGithub link, passed down as a propa second <a> element with its href and text content set to URL of theuser's LinkedIn link, passed down as a propHint: make sure your <a> tags display the URL of the user's links astheir text content so that it matches the demo image aboveResourcesReact Documentation: ComponentsConditional Rendering"
47,linuxacademy/cicd-pipeline-train-schedule-dockerdeploy,https://github.com/linuxacademy/cicd-pipeline-train-schedule-dockerdeploy/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-dockerdeployThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appYou need a Java JDK 7 or later to run the build. You can run the build like this:./gradlew buildYou can run the app with:./gradlew npm_startOnce it is running, you can access it in a browser at http://localhost:8080"
48,learn-co-curriculum/react-hooks-lists-and-keys-lab,https://github.com/learn-co-curriculum/react-hooks-lists-and-keys-lab/blob/master/README.md,JavaScript,"Lists and Keys LabLearning GoalsTransform a list of values into a list of componentsUse the key prop correctly with the list of componentsIntroductionWe'll keep building our portfolio site and add the ability to display a list ofprojects based on an array of project data.Here is an image of what we want once we are finished:...and here is a tree view of our component parent-child structure:└── App    ├── NavBar    ├── Home    ├── About    |   └── Links    └── ProjectList        |   ProjectItem        |   ProjectItem        └── ProjectItemDeliverablesIt's recommended that you run npm start and work on this in the browserbefore running tests — try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.NavBarIn the NavBar component, there is an array with three strings representingeach link on the page. For each of those strings, create an <a> tag that lookslike this:<a href=\""#home\"">home</a>Make sure each <a> element also gets a unique key prop.ProjectListIn the ProjectList component, a prop of projects is being passed down fromthe App component with an array of objects. For each object in the array,render one ProjectItem component with the correct props. Use the id of theproject for the key prop.ProjectItemThe ProjectItem component should get a prop of technologies passed down fromProjectList. For each element in this array of technologies, create a <span>tag that displays the name of the technology.ResourcesLists and Keys"
49,bloominstituteoftechnology/DOM-II,https://github.com/bloominstituteoftechnology/DOM-II/blob/main/README.md,JavaScript,"DOM IIProject DescriptionFun Bus wants you to make their site more interactive. They are relying on you to provide 10 unique events to enhance their site. Explore the many events available to you by using the MDN events reference.Git Setup Create a forked copy of this project. Clone your OWN version of the repository. Implement the project on the main branch, committing changes regularly. Push commits: git push origin main.Running the projectThis project uses Webpack and Babel. Inside src/index.html you will notice there is no script tag linking the JavaScript, nor a link tag linking the styles. When the project starts, Webpack transcompiles the LESS into CSS, and injects the JavaScript and the styles into the HTML.Do not move or rename any files in this project. The website's source files live inside the src folder. Do not make changes to any files outside of the src folder, unless it's new dependecies declared in the package.json due to installing NPM libraries (E.G. npm i lodash). Run npm install to download the project's dependencies. Run npm start to launch the website on http://localhost:3000.MVPCreate listeners of 10 types of events Using your index.js file, create event listeners of at least 10 different types. You must Use your creativity to make the Fun Bus site more interactive. For example you could change colors, animate objects, add DOM elements, remove them, etc. Here are some event types you could try to use: mouseover keydown wheel load focus resize scroll select dblclick drag / dropNote: Drag and drop is a bit more advanced than the others. It's not actually a single type of event but several types that need to work together.Use preventDefault Find a usecase for preventDefault. For example, you could prevent a link from navigating when clicked, or to navigate somewhere surprising.Submission Format Submit project using Codegrade, as per the instructions in the learning platform."
50,learn-co-curriculum/phase-1-javascript-variables-lab,https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/blob/master/README.md,JavaScript,"Review: Variables LabLearning GoalsPractice using const and let to declare variables in JavaScriptInstructionsIn this lab we'll practice declaring and assigning values to variables. We'llalso go over how to read the test document. Understanding how to read the testscan be a valuable tool in figuring out exactly what you'll need to do tocomplete the lab.TestsWhen we want to run an experiment, we need to develop a hypothesis and we needto test it. In programming, we run tests to verify that programs behave the waywe think they do. Tests help us identify bugs and judge how healthy ourapplications are.We use tests to describe the program's behavior, just as you would in aprofessional coding environment, and we also use them as teaching tools. You arein charge of getting the tests to pass.StructureThe structure of this lab — where its files and folders are located— looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── indexTest.jsAll labs will more or less have the same structure. (And non-lab lessons, forthat matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)Code AlongThis lesson is set up as a code-along, so you'll first need to fork andclone it to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. Verify that your GitHub usernameis showing in the Owner dropdown, then click the Createfork button.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.3. Make sure you're in Development/code/phase-1 (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-1-javascript-variables-lab.git4. The previous command will create a folder in the phase-1 foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-1-javascript-variables-lab$ code .Open up index.js in your code editor; you should see, well, nothing. We'll fixthat soon.Now open up test/indexTest.js. Hey, there's something! What's all of thisstuff doing?Note: The test/indexTest.js has great info that we want to look at, but donot edit this file otherwise you may have extra difficulty passing this lab.A few lines down in the test/indexTest.js file you will see:describe('index.js', function () {  // there's stuff in here, too});describe is a function provided by our test library, Mocha, and it's used tohold our tests. After the word describe is information about our tests. Testsare used as a way to document the behavior of a function to developers. Forexample, the next word describe is followed by the word companyName. Herethe test is telling us that the tests that come afterwards will be aboutcompanyName. Then comes the word it, where you see the following:it('is set as Scuber', function () {  // tests are here});This is telling us that the companyName should be set to Scuber. Finally,filling in the missing part of the it code, we see:it('is set as Scuber', function () {  expect(companyName).to.equal('Scuber');});This example shows that the test expects companyName to equal Scuber. Thatexpect and to.equal are essentially doing the same thing as companyName == 'Scuber'. In other words, expect(companyName).to.equal('Scuber') is runningcode that will have this first test pass if companyName equals Scuber andfail if it does not.Don't worry too much yet if it's hard to understand what is happening inside ofthe test/indexTest.js file. But it's a good idea to open up the file, andgather the information that you can. We will also provide instructions in theREADME.md file that will allow you to complete the lab.Running the TestsStart by installing the test dependencies by running npm install in theterminal, then run npm test to run the tests. You should now see the currentstatus of the tests in the terminal. For the moment, all of the tests fail.Let's figure out how to get one of them passing! (The rest will be up to you.)To get our first test to pass, we can open up our index.js file, and write thefollowing:let companyName = 'Scuber';If you run npm test again, you'll see that our first test is now passing.However, the second test, which is also about companyName, is not yet passing.It's not passing because it expects companyName to be declared using adifferent keyword than the let keyword — it needs a keyword that is used forvariables that can't be changed...Continue to work through the problems below. Keep in mind the general workflowfor a lab:Run npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 1 and 2 often until a test passes.Repeat as needed until all the tests are passing.Working Through the ProblemsIf you open up test/indexTest.js, you will see the tasks in front of you:companyName — Inside the test/indexTest.js file, look at thedescribe function call for the companyName variable. The two it functioncalls inside this describe tell us the features of companyName we need tocreate. To review, in the first it function call, it says that it(companyName) is set as Scuber. In the next line, you can see that the testchecks to make sure this occurs by seeing if companyName equals Scuber. Sothis means that you need to go to your index.js file and declare a variablenamed companyName and set it equal to Scuber.In the second it function call for companyName, it says it is defined as a const. The next line of code tests this. So you need to make sure that youare using the correct type of variable declaration such that attempting toreassign the variable throws an error.mostProfitableNeighborhood and companyCeo — Here we are getting morepractice with declaring variables. Read the tests to see how you need to codethese two variables to get the remaining tests passing.Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theCompleting and Submitting Assignments with CodeGradelesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.ResourcesMDN: LetMDN: Const"
51,bloominstituteoftechnology/React-Router-Movies,https://github.com/bloominstituteoftechnology/React-Router-Movies/blob/main/README.md,JavaScript,"Client Side Routing w/ React RouterTopicsReact RouterNavigating to specific routesConsuming URL ParametersPassing props to components rendered by the RouterInstructionsTask 1: Project Set-up Fork this repository, then clone your fork. Execute npm install to download dependencies. The react-router-dom library is already installed! Execute npm run start to launch your Movies application in Chrome.Once your application is up and running, you should see a browser window that looks like this at http://localhost:3000.Task 2: MVPDesign FilesOnce you are done your application will have two routes: Screenshot of route '/' Screenshot of route '/movies/:id'Set up Routes Wrap the App component with BrowserRouter in src/index.js. Inside your App file add two routes. one route for / that loads the MovieList component. This component will need the movies injected into it via props. one route that will take an id parameter after/movies/ (EG: /movies/2, /movies/3 where the id is dynamic). This route should load the Movie component.Add Functionality When a user clicks on the movie card inside MovieList they should be taken to /movies/{id of clicked movie here} to see the details of the selected movie. You will need to modify line 7 of Movie.js to get the id of the selected movie from the URL. Add functionality so the Home button on the SavedList component navigates back to home. You should now be able to navigate back and forth between the list of movies and the detailed view of a single movie.Task 3: Stretch GoalsIf you have completed Parts 1 & 2 feel free to move on to these stretch goals.Refactor so that our code is DRY You may notice that we are using very similar JSX in the Movie component and in the MovieDetails component in MovieList.js. The main difference is the list of stars, which only exists in the \""detailed\"" view of the Movie component. Create a new component in MovieCard.js that returns a Movie Card. Then remove the old code from Movie and MovieDetails and instead return the new MovieCard component. The Movie Card should be flexible enough to handle displaying a movie with or without the list of stars.Add Save Movie functionality You will notice there is a 'Saved Movies' component that we are not currently using. In this step you will add the functionality to save a movie. You will need to pass the addToSavedList function to the Movie component. Once you have done that you will need to add a click handler to the save button. You will need to uncomment lines 24-27 in Movie.js to complete this.Turn your Saved Movie list into Links Your list of saved movies should be links to the movie itself. Study and understand what the saveMovie function is doing.Submission Format Submit a link to your repository in canvas."
52,JS-Challenges/recursion-prompts,https://github.com/JS-Challenges/recursion-prompts/blob/master/README.md,JavaScript,"Recursion PromptsWhat is this?This is a repository of toy problems to be solved using recursion and JavaScript. While the concept of recursion may not be difficult to grasp, the only way to improve at thinking recursively is by practice. If you need practice, then maybe this repo is for you.A few guidelines:Please refrain from sharing solutions. As crazy as it sounds, giving someone the answer doesn't help them. Instead, give them a question that encourages them to think differently.Q: Why does my function keep exceeding the call stack?A: What's your base case?Don't be afraid to pseudocode your algorithm before writing actual code.Pseudocode helps you focus on the algorithm instead of getting distracted by syntax.This repo requires each function call itself recursively and pays no attention to whether inner recursive functions are defined and called.While both are valid uses of recursion, there are important lessons to learn by following the method this repo enforces. Defining inner functions and calling them recursively relies on side effects, while following the more pure approach requires an understanding of how values are passed through the call stack.This repo restricts expanding the number of parameters a function accepts.Expanding the number of parameters is a valid approach, but has been restricted here to emphasize certain lessons while learning recursion.An attempt was made to order prompts by difficulty, but they don't have to be solved in any particular order.Feel free to make pull requests or open issues regarding bugs or suggestions.Watch, Star, and Fork this repo. You know you want to.How to use this repo:Fork this repo and clone it to your local machineOpen SpecRunner.html in your web browserCode your solutions in recursion.jsReview the tests in spec/part1.js and spec/part2.js as necessarySave your work and refresh your browser to check for passing/failing testsWhat is recursion?Recursion is when a function calls itself until it doesn't. --not helpful personIs it a true definition? Mostly. Recursion is when a function calls itself. A recursive function can call itself forever, but that's generally not preferred. It's often a good idea to include a condition in the function definition that allows it to stop calling itself. This condition is referred to as a base case. As a general rule, recursion shouldn't be utilized without an accompanying base case unless an infinite operation is desired. This leaves us with two fundamental conditions every recursive function should include:A base caseA recursive caseWhat does this all mean? Let's consider a silly example:function stepsToZero(n) {  if (n === 0) { /* base case */    return 'Reached zero';  } else { /* recursive case */    console.log(n + ' is not zero');    return stepsToZero(n-1);  }}This function doesn't do anything meaningful, but hopefully it demonstrates the fundamental idea behind recursion. Simply put, recursion provides us a looping or repeating mechanism. It repeats an operation until a base condition is met. Let's step through an invocation of the above function to see how it evaluates.Invoke stepsToZero(n) where n is the number 2Is 2 zero?No, print message to console that 2 is not zeroInvoke stepsToZero(n-1) where n-1 evaluates to 1Every recursive call adds a new invocation to the stack on top of the previous invocationIs 1 zero?No, print message that 1 is not zeroInvoke stepsToZero(n-1) where n-1 evaluates to 0Is 0 zero?Yes, return message that reached zeroThe above return pops the current invocation off the stackResume the invocation from step 4 where it left off (in-between steps 6 and 7)Return out of the invocation from step 4Resume the initial invocation from step 1 where it left off (in-between steps 3 and 4)Return out of the initial invocationNote that the value returned from the base case (step 9) gets returned to the previous invocation (step 4) on the stack. Step 4's invocation takes that value and returns it to the invocation that preceded it (step 1). Once the initial invocation is reached, it returns the value to whatever invoked it. Through these steps, you can watch the call stack build up and once the base case is reached, the return value is passed back down as each invocation pops off the stack.Due to the way the execution stack operates, it's as if each function invocation pauses in time when a recursive call is made. The function that pauses before a recursive call will resume once the recursive call completes. If you've seen the movie Inception, this model may sound reminiscent to when the characters enter a person's dreams and time slowed. The difference is time doesn't actually slow with recursive invocations; rather, it's a matter of order of operations. If a new invocation enters the execution stack, that invocation must complete before the previous can continue and complete.Why use recursion?Recursion can be elegant, but it can also be dangerous. In some cases, recursion feels like a more natural and readable solution; in others, it ends up being contrived. In most cases, recursion can be avoided entirely and sometimes should in order to minimize the possibility of exceeding the call stack and crashing your app. But keep in mind that code readability is important. If a recursive solution reads more naturally, then it may be the best solution for the given problem.Recursion isn't unique to any one programming language. As a software engineer, you will encounter recursion and it's important to understand what's happening and how to work with it. It's also important to understand why someone might use it. Recursion is often used when the depth of a thing is unknown or every element of a thing needs to be touched. For example, you might use recursion if you want to find all DOM elements with a specific class name. You may not know how deep the DOM goes and need to touch every element so that none are missed. The same can be said for traversing any structure where all possible paths need to be considered and investigated.Divide and ConquerRecursion is often used in divide and conquer algorithms where problems can be divided into similar subproblems and conquered individually. Consider traversing a tree structure. Each branch may have its own \""children\"" branches. Every branch is essentially just another tree which means, as long as child trees are found, we can recurse on each child."
53,StephenGrider/ReduxSimpleStarter,https://github.com/StephenGrider/ReduxSimpleStarter/blob/master/README.md,JavaScript,"ReduxSimpleStarterInterested in learning Redux?Getting StartedThere are two methods for getting started with this repo.Familiar with Git?Checkout this repo, install dependencies, then start the gulp process with the following:> git clone https://github.com/StephenGrider/ReduxSimpleStarter.git> cd ReduxSimpleStarter> npm install> npm startNot Familiar with Git?Click here then download the .zip file.  Extract the contents of the zip file, then open your terminal, change to the project directory, and:> npm install> npm start"
54,angular/angular-phonecat,https://github.com/angular/angular-phonecat/blob/master/README.md,JavaScript,"AngularJS Phone Catalog Tutorial ApplicationOverviewThis application takes the developer through the process of building a web-application usingAngularJS. The application is loosely based on the Google Phone Gallery, which no longer exists.Here is a historical reference: Google Phone Gallery on WayBackEach tagged commit is a separate lesson teaching a single aspect of the framework.The full tutorial can be found at https://docs.angularjs.org/tutorial.PrerequisitesGitA good place to learn about setting up git is here.You can find documentation and download git here.Node.js and ToolsGet Node.js.Install the tool dependencies: npm installWorkings of the ApplicationThe application filesystem layout structure is based on the angular-seed project.There is no dynamic backend (no application server) for this application. Instead we fake theapplication server by fetching static JSON files.Read the Development section at the end to familiarize yourself with running and developingan AngularJS application.Commits / Tutorial OutlineYou can check out any point of the tutorial using:git checkout step-?To see the changes made between any two lessons use the git diff command:git diff step-?..step-?step-0 BootstrappingAdd the 'angular.js' script.Add the ngApp directive to bootstrap the application.Add a simple template with an expression.step-1 Static TemplateAdd a stylesheet file ('app/app.css').Add a static list with two phones.step-2 AngularJS TemplatesConvert the static phone list to dynamic by:Creating a PhoneListController controller.Extracting the data from HTML into the controller as an in-memory dataset.Converting the static document into a template with the use of the ngRepeat directive.Add a simple unit test for the PhoneListController controller to show how to write tests andrun them using Karma.step-3 ComponentsIntroduce components.Combine the controller and the template into a reusable, isolated phoneList component.Refactor the application and tests to use the phoneList component.step-4 Directory and File OrganizationRefactor the layout of files and directories, applying best practices and techniques that willmake the application easier to maintain and expand in the future:Put each entity in its own file.Organize code by feature area (instead of by function).Split code into modules that other modules can depend on.Use external templates in .html files (instead of inline HTML strings).step-5 Filtering RepeatersAdd a search box to demonstrate:How the data-binding works on input fields.How to use the filter filter.How ngRepeat automatically shrinks and grows the number of phones in the view.Add an end-to-end test to:Show how end-to-end tests are written and used.Prove that the search box and the repeater are correctly wired together.step-6 Two-way Data BindingAdd an age property to the phone model.Add a drop-down menu to control the phone list order.Override the default order value in controller.Add unit and end-to-end tests for this feature.step-7 XHR & Dependency InjectionReplace the in-memory dataset with data loaded from the server (in the form of a static'phone.json' file to keep the tutorial backend agnostic):The JSON data is loaded using the $http service.Demonstrate the use of services and dependency injection (DI):$http is injected into the controller through DI.Introduce DI annotation methods: .$inject and inline arraystep-8 Templating Links & ImagesAdd a phone image and links to phone pages.Add an end-to-end test that verifies the phone links.Tweak the CSS to style the page just a notch.step-9 Routing & Multiple ViewsIntroduce the $route service, which allows binding URLs to views for routing and deep-linking:Add the ngRoute module as a dependency.Configure routes for the application.Use the ngView directive in 'index.html'.Create a phone list route (/phones):Map /phones to the existing phoneList component.Create a phone detail route (/phones/:phoneId):Map /phones/:phoneId to a new phoneDetail component.Create a dummy phoneDetail component, which displays the selected phone ID.Pass the phoneId parameter to the component's controller via $routeParams.step-10 More TemplatingImplement fetching data for the selected phone and rendering to the view:Use $http in PhoneDetailController to fetch the phone details from a JSON file.Create the template for the detail view.Add CSS styles to make the phone detail page look \""pretty-ish\"".step-11 Custom FiltersImplement a custom checkmark filter.Update the phoneDetail template to use the checkmark filter.Add a unit test for the checkmark filter.step-12 Event HandlersMake the thumbnail images in the phone detail view clickable:Introduce a mainImageUrl property on PhoneDetailController.Implement the setImage() method for changing the main image.Use ngClick on the thumbnails to register a handler that changes the main image.Add an end-to-end test for this feature.step-13 REST and Custom ServicesReplace $http with $resource.Create a custom Phone service that represents the RESTful client.Use a custom Jasmine equality tester in unit tests to ignore irrelevant properties.step-14 AnimationsAdd animations to the application:Animate changes to the phone list, adding, removing and reordering phones with ngRepeat.Animate view transitions with ngView.Animate changes to the main phone image in the phone detail view.Showcase three different kinds of animations:CSS transition animations.CSS keyframe animations.JavaScript-based animations.Development with angular-phonecatThe following docs describe how you can test and develop this application further.Installing DependenciesThe application relies upon various JS libraries, such as AngularJS and jQuery, and Node.js tools,such as Karma and Protractor. You can install these by running:npm installThis will also download the AngularJS files needed for the current step of the tutorial and copythem to app/lib.Most of the scripts described below will run this automatically but it doesn't do any harm to runit whenever you like.Note copying the AngularJS files from node_modules to app/lib makes it easier to serve thefiles by a web server.Running the Application during DevelopmentRun npm start.Navigate your browser to http://localhost:8000/ to see the applicationrunning.Unit TestingWe recommend using Jasmine and Karma for your unit tests/specs, but you are freeto use whatever works for you.Start Karma with npm test.A browser will start and connect to the Karma server. Chrome and Firefox are the default browsers,others can be captured by loading the same URL or by changing the karma.conf.js file.Karma will sit and watch your application and test JavaScript files. To run or re-run tests justchange any of your these files.End-to-End TestingWe recommend using Protractor for end-to-end (e2e) testing.It requires a webserver that serves the application. See theRunning the Application during Development section, above.Serve the application with: npm startIn a separate terminal/command line window run the e2e tests: npm run protractor.Protractor will execute the e2e test scripts against the web application itself. The project isset up to run the tests on Chrome directly. If you want to run against other browsers, you mustmodify the configuration at e2e-tests/protractor-conf.js.Note:Under the hood, Protractor uses the Selenium Standalone Server, which in turn requiresthe Java Development Kit (JDK) to be installed on your local machine. Check this by runningjava -version from the command line.If JDK is not already installed, you can download it here.Application Directory Layoutapp/                     --> all the source code of the app (along with unit tests)  lib/...                --> 3rd party JS/CSS libraries, including AngularJS and jQuery (copied over from `node_modules/`)  core/                  --> all the source code of the core module (stuff used throughout the app)    checkmark/...        --> files for the `checkmark` filter, including JS source code, specs    phone/...            --> files for the `core.phone` submodule, including JS source code, specs    core.module.js       --> the core module  img/...                --> image files  phone-detail/...       --> files for the `phoneDetail` module, including JS source code, HTML templates, specs  phone-list/...         --> files for the `phoneList` module, including JS source code, HTML templates, specs  phones/...             --> static JSON files with phone data (used to fake a backend API)  app.animations.css     --> hooks for running CSS animations with `ngAnimate`  app.animations.js      --> hooks for running JS animations with `ngAnimate`  app.config.js          --> app-wide configuration of AngularJS services  app.css                --> default stylesheet  app.module.js          --> the main app module  index.html             --> app layout file (the main HTML template file of the app)e2e-tests/               --> config and source files for e2e tests  protractor.conf.js     --> config file for running e2e tests with Protractor  scenarios.js           --> e2e specsnode_modules/...         --> 3rd party libraries and development tools (fetched using `npm`)scripts/                 --> handy scripts  private/...            --> private scripts used by the AngularJS Team to maintain this repo  update-repo.sh         --> script for pulling down the latest version of this repo (!!! DELETES ALL CHANGES YOU HAVE MADE !!!)karma.conf.js            --> config file for running unit tests with Karmapackage.json             --> Node.js specific metadata, including development tools dependenciespackage-lock.json        --> Npm specific metadata, including versions of installed development tools dependenciesContactFor more information on AngularJS, please check out https://angularjs.org/."
55,learn-co-students/javascript-arrays-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-arrays-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Arrays LabObjectivesPractice writing arraysPractice manipulating arraysExplain how to manipulate arrays in a non-destructive wayIntroductionPreviously, we've learned about how arrays work. We know that push() pusheselements onto the ends of arrays, and pop() pops them off; similarly,unshift() adds elements to the beginnings of arrays, and shift() pulls themoff.Now it's time to put what we've learned to the test.What's with all this destruction?You might have noticed that our tests are looking for functions likedestructivelyAppendKitten() — what's up with that? (Rest assured, no kittenswill be harmed.)We want to distinguish between actions that mutate (\""change\"") their underlyingstructures (like pop(), push(), shift(), and unshift()) and thosefunctions that leave those structures untouched.In general, it's good practice to avoid mutating a program's state wheneverpossible. So we want to call out these methods as destructive, since mutatingstate means we don't always know what we're dealing with. Indeed, thesemutations mean that we need to refresh the test environment after every test tomake sure that we're not working with mutated data!By contrast, we also have methods like appendKitten(), which simply adds akitten to the end of the kittens array and returns the new array, leavingthe existing array untouched. This flow is preferable to mutating state becausewe have complete control over what's going into and coming out of the function.Try to use methods like slice() or concat() to return a newarray when keeping the original array intact.concat()slice()Think of it this way: you're making a peanut butter and jelly sandwich. Wouldyou rather work with a sandwich where someone had put an unspecified amount ofpeanut butter or jelly on the bread before you start making it (or, worse, wheresomeone had taken a bite out of the bread), or would you rather start fresh?Regardless of your feelings about stale peanut butter and jelly, we're going tostate unequivocally that fresh sandwiches are preferable — and fresh functions(ones that don't mutate shared state) are preferable, too.Run those tests!You'll notice that the first test asks for an array called kittens, set to aninitial value of [\""Milo\"", \""Otis\"", \""Garfield\""].In our test file, we're going to reset this array to your initial value afterevery test. Some of our tests manipulate arrays in place, and we want to be surethat we can get back to a blank slate between tests.Why is a blank slate important? We want our programs to be predictable: thismakes them more robust, easier to maintain, and less prone to bugs. One way toachieve predictability is by isolating our tests from one another, meaning thatno test should depend on the outcome or process of any other test. That way,tests can run in any order and test known inputs and environments, rather thandepending on other tests running first and modifying the entire environment.Remember the workflow:Run learn test.Read the errors; vocalize what they're asking you to do.Write code, save, and repeat steps 1 and 2 often until a test passes.Repeat as needed for further tests.Run learn submit when finished!Normally, resetting the array and the array itself would be decoupled — thatis, independent. But because of the nature of this lab, we need to be a bitprescriptive and give you some initial values so that we can focus on whatreally matters — understanding how to manipulate arrays in JavaScript.Resourcesnpm"
56,linuxacademy/cicd-pipeline-train-schedule-pipelines,https://github.com/linuxacademy/cicd-pipeline-train-schedule-pipelines/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-pipelinesThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appYou need a Java JDK 7 or later to run the build. You can run the build like this:./gradlew buildYou can run the app with:./gradlew npm_startOnce it is running, you can access it in a browser at http://localhost:3000"
57,hexojs/hexo,https://github.com/hexojs/hexo/blob/master/README.md,JavaScript,"HexoA fast, simple & powerful blog framework, powered by Node.js.Website |Documentation |Installation Guide |Contribution Guide |Code of Conduct |API |TwitterFeaturesBlazing fast generatingSupport for GitHub Flavored Markdown and most Octopress pluginsOne-command deploy to GitHub Pages, Heroku, etc.Powerful API for limitless extensibilityHundreds of themes & pluginsQuick StartInstall Hexo$ npm install hexo-cli -gInstall with brew on macOS and Linux:$ brew install hexoSetup your blog$ hexo init blog$ cd blogStart the server$ hexo serverCreate a new post$ hexo new \""Hello Hexo\""Generate static files$ hexo generateMore InformationRead the documentationVisit the Awesome Hexo listFind solutions in troubleshootingJoin discussion on Google Group, Discord, Gitter or TelegramSee the plugin list and the theme list on wikiFollow @hexojs for latest newsContributingWe welcome you to join the development of Hexo. Please see contributing document. 🤗Also, we welcome PR or issue to official-plugins.ContributorsBackersSponsorsLicense"
58,lyfe00011/whatsapp-bot,https://github.com/lyfe00011/whatsapp-bot/blob/master/README.md,JavaScript,"WhatsApp User BotThis is a Userbot based on WhatsAsena written by Yusuf UstaWhat is WhatsAsena?WhatsAsena, is a WhatsApp bot written by Yusuf Usta. Does not log into your account It is written on WhatsApp Web API.SetupClick SCAN and scan QR through Whatsapp Linked Devices Option in Your whatsapp App.You will get a long text that needs after 4th step (ASENA_SESSION).If You don't have a account in Heroku, Create a account.Click FORKNow DEPLOYPluginsActiveGroup commands✔️Kick✔️Tag✔️Add✔️Warn✔️Vote✔️Invite✔️Revoke✔️Demote✔️Promote✔️Banbye✔️Goodbye✔️Welcome✔️Schedule✔️Auto-mute✔️Mute/Unmute✔️Common/DiffActiveDowloader commands✔️Saavn✔️Upload✔️Yta/Ytv✔️Unsplash✔️Mediafire✔️Pinterest✔️SoundCloud✔️TikTok video✔️Twitter video✔️Facebook video✔️Instagram story✔️YouTube audio/video✔️Instagram video/imageActiveMisc CommandsUsage✔️QrReads QR code✔️SsScreenshot of web✔️UrlGets url of media✔️TrtTranslates messages✔️Mp3Video to mp3✔️TxtImage to text✔️AfkAway from keyboard✔️CutCuts mp3✔️PdfImages to pdf✔️Mp4Sticker to video✔️TakeChange sticker pack info✔️WikiWikipedia search✔️MemeText on photos✔️TrimTrims video✔️FindIt finds song✔️AttpColoured text sticker✔️AliveTo check alive or not✔️WhoisGroup or individual data✔️MovieShows Movie Info✔️MergeIt merge a videos✔️VoiceVoice to mp3✔️TopdfDocumnet ot pdf✔️EmojiEmoji to sticker✔️LydiaAuto AI chat✔️StickerPhoto/video to sticker✔️ReverseReverse audio/video✔️UnvoiceAudio to voices✔️WastedWasted logo✔️TriggedTriggered effect✔️ForwardForwarding msg using jid✔️CompressCompresses video✔️GoogleGoogle reverse image search✔️UploadDownload from Url✔️WeatherShows weather✔️GetjidsGets jids of chats✔️RemovebgRemoves background✔️SetaboutSets bio✔️SetstatusSets status✔️Pitch/low/bassAudio effects✔️Histo/vector/avesAudio to video✔️Block/unblockBlocks/unblocks members✔️BroadcastCustom Broadcasting MessagesThanks ToYusuf Usta for WhatsAsena@adiwajshing for Baileys"
59,learn-co-students/javascript-objects-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
60,zenorocha/clipboard.js,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
61,learn-co-curriculum/react-hooks-component-props-mini-project,https://github.com/learn-co-curriculum/react-hooks-component-props-mini-project/blob/master/README.md,JavaScript,"Putting it All Together: Components and PropsLearning GoalsCreate components that return JSXUse props to make components dynamicTransform lists of data into lists of componentsOverviewNow that you've learned how to work with components in React, it's time to buildsomething and put those skills to use! Your goal for this lab is to make astatic site in React to practice building components, writing JSX, and passingdown data as props.We'll be creating a personal blog site, similar toDan Abramov's Overreacted:There is some starter code available in src/components/App.js. There is alsosome data in data/blog.js that is being imported into App so you can pass itdown to the components that need it.DeliverablesHave a look at the components below and draw out a component hierarchy so youcan determine how to pass data down as props.HeaderMake a Header component as a child of App. It should return:a <header> element with the following elements inside:an <h1> with the name of the blog, passed as a prop called nameAboutMake an About component as a child of App. It should return:an <aside> element with the following elements inside:an <img> element, with the src set to an image passed as a prop calledimagethe <img> element should use this placeholder image as a default valuefor the prop if no prop is passed in: \""https://via.placeholder.com/215\""the image should also be accessible! Give it an alt attribute of \""bloglogo\""a <p> element, with the text for the blog passed in as a prop calledaboutArticleListMake an ArticleList component as a child of App. It should return:a <main> element with the following components inside:an array of Article components (one component for each of the postspassed down as props to ArticleList)make sure to assign a unique key attribute to each ArticleArticleMake an Article component as a child of ArticleList. It should return:an <article> element, with the following elements inside:an <h3> element displaying the title of the article, passed as a propcalled titlea <small> element displaying the date of the article, passed as a propcalled datea default value of \""January 1, 1970\"" should be used if no date is passedas a propa <p> element displaying the preview of the article, passed as a propcalled previewBonus Feature: 'Minutes to Read'You'll notice in the original Overreacted site,there's a 'minutes to read' indicator next to each article.If the article takes less than 30 minutes to read:For every 5 minutes (rounded up to the nearest 5), display a coffee cup emoji.For example, if the article takes 3 minutes to read, you should display \""☕️ 3min read\"". If the article takes 7 minute, you should display \""☕️☕️ 7 minread\"".If the article takes 30 minutes or longer to read:For every 10 minutes (rounded up to the nearest 10), display a bento boxemoji. For example, if the article takes 35 minutes to read, you shoulddisplay \""🍱🍱🍱🍱 35 min read\"". If the article takes 61 minutes to read, youshould display \""🍱🍱🍱🍱🍱🍱🍱 61 min read\"".There aren't tests for this feature, so you'll have to rely on running the codein the browser to see if your implementation works!"
62,askmike/gekko,https://github.com/askmike/gekko/blob/develop/README.md,JavaScript,"This repo is not maintained anymoreI am officially not maintaining this project anymore. It was an amazing journey and I want to thank everyone forplaying the role in this amazing story!More details can be found here: https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7This only impacts my Gekko repo (askmike/gekko). There might be other forks of Gekko out there that are being maintained!Old content:Gekko   The most valuable commodity I know of is information.-Gordon GekkoGekko is a Bitcoin TA trading and backtesting platform that connects to popular Bitcoin exchanges. It is written in JavaScript and runs on Node.js.Use Gekko at your own risk.DocumentationSee the documentation website.Installation & UsageSee the installing Gekko doc.Community & SupportGekko has a forum that is the place for discussions on using Gekko, automated trading and exchanges. In case you rather want to chat in realtime about Gekko feel free to join the Gekko Support Discord.FinalIf Gekko helped you in any way, you can always leave me a tip at (BTC) 13r1jyivitShUiv9FJvjLH7Nh1ZZptumwW"
63,ironhack-labs/lab-express-basic-auth,https://github.com/askmike/gekko/blob/develop/README.md,JavaScript,"This repo is not maintained anymoreI am officially not maintaining this project anymore. It was an amazing journey and I want to thank everyone forplaying the role in this amazing story!More details can be found here: https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7This only impacts my Gekko repo (askmike/gekko). There might be other forks of Gekko out there that are being maintained!Old content:Gekko   The most valuable commodity I know of is information.-Gordon GekkoGekko is a Bitcoin TA trading and backtesting platform that connects to popular Bitcoin exchanges. It is written in JavaScript and runs on Node.js.Use Gekko at your own risk.DocumentationSee the documentation website.Installation & UsageSee the installing Gekko doc.Community & SupportGekko has a forum that is the place for discussions on using Gekko, automated trading and exchanges. In case you rather want to chat in realtime about Gekko feel free to join the Gekko Support Discord.FinalIf Gekko helped you in any way, you can always leave me a tip at (BTC) 13r1jyivitShUiv9FJvjLH7Nh1ZZptumwW"
64,progedu/adding-up,https://github.com/askmike/gekko/blob/develop/README.md,JavaScript,"This repo is not maintained anymoreI am officially not maintaining this project anymore. It was an amazing journey and I want to thank everyone forplaying the role in this amazing story!More details can be found here: https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7This only impacts my Gekko repo (askmike/gekko). There might be other forks of Gekko out there that are being maintained!Old content:Gekko   The most valuable commodity I know of is information.-Gordon GekkoGekko is a Bitcoin TA trading and backtesting platform that connects to popular Bitcoin exchanges. It is written in JavaScript and runs on Node.js.Use Gekko at your own risk.DocumentationSee the documentation website.Installation & UsageSee the installing Gekko doc.Community & SupportGekko has a forum that is the place for discussions on using Gekko, automated trading and exchanges. In case you rather want to chat in realtime about Gekko feel free to join the Gekko Support Discord.FinalIf Gekko helped you in any way, you can always leave me a tip at (BTC) 13r1jyivitShUiv9FJvjLH7Nh1ZZptumwW"
65,hasura-imad/imad-2016-app,https://github.com/askmike/gekko/blob/develop/README.md,JavaScript,"This repo is not maintained anymoreI am officially not maintaining this project anymore. It was an amazing journey and I want to thank everyone forplaying the role in this amazing story!More details can be found here: https://medium.com/@gekkoplus/archiving-open-source-gekko-dba02e6efc7This only impacts my Gekko repo (askmike/gekko). There might be other forks of Gekko out there that are being maintained!Old content:Gekko   The most valuable commodity I know of is information.-Gordon GekkoGekko is a Bitcoin TA trading and backtesting platform that connects to popular Bitcoin exchanges. It is written in JavaScript and runs on Node.js.Use Gekko at your own risk.DocumentationSee the documentation website.Installation & UsageSee the installing Gekko doc.Community & SupportGekko has a forum that is the place for discussions on using Gekko, automated trading and exchanges. In case you rather want to chat in realtime about Gekko feel free to join the Gekko Support Discord.FinalIf Gekko helped you in any way, you can always leave me a tip at (BTC) 13r1jyivitShUiv9FJvjLH7Nh1ZZptumwW"
66,GitbookIO/gitbook,https://github.com/GitbookIO/gitbook/blob/master/README.md,JavaScript,"⚠️ Deprecation warning:As the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.All content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.Content hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new version, > check out our documentation.Join our GitHub community to stay up to date with the latest news at GitBook.GitBookGitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). Here is an example: Learn Javascript.You can publish and host books easily online using gitbook.com. A desktop editor is also available.Stay updated by following @GitBookIO on Twitter or GitBook on Facebook.Complete documentation is available at toolchain.gitbook.com.Getting startedGitBook can be used either on your computer for building local books or on legacy.gitbook.com for hosting them. To get started, check out the installation instructions in the documentation.Usage examplesGitBook can be used to create book, public documentation, enterprise manual, thesis, research papers, etc.You can find a list of real-world examples in the documentation.Help and SupportWe're always happy to help out with your books or any other questions you might have. You can ask a question on the following contact form at gitbook.com/contact or signal an issue on GitHub.FeaturesWrite using Markdown or AsciiDocOutput as a website or ebook (pdf, epub, mobi)Multi-LanguagesLexicon / GlossaryCoverVariables and TemplatingContent ReferencesPluginsBeautiful default themePublish your bookThe platform legacy.gitbook.com is like an \""Heroku for books\"": you can create a book on it (public, or private) and update it using git push.LicensingGitBook is licensed under the Apache License, Version 2.0. See LICENSE for the full license text."
67,learn-co-curriculum/react-hooks-lists-and-keys-lab,https://github.com/learn-co-curriculum/react-hooks-lists-and-keys-lab/blob/master/README.md,JavaScript,"Lists and Keys LabLearning GoalsTransform a list of values into a list of componentsUse the key prop correctly with the list of componentsIntroductionWe'll keep building our portfolio site and add the ability to display a list ofprojects based on an array of project data.Here is an image of what we want once we are finished:...and here is a tree view of our component parent-child structure:└── App    ├── NavBar    ├── Home    ├── About    |   └── Links    └── ProjectList        |   ProjectItem        |   ProjectItem        └── ProjectItemDeliverablesIt's recommended that you run npm start and work on this in the browserbefore running tests — try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.NavBarIn the NavBar component, there is an array with three strings representingeach link on the page. For each of those strings, create an <a> tag that lookslike this:<a href=\""#home\"">home</a>Make sure each <a> element also gets a unique key prop.ProjectListIn the ProjectList component, a prop of projects is being passed down fromthe App component with an array of objects. For each object in the array,render one ProjectItem component with the correct props. Use the id of theproject for the key prop.ProjectItemThe ProjectItem component should get a prop of technologies passed down fromProjectList. For each element in this array of technologies, create a <span>tag that displays the name of the technology.ResourcesLists and Keys"
68,bloominstituteoftechnology/node-auth1-project,https://github.com/bloominstituteoftechnology/node-auth1-project/blob/main/README.md,JavaScript,"Introduction to Authentication Module ProjectIntroductionUse Node.js, Express and Knex to build an API that provides register, login and logout functionality.InstructionsTask 1: Project Setup and SubmissionYour assignment page on Canvas should contain instructions for submitting this project. If you are still unsure, reach out to School Staff.Task 2: Minimum Viable Product2A - Database Access FunctionsWrite the following user access functions inside api/users/users-model.js: find findBy findById add2B - Middleware FunctionsWrite the following auth middlewares inside api/auth/auth-middleware.js: restricted checkUsernameFree checkPasswordLength checkUsernameExists2C - EndpointsAuthentication will be tracked using sessions and cookies. See api/server.js for more instructions.Write the following endpoints. The first one belongs inside api/users/users-router.js and the rest inside api/auth/auth-router.js: [GET] /api/users [POST] /api/auth/register [POST] /api/auth/login [GET] /api/auth/logoutUsers SchemaThe database auth.db3 includes a single users table:fielddata typemetadatauser_idunsigned integerprimary key, auto-increments, generated by dbusernamestringrequired, uniquepasswordstringrequiredNotesRun tests locally executing npm test.The project comes with migrate, rollback and seed scripts in case you need to reset the database.You are welcome to create additional files but do not move or rename existing files or folders.Do not alter your package.json file except to install extra libraries or add extra scripts. Do not update existing libraries.In your solution, it is essential that you follow best practices and produce clean and professional results.Schedule time to review, refine, and assess your work.Perform basic professional polishing including spell-checking and grammar-checking on your work.Task 3: Stretch GoalsBuild a React application that implements components to register, login and view a list of users. Gotta keep sharpening your React skills."
69,facebookarchive/flux,https://github.com/facebookarchive/flux/blob/main/README.md,JavaScript,"⚠️ The Flux project has been archived and no further changes will be made. We recommend using more sophisticated alternatives like Redux, MobX, Recoil, Zustand, or Jotai.    Flux  An application architecture for React utilizing a unidirectional data flow.                Getting StartedStart by looking through the guides and examples on Github. For more resources and API docs check out facebook.github.io/flux.How Flux worksFor more information on how Flux works check out the Flux Concepts guide, or the In Depth Overview.RequirementsFlux is more of a pattern than a framework, and does not have any hard dependencies. However, we often use EventEmitter as a basis for Stores and React for our Views. The one piece of Flux not readily available elsewhere is the Dispatcher. This module, along with some other utilities, is available here to complete your Flux toolbox.Installing FluxFlux is available as a npm module, so you can add it to your package.json file or run npm install flux. The dispatcher will be available as Flux.Dispatcher and can be required like this:const Dispatcher = require('flux').Dispatcher;Take a look at the dispatcher API and some examples.Flux UtilsWe have also provided some basic utility classes to help get you started with Flux. These base classes are a solid foundation for a simple Flux application, but they are not a feature-complete framework that will handle all use cases. There are many other great Flux frameworks out there if these utilities do not fulfill your needs.import {ReduceStore} from 'flux/utils';class CounterStore extends ReduceStore<number> {  getInitialState(): number {    return 0;  }  reduce(state: number, action: Object): number {    switch (action.type) {      case 'increment':        return state + 1;      case 'square':        return state * state;      default:        return state;    }  }}Check out the examples and documentation for more information.Building Flux from a Cloned RepoClone the repo and navigate into the resulting flux directory. Then run npm install.This will run Gulp-based build tasks automatically and produce the file Flux.js, which you can then require as a module.You could then require the Dispatcher like so:const Dispatcher = require('path/to/this/directory/Flux').Dispatcher;The build process also produces de-sugared versions of the Dispatcher and invariant modules in a lib directory, and you can require those modules directly, copying them into whatever directory is most convenient for you. The flux-todomvc and flux-chat example applications both do this.LicenseFlux is BSD-licensed. We also provide an additional patent grant."
70,bloominstituteoftechnology/node-db2-project,https://github.com/bloominstituteoftechnology/node-db2-project/blob/main/README.md,JavaScript,"Node DB2 Project Starter CodeIntroductionIn this challenge, you will write an API that can be used to manage Cars stored in a Relational Database.InstructionsTask 1: Project Setup and SubmissionYour assignment page on Canvas should contain instructions for submitting this project. If you are still unsure, reach out to School Staff.Task 2: Minimum Viable ProductBuild a RESTful API for an \""cars\"" resource. The client for this API is a car dealer.Cars SchemaThe critical information for each car is the vin, make, model, and mileage. They also track transmission type (manual, automatic...) and status of the title (clean, salvage...), but this information is not always immediately known. Write the \""up\"" and \""down\"" functions inside the data/migrations/01-make_cars_table.js migration file to satisfy the following schema:fielddata typemetadataidunsigned integerprimary key, auto-increments, generated by databasevinstringrequired, uniquemakestringrequiredmodelstringrequiredmileagenumericrequiredtitlestringoptionaltransmissionstringoptionalWrite Model FunctionsWrite the following db access functions inside api/cars/cars-model.js using Knex:getAll resolves to an array of car records (or an empty array)getById resolves to a car record by the given idcreate resolves to the newly created car recordWrite MiddlewareWrite the following middlewares inside api/cars/cars-middleware.js:checkCarId returns a status 404 with a { message: \""car with id <car id> is not found\"" } if the id in req.params does not exist in the database.checkCarPayload returns a status 400 with a { message: \""<field name> is missing\"" } if any required field is missing.checkVinNumberValid returns a status 400 with a { message: \""vin <vin number> is invalid\"" } if the vin number is invalid.checkVinNumberUnique returns a status 400 with a { message: \""vin <vin number> already exists\"" } if the vin number already exists in the database.Write a Cars APIWrite CR (of CRUD) for the cars resource, using the middleware and model functions described above wherever appropriate inside api/cars/cars-router.js :[GET] /api/cars returns an array of cars sorted by id (or an empty array if there aren't any).[GET] /api/cars/:id returns a car by the given id.[POST] /api/cars returns the created car.Manually test your endpoints with a REST client like Insomnia or Postman to check they are working as expected.Test your endpoints automatically by running npm test.NotesTest your work manually using Postman or HTTPie. Run automatic tests by executing npm test.You are welcome to create additional files but do not move or rename existing files or folders.Do not alter your package.json file except to install additional libraries or add additional scripts. Do not update existing libs.In your solution, it is essential that you follow best practices and produce clean and professional results.Task 3: Stretch ProblemsAdd seed data to the database using knex seedsAdd [PUT] and [DELETE] operations to your API.Write a schema file for a sales table. This table should track information on the sale of each car. You may wish to research foreign keys in order to link each sale to the entry in cars which sold."
71,dcloudio/uni-app,https://github.com/dcloudio/uni-app/blob/dev/README.md,JavaScript,uni-app  简体中文 | Englishuni-app 是一个使用 Vue.js 开发小程序、H5、App的统一前端框架。官网地址：https://uniapp.dcloud.io开发者使用 Vue 语法编写代码，uni-app 框架将其编译到 小程序（微信/支付宝/百度/字节跳动/QQ/快手/钉钉/小红书）、App（iOS/Android）、H5等多个平台，保证其正确运行并达到优秀体验。uni-app的特点开发者和案例更多：HBuilder装机量800万台，开发者社区月活百万，70多个QQ微信群承载10万人。案例众多，uni统计月活超10亿（详见）性能更高（见评测）更丰富的周边生态，插件市场数千款插件提供比小程序原生开发更好的开发体验、更高的工程化效率跨端抹平度更完善，且各端特色发挥更灵活，可真正实现一套代码多端覆盖，无需各端多头维护升级权威认可：阿里小程序官方工具内置uni-app（详见）、腾讯课堂官方自制uni-app培训视频（详见）扫码体验开发一次，编译到14个平台。依次扫描14个二维码，亲自体验最全面的跨平台效果！  注： 某些平台不能提交简单demo，补充了一些其他功能。快速开始uni-app支持通过vue-cli命令行、HBuilderX可视化界面两种方式快速创建项目：vue-cli命令行方式：不限IDE，适合对node熟悉的开发者，扩展阅读：在vscode中开发uni-app、在 WebStorm 中开发 uni-appHBuilderX可视化界面：专用IDE，内置相关环境，开箱即用，开发效率更高。项目案例案例展示：uniapp.dcloud.io/case欢迎提交你的应用，uni-app案例征集需求墙uni-app计划支持的功能点，会在需求墙上进行展示，征集开发者的投票意见，前往投票。更新日志uni-app一直保持高频的更新迭代，详见正式版更新日志、Alpha版更新日志。论坛由于DCloud有70多个QQ、微信群，官方已无法维护更多交流群。请开发者到官方论坛交流：https://ask.dcloud.net.cn/explore/ 。论坛提供了比issues更专业的工具服务。插件市场uni-app有丰富的插件生态，众多开发者提交了数千款组件、sdk、项目模板，详见：https://ext.dcloud.net.cn/除了众多三方ui库，官方还提供了uni-ui，在性能和跨端兼容方面有更强的优势。详见：https://ext.dcloud.net.cn/plugin?id=55现有项目如何迁移到uni-app体系微信小程序转换uni-app指南及转换器：https://ask.dcloud.net.cn/article/35786vue h5项目转换uni-app指南：https://ask.dcloud.net.cn/article/36174mpvue 项目（组件）迁移指南、示例及资源汇总： https://ask.dcloud.net.cn/article/34945wepy转uni-app转换器：https://github.com/zhangdaren/wepy-to-uniapp常见疑问问：不同端有不同的需求、不同的特色，登录支付也不一样，如何统一？答：差异部分使用条件编译。uni-app提供了灵活强大的条件编译。可以完美处理复用部分和差异部分。真正一套工程源码。当业务升级时，不再需要多端维护。如果多端维护，经常会因为某些端的流量不大，就一直拖延无法让那些用户享受到最新服务。另外登录支付在客户端部分，已经被uni-app统一成一样的api了。问：多端是不是一种妥协，是否会造成性能下降？答：good question。多端且不影响性能，确实很难，但uni-app做到了。在h5端，它的性能、包体积与直接使用vue.js开发一致； 在小程序端，它的性能比大多数开发框架更好，uni-app底层自动处理的setdata差量同步机制，比开发者手动写setdata更好，就像使用vue.js更新界面比手动写js修改dom更高效一样； 在App，uni-app支持webview渲染和原生渲染双引擎，启用原生渲染时，css写法受限，但性能是很接近原生开发的效果的，在当前的手机环境下，千万日活以下的应用在App使用uni-app也不会遇到任何压力。当然也可以在已经做好的原生App中将部分页面改为uni-app实现; 此外，我们会把很多跨端处理放在编译期完成的，这样会减少对运行期的效率影响。问：不做多端，是不是不需要uni-app？答：不是。大量开发者用uni-app只做一个端，详见案例。对于开发者而言，一个优秀工具在手，做什么都不愁。问：uni-app以后会不会变更开源协议，转向收费？答：官方承诺永远不会变更开源协议。无论HBuilderX、uni-app、App，面向中国人永久免费。更多资料评测：跨端开发框架深度横评之2020版评测：深入测试一周，主流多端框架大比武uni-app在App端和flutter、react native的比较
72,progedu/fibonacci,https://github.com/dcloudio/uni-app/blob/dev/README.md,JavaScript,uni-app  简体中文 | Englishuni-app 是一个使用 Vue.js 开发小程序、H5、App的统一前端框架。官网地址：https://uniapp.dcloud.io开发者使用 Vue 语法编写代码，uni-app 框架将其编译到 小程序（微信/支付宝/百度/字节跳动/QQ/快手/钉钉/小红书）、App（iOS/Android）、H5等多个平台，保证其正确运行并达到优秀体验。uni-app的特点开发者和案例更多：HBuilder装机量800万台，开发者社区月活百万，70多个QQ微信群承载10万人。案例众多，uni统计月活超10亿（详见）性能更高（见评测）更丰富的周边生态，插件市场数千款插件提供比小程序原生开发更好的开发体验、更高的工程化效率跨端抹平度更完善，且各端特色发挥更灵活，可真正实现一套代码多端覆盖，无需各端多头维护升级权威认可：阿里小程序官方工具内置uni-app（详见）、腾讯课堂官方自制uni-app培训视频（详见）扫码体验开发一次，编译到14个平台。依次扫描14个二维码，亲自体验最全面的跨平台效果！  注： 某些平台不能提交简单demo，补充了一些其他功能。快速开始uni-app支持通过vue-cli命令行、HBuilderX可视化界面两种方式快速创建项目：vue-cli命令行方式：不限IDE，适合对node熟悉的开发者，扩展阅读：在vscode中开发uni-app、在 WebStorm 中开发 uni-appHBuilderX可视化界面：专用IDE，内置相关环境，开箱即用，开发效率更高。项目案例案例展示：uniapp.dcloud.io/case欢迎提交你的应用，uni-app案例征集需求墙uni-app计划支持的功能点，会在需求墙上进行展示，征集开发者的投票意见，前往投票。更新日志uni-app一直保持高频的更新迭代，详见正式版更新日志、Alpha版更新日志。论坛由于DCloud有70多个QQ、微信群，官方已无法维护更多交流群。请开发者到官方论坛交流：https://ask.dcloud.net.cn/explore/ 。论坛提供了比issues更专业的工具服务。插件市场uni-app有丰富的插件生态，众多开发者提交了数千款组件、sdk、项目模板，详见：https://ext.dcloud.net.cn/除了众多三方ui库，官方还提供了uni-ui，在性能和跨端兼容方面有更强的优势。详见：https://ext.dcloud.net.cn/plugin?id=55现有项目如何迁移到uni-app体系微信小程序转换uni-app指南及转换器：https://ask.dcloud.net.cn/article/35786vue h5项目转换uni-app指南：https://ask.dcloud.net.cn/article/36174mpvue 项目（组件）迁移指南、示例及资源汇总： https://ask.dcloud.net.cn/article/34945wepy转uni-app转换器：https://github.com/zhangdaren/wepy-to-uniapp常见疑问问：不同端有不同的需求、不同的特色，登录支付也不一样，如何统一？答：差异部分使用条件编译。uni-app提供了灵活强大的条件编译。可以完美处理复用部分和差异部分。真正一套工程源码。当业务升级时，不再需要多端维护。如果多端维护，经常会因为某些端的流量不大，就一直拖延无法让那些用户享受到最新服务。另外登录支付在客户端部分，已经被uni-app统一成一样的api了。问：多端是不是一种妥协，是否会造成性能下降？答：good question。多端且不影响性能，确实很难，但uni-app做到了。在h5端，它的性能、包体积与直接使用vue.js开发一致； 在小程序端，它的性能比大多数开发框架更好，uni-app底层自动处理的setdata差量同步机制，比开发者手动写setdata更好，就像使用vue.js更新界面比手动写js修改dom更高效一样； 在App，uni-app支持webview渲染和原生渲染双引擎，启用原生渲染时，css写法受限，但性能是很接近原生开发的效果的，在当前的手机环境下，千万日活以下的应用在App使用uni-app也不会遇到任何压力。当然也可以在已经做好的原生App中将部分页面改为uni-app实现; 此外，我们会把很多跨端处理放在编译期完成的，这样会减少对运行期的效率影响。问：不做多端，是不是不需要uni-app？答：不是。大量开发者用uni-app只做一个端，详见案例。对于开发者而言，一个优秀工具在手，做什么都不愁。问：uni-app以后会不会变更开源协议，转向收费？答：官方承诺永远不会变更开源协议。无论HBuilderX、uni-app、App，面向中国人永久免费。更多资料评测：跨端开发框架深度横评之2020版评测：深入测试一周，主流多端框架大比武uni-app在App端和flutter、react native的比较
73,angular/material,https://github.com/angular/material/blob/master/README.md,JavaScript,"Material Design for AngularJS AppsMaterial Design is a specification for aunified system of visual, motion, and interaction design that adapts across different devices. Ourgoal is to deliver a lean, lightweight set of AngularJS-native UI elements that implement thematerial design specification for use in AngularJS single-page applications (SPAs).AngularJS Material is an implementation of Google'sMaterial Design Specification (2014-2017)for AngularJS (v1.x) developers.For an implementation of the Material Design Specification (2018+),please see the Angular Material project which is built forAngular (v2+) developers. End-of-LifeAngularJS Material support has officially ended as of January 2022.See what ending support meansand read the end of life announcement. Visitmaterial.angular.io for the actively supported Angular Material.Find details on reporting security issueshere.AngularJS Material includes a rich set of reusable, well-tested, and accessible UI components.Quick Links:API & DemosBuildingInstallingPlease note that using the latest version of AngularJS Material requires the use ofAngularJS 1.7.2 or higher.AngularJS Material supports the browser versions defined in the browserslist fieldof our package.json. Find out more on ourdocs site.AngularJS Material supports the screen reader versions listedhere. Online Documentation and Demos  Visit material.angularjs.org online to review the API, see thecomponents in action via live demos, and to read our detailed guides which include the layout system,theming system, typography, and more.Or you can build the documentation and demos locally; seeBuild Docs & Demos for details. BuildingDevelopers can build AngularJS Material using NPM and gulp.First install or update your local project's npm dependencies:npm installInstall Gulp v3 globally:npm install -g gulp@3Then run the gulp tasks:# To build `angular-material.js/.css` and `Theme` files in the `/dist` directorygulp build# To build the AngularJS Material Docs and Demos in `/dist/docs` directorygulp docsFor development, use the docs:watch NPM script to run in dev mode:# To build the AngularJS Material Source, Docs, and Demos in watch modenpm run docs:watchFor more details on how the build process works and additional commands (available for testing anddebugging) developers should read the Build Guide. Installing Build (Distribution Files)NPMFor developers not interested in building the AngularJS Material library... use NPM to installand use the AngularJS Material distribution files.Change to your project's root directory.# To get the latest stable version, use NPM from the command line.npm install angular-material --save# To get the most recent, latest committed-to-master version use:npm install http://github.com/angular/bower-material#master --saveOther Dependency ManagersVisit our distribution repositoryfor more details on how to install and use the AngularJS Material distribution files within your localproject.CDNCDN versions of AngularJS Material are available.With the Google CDN, you will not need to download local copies of the distribution files. Instead,simply reference the CDN urls to easily use those remote library files. This is especially usefulwhen using online tools such as CodePen or Plunker.  <head>    <!-- AngularJS Material CSS now available via Google CDN; version 1.2.1 used here -->   <link rel=\""stylesheet\"" href=\""https://ajax.googleapis.com/ajax/libs/angular_material/1.2.1/angular-material.min.css\"">  </head>  <body>    <!-- AngularJS Material Dependencies -->    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.min.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-animate.min.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-aria.min.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-messages.min.js\""></script>    <!-- AngularJS Material Javascript now available via Google CDN; version 1.2.1 used here -->    <script src=\""https://ajax.googleapis.com/ajax/libs/angular_material/1.2.1/angular-material.min.js\""></script>  </body>Developers seeking the latest, most-current build versions can use GitCDN.xyz topull directly from our distribution repository:  <head>    <!-- AngularJS Material CSS using GitCDN to load directly from `bower-material/master` -->    <link rel=\""stylesheet\"" href=\""https://gitcdn.xyz/cdn/angular/bower-material/master/angular-material.css\"">  </head>  <body>    <!-- AngularJS Material Dependencies -->    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-animate.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-aria.js\""></script>    <script src=\""https://ajax.googleapis.com/ajax/libs/angularjs/1.8.2/angular-messages.min.js\""></script>    <!-- AngularJS Material Javascript using GitCDN to load directly from `bower-material/master` -->    <script src=\""https://gitcdn.xyz/cdn/angular/bower-material/master/angular-material.js\""></script>  </body>Once you have all the necessary assets installed, add ngMaterial and ngMessages as dependencies for yourapp:angular.module('myApp', ['ngMaterial', 'ngMessages']);"
74,EddieHubCommunity/LinkFree,https://github.com/EddieHubCommunity/LinkFree/blob/main/README.md,JavaScript,"    What is LinkFree?A platform where people in tech can have a single hub to showcase their content in order to accelerate their career, whilst contributing to an Open Source project and being part of a community that has a say in where the project is going.Your profile will have links to your social media and content. You can also add your timeline, testimonials, and upcoming events that you are participating in.Here is an example of a LinkFree Profile https://linkfree.io/eddiejaoudeTech StackLinkFree is built using the following technologies:Next.js - a framework for building server-rendered React applicationsMongoDB - a NoSQL databaseTailwind CSS - a utility-first CSS frameworkQuickstartYou have 4 options to contribute to the repo, please pick your favourite from:GitHub UI (recommended for adding/editing your profile)GitpodLocal developmentLocal development with Docker ComposeBrief documentation is below, but full documentation can be found here https://linkfree.io/docsWarning:Your DB will be empty, you will need to load the data into the database! You can do this by visiting the url /api/system/reload?secret=developmentGitHub UIThis is great if you only want to add your Profile or make changes to it.Here is the QuickStart guide to add your profileWith JSON https://linkfree.io/docs/quickstart-jsonWith Forms https://linkfree.io/docs/quickstart-formsNote: give extra attention to JSON formatting and the GitHub Action after you create the Pull RequestRead more in the official documentation - https://linkfree.io/docs/environments/github-uiGitpodIn the cloud-free development environment which will have all the dependencies you need (for example MongoDB).You can use Gitpod in the cloud Read more in the official documentation - https://linkfree.io/docs/environments/gitpodLocal developmentThis environment is fully on your computer and requires each dependency (for example MongoDB) to be installed and set up, but it gives you the most flexibility for customisation.PrerequisitesBefore contributing or adding a new feature, please make sure you have already installed the following tools:NodeJs (Works with Node LTS version v18.16.1)MongoDBOptional NVM: Switch Node version by using nvm use (on Windows, use nvm use v18.16.1). If this is not installed, run nvm install v18.16.1.CommandsYou can set this up locally with the following steps:copy the .env.example file to .env and update any details requiredMongoDB is required, it is possible to use docker compose up to start the MongoDB servicenpm cinpm run devRead more in the official documentation https://linkfree.io/docs/environments/local-development#local-developmentLocal development with Docker ComposeThis will allow you to run your favourite IDE but not have to install any dependencies on your computer like NodeJS and MongoDB.PrerequisitesGitDocker and Docker Compose V2. or Docker DesktopCommandsgit clone https://github.com/EddieHubCommunity/LinkFreecd LinkFreedocker compose upIn your browser on localhost:3000 you should now see the project up and running.Now you need to upload the data in your mongoDB instance. localhost:3000/api/system/reload?secret=developmentRecheck localhost:3000 to confirm data is uploaded, you should see current amount of active users.Warning: MongoDB Compass will not be available with the above setup. You'll need to run the next.js project that we just cloned locally and a mongoDB image inside a docker container in order to accessMongoDB Compass:  Click me for instructionsInstallationnpm installModify.env file LINKFREE_MONGO_CONNECTION_STRING value with \""mongodb://localhost:27017/linkfree\""docker run --name my_mongodb_instance -p 27017:27017 -d mongonpm run devIn the browser localhost:3000/api/system/reload?secret=developmentRead more in the official documentation - https://linkfree.io/docs/environments/local-development#docker-composeHow to add YOUR ProfileStep by step quickstart guide can be found in the full docs hereWith JSON https://linkfree.io/docs/quickstart-jsonWith Forms https://linkfree.io/docs/quickstart-formsTestimonialsHere are some testimonials from individuals who have used LinkFree:-Francesco Ciulla  \""I had another similar (paid) service. I tried LinkFree for a week and  I got almost double the clicks on the links in the same period, redirecting from the same link. I decided to start using it regularly. I am very satisfied. It's not just a list of links but it's backed by a great Open Source community.\""Name : Francesco CiullaBio : Developer Advocate at daily.dev, Docker Captain, Public Speaker, Community BuilderUsername : Francesco CiullaAmanda Martin  \""Where LinkFree really stands out is the ability to make meaningful connections and find collaborators due to thoughtful features that are not simply about chasing ways to build your audience. The fact that it's also Open Source really makes it the tool I was waiting for in this space.\""Name : Amanda MartinBio : Developer Advocate | Always Curious | Always SillyUsername : Amanda MartinPradumna Saraf  \""LinkFree is very close to me because I have seen it evolve. With LinkFree, I have discovered so many amazing people in tech. Some of my favorite features are the barcode for profiles and testimonials. If you are reading this and don't have a profile, I highly recommend doing that. Thank you, Eddie and EddieHub community, for building this incredible app.\""Name : Pradumna SarafBio : Open Source | DevOps | Golang Developer | EddieHub AmbassadorUsername : Pradumna SarafGitHub AcceleratorLinkFree was accepted into the GitHub Accelerator program...https://accelerator.github.comSupportDon't forget to leave a star ⭐️.Our PledgeWe take participation in our community as a harassment-free experience for everyone and we pledge to act in ways to contribute to an open, welcoming, diverse and inclusive community.If you have experienced or been made aware of unacceptable behaviour, please remember that you can report this.  Read our Code of Conduct for more details."
75,localip/nitro-sniper,https://github.com/localip/nitro-sniper/blob/main/README.md,JavaScript,"            Discord SniperA lightweight, fast and efficient Discord Nitro sniper, giveaway sniper & invite sniper.FeaturesNitro, giveaway & invite sniperCustomizable limits for the sniper (e.g. Snipe 2 Nitros then stop for 24 hours)Light, fast & efficientCustomizable delay for giveaway joinerDMing the host on giveaway win with customizable DM Delay and a DM Message.Status changer for main account & alternate accountsFake code & duplicate protectionMulti-Account support featuring alternate accounts & main accounts3 Modes - main, alts, both. Each mode describes what accounts will be used when the sniper starts.Feeding system from alternate accounts, catches a nitro on your alternate account and redeems it on your main accountCustomizable webhook (Giveaways, Nitro, invites) with customizable events (Invalid Code, redeemed code, joined server)Customizable webhook mentions for fired events (Pings @everyone, recommended to run in a private server)Fully customizable word whitelist & blacklist for the giveaway sniper.Whitelist only mode for giveaway sniper (Blacklist still applies)Per-server blacklist and whitelist for the giveaway sniperAnnounces the type of Nitro sniped on snipe (e.g. Nitro Classic)Configurable invite sniper featuring minimum and max member counts and limited invite joins (e.g. 10 invites / 6 hours)Delay management for the invite sniper to avoid suspensionsPreviewsFAQQ: Where can I find the installation steps?A: InstallationQ: Where can I find the default configuration?A: Default ConfigurationQ: How can I obtain my token?A: How to obtain your tokenQ: I'm getting the Invalid Settings error, how can I fix this?A: Validate your JSON5TipsTry to get a low latency to Discord servers as there often is competition with other snipers.This is technically a self-bot: mentioning this in a Discord chat is enough to make your account reportable to Trust & Safety.Running more than one instance or different snipers is an easy way to get your account deactivated or terminated.Before using, consider the moral implications of stealing gifts from people and communities you have nothing to do with.If you enjoy my projects, please consider leaving a ⭐ in the top right on the repo :)"
76,learn-co-students/js-basics-online-shopping-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-basics-online-shopping-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Online ShoppingObjectivesModel a shopping cart full of items as an array of objects in JavaScript.Iterate over arrays with for loopsUse ES6 ${template literals} instead of \""regular, \"" + \""old \"" + string + \"" concatenation.\""Brush up on conditionals and control flow to make some Oxford comma magic happen.InstructionsWe've started you off with a cart variable that points at an empty array. There are five functions that you'll have to code in order to create a working shopping cart:The addToCart() function accepts one argument, the name of an item.Use that passed-in string to create a new object representing the item. The object should consist of two key-value pairs : { itemName: name of the item, itemPrice: price of the item, }. As more items are added, the cart should start to look something like this: [ {  itemName:\""bananas\"", itemPrice: 17 }, { itemName:\""pancake batter\"",itemPrice: 5 }, { itemName:\""eggs\"", itemPrice: 49 }].The price of each item should be a randomly-generated integer between 1 and 100.HINT: Look into Math.random() and Math.floor().Upon the successful addition of a new item to the cart, the function should return <itemName> has been added to your cart. .The viewCart() function does not accept any arguments. It should loop over every item in your cart, returning the contents as one long, coherent statement in this format: In your cart, you have bananas at $17, pancake batter at $5, and eggs at $49.If the cart is empty, the function should instead return Your shopping cart is empty.Note: Pay close attention to the syntax above. The returned statement should be a single sentence that begins with In your cart, you have , terminates in a period, and can assume the following shapes according to how many items the cart contains:1 item — In your cart, you have bananas at $17.2 items — In your cart, you have bananas at $17, and pancake batter at $5.3+ items — In your cart, you have bananas at $17, pancake batter at $5, and eggs at $49.The total() function accepts no arguments, iterates through the cart array, and returns the current total value of the items in the cart.The removeFromCart() function accepts one argument, the name of the item that should be removed.If the item is present in the cart, the function should remove the object from the cart and then return the updated cart.HINT: Check each object's itemName value key to see if it matches the parameter, then remove it if it matches. You might find Array.prototype.splice() to be useful.If the cart does not contain a matching item, the function should return That item is not in your cart.The placeOrder() function accepts one argument, a credit card number.If no argument is received, the function should print out Sorry, we don't have a credit card on file for you..If a card number is received, the function shouldempty the cart arrayreturn Your total cost is $71, which will be charged to the card 83296759. (where 71 is the value returned by total() and 83296759 is the credit card number passed to placeOrder())The final send-offThis lab is not easy! The methods, especially viewCart() require careful planning and a sharp eye. The cart array is a non-trivial nested data structure, and it would be a good idea to periodically check the value of your variables (think: console.log(), debugger, etc.) at different points within your functions, especially when attempting to iterate over the cart and its items.View Online Shopping Lab on Learn.co and start learning to code for free."
77,learn-co-curriculum/phase-0-git-basics-lab,https://github.com/learn-co-curriculum/phase-0-git-basics-lab/blob/master/README.md,JavaScript,"Git Basics LabLearning GoalsUnderstand how to complete assignmentsApply what you've learned about Git version controlInitialize a new Git repositoryStage and commit new contentCreate a remote repository on GitHubConnect the newly created local repository with the remote on GitHubIntroductionSo far lessons have only contained written content on specific topics. All youneeded to do was read through each lesson and continue on. This lesson, however,is considered an assignment. Assignments are exercises that have some writtencontent to guide you, but also ask you to complete some work of your own. Manyassignments, like this one, include tests that must be passed in order tocomplete the lesson. Assignments with tests are often referred to as a labs inour course.Now that you've learned about Git version control, in this lab, we're going togo through the entire process of creating a local Git repository, creating aninitial commit and pushing that work to a remote repo stored onGitHub.Getting StartedTo start work on this lab, you will first need to fork this assignment and cloneit to your local environment. Let's quickly review this process:StepsStep 1Click the Fork button at the top of this page in Canvas.Reminder: This button does the same thing as forking in GitHub(via the Octocat button). We recommend using the Fork button inCanvas.Step 2Choose to fork to your personal account if prompted. Once the forking processis complete, you should be looking at your personal copy of the assignment onGitHub.Step 3Click Code, choose SSH, then click the clipboard icon to copy theinformation we'll need about this repository.Step 4In your terminal, type git clone, and paste the info you copied fromGitHub. The command should look something like this (but with your personalaccount name):$ git clone git@github.com:<your-github-username>/phase-0-git-basics-lab.gitStep 5A folder will be created wherever you run this command. The folder name willbe the same as the repository, so in this case, phase-0-git-basics-lab.Navigate into this folder with cd phase-0-git-basics-lab.Once inside the folder, you are ready to work on the lab.Solving this LabOnce you're in your local clone of this lab, the first step is to run the lab'stests to get a sense of what you need to do. We do this with two terminalcommands. First, we run the following:$ npm installThis sets up the tools we'll use for testing. To run the tests, type the followingonce you regain control of the command line:$ npm testThis will run all the tests included for this lab. You should see a lot ofoutput, enough that you may need to scroll up in your terminal to see it all.Six failed tests should print out, starting with this:$ npm testthis lab  1) has a folder named my-repository  2) has a valid git repository initialized for the my-repository folder  3) has a README.md file in the my-repository folderthe local repository  4) has README.md as a tracked file  5) has at least one commit  6) has been pushed up to the remote repository0 passing (42ms)6 failing1) this lab     has a folder named my-repository:   AssertionError: no folder name \""my-repository\"" was found: value: expected './my-repository' to exist    at Function.<anonymous> (node_modules/chai-fs/lib/assertions/directory.js:21:53)    at Function.ctx.(anonymous function) [as directory] (node_modules/chai/lib/chai/utils/addMethod.js:41:25)    at Function.assert.isDirectory (node_modules/chai-fs/lib/assertions/directory.js:34:35)    at Context.it (test/index-test.js:11:19)    ...Each failed test includes an explanation.In the first test seen above, for instance, it saysthis lab has a folder named my-repository, followed byAssertionError: no folder name \""my-repository\"" was found.This first test is looking specifically for a folder, my-repository, to existinside this lab's main directory (or \""folder\""). You probably have a theory onhow to correct that test after seeing that error! We're going to use thesetests to let us know when we're all done.InstructionsIMPORTANT TIPS TO AVOID GETTING STUCKThe work you will do to set up the Git repository will be done in themy-repository directory (after you create it ;)). If you're doing gitcommands in the same directory as THIS README that you're reading right now,you're not going to get to working tests.When you run the tests, you will need to be in the top-level directory ofthis lab, (phase-0-git-basics-lab, the directory with the README you'rereading right now in it).Follow the steps provided below carefully to help ensure you are doing things inthe right location.StepsAs we saw above, there are six broken tests. Let's get them working.Step 1Create a new directory locally named my-repository. This directory should beside by side with the test directory of this lab. Use the Unix command tocreate this directory. From the top-level of this lab, the parent directory ofmy-repository, run npm test and verify there are only 5 broken tests left.Step 2Navigate into the new directory my-repository using cd on the command line.Step 3While inside my-repository, using the command line, initialize a new gitrepository. You'll know you've done it if you see 'Initialized empty Gitrepository in <...your local directory>/my-repository/.git/'>. Changeback-up to the parent directory and you should be back in the top-leveldirectory. Run npm test again and you should be down to four tests left.If that's true, change back into my-repository.Step 4Create a file (not a folder) called README.md inside my-repository.Step 5If you run git status at the command line, you should see that README.mdis now listed as an untracked file. Add README.md so that it is tracked byGit.Step 6Once the file is tracked, running git status again will show thatREADME.md is staged and ready to be committed. Go ahead and create a commit onthe command line (don't forget to add -m when committing to include amessage!).NOTE: If you forget to include -m when committing, you may find you'veopened vi, the built in terminal text editor. To escape out of this editor,press the 'esc' key once, then type :q! to close the editor and return tothe normal terminal.Step 7Change back to the top-level directory, run npm test, and you'll seethat the test output is looking pretty successful:$ npm test  this lab    ✓ has a folder named my-repository    ✓ has a valid git repository initialized for the my-repository folder    ✓ has a README.md file in the my-repository folder  the local repository    ✓ has README.md as a tracked file    ✓ has at least one commit    1) has been pushed up to the remote repository  5 passing (18ms)  1 failing  1) the local repository       has been pushed up to the remote repository:     AssertionError: no record of pushing to a remote was found. Follow the instructions on GitHub to connect and push to a new remote repository: value: expected './my-repository/.git/logs/refs/remotes' to existAlmost done! Change back into the my-repository directory.Step 8Create a remote repository on GitHub using your personal GitHubaccount and connect it to your newly created local repository.When we create a blank repository, we are given multiple options for how to getstarted. Since we have a local folder with Git initialized already, we'll usethe instructions for creating a new repository using the command line.If you've been following along, you may notice that the first commands listedare things you've already done - git init initialized the my-repositorydirectory as a local Git repository; git add README.md tracks the README.mdfile (you may have used git add ., which will work too);git commit -m \""first commit\"" commits the newly created README.md file with amessage.The remaining commands still need to be run. First we run the following:$ git branch -M mainIf you recall from the version control basics lesson, going forward main willbe used as the default name of the... main... branch in a repository. Dependingon your environment you may still have an older version of Git that defaults tomaster. If this is the case, the above command will change this masterbranch to main.After setting the branch, we need to add the newly created GitHub repo as theremote for your local my-repository repo. This command will include infospecific to your GitHub account and the name you gave your GitHub repo:$ git remote add origin git@github.com:<your-github-username>/<your-github-repository>.gitStep 9The last step listed pushes your local work up to the remote:$ git push -u origin mainStep 10Change back up to the top-level directory and run npm test oncemore, your tests should all be passing.Once you've passed all tests, if you visit the newly created remote repositoryon GitHub, you should see that the README.md file you created is now present.Additional PracticeWe recommend taking time to become familiar with Git commands since you'll berelying on them a lot. If you'd like to practice further, change directoryback into the my-repository folder and try the following:Create another file, then add, commit, and push to the remoteModify the contents of README.md, then add, commit, and push to the remoteRename README.md, then add, commit, and push to the remoteWrapping UpIf you would like to preserve the work you've done for this lab on GitHub,you'll need to push it up to your fork of this assignment. Change directory tothe top-level once again, then run the following:$ git add .$ git commit -m \""Done with assignment\""$ git push origin masterNote that this assignment was created with a master branch as the default, sothe push command is different than when you pushed my-repository.ConclusionAs you become more comfortable with the terminal and Git, you'll find yourselfusing the workflow of initializing, adding, committing and pushing your work ona regular basis. These commands are at the core of Git version control. Byknowing them, you now have the ability to create your own repositories andcontribute to repositories that already exist.In this lab you used tests to guide you in the basics of setting up a new localGit repository and binding it to a remote repository on GitHub. By pushing yourwork to a remote repository you've backed it up and made it available for theworld to see via GitHub. Professional developers use this process to share codewith each other, to document their code, and to earn interview slots by showingoff what they're capable of. You did this guided by tests. It's common fordevelopers to write tasks as tests that all fail and then slowly work to getthem all passing. It's like a to-do list that verifies you've actually done thework!"
78,bloominstituteoftechnology/Auth-Friends,https://github.com/bloominstituteoftechnology/Auth-Friends/blob/main/README.md,JavaScript,"Auth FriendsTopics:React RouterProtected Routesaxios packageAJAXPromisesAuthentication tokensInstructionsTask 1: Set UpInitialize ProjectRun npm install inside the root directory of this project to install dependencies for the API server.Run npm start to start the API server.Run npx create-react-app friends --use-npm in a separate terminal window in the root directory of the project to create your starter application.If you experience issues with npx, you may create your starter application by running create-react-app friends --use-npm.cd into the friends folder and type npm install axios react-router-dom which will install the needed dependencies.Task 2: MVPProject DescriptionThere is an API built that has authentication built into it. The API holds a list of friends and lets you add, edit, or remove friends from that list.All of the API endpoints (except the login endpoint) are considered \""protected\"", meaning you have to make the request with an authentication token in the header or the API will send back a 401 error.Take your examples from the guided project and use them to build a more sophisticated application. Have fun!Once your server is up and running, the URL you'll be able to hit from within your app is http://localhost:5000. You will however need an authentication header on all the calls except the login call.Take a look at the endpoints that our API has to offer in server.js.[POST] * to /api/login: returns a token to be added to the header of all other requests. Pass in the following credentials as the body of the request: { username: 'BloomTech', password: 'i<3Lambd4' }[GET] to /api/friends: returns the list of friends.[GET] to /api/friends/123: returns the friend with the id passed as part of the URL (123 in example).[POST] to /api/friends: creates a friend and return the new list of friends. Pass the friend as the body of the request (the second argument passed to axios.post).[PUT] to /api/friends/:id: updates the friend using the id passed as part of the URL. Send the an object with the updated information as the body of the request (the second argument passed to axios.put).[DELETE] to /api/friends/123: removes the friend using the id passed as part of the URL (123 in example).Build the App!Add a route for a login page and build out a simple login form with username and password inputs and a submit button (design this however you would like).The login function should save the returned token to localStorage. You can setup isLoading state in your Login component, and show a spinner on your form or in your button while the login request is happening.When the request returns, save the token to localStorage, then use the history object in your Login component to navigate your user to your FriendsList routeCreate a <PrivateRoute /> component to protect your other routes. It should check localStorage for a token, and redirect the user to your login route if there is not a token.Create a protected route for your friends list. Remember, if the user isn't logged in, navigating to this protected route will redirect them to the login page.In your FriendsList component, rendered with <ProtectedRoute />, you will create a list of your friends that you get from the API.Adding New FriendsCreate a form to collects data for a new friend.Make a POST request to add a friend to the databaseEach friend item that is in the friends array should have the following format:{  id: 1  name: 'Joe',  age: 24,  email: 'joe@bloomtech.com',}If you'd like, you can create multiple \""view\"" components for your routes. You could have a component whose sole purpose is to render the login form; one for a form for updating a user; another component whose sole purpose is for creating users; and then another component whose sole purpose is to delete a user.It really is up to you how you build this project. I suggest writing down the flow you want to follow, and then writing down each individual piece you need for each step in the flow so that this process doesn't feel as overwhelming.Task 3: Stretch ProblemsIn the requirements for this project, we implemented a login POST operation, a GET operation, and a \""add friend\"" POST operation. Add two more functions, one for making a PUT request, and the other for making a DELETE request.Style the friends list and the input field and make everything look nice.Expand the number of properties that you put on each friend object. Feel free to remove the dummy data on the server or modify it in any way.Submission Format Submit a Pull-Request to merge <firstName-lastName> Branch into main (student's  Repo). Please don't merge your own pull request"
79,bloominstituteoftechnology/Newsfeed-Components,https://github.com/bloominstituteoftechnology/Newsfeed-Components/blob/main/README.md,JavaScript,"Newsfeed-ComponentsIn this project we are going to be building a news feed reader. The goal is to have a collapsing menu, and expandable news articles. The styles and some of the HTML is already done for you.Need to knowCreating DOM elements with Javascript FunctionsElement selectionBasic DOM manipulationEvents and event listenersSet Up The Project With GitFollow these steps to set up and work on your project: Create a forked copy of this project. Clone your OWN version of the repository (Not Lambda's by mistake!). Create a new branch: git checkout -b <firstName-lastName>. Implement the project on your newly created <firstName-lastName> branch, committing changes regularly. Push commits: git push origin <firstName-lastName>.Follow these steps for completing your project. Submit a Pull-Request to merge <firstName-lastName> Branch into main (student's Repo). Please don't merge your own pull requestLaunching the project Navigate to the root of the project with your command line. Run npm install to download any dependencies listed in the package.json file. Run npm start to compile your project and launch a development server. Navigate Chrome to the URL indicated in the output of the npm start command.Part 1: The Articles ComponentFollow the instructions found in the Articles.js file to complete the JavaScript functionality and add the components to the DOM.Part 2: Add ArticlesNow that we have our components built, add a few articles of your own to the data array. Notice how our JavaScript code automatically creates the new articles. Write the code once and add as many components as you want all while maintaining the functionality we built!Part 3: The MenuFollow the instructions found in the Menu.js file to complete the JavaScript functionality.Stretch GoalsIf you complete the main goals of the page let's play around with some cool animation libraries.A few things to check out:Native CSS AnimationsCSS has the ability to animate elements using a number of different properties. Check out transform and transition, and animation. A word of warning, these CSS properties will act differently on different browsers, so always read and see if you need a browser prefix in order to animate properly.https://css-tricks.com/almanac/properties/a/animation/jQueryjQuery used to be an extremely popular JavaScript library, in fact most of the native DOM manipulation we know and love, came from the jQuery library. It is worth getting a little familiar with it. The jQuery library is massive, and part of it is an animation library. jQuery gives us a fantastic method called .animate(). There are also simpler methods such as slideDown slideUp, slideToggle, show, hide and more.http://www.jquery.comGSAPGreensock Animation Platform, is by far the most powerful of the three. It is intuitive and easy to use, and you will be amazed at the results.https://greensock.com/gsapNote: Just a reminder the stretch goals are just extra practice using the tools we have learned. These are not required. Only parts 1-3 are required portions of the project. If you do not get to the stretch goals, don't worry.Animation Goal #1. Animate the menu opening: You will need to change the CSS for the menu in order to achieve this. Get the menu to slide in from the left side of the screen. And slide out when the button is clicked. Bonus: Get the menu to slide back out when the user clicks anywhere on the screen other than the menu.Animation Goal #2 Animate the article opening. This one is a bit trickier. You will need to change the CSS for this component as well. Animate the component so that it slides open and slides closed on each click. Update the text in the expand button to read 'Click to Expand' or 'Click to Close' depending on the state of the article.Close ButtonAdd a close (or 'read') button to each Article component. When clicked the article will disappear.Component ConstructorCreate a function that builds Article components. You are not expected to finish this. This goal is simply an exercise in thinking about how you would implement a function that took some data, created a new Article from it, and appended it to the HTML (without actually writing anything in the HTML file). This is a difficult concept to undertake, but even thinking about how you would implement it will give you a better understanding of how we use frameworks in upcoming sprints.Implement a way to write your own articles using the Component Constructor and some input fields."
80,tangly1024/NotionNext,https://github.com/tangly1024/NotionNext/blob/main/README.md,JavaScript,"NotionNext                                中文文档 | README in English一个使用 NextJS + Notion API 实现的，部署在 Vercel 上的静态博客系统。为Notion和所有创作者设计。预览效果在线演示：https://preview.tangly1024.com/ ，项目支持多主题切换，没找到喜欢的主题？贡献一个吧~NextMediumHexoFukasawa 预览NEXT 预览MEDIUM 预览HEXO 预览FUKASAWA我要如何开始？只需几分钟即可搭建您的个人站点：部署教程 (支持多方案)配置手册 - (自定义插件)二次开发 - (开发手册)更新指南 - (升级您的代码)版本汇总 - (查询变动功能)致谢感谢Craig Hart发起的Nobelium项目  Craig Hart贡献者      tangly1024🎫 🔧 🐛         uWayLu🔧 🐛        txs🔧 🐛        yuzhanglong🔧 🐛         Hscpro🔧 🐛         JensonMiao🔧 🐛         haixin1225🔧 🐛        mouyase🔧 🐛        qfdk🔧 🐛        ifyz🔧 🐛        Liqun Zhao🔧 🐛        Ylarod🔧 🐛        Etherrreal.🔧 🐛      Joshua Astray🔧 🐛        Vixcity🔧 🐛        ipatpat🔧 🐛        xloong🔧 🐛        expoli🔧 🐛        bUBBLE🔧 🐛        派了个萌 🔧 🐛        Simon Shi🔧 🐛        S.Y. Lee🔧 🐛        fighting-buf🔧 🐛        cliouo🔧 🐛        Sude Akgün🔧 🐛        Ray🔧 🐛        Hongzzz🔧 🐛        RedhairHambagu🔧 🐛        Allen🔧 🐛        zdf🔧 🐛        emengweb🔧 🐛        kitety🔧 🐛        Jiaxin Peng🔧 🐛  引用技术框架: Next.js样式: Tailwind CSS渲染: React-notion-x评论: Twikoo, Giscus, Gitalk, Cusdis, Utterances图标: FontawesomeLicenseThe MIT License."
81,gulpjs/gulp,https://github.com/gulpjs/gulp/blob/master/README.md,JavaScript,"          The streaming build system        What is gulp?Automation - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.Platform-agnostic - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.Strong Ecosystem - Use npm modules to do anything you want + over 3000 curated plugins for streaming file transformations.Simple - By providing only a minimal API surface, gulp is easy to learn and simple to use.What's new in 4.0?!The task system was rewritten from the ground-up, allowing task composition using series() and parallel() methods.The watcher was updated, now using chokidar (no more need for gulp-watch!), with feature parity to our task system.First-class support was added for incremental builds using lastRun().A symlink() method was exposed to create symlinks instead of copying files.Built-in support for sourcemaps was added - the gulp-sourcemaps plugin is no longer necessary!Task registration of exported functions - using node or ES exports - is now recommended.Custom registries were designed, allowing for shared tasks or augmented functionality.Stream implementations were improved, allowing for better conditional and phased builds.gulp for enterpriseAvailable as part of the Tidelift SubscriptionThe maintainers of gulp and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. Learn more.InstallationFollow our Quick Start guide.RoadmapFind out about all our work-in-progress and outstanding issues at https://github.com/orgs/gulpjs/projects.DocumentationCheck out the Getting Started guide and API docs on our website!Excuse our dust! All other docs will be behind until we get everything updated. Please open an issue if something isn't working.Sample gulpfile.jsThis file will give you a taste of what gulp does.var gulp = require('gulp');var less = require('gulp-less');var babel = require('gulp-babel');var concat = require('gulp-concat');var uglify = require('gulp-uglify');var rename = require('gulp-rename');var cleanCSS = require('gulp-clean-css');var del = require('del');var paths = {  styles: {    src: 'src/styles/**/*.less',    dest: 'assets/styles/'  },  scripts: {    src: 'src/scripts/**/*.js',    dest: 'assets/scripts/'  }};/* Not all tasks need to use streams, a gulpfile is just another node program * and you can use all packages available on npm, but it must return either a * Promise, a Stream or take a callback and call it */function clean() {  // You can use multiple globbing patterns as you would with `gulp.src`,  // for example if you are using del 2.0 or above, return its promise  return del([ 'assets' ]);}/* * Define our tasks using plain functions */function styles() {  return gulp.src(paths.styles.src)    .pipe(less())    .pipe(cleanCSS())    // pass in options to the stream    .pipe(rename({      basename: 'main',      suffix: '.min'    }))    .pipe(gulp.dest(paths.styles.dest));}function scripts() {  return gulp.src(paths.scripts.src, { sourcemaps: true })    .pipe(babel())    .pipe(uglify())    .pipe(concat('main.min.js'))    .pipe(gulp.dest(paths.scripts.dest));}function watch() {  gulp.watch(paths.scripts.src, scripts);  gulp.watch(paths.styles.src, styles);}/* * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel` */var build = gulp.series(clean, gulp.parallel(styles, scripts));/* * You can use CommonJS `exports` module notation to declare tasks */exports.clean = clean;exports.styles = styles;exports.scripts = scripts;exports.watch = watch;exports.build = build;/* * Define default task that can be called by just running `gulp` from cli */exports.default = build;Use latest JavaScript version in your gulpfileMost new versions of node support most features that Babel provides, except the import/export syntax. When only that syntax is desired, rename to gulpfile.esm.js, install the esm module, and skip the Babel portion below.Node already supports a lot of ES2015+ features, but to avoid compatibility problems we suggest to install Babel and rename your gulpfile.js to gulpfile.babel.js.npm install --save-dev @babel/register @babel/core @babel/preset-envThen create a .babelrc file with the preset configuration.{  \""presets\"": [ \""@babel/preset-env\"" ]}And here's the same sample from above written in ES2015+.import gulp from 'gulp';import less from 'gulp-less';import babel from 'gulp-babel';import concat from 'gulp-concat';import uglify from 'gulp-uglify';import rename from 'gulp-rename';import cleanCSS from 'gulp-clean-css';import del from 'del';const paths = {  styles: {    src: 'src/styles/**/*.less',    dest: 'assets/styles/'  },  scripts: {    src: 'src/scripts/**/*.js',    dest: 'assets/scripts/'  }};/* * For small tasks you can export arrow functions */export const clean = () => del([ 'assets' ]);/* * You can also declare named functions and export them as tasks */export function styles() {  return gulp.src(paths.styles.src)    .pipe(less())    .pipe(cleanCSS())    // pass in options to the stream    .pipe(rename({      basename: 'main',      suffix: '.min'    }))    .pipe(gulp.dest(paths.styles.dest));}export function scripts() {  return gulp.src(paths.scripts.src, { sourcemaps: true })    .pipe(babel())    .pipe(uglify())    .pipe(concat('main.min.js'))    .pipe(gulp.dest(paths.scripts.dest));} /*  * You could even use `export as` to rename exported tasks  */function watchFiles() {  gulp.watch(paths.scripts.src, scripts);  gulp.watch(paths.styles.src, styles);}export { watchFiles as watch };const build = gulp.series(clean, gulp.parallel(styles, scripts));/* * Export a default task */export default build;Incremental BuildsYou can filter out unchanged files between runs of a task usingthe gulp.src function's since option and gulp.lastRun:const paths = {  ...  images: {    src: 'src/images/**/*.{jpg,jpeg,png}',    dest: 'build/img/'  }}function images() {  return gulp.src(paths.images.src, {since: gulp.lastRun(images)})    .pipe(imagemin())    .pipe(gulp.dest(paths.images.dest));}function watch() {  gulp.watch(paths.images.src, images);}Task run times are saved in memory and are lost when gulp exits. It will onlysave time during the watch task when running the images taskfor a second time.Want to contribute?Anyone can help make this project better - check out our Contributing guide!BackersSupport us with a monthly donation and help us continue our activities.SponsorsBecome a sponsor to get your logo on our README on Github."
82,emberjs/ember.js,https://github.com/emberjs/ember.js/blob/main/README.md,JavaScript,"              Ember.js is a JavaScript framework that greatly reduces the time, effort and resources needed to build any web application. It is focused on making you, the developer, as productive as possible by doing all the common, repetitive, yet essential, tasks involved in most web development projects.With Ember, you get all of these things:A Welcoming Community - Get the help you need, when you need it.An Enduring Foundation for your Apps - There are apps that used the first version of Ember almost a decade ago, and successfully still use Ember today.Reliability & Security - With regular LTS Releases and 30 weeks of security fixes, you can rely on Ember.js to care about the stability and security of your app.Modern JavaScript - Use modern JavaScript features that you're already familiar with like classes, decorators and generators.Documentation - Rely on top-notch documentation for each Ember version and a team that is focused on the documentation and learning experience.HTML-first Components - Start with valid, semantic HTML in your components, and layer in the functionality that you need, as you need it.Routing - Ember routes respect URLs while layering in extra functionality like rendering templates, loading data models, handling actions, and conditionally redirecting.Data Layer - Ember Data is a powerful data management tool that comes with Ember apps by default. Want to use something else? We support that, too!Flexibility Use any backend stack with your Ember apps, thanks to the flexibility of adapters and serializers.Autotracking - Ember's reactivity model makes it easier to decide what to automatically update, and when.Zero Config Apps - With strong defaults, you may never need to configure anything in your app, but the options are there if you need it!Quality Addon Ecosystem - high-quality, rated addons with the ability to search by source code. Many require no additional configuration, making it easier than ever to supercharge your apps.Find out more:WebsiteGuidesAPICommunityBlogBuildsContributionsSee CONTRIBUTING.mdCross-browser testing provided by Browserstack."
83,agalwood/Motrix,https://github.com/agalwood/Motrix/blob/master/README-CN.md,JavaScript,"Motrix        一款全能的下载工具   English | 简体中文我是个兴趣使然的桌面应用开发者🤓，利用搬砖之余开发了 Motrix。Motrix 是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链等资源。它的界面简洁易用，希望大家喜欢 👻。✈️ 去 官网 逛逛  |  📖 查看 帮助手册💽 安装稳定版GitHub 和 官网 提供了已经编译好的稳定版安装包，当然你也可以自己克隆代码编译打包。Windows建议使用安装包（Motrix-Setup-x.y.z.exe）安装 Motrix 以确保完整的体验，例如关联 torrent 文件，捕获磁力链等。如果你在 Windows 是用包管理工具来管理应用，如 Chocolatey、scoop，你可以使用它们安装 Motrix。Chocolatey感谢 @Yato 持续维护着 Motrix Chocolatey 包。要安装 Motrix，请从 命令行 或 PowerShell 中运行以下命令：# 安装choco install motrix# 升级choco upgrade motrixscoop如果你更喜欢便携版，你可以使用 scoop（需要 Windows 7+，天朝用户可能需要设置 Git 代理）安装最新便携版本的 Motrix。scoop bucket add extrasscoop install motrixmacOSmacOS 用户可以使用 brew 安装 Motrix，感谢 @Mitscherlich 的 PR。brew update && brew install motrix自动更新Motrix v1.8.0+ 版本更改了应用 BundleID ( net.agalwood.Motrix => app.motrix.native ), Motrix v1.6.11 的自动更新会因为签名不一致而失败。Motrix 安装助手将帮助您安装最新的 Motrix 应用程序。        Linux你可以下载 AppImage （适用于所有 Linux 发行版）或 snap 来安装 Motrix，更多 Linux 安装包格式请查看 GitHub/release 。Motrix 在 Linux 中首次启动可能需要使用 sudo 运行，因为可能没有创建下载会话文件的权限 (/var/cache/aria2.session)。如果你想自己通过编译源码来安装，请阅读 编译打包 部分。AppImage最新版的 Motrix AppImage 需要自己手动进执行桌面集成。请查看 AppImageLauncher 的文档进行操作。桌面集成electron-builder v21 之后，桌面集成不再是 AppImage 文件的一部分。推荐使用 AppImageLauncher 集成 AppImage。Deepin 20 Beta 用户安装 Motrix 失败的问题，请按照以下方法处理：打开终端，黏贴运行如下命令之后再次安装 Motrix。sudo apt --fix-broken installSnapMotrix 已经上架 Snapcraft ，Ubuntu 用户推荐从 Snap 商店下载。v1.5.10 提示系统托盘可能无法正常显示指示器，导致退出应用程序不方便。请取消勾选 偏好设置——基本设置——隐藏应用程序菜单（仅限Windows和Linux），点击保存并应用。然后点击 \""文件 \""菜单中的 \""退出\""，退出应用程序。请更新到 v1.5.12 及以上版本，可以使用键盘组合快捷键 Ctrl + q 快速退出应用。AUR对于 Arch Linux 用户，可以使用 aur 安装 Motrix，感谢维护者 @weearc。运行以下命令进行安装：yay -S motrixFlatpak感谢 @proletarius101 的 PR，Motrix 已经上架 Flathub，喜欢 Flatpak 的 Linux 用户可以尝试。# 安装flatpak install flathub net.agalwood.Motrix# 运行flatpak run net.agalwood.Motrix✨ 特性🕹 简洁明了的图形操作界面🦄 支持BT和磁力链任务☑️ 支持选择性下载BT部分文件📡 每天自动更新 Tracker 服务器列表🔌 UPnP & NAT-PMP 端口映射🎛 最高支持 10 个任务同时下载🚀 单任务最高支持 64 线程下载🚥 设置上传/下载限速🕶 模拟用户代理UA🔔 下载完成后通知💻 支持触控栏快捷键 (Mac 专享)🤖 常驻系统托盘，操作更加便捷📟 系统托盘速度仪表显示实时速度 (Mac 专享)🌑 深色模式🗑 移除任务时可同时删除相关文件🌍 国际化，查看已可选的语言🛠 更多特性开发中🖥 应用界面⌨️ 本地开发克隆代码git clone git@github.com:agalwood/Motrix.git安装依赖cd Motrixyarn天朝大陆用户建议使用淘宝的 npm 源yarn config set registry 'https://registry.npmmirror.com'npm config set registry 'https://registry.npmmirror.com'export ELECTRON_MIRROR='https://npm.taobao.org/mirrors/electron/'export SASS_BINARY_SITE='https://npm.taobao.org/mirrors/node-sass'Error: Electron failed to install correctly, please delete node_modules/electron and try installing againElectron 下载安装失败的问题，解决方式请参考 electron/electron#8466 (comment)开发模式yarn run dev编译打包yarn run build编译 Apple Silicon 版本yarn run build:applesilicon完成之后可以在项目的 release 目录看到编译打包好的应用文件🛠 技术栈ElectronVue + VueX + ElementAria2☑️ TODO开发计划请移步 Trello 查看🤝 参与共建 如果你有兴趣参与共同开发，欢迎 FORK 和 PR。🌍 国际化欢迎大家将 Motrix 翻译成更多的语言版本 🧐，开工之前请先阅读一下 翻译指南。KeyNameStatusarArabic✔️ @hadialqattan, @AhmedElTabaranibgБългарският език✔️ @null-nonecaCatalà✔️ @marcizhudeDeutsch✔️ @SchloemicherelΕλληνικά✔️ @Likecinemaen-USEnglish✔️esEspañol✔️ @Chofitofaفارسی✔️ @Nima-RafrFrançais✔️ @gpatarinhuHungarian✔️ @zalnaRsidIndonesia✔️ @aarestuitItaliano✔️ @blackcat-917ja日本語✔️ @hbkrkzkko한국어✔️ @KOZ39nbNorsk Bokmål✔️ @rubjonlNederlands✔️ @nickbouwhuisplPolski✔️ @KanarekLifept-BRPortuguese (Brazil)✔️ @andrenobertoroRomână✔️ @alyn3druРусский✔️ @bladeawebthแบบไทย✔️ @nxanywheretrTürkçe✔️ @abdullahukУкраїнська✔️ @bladeawebviTiếng Việt✔️ @duythanhvnzh-CN简体中文✔️zh-TW繁體中文✔️ @Yukaii @5idereal📜 开源许可基于 MIT license 许可进行开源。"
84,lyfe00011/whatsapp-bot,https://github.com/lyfe00011/whatsapp-bot/blob/master/README.md,JavaScript,"WhatsApp User BotThis is a Userbot based on WhatsAsena written by Yusuf UstaWhat is WhatsAsena?WhatsAsena, is a WhatsApp bot written by Yusuf Usta. Does not log into your account It is written on WhatsApp Web API.SetupClick SCAN and scan QR through Whatsapp Linked Devices Option in Your whatsapp App.You will get a long text that needs after 4th step (ASENA_SESSION).If You don't have a account in Heroku, Create a account.Click FORKNow DEPLOYPluginsActiveGroup commands✔️Kick✔️Tag✔️Add✔️Warn✔️Vote✔️Invite✔️Revoke✔️Demote✔️Promote✔️Banbye✔️Goodbye✔️Welcome✔️Schedule✔️Auto-mute✔️Mute/Unmute✔️Common/DiffActiveDowloader commands✔️Saavn✔️Upload✔️Yta/Ytv✔️Unsplash✔️Mediafire✔️Pinterest✔️SoundCloud✔️TikTok video✔️Twitter video✔️Facebook video✔️Instagram story✔️YouTube audio/video✔️Instagram video/imageActiveMisc CommandsUsage✔️QrReads QR code✔️SsScreenshot of web✔️UrlGets url of media✔️TrtTranslates messages✔️Mp3Video to mp3✔️TxtImage to text✔️AfkAway from keyboard✔️CutCuts mp3✔️PdfImages to pdf✔️Mp4Sticker to video✔️TakeChange sticker pack info✔️WikiWikipedia search✔️MemeText on photos✔️TrimTrims video✔️FindIt finds song✔️AttpColoured text sticker✔️AliveTo check alive or not✔️WhoisGroup or individual data✔️MovieShows Movie Info✔️MergeIt merge a videos✔️VoiceVoice to mp3✔️TopdfDocumnet ot pdf✔️EmojiEmoji to sticker✔️LydiaAuto AI chat✔️StickerPhoto/video to sticker✔️ReverseReverse audio/video✔️UnvoiceAudio to voices✔️WastedWasted logo✔️TriggedTriggered effect✔️ForwardForwarding msg using jid✔️CompressCompresses video✔️GoogleGoogle reverse image search✔️UploadDownload from Url✔️WeatherShows weather✔️GetjidsGets jids of chats✔️RemovebgRemoves background✔️SetaboutSets bio✔️SetstatusSets status✔️Pitch/low/bassAudio effects✔️Histo/vector/avesAudio to video✔️Block/unblockBlocks/unblocks members✔️BroadcastCustom Broadcasting MessagesThanks ToYusuf Usta for WhatsAsena@adiwajshing for Baileys"
85,learn-co-students/javascript-logging-lab-js-intro-000,https://github.com/learn-co-students/javascript-logging-lab-js-intro-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?Note: The test/index-test.js has great info that we want to look at, but do not edit this file otherwise you may have extra difficulty passing this lab.At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll see:describe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining two tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we go back to index.js and write something like...console.log(\""I would be a logger.\"") // get it?...we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
86,learn-co-curriculum/react-hooks-state-and-events-lab,https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab/blob/master/README.md,JavaScript,"React State LabLearning GoalsUpdate state based on eventsWork with multiple state variables togetherIntroductionIn the labs for this section, we'll be working on a grocery list app. Some ofthis app is already built out using static versions of the components. We'll beusing state and events to make our app dynamic.The components you have to work with are in the src/components folder. Startby examining these components and draw out your component hierarchy to see howdata can be passed from one component to another.In this lab, you'll update state and get more practice with the useState hook.It's recommended that you run npm start and work on this in the browserbefore running tests. Try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.DeliverablesDark Mode ToggleIn the App component, there is a button for toggling between dark mode andlight mode. Using the useState hook, create a state variable in the Appcomponent. Then, use that variable to determine if our app should be in darkmode or light mode.You will also need to add an event handler to the dark mode button, and updatestate when the button is clicked.The actual functionality of changing our app's theme is handled in CSS, so allyou have to do is set up the code to update the className of the div based onyour state variable:<div className=\""App dark\"">{/* for dark mode */}</div><div className=\""App light\"">{/* for light mode */}</div>Add to CartIn the Item component, when the user clicks the <button> element, the itemshould be added to their virtual cart. The way we'll show the user that the itemis in the cart is by changing the className on the <li> element:<li className=\""in-cart\"">{/* the item is in the cart */}</li><li className=\""\"">{/* the item is NOT in the cart */}</li>If the item is not in the cart, the <button> element's text should read \""Addto Cart\"", and if the item is in the cart, the <button> element's text shouldread \""Remove From Cart\"". Naturally, you'll also need to add state to the Itemcomponent to solve this deliverable!FilterIn the ShoppingList component, there is a <select> element that will allowus to filter the list of items by category.Use the useState hook to create a state variable called selectedCategory forkeeping track of the selected value from this <select> element. When the valueof the <select> element is changed, update state.You should also use the selectedCategory variable to determine which items todisplay in the shopping list. You'll need some way of filtering the array ofitems based on the selectedCategory.ResourcesReact Docs on useState"
87,learn-co-students/javascript-objects-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
88,automerge/automerge-classic,https://github.com/automerge/automerge-classic/blob/main/README.md,JavaScript,"Deprecation NoticeAutomerge now has a shiny new implementation at https://github.com/automerge/automerge. This repository is the original pure javascript implementation. All development effort has shifted to the new implementation which is written in Rust and so can easily be ported to other platforms.Original Readme💬 Join the Automerge Slack communityAutomerge is a library of data structures for building collaborative applications in JavaScript.Please see automerge.org for documentation.For a set of extensible examples in TypeScript, see automerge-repoSetupIf you're using npm, npm install automerge. If you're using yarn, yarn add automerge. Then youcan import it with require('automerge') as in the example below (orimport * as Automerge from 'automerge' if using ES2015 or TypeScript).Otherwise, clone this repository, and then you can use the following commands:yarn install — installs dependencies.yarn test — runs the test suite in Node.yarn run browsertest — runs the test suite in web browsers.yarn build — creates a bundled JS file dist/automerge.js for web browsers. It includes thedependencies and is set up so that you can load through a script tag.MetaCopyright 2017–2021, the Automerge contributors. Released under the terms of theMIT license (see LICENSE)."
