,repo_name,url,language,readme_content
0,nightscout/cgm-remote-monitor,https://github.com/nightscout/cgm-remote-monitor/blob/master/README.md,JavaScript,"Nightscout Web Monitor (a.k.a. cgm-remote-monitor) This acts as a web-based CGM (Continuous Glucose Monitor) to allowmultiple caregivers to remotely view a patient's glucose data inreal time.  The server reads a MongoDB which is intended to be datafrom a physical CGM, where it sends new SGV (sensor glucose values) asthe data becomes available.  The data is then displayed graphicallyand blood glucose values are predicted 0.5 hours ahead using anautoregressive second order model.  Alarms are generated for high andlow values, which can be cleared by any watcher of the data.Looking for documentation?End user?Nightscout documentation is currently split to two locations. This page lists all the configuration options inNightscout and is useful for users who've already gone through the installation process. IF you're lookingfor the documentation that looks like it's written for non-programmers, that's located at nightscout.github.io.Older documentation is available at nightscout.info.Developer?See CONTRIBUTING.md#WeAreNotWaiting and this is why.Table of ContentsInstallSupported configurations:Recommended minimum browser versions for using Nightscout:Windows installation software requirements:Installation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Installation notes for Microsoft Azure, Windows:DevelopmentUsageUpdating my version?Configure my uploader to matchNightscout APIExample QueriesEnvironmentRequiredFeaturesAlarmsCorePredefined values for your browser settings (optional)Predefined values for your server settings (optional)ViewsPluginsDefault Pluginsdelta (BG Delta)direction (BG Direction)upbat (Uploader Battery)timeago (Time Ago)devicestatus (Device Status)errorcodes (CGM Error Codes)ar2 (AR2 Forecasting)simplealarms (Simple BG Alarms)profile (Treatment Profile)Advanced Plugins:careportal (Careportal)boluscalc (Bolus Wizard)food (Custom Foods)rawbg (Raw BG)iob (Insulin-on-Board)cob (Carbs-on-Board)bwp (Bolus Wizard Preview)cage (Cannula Age)sage (Sensor Age)iage (Insulin Age)bage (Battery Age)treatmentnotify (Treatment Notifications)basal (Basal Profile)bolus (Bolus Rendering)bridge (Share2Nightscout bridge)mmconnect (MiniMed Connect bridge)pump (Pump Monitoring)openaps (OpenAPS)loop (Loop)override (Override Mode)xdripjs (xDrip-js)alexa (Amazon Alexa)googlehome (Google Home/DialogFLow)speech (Speech)cors (CORS)Extended SettingsPushoverIFTTT MakerTreatment ProfileSetting environment variablesVagrant installMore questions?Browser testing suite provided byLicenseInstallSupported configurations:If you plan to use Nightscout, we recommend using Heroku as this is free and easy to use.We used to recommend hostig at Azure, but the resource needs of Nightscout have grown over the years and Azure won't comfortably run Nightscoutanymore in the free tier. If you're hosting in Azure and looking to update your site, we recommend youswitch from Azure to Herokuas you're likely to hit issues in the process of updating the site.Nightscout Setup with Heroku (recommended)While you can install Nightscout on a virtual server or a Raspberry Pi, we do not recommend this unless you have at least someexperience hosting Node applications and development using the toolchain in use with Nightscout. Heroku automates all of thehosting for you and even many of the dvelopers run their production sites in Heroku due to convenience.If you're a hosting provider and want to provide our users additional free hosting options,you're welcome to issue a documentation pull request with instructions on how to setup Nightscout on your system.Recommended minimum browser versions for using Nightscout:Older versions of the browsers might work, but are untested.Android 4iOS 6Chrome 35Edge 17Firefox 61Opera 12.1Safari 6 (macOS 10.7)Internet Explorer: not supportedSome features may not work with devices/browsers on the older end of these requirements.Windows installation software requirements:Node.js Latest Node 12 LTS. Node versions that do not have the latest security patches will not work. Use Install instructions for Node or use bin/setup.sh)MongoDB 3.x or later. MongoDB 2.4 is only supported for Raspberry Pi.As a non-root user clone this repo then install dependencies into the root of the project:$ npm installInstallation notes for users with nginx or Apache reverse proxy for SSL/TLS offloading:Your site redirects insecure connections to https by default. If you use a reverse proxy like nginx or Apache to handle the connection security for you, make sure it sets the X-Forwarded-Proto header. Otherwise nightscout will be unable to know if it was called through a secure connection and will try to redirect you to the https version. If you're unable to set this Header, you can change the INSECURE_USE_HTTP setting in nightscout to true in order to allow insecure connections without being redirected.In case you use a proxy. Do not use an external network interfaces for hosting Nightscout. Make sure the unsecure port is not available from a remote network connectionHTTP Strict Transport Security (HSTS) headers are enabled by default, use settings SECURE_HSTS_HEADER and SECURE_HSTS_HEADER_*See Predefined values for your server settings for more detailsInstallation notes for Microsoft Azure, Windows:If deploying the software to Microsoft Azure, you must set ** in the app settings for WEBSITE_NODE_DEFAULT_VERSION and SCM_COMMAND_IDLE_TIMEOUT before you deploy the latest Nightscout or the site deployment will likely fail. Other hosting environments do not require this setting. Additionally, if using the Azure free hosting tier, the installation might fail due to resource constraints imposed by Azure on the free hosting. Please set the following settings to the environment in Azure:WEBSITE_NODE_DEFAULT_VERSION=10.15.2SCM_COMMAND_IDLE_TIMEOUT=300See install MongoDB, Node.js, and Nightscouton a single Windows system. if you want to host your Nightscout outside of the cloud. Although the instructions are intended for Windows Server the procedure is compatible with client versions of Windows such as Windows 7 and Windows 10.If you deploy to Windows and want to develop or test you need to install Cygwin (use setup-x86_64.exe and make sure to install build-essential package. Test your configuration by executing make and check if all tests are ok.DevelopmentWant to help with development, or just see how Nightscout works? Great! See CONTRIBUTING.md for development-related documentation.UsageThe data being uploaded from the server to the client is from a MongoDB server such as [MongoDB Atlas][https://www.mongodb.com].Updating my version?The easiest way to update your version of cgm-remote-monitor to the latest version is to use the update tool. A step-by-step guide is available [here][http://www.nightscout.info/wiki/welcome/how-to-update-to-latest-cgm-remote-monitor-aka-cookie].To downgrade to an older version, follow [this guide][http://www.nightscout.info/wiki/welcome/how-to-deploy-an-older-version-of-nightscout].Configure my uploader to matchUse the autoconfigure tool to sync an uploader to your config.Nightscout APIThe Nightscout API enables direct access to your data without the need for Mongo access.You can find CGM data in /api/v1/entries, Care Portal Treatments in /api/v1/treatments, and Treatment Profiles in /api/v1/profile.The server status and settings are available from /api/v1/status.json.By default the /entries and /treatments APIs limit results to the the most recent 10 values from the last 2 days.You can get many more results, by using the count, date, dateString, and created_at parameters, depending on the type of data you're looking for.Once you've installed Nightscout, you can access API documentation by loading /api-docs/ URL in your instance.Example Queries(replace http://localhost:1337 with your own URL)100's: http://localhost:1337/api/v1/entries.json?find[sgv]=100Count of 100's in a month: http://localhost:1337/api/v1/count/entries/where?find[dateString][$gte]=2016-09&find[dateString][$lte]=2016-10&find[sgv]=100BGs between 2 days: http://localhost:1337/api/v1/entries/sgv.json?find[dateString][$gte]=2015-08-28&find[dateString][$lte]=2015-08-30Juice Box corrections in a year: http://localhost:1337/api/v1/treatments.json?count=1000&find[carbs]=15&find[eventType]=Carb+Correction&find[created_at][$gte]=2015Boluses over 2U: http://localhost:1337/api/v1/treatments.json?find[insulin][$gte]=2The API is Swagger enabled, so you can generate client code to make working with the API easy.To learn more about the Nightscout API, visit https://YOUR-SITE.com/api-docs/ or review swagger.yaml.EnvironmentVARIABLE (default) - descriptionRequiredMONGODB_URI - The connection string for your Mongo database. Something like mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout.API_SECRET - A secret passphrase that must be at least 12 characters long.MONGODB_COLLECTION (entries) - The Mongo collection where CGM entries are stored.DISPLAY_UNITS (mg/dl) - Options are mg/dl or mmol/L (or just mmol).  Setting to mmol/L puts the entire server into mmol/L mode by default, no further settings needed.FeaturesENABLE - Used to enable optional features, expects a space delimited list, such as: careportal rawbg iob, see plugins belowDISABLE - Used to disable default features, expects a space delimited list, such as: direction upbat, see plugins belowBASE_URL - Used for building links to your site's API, i.e. Pushover callbacks, usually the URL of your Nightscout site.AUTH_DEFAULT_ROLES (readable) - possible values readable, denied, or any valid rolename.  When readable, anyone can view Nightscout without a token.Setting it to denied will require a token from every visit, using status-only will enable api-secret based login.IMPORT_CONFIG - Used to import settings and extended settings from a url such as a gist.  Structure of file should be something like: {\""settings\"": {\""theme\"": \""colors\""}, \""extendedSettings\"": {\""upbat\"": {\""enableAlerts\"": true}}}TREATMENTS_AUTH (on) - possible values on or off. Deprecated, if set to off the careportal role will be added to AUTH_DEFAULT_ROLESAlarmsThese alarm setting affect all delivery methods (browser, Pushover, IFTTT, etc.). Values and settings entered here will be the defaults for new browser views, but will be overridden if different choices are made in the settings UI.ALARM_TYPES (simple if any BG_* ENV's are set, otherwise predict) - currently 2 alarm types are supported, and can be used independently or combined.  The simple alarm type only compares the current BG to BG_ thresholds above, the predict alarm type uses highly tuned formula that forecasts where the BG is going based on it's trend.  predict DOES NOT currently use any of the BG_* ENV'sBG_HIGH (260) - the high BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)BG_TARGET_TOP (180) - the top of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_TARGET_BOTTOM (80) - the bottom of the target range, also used to draw the line on the chart (interprets units based on DISPLAY_UNITS setting)BG_LOW (55) - the low BG outside the target range that is considered urgent (interprets units based on DISPLAY_UNITS setting)ALARM_URGENT_HIGH (on) - possible values on or offALARM_URGENT_HIGH_MINS (30 60 90 120) - Number of minutes to snooze urgent high alarms, space separated for options in browser, first used for pushoverALARM_HIGH (on) - possible values on or offALARM_HIGH_MINS (30 60 90 120) - Number of minutes to snooze high alarms, space separated for options in browser, first used for pushoverALARM_LOW (on) - possible values on or offALARM_LOW_MINS (15 30 45 60) - Number of minutes to snooze low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_LOW (on) - possible values on or offALARM_URGENT_LOW_MINS (15 30 45) - Number of minutes to snooze urgent low alarms, space separated for options in browser, first used for pushoverALARM_URGENT_MINS (30 60 90 120) - Number of minutes to snooze urgent alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverALARM_WARN_MINS (30 60 90 120) - Number of minutes to snooze warning alarms (that aren't tagged as high or low), space separated for options in browser, first used for pushoverCoreMONGO_TREATMENTS_COLLECTION (treatments) -The collection used to store treatments entered in the Care Portal, see the ENABLE env var aboveMONGO_DEVICESTATUS_COLLECTION(devicestatus) - The collection used to store device status information such as uploader batteryMONGO_PROFILE_COLLECTION(profile) - The collection used to store your profilesMONGO_FOOD_COLLECTION(food) - The collection used to store your food databaseMONGO_ACTIVITY_COLLECTION(activity) - The collection used to store activity dataPORT (1337) - The port that the node.js application will listen on.HOSTNAME - The hostname that the node.js application will listen on, null by default for any hostname for IPv6 you may need to use ::.SSL_KEY - Path to your ssl key file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to your privkey.pem file (private key).SSL_CERT - Path to your ssl cert file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to fullchain.pem file (cert + ca).SSL_CA - Path to your ssl ca file, so that ssl(https) can be enabled directly in node.js. If using Let's Encrypt, make this variable the path to chain.pem file (chain).HEARTBEAT (60)  - Number of seconds to wait in between database checksDEBUG_MINIFY (true)  - Debug option, setting to false will disable bundle minification to help tracking down error and speed up developmentDE_NORMALIZE_DATES(true) - The Nightscout REST API normalizes all entered dates to UTC zone. Some Nightscout clients have broken date deserialization logic and expect to received back dates in zoned formats. Setting this variable to true causes the REST API to serialize dates sent to Nightscout in zoned format back to zoned format when served to clients over REST.Predefined values for your browser settings (optional)TIME_FORMAT (12)- possible values 12 or 24DAY_START (7.0) - time for start of day (0.0 - 24.0) for features using day time / night time optionsDAY_END (21.0) - time for end of day (0.0 - 24.0) for features using day time / night time optionsNIGHT_MODE (off) - possible values on or offSHOW_RAWBG (never) - possible values always, never or noiseCUSTOM_TITLE (Nightscout) - Title for the main viewTHEME (colors) - possible values default, colors, or colorblindfriendlyALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmSHOW_PLUGINS - enabled plugins that should have their visualizations shown, defaults to all enabledSHOW_FORECAST (ar2) - plugin forecasts that should be shown by default, supports space delimited values such as \""ar2 openaps\""LANGUAGE (en) - language of Nightscout. If not available english is usedCurrently supported language codes are: bg (Български), cs (Čeština), de (Deutsch), dk (Dansk), el (Ελληνικά), en (English), es (Español), fi (Suomi), fr (Français), he (עברית), hr (Hrvatski), hu (magyar), it (Italiano), ko (한국어), nb (Norsk (Bokmål)), nl (Nederlands), pl (Polski), pt (Português (Brasil)), ro (Română), ru (Русский), sk (Slovenčina), sv (Svenska), tr (Turkish), zh_cn (中文（简体)), zh_tw (中文（繁體))SCALE_Y (log) - The type of scaling used for the Y axis of the charts system wide.The default log (logarithmic) option will let you see more detail towards the lower range, while still showing the full CGM range.The linear option has equidistant tick marks; the range used is dynamic so that space at the top of chart isn't wasted.The log-dynamic is similar to the default log options, but uses the same dynamic range and the linear scale.EDIT_MODE (on) - possible values on or off. Enables the icon allowing for editing of treatments in the main view.Predefined values for your server settings (optional)INSECURE_USE_HTTP (false) - Redirect unsafe http traffic to https. Possible values false, or true. Your site redirects to https by default. If you don't want that from Nightscout, but want to implement that with a Nginx or Apache proxy, set INSECURE_USE_HTTP to true. Note: This will allow (unsafe) http traffic to your Nightscout instance and is not recommended.SECURE_HSTS_HEADER (true) - Add HTTP Strict Transport Security (HSTS) header. Possible values false, or true.SECURE_HSTS_HEADER_INCLUDESUBDOMAINS (false) - includeSubdomains options for HSTS. Possible values false, or true.SECURE_HSTS_HEADER_PRELOAD (false) - ask for preload in browsers for HSTS. Possible values false, or true.SECURE_CSP (false) - Add Content Security Policy headers. Possible values false, or true.SECURE_CSP_REPORT_ONLY (false) - If set to true allows to experiment with policies by monitoring (but not enforcing) their effects. Possible values false, or true.ViewsNightscout allows to create custom, simplified views using a predefined set of elements. This option is available under [+] link in the main menu.List of available items:SGV - Sensor Glucose ValueSGV age - time since the last SGV readSGV delta - change of SGV in the last 5 minutesTrend arrow - icon of the SG trendTime - current timeLine break - invisible item that will move following items to the next line (by default all are showing on the same level)All visible items have Size property which allows to customize the view even more. Also, all items may appear multiple times on the view.Apart from adding items, it is possible to customize other aspects of the views, like selecting Color or Black background. The first one will indicate current BG threshold (green = in range; blue = below range; yellow = above range; red = urgent below/above).Show SGV age option will make SGV age item appear Always or only if the predefined threshold is reached: Only after threshold. Breaching SGV age threshold will also make Color background turn grey and strike through SGV.Clock view configurator will generate an URL (available under Open my clock view! link) that could be bookmarked.There are a few default views available from the main menu:Clock - Shows current BG, trend arrow, and time of day. Grey text on a black background.Color - Shows current BG and trend arrow. White text on a color background.Simple - Shows current BG. Grey text on a black background.If you launch one of these views in a fullscreen view in iOS, you can use a left-to-right swipe gesture to exit the view.Split ViewSome users will need easy access to multiple Nightscout views at the same time. We have a special view for this case, accessed on /split path on your Nightscout URL. The view supports any number of sites between 1 to 8 way split, where the content for the screen can be loaded from multiple Nightscout instances. Note you still need to host separate instances for each Nightscout being monitored including the one that hosts the split view page - these variables only add the ability to load multiple views into one browser page. To set the URLs from which the content is loaded, set:FRAME_URL_1 - URL where content is loaded, for the first view (increment the number up to 8 to get more views)FRAME_NAME_1 - Name for the first split view portion of the screen (increment the number to name more views)PluginsPlugins are used extend the way information is displayed, how notifications are sent, alarms are triggered, and more.The built-in/example plugins that are available by default are listed below.  The plugins may still need to be enabled by adding to the ENABLE environment variable.Default PluginsThese can be disabled by adding them to the DISABLE variable, for example DISABLE=\""direction upbat\""delta (BG Delta)Calculates and displays the change between the last 2 BG values.direction (BG Direction)Displays the trend direction.upbat (Uploader Battery)Displays the most recent battery status from the uploader phone. . Use these extended setting to adjust behavior:UPBAT_ENABLE_ALERTS (false) - Set to true to enable uploader battery alarms via Pushover and IFTTT.UPBAT_WARN (30) - Minimum battery percent to trigger warning.UPBAT_URGENT (20) - Minimum battery percent to trigger urgent alarm.timeago (Time Ago)Displays the time since last CGM entry. Use these extended setting to adjust behavior:TIMEAGO_ENABLE_ALERTS (false) - Set to true to enable stale data alarms via Pushover and IFTTT.ALARM_TIMEAGO_WARN (on) - possible values on or offALARM_TIMEAGO_WARN_MINS (15) - minutes since the last reading to trigger a warningALARM_TIMEAGO_URGENT (on) - possible values on or offALARM_TIMEAGO_URGENT_MINS (30) - minutes since the last reading to trigger a urgent alarmdevicestatus (Device Status)Used by upbat and other plugins to display device status info.  Supports the DEVICESTATUS_ADVANCED=\""true\"" extended setting to send all device statuses to the client for retrospective use and to support other plugins.errorcodes (CGM Error Codes)Generates alarms for CGM codes 9 (hourglass) and 10 (???).Use extended settings to adjust what errorcodes trigger notifications and alarms:ERRORCODES_INFO (1 2 3 4 5 6 7 8) - By default the needs calibration (blood drop) and other codes below 9 generate an info level notification, set to a space separate list of number or off to disableERRORCODES_WARN (off) - By default there are no warning configured, set to a space separate list of numbers or off to disableERRORCODES_URGENT (9 10) - By default the hourglass and ??? generate an urgent alarm, set to a space separate list of numbers or off to disablear2 (AR2 Forecasting)Generates alarms based on forecasted values. See Forecasting using AR2 algorithmEnabled by default if no thresholds are set OR ALARM_TYPES includes predict.Use extended settings to adjust AR2 behavior:AR2_CONE_FACTOR (2) - to adjust size of cone, use 0 for a single line.simplealarms (Simple BG Alarms)Uses BG_HIGH, BG_TARGET_TOP, BG_TARGET_BOTTOM, BG_LOW thresholds to generate alarms.Enabled by default if 1 of these thresholds is set OR ALARM_TYPES includes simple.profile (Treatment Profile)Add link to Profile Editor and allow to enter treatment profile settings. Also uses the extended setting:PROFILE_HISTORY (off) - possible values on or off. Enable/disable NS ability to keep history of your profiles (still experimental)PROFILE_MULTIPLE (off) - possible values on or off. Enable/disable NS ability to handle and switch between multiple treatment profilesAdvanced Plugins:careportal (Careportal)An optional form to enter treatments.boluscalc (Bolus Wizard)food (Custom Foods)An option plugin to enable adding foods from database in Bolus Wizard and enable .rawbg (Raw BG)Calculates BG using sensor and calibration records from and displays an alternate BG values and noise levels. Defaults that can be adjusted with extended settingDISPLAY (unsmoothed) - Allows the user to control which algorithm is used to calculate the displayed raw BG values using the most recent calibration record.unfiltered - Raw BG is calculated by applying the calibration to the glucose record's unfiltered value.filtered - Raw BG is calculated by applying the calibration to the glucose record's filtered value. The glucose record's filtered values are generally produced by the CGM by a running average of the unfiltered values to produce a smoothed value when the sensor noise is high.unsmoothed - Raw BG is calculated by first finding the ratio of the calculated filtered value (the same value calculated by the filtered setting) to the reported glucose value. The displayed raw BG value is calculated by dividing the calculated unfiltered value (the same value calculated by the unfiltered setting) by the ratio.  The effect is to exagerate changes in trend direction so the trend changes are more noticeable to the user. This is the legacy raw BG calculation algorithm.iob (Insulin-on-Board)Adds the IOB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with insulin doses and the dia and sens fields from the treatment profile.cob (Carbs-on-Board)Adds the COB pill visualization in the client and calculates values that used by other plugins.  Uses treatments with carb doses and the carbs_hr, carbratio, and sens fields from the treatment profile.bwp (Bolus Wizard Preview)This plugin in intended for the purpose of automatically snoozing alarms when the CGM indicates high blood sugar but there is also insulin on board (IOB) and secondly, alerting to user that it might be beneficial to measure the blood sugar using a glucometer and dosing insulin as calculated by the pump or instructed by trained medicare professionals. The values provided by the plugin are provided as a reference based on CGM data and insulin sensitivity you have configured, and are not intended to be used as a reference for bolus calculation. The plugin calculates the bolus amount when above your target, generates alarms when you should consider checking and bolusing, and snoozes alarms when there is enough IOB to cover a high BG. Uses the results of the iob plugin and sens, target_high, and target_low fields from the treatment profile. Defaults that can be adjusted with extended settingBWP_WARN (0.50) - If BWP is > BWP_WARN a warning alarm will be triggered.BWP_URGENT (1.00) - If BWP is > BWP_URGENT an urgent alarm will be triggered.BWP_SNOOZE_MINS (10) - minutes to snooze when there is enough IOB to cover a high BG.BWP_SNOOZE - (0.10) If BG is higher then the target_high and BWP < BWP_SNOOZE alarms will be snoozed for BWP_SNOOZE_MINS.cage (Cannula Age)Calculates the number of hours since the last Site Change treatment that was recorded.CAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming cannula change.CAGE_INFO (44) - If time since last Site Change matches CAGE_INFO, user will be warned of upcoming cannula changeCAGE_WARN (48) - If time since last Site Change matches CAGE_WARN, user will be alarmed to to change the cannulaCAGE_URGENT (72) - If time since last Site Change matches CAGE_URGENT, user will be issued a persistent warning of overdue change.CAGE_DISPLAY (hours) - Possible values are 'hours' or 'days'. If 'days' is selected and age of canula is greater than 24h number is displayed in days and hourssage (Sensor Age)Calculates the number of days and hours since the last Sensor Start and Sensor Change treatment that was recorded.SAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming sensor change.SAGE_INFO (144) - If time since last sensor event matches SAGE_INFO, user will be warned of upcoming sensor changeSAGE_WARN (164) - If time since last sensor event matches SAGE_WARN, user will be alarmed to to change/restart the sensorSAGE_URGENT (166) - If time since last sensor event matches SAGE_URGENT, user will be issued a persistent warning of overdue change.iage (Insulin Age)Calculates the number of days and hours since the last Insulin Change treatment that was recorded.IAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming insulin reservoir change.IAGE_INFO (44) - If time since last Insulin Change matches IAGE_INFO, user will be warned of upcoming insulin reservoir changeIAGE_WARN (48) - If time since last Insulin Change matches IAGE_WARN, user will be alarmed to to change the insulin reservoirIAGE_URGENT (72) - If time since last Insulin Change matches IAGE_URGENT, user will be issued a persistent warning of overdue change.bage (Battery Age)Calculates the number of days and hours since the last Pump Battery Change treatment that was recorded.BAGE_ENABLE_ALERTS (false) - Set to true to enable notifications to remind you of upcoming pump battery change.BAGE_DISPLAY (days) - Set to hours to display time since last Pump Battery Change in hours only.BAGE_INFO (312) - If time since last Pump Battery Change matches BAGE_INFO hours, user will be warned of upcoming pump battery change (default of 312 hours is 13 days).BAGE_WARN (336) - If time since last Pump Battery Change matches BAGE_WARN hours, user will be alarmed to to change the pump battery (default of 336 hours is 14 days).BAGE_URGENT (360) - If time since last Pump Battery Change matches BAGE_URGENT hours, user will be issued a persistent warning of overdue change (default of 360 hours is 15 days).treatmentnotify (Treatment Notifications)Generates notifications when a treatment has been entered and snoozes alarms minutes after a treatment.TREATMENTNOTIFY_SNOOZE_MINS (10) - Number of minutes to snooze notifications after a treatment is enteredTREATMENTNOTIFY_INCLUDE_BOLUSES_OVER (0) - U value over which the bolus will trigger a notification and snooze alarmsbasal (Basal Profile)Adds the Basal pill visualization to display the basal rate for the current time.  Also enables the bwp plugin to calculate correction temp basal suggestions.  Uses the basal field from the treatment profile. Also uses the extended setting:BASAL_RENDER (none) - Possible values are none, default, or icicle (inverted)bolus (Bolus Rendering)Settings to configure Bolus renderingBOLUS_RENDER_OVER (0) - U value over which the bolus labels use the format defined in BOLUS_RENDER_FORMAT. This value can be an integer or a float, e.g. 0.3, 1.5, 2, etc.BOLUS_RENDER_FORMAT (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).BOLUS_RENDER_FORMAT_SMALL (default) - Possible values are hidden, default (with leading zero and U), concise (with U, without leading zero), and minimal (without leading zero and U).bridge (Share2Nightscout bridge)Glucose reading directly from the Dexcom Share service, uses these extended settings:BRIDGE_USER_NAME - Your username for the Share service.BRIDGE_PASSWORD - Your password for the Share service.BRIDGE_INTERVAL (150000 2.5 minutes) - The time (in milliseconds) to wait between each update.BRIDGE_MAX_COUNT (1) - The number of records to attempt to fetch per update.BRIDGE_FIRST_FETCH_COUNT (3) - Changes max count during the very first update only.BRIDGE_MAX_FAILURES (3) - How many failures before giving up.BRIDGE_MINUTES (1400) - The time window to search for new data per update (the default value is one day in minutes).BRIDGE_SERVER (``) - The default blank value is used to fetch data from Dexcom servers in the US. Set to (EU) to fetch from European servers instead.mmconnect (MiniMed Connect bridge)Transfer real-time MiniMed Connect data from the Medtronic CareLink server into Nightscout (read more)MMCONNECT_USER_NAME - Your user name for CareLink Connect.MMCONNECT_PASSWORD - Your password for CareLink Connect.MMCONNECT_INTERVAL (60000 1 minute) - Number of milliseconds to wait between requests to the CareLink server.MMCONNECT_MAX_RETRY_DURATION (32) - Maximum number of total seconds to spend retrying failed requests before giving up.MMCONNECT_SGV_LIMIT (24) - Maximum number of recent sensor glucose values to send to Nightscout on each request.MMCONNECT_VERBOSE - Set this to \""true\"" to log CareLink request information to the console.MMCONNECT_STORE_RAW_DATA - Set this to \""true\"" to store raw data returned from CareLink as type: \""carelink_raw\"" database entries (useful for development).MMCONNECT_SERVER - Set this to EU if you're using the European Medtronic servicespump (Pump Monitoring)Generic Pump Monitoring for OpenAPS, MiniMed Connect, RileyLink, t:slim, with more on the wayRequires DEVICESTATUS_ADVANCED=\""true\"" to be setPUMP_ENABLE_ALERTS (false) - Set to true to enable notifications for Pump battery and reservoir.PUMP_WARN_ON_SUSPEND (false) - Set to true to get an alarm when the pump is suspended.PUMP_FIELDS (reservoir battery) - The fields to display by default.  Any of the following fields: reservoir, battery, clock, status, and devicePUMP_RETRO_FIELDS (reservoir battery clock) - The fields to display in retro mode. Any of the above fields.PUMP_WARN_CLOCK (30) - The number of minutes ago that needs to be exceed before an alert is triggered.PUMP_URGENT_CLOCK (60) - The number of minutes ago that needs to be exceed before an urgent alarm is triggered.PUMP_WARN_RES (10) - The number of units remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_RES (5) - The number of units remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_P (30) - The % of the pump battery remaining, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_P (20) - The % of the pump battery remaining, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_V (1.35) - The voltage (if percent isn't available) of the pump battery, a warning will be triggered when dropping below this threshold.PUMP_URGENT_BATT_V (1.30) - The  voltage (if percent isn't available) of the pump battery, an urgent alarm will be triggered when dropping below this threshold.PUMP_WARN_BATT_QUIET_NIGHT (false) - Do not generate battery alarms at night.openaps (OpenAPS)Integrated OpenAPS loop monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setOPENAPS_ENABLE_ALERTS (false) - Set to true to enable notifications when OpenAPS isn't looping.  If OpenAPS is going to offline for a period of time, you can add an OpenAPS Offline event for the expected duration from Careportal to avoid getting alerts.OPENAPS_WARN (30) - The number of minutes since the last loop that needs to be exceed before an alert is triggeredOPENAPS_URGENT (60) - The number of minutes since the last loop that needs to be exceed before an urgent alarm is triggeredOPENAPS_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display by default.  Any of the following fields: status-symbol, status-label, iob, meal-assist, freq, and rssiOPENAPS_RETRO_FIELDS (status-symbol status-label iob meal-assist rssi) - The fields to display in retro mode. Any of the above fields.OPENAPS_PRED_IOB_COLOR (#1e88e5) - The color to use for IOB prediction lines. Colors can be in #RRGGBB format, but other CSS color units may be used as well.OPENAPS_PRED_COB_COLOR (#FB8C00) - The color to use for COB prediction lines. Same format as above.OPENAPS_PRED_ACOB_COLOR (#FB8C00) - The color to use for ACOB prediction lines. Same format as above.OPENAPS_PRED_ZT_COLOR (#00d2d2) - The color to use for ZT prediction lines. Same format as above.OPENAPS_PRED_UAM_COLOR (#c9bd60) - The color to use for UAM prediction lines. Same format as above.OPENAPS_COLOR_PREDICTION_LINES (true) - Enables / disables the colored lines vs the classic purple color.Also see Pushover and IFTTT Maker.loop (Loop)iOS Loop app monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setLOOP_ENABLE_ALERTS (false) - Set to true to enable notifications when Loop isn't looping.LOOP_WARN (30) - The number of minutes since the last loop that needs to be exceeded before an alert is triggeredLOOP_URGENT (60) - The number of minutes since the last loop that needs to be exceeded before an urgent alarm is triggeredAdd loop to SHOW_FORECAST to show forecasted BG.For remote overrides, the following extended settings must be configured:LOOP_APNS_KEY - Apple Push Notifications service (APNs) Key, created in the Apple Developer website.LOOP_APNS_KEY_ID - The Key ID for the above key.LOOP_DEVELOPER_TEAM_ID - Your Apple developer team ID.LOOP_PUSH_SERVER_ENVIRONMENT - (optional) Set this to production if you are using a provisioning profile that specifies production aps-environment, such as when distributing builds via TestFlight.override (Override Mode)Additional monitoring for DIY automated insulin delivery systems to display real-time overrides such as Eating Soon or Exercise Mode:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setxdripjs (xDrip-js)Integrated xDrip-js monitoring, uses these extended settings:Requires DEVICESTATUS_ADVANCED=\""true\"" to be setXDRIPJS_ENABLE_ALERTS (false) - Set to true to enable notifications when CGM state is not OK or battery voltages fall below threshold.XDRIPJS_STATE_NOTIFY_INTRVL (0.5) - Set to number of hours between CGM state notificationsXDRIPJS_WARN_BAT_V (300) - The voltage of either transmitter battery, a warning will be triggered when dropping below this threshold.alexa (Amazon Alexa)Integration with Amazon Alexa, detailed setup instructionsgooglehome (Google Home/DialogFLow)Integration with Google Home (via DialogFlow), detailed setup instructionsspeech (Speech)Speech synthesis plugin. When enabled, speaks out the blood glucose values, IOB and alarms. Note you have to set the LANGUAGE setting on the server to get all translated alarms.cors (CORS)Enabled CORS so other websites can make request to your Nightscout site, uses these extended settings:CORS_ALLOW_ORIGIN (*) - The list of sites that are allow to make requestsdbsize (Database Size)Show size of Nightscout Database, as a percentage of declared available space or in MiB.Many deployments of Nightscout use free tier of MongoDB Atlas on Heroku, which is limited in size. After some time, as volume of stored data grows, it may happen that this limit is reached and system is unable to store new data. This plugin provides pill that indicates size of Database and shows (when configured) alarms regarding reaching space limit.IMPORTANT: This plugin can only check how much space database already takes, but cannot infer max size available on server for it. To have correct alarms and realistic percentage, DBSIZE_MAX need to be properly set - according to your mongoDB hosting configuration.NOTE: This plugin rely on db.stats() for reporting logical size of database, which may be different than physical size of database on server. It may work for free tier of MongoDB on Atlas, since it calculate quota according to logical size too, but may fail for other hostings or self-hosted database with quota based on physical size.NOTE: MongoDB Atlas quota is for all databases in cluster, while each instance will get only size of its own database only. It is ok when you only have one database in cluster (most common scenario) but will not work for multiple parallel databases. In such case, spliting known quota equally beetween databases and setting DBSIZE_MAX to that fraction may help, but wont be precise.All sizes are expressed as integers, in Mebibytes 1 MiB == 1024 KiB == 1024*1024 BDBSIZE_MAX (496) - Maximal allowed size of database on your mongoDB server, in MiB. You need to adjust that value to match your database hosting limits - default value is for standard Heroku mongoDB free tier.DBSIZE_WARN_PERCENTAGE (60) - Threshold to show first warning about database size. When database reach this percentage of DBSIZE_MAX size - pill will show size in yellow.DBSIZE_URGENT_PERCENTAGE (75) - Threshold to show urgent warning about database size. When database reach this percentage of DBSIZE_MAX size, it is urgent to do backup and clean up old data. At this percentage info pill turns red.DBSIZE_ENABLE_ALERTS (false) - Set to true to enable notifications about database size.DBSIZE_IN_MIB (false) - Set to true to display size of database in MiB-s instead of default percentage.This plugin should be enabled by default, if needed can be diasabled by adding dbsize to the list of disabled plugins, for example: DISABLE=\""dbsize\"".Extended SettingsSome plugins support additional configuration using extra environment variables.  These are prefixed with the name of the plugin and a _.  For example setting MYPLUGIN_EXAMPLE_VALUE=1234 would make extendedSettings.exampleValue available to the MYPLUGIN plugin.Plugins only have access to their own extended settings, all the extended settings of client plugins will be sent to the browser.DEVICESTATUS_ADVANCED (true) - Defaults to true. Users who only have a single device uploading data to Nightscout can set this to false to reduce the data use of the site.DEVICESTATUS_DAYS (1) - Defaults to 1, can optionally be set to 2. Users can use this to show 48 hours of device status data for in retro mode, rather than the default 24 hours. Setting this value to 2 will roughly double the bandwidth usage of nightscout, so users with a data cap may not want to update this setting.PushoverIn addition to the normal web based alarms, there is also support for Pushover based alarms and notifications.To get started install the Pushover application on your iOS or Android device and create an account.Using that account login to Pushover, in the top left you’ll see your User Key, you’ll need this plus an application API Token/Key to complete this setup.You’ll need to Create a Pushover Application.  You only need to set the Application name, you can ignore all the other settings, but setting an Icon is a nice touch.  Maybe you'd like to use this one?Pushover is configured using the following Environment Variables:* `ENABLE` - `pushover` should be added to the list of plugin, for example: `ENABLE=\""pushover\""`.* `PUSHOVER_API_TOKEN` - Used to enable pushover notifications, this token is specific to the application you create from in [Pushover](https://pushover.net/), ***[additional pushover information](#pushover)*** below.* `PUSHOVER_USER_KEY` - Your Pushover user key, can be found in the top left of the [Pushover](https://pushover.net/) site, this can also be a pushover delivery group key to send to a group rather than just a single user.  This also supports a space delimited list of keys.  To disable `INFO` level pushes set this to `off`.* `PUSHOVER_ALARM_KEY` - An optional Pushover user/group key, will be used for system wide alarms (level > `WARN`).  If not defined this will fallback to `PUSHOVER_USER_KEY`.  A possible use for this is sending important messages and alarms to a CWD that you don't want to send all notification too.  This also support a space delimited list of keys.  To disable Alarm pushes set this to `off`.* `PUSHOVER_ANNOUNCEMENT_KEY` - An optional Pushover user/group key, will be used for system wide user generated announcements.  If not defined this will fallback to `PUSHOVER_USER_KEY` or `PUSHOVER_ALARM_KEY`.  This also support a space delimited list of keys. To disable Announcement pushes set this to `off`.* `BASE_URL` - Used for pushover callbacks, usually the URL of your Nightscout site, use https when possible.* `API_SECRET` - Used for signing the pushover callback request for acknowledgments.If you never want to get info level notifications (treatments) use `PUSHOVER_USER_KEY=\""off\""`If you never want to get an alarm via pushover use `PUSHOVER_ALARM_KEY=\""off\""`If you never want to get an announcement via pushover use `PUSHOVER_ANNOUNCEMENT_KEY=\""off\""`If only `PUSHOVER_USER_KEY` is set it will be used for all info notifications, alarms, and announcementsFor testing/development try [localtunnel](http://localtunnel.me/).IFTTT MakerIn addition to the normal web based alarms, and pushover, there is also integration for IFTTT Webhooks.With Maker you are able to integrate with all the other IFTTT Services.  For example you can send a tweet when there is an alarm, change the color of hue light, send an email, send and sms, and so much more.Setup IFTTT account: login or create an accountFollow the  Detailed IFTTT setup InstructionsConfigure Nightscout by setting these webpage environment variables:ENABLE - maker should be added to the list of plugins, for example: ENABLE=\""maker\"".MAKER_KEY - Set this to your secret key (see  [Detailed Instructions ) MAKER_KEY=\""abcMyExampleabc123defjt1DeNSiftttmak-XQb69p\"" This also supports a space delimited list of keys.MAKER_ANNOUNCEMENT_KEY - An optional Maker key, will be used for system wide user generated announcements.  If not defined this will fallback to MAKER_KEY.  A possible use for this is sending important messages and alarms to another device that you don't want to send all notification too.  This also support a space delimited list of keys.Plugins can create custom events, but all events sent to IFTTT webhooks will be prefixed with ns-.  The core events are:ns-event - This event is sent to the maker service for all alarms and notifications.  This is good catch all event for general logging.ns-allclear - This event is sent to the maker service when an alarm has been ack'd or when the server starts up without triggering any alarms.  For example, you could use this event to turn a light to green.ns-info - Plugins that generate notifications at the info level will cause this event to also be triggered.  It will be sent in addition to ns-event.ns-warning - Alarms at the warning level with cause this event to also be triggered.  It will be sent in addition to ns-event.ns-urgent - Alarms at the urgent level with cause this event to also be triggered.  It will be sent in addition to ns-event.see the full list of eventsTreatment ProfileSome of the plugins make use of a treatment profile that can be edited using the Profile Editor, see the link in the Settings drawer on your site.Treatment Profile Fields:timezone (Time Zone) - time zone local to the patient. Should be set.units (Profile Units) - blood glucose units used in the profile, either \""mg/dl\"" or \""mmol\""dia (Insulin duration) - value should be the duration of insulin action to use in calculating how much insulin is left active. Defaults to 3 hours.carbs_hr (Carbs per Hour) - The number of carbs that are processed per hour, for more information see #DIYPS.carbratio (Carb Ratio) - grams per unit of insulin.sens (Insulin sensitivity) How much one unit of insulin will normally lower blood glucose.basal The basal rate set on the pump.target_high - Upper target for correction boluses.target_low - Lower target for correction boluses.Some example profiles are here.Setting environment variablesEasy to emulate on the commandline:    echo 'MONGO_CONNECTION=mongodb://sally:sallypass@ds099999.mongolab.com:99999/nightscout' >> my.env    echo 'MONGO_COLLECTION=entries' >> my.envFrom now on you can run using    $ (eval $(cat my.env | sed 's/^/export /') && PORT=1337 node server.js)Your hosting provider probably has a way to set these through their GUI.Vagrant installOptionally, use Vagrant with theincluded Vagrantfile and bin/setup.sh to install OS and node packages toa virtual machine.host$ vagrant uphost$ vagrant sshvm$ ./bin/setup.shThe setup script will install OS packages then run npm install.The Vagrant VM serves to your host machine only on 192.168.33.10, you can accessthe web interface on http://192.168.33.10:1337More questions?Feel free to post an issue, but read the wiki first.Browser testing suite provided byLicensecgm-remote-monitor - web app to broadcast cgm readingsCopyright (C) 2017 Nightscout contributors.  See the COPYRIGHT fileat the root directory of this distribution and athttps://github.com/nightscout/cgm-remote-monitor/blob/master/COPYRIGHTThis program is free software: you can redistribute it and/or modifyit under the terms of the GNU Affero General Public License as publishedby the Free Software Foundation, either version 3 of the License, or(at your option) any later version.This program is distributed in the hope that it will be useful,but WITHOUT ANY WARRANTY; without even the implied warranty ofMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See theGNU Affero General Public License for more details.You should have received a copy of the GNU Affero General Public Licensealong with this program.  If not, see <http://www.gnu.org/licenses/>."
1,trekhleb/javascript-algorithms,https://github.com/trekhleb/javascript-algorithms/blob/master/README.ar-AR.md,JavaScript,"جافا سكريبت خوارزميات  وهياكل البياناتتحتوي هذا مقالة على أمثلة عديدة تستند إلى الخوارزميات الشائعة وهياكل البيانات في الجافا سكريبت.كل خوارزمية وهياكل البيانات لها برنامج README منفصل خاص بهامع التفسيرات والروابط ذات الصلة لمزيد من القراءة (بما في ذلك تلكإلى مقاطع فيديو YouTube).اقرأ هذا في لغات أخرى:简体中文,繁體中文,한국어,日本語,Polski,Français,Español,Português,Русский,Türk,Italiana,Tiếng Việt,Deutsch☝ ملاحضة هذا المشروع مخصص للاستخدام لأغراض التعلم والبحثفقط ، و ** ليست ** معدة للاستخدام في الإنتاجهياكل البياناتهياكل البيانات هي طريقة خاصة لتنظيم البيانات وتخزينها في جهاز الكمبيوتر بحيثيمكن الوصول إليها وتعديلها بكفاءة. بتعبير أدق ، هيكل البيانات هو مجموعة من البياناتالقيم والعلاقات فيما بينها والوظائف أو العمليات التي يمكن تطبيقها عليهاالبيانات.B - مبتدئ, A - المتقدمةB قائمة مرتبطةB قائمة مرتبطة بشكل مضاعفB طابور, QueueB كومةB جدول التجزئةB كومة -الحد الأقصى والحد الأدنى من إصدارات الكومةB طابور الأولويةA تريA شجرةA شجرة البحث الثنائيةA شجرة AVLA شجرة الأحمر والأسودA شجرة القطعة - مع أمثلة على استفسارات النطاق الأدنى / الأقصى / المجموعA شجرة فينويك (شجرة ثنائية مفهرسة)A Graph (كلاهما موجه وغير موجه)A مجموعة منفصلةA مرشح بلومالخوارزمياتالخوارزمية هي تحديد لا لبس فيه لكيفية حل فئة من المشاكل. أنهمجموعة من القواعد التي تحدد بدقة تسلسل العمليات.B - مبتدئ ، A - متقدمالخوارزميات حسب الموضوعرياضياتB معالجة البتB عامليB رقم فيبوناتشي - الإصدارات الكلاسيكية والمغلقةB اختبار البدائية (طريقة تقسيم المحاكمة)B الخوارزمية الإقليدية - احسب القاسم المشترك الأكبر (GCD)B أقل مضاعف مشترك (LCM)B منخل إراتوستينس - إيجاد جميع الأعداد الأولية حتى أي حد معينB هي قوة اثنين - تحقق مما إذا كان الرقم هو قوة اثنين (الخوارزميات الساذجة والبتية)B مثلث باسكالB عدد مركب - الأعداد المركبة والعمليات الأساسية معهمB راديان ودرجة - راديان لدرجة التحويل والعكسB تشغيل سريعB طريقة هورنر - تقييم متعدد الحدودA قسم صحيحA الجذر التربيعي - طريقة نيوتنA خوارزمية ليو هوي π - π حسابات تقريبية على أساس N-gonsA تحويل فورييه المنفصل - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهامجموعاتB المنتج الديكارتي - منتج من مجموعات متعددةB فيشر ييتس شافل - التقليب العشوائي لتسلسل محدودA مجموعة الطاقة - جميع المجموعات الفرعية للمجموعة (حلول البت والتتبع التراجعي)A التباديل (مع وبدون التكرار)A مجموعات (مع وبدون التكرار)A أطول نتيجة مشتركة (LCS)A أطول زيادة متتاليةA أقصر تسلسل فائق مشترك (SCS)A مشكلة حقيبة الظهر - \""0/1\"" و \""غير منضم\""A الحد الأقصى من Subarray -إصدارات \""القوة الغاشمة\"" و \""البرمجة الديناميكية\"" (كادان)A مجموع الجمع - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًاسلاسلB مسافة هامنج - عدد المواقف التي تختلف فيها الرموزA المسافة ليفنشتاين - الحد الأدنى لمسافة التحرير بين تسلسلينA خوارزمية كنوث - موريس - برات (خوارزمية KMP) - بحث السلسلة الفرعية (مطابقة النمط)A خوارزمية Z - بحث سلسلة فرعية (مطابقة النمط)A خوارزمية رابين كارب - بحث السلسلة الفرعيةA أطول سلسلة فرعية مشتركةA مطابقة التعبير العاديعمليات البحثB البحث الخطيB بحث سريع (أو حظر البحث) - ابحث في مصفوفة مرتبةB بحث ثنائي - البحث في مجموعة مرتبةB بحث الاستيفاء - البحث في مجموعة مرتبة موزعة بشكل موحدفرزB Bubble SortB Selection SortB Insertion SortB Heap SortB Merge SortB Quicksort - عمليات التنفيذ في المكان وغير في المكانB ShellsortB Counting SortB Radix Sortالقوائم المرتبطةB Straight TraversalB Reverse TraversalالأشجارB Depth-First Search (DFS)B Breadth-First Search (BFS)الرسوم البيانيةB Depth-First Search (DFS)B Breadth-First Search (BFS)B Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Dijkstra Algorithm -إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Bellman-Ford Algorithm - إيجاد أقصر المسارات لجميع رؤوس الرسم البياني من رأس واحدA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Detect Cycle - لكل من الرسوم البيانية الموجهة وغير الموجهة (الإصدارات القائمة على DFS و Disjoint Set)A Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Topological Sorting - طريقة البحث العمق الأول (DFS)A Articulation Points - خوارزمية تارجان (تعتمد على DFS)A Bridges - خوارزمية تعتمد على DFSA Eulerian Path and Eulerian Circuit - خوارزمية فلوري - قم بزيارة كل حافة مرة واحدة بالضبطA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA Strongly Connected Components - خوارزمية KosarajuA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصلية**التشفيرB Polynomial Hash - المتداول دالة التجزئة على أساس متعدد الحدودB Caesar Cipher - استبدال بسيط للشفراتالتعلم الاليB NanoNeuron - 7 وظائف JS بسيطة توضح كيف يمكن للآلات أن تتعلم بالفعل (الانتشار إلى الأمام / الخلف)غير مصنفB Tower of HanoiB Square Matrix Rotation - خوارزمية في المكانB Jump Game - التراجع ، البرمجة الديناميكية (من أعلى إلى أسفل + من أسفل إلى أعلى) والأمثلة الجشعةB Unique Paths - التراجع والبرمجة الديناميكية والأمثلة القائمة على مثلث باسكالB Rain Terraces - محاصرة مشكلة مياه الأمطار (البرمجة الديناميكية وإصدارات القوة الغاشمة)B Recursive Staircase - احسب عدد الطرق للوصول إلى القمة (4 حلول)A N-Queens ProblemA Knight's Tourالخوارزميات حسب النموذجالنموذج الحسابي هو طريقة أو نهج عام يكمن وراء تصميم الفصلمن الخوارزميات. إنه تجريد أعلى من مفهوم الخوارزمية ، تمامًا مثلالخوارزمية هي تجريد أعلى من برنامج الكمبيوتر.القوة الغاشمة - انظر في جميع الاحتمالات وحدد الحل الأفضلB Linear SearchB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Maximum SubarrayA Travelling Salesman Problem - أقصر طريق ممكن يزور كل مدينة ويعود إلى المدينة الأصليةA Discrete Fourier Transform - حلل وظيفة الوقت (إشارة) في الترددات التي يتكون منهاجشع - اختر الخيار الأفضل في الوقت الحالي ، دون أي اعتبار للمستقبلB Jump GameA Unbound Knapsack ProblemA Dijkstra Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Prim’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهA Kruskal’s Algorithm - إيجاد الحد الأدنى من شجرة الامتداد (MST) للرسم البياني الموزون غير الموجهفرق تسد - قسّم المشكلة إلى أجزاء أصغر ثم حل تلك الأجزاءB Binary SearchB Tower of HanoiB Pascal's TriangleB Euclidean Algorithm - حساب القاسم المشترك الأكبر (GCD)B Merge SortB QuicksortB Tree Depth-First Search (DFS)B Graph Depth-First Search (DFS)B Jump GameB Fast PoweringA Permutations (مع التكرار وبدونه)A Combinations (مع التكرار وبدونه)البرمجة الديناميكية - بناء حل باستخدام الحلول الفرعية التي تم العثور عليها مسبقًاB Fibonacci NumberB Jump GameB Unique PathsB Rain Terraces - محاصرة مشكلة مياه الأمطارB Recursive Staircase - احسب عدد الطرق للوصول إلى القمةA Levenshtein Distance - الحد الأدنى لمسافة التحرير بين تسلسلينA Longest Common Subsequence (LCS)A Longest Common SubstringA Longest Increasing SubsequenceA Shortest Common SupersequenceA 0/1 Knapsack ProblemA Integer PartitionA Maximum SubarrayA Bellman-Ford Algorithm - إيجاد أقصر مسار لجميع رؤوس الرسم البيانيA Floyd-Warshall Algorithm - إيجاد أقصر المسارات بين جميع أزواج الرؤوسA Regular Expression Matchingالتراجع - على غرار القوة الغاشمة ، حاول إنشاء جميع الحلول الممكنة ، ولكن في كل مرة تقوم فيها بإنشاء الحل التالي الذي تختبرهإذا استوفت جميع الشروط ، وعندها فقط استمر في إنشاء الحلول اللاحقة. خلاف ذلك ، تراجع ، واذهب إلىطريق مختلف لإيجاد حل. عادةً ما يتم استخدام اجتياز DFS لمساحة الدولة.B Jump GameB Unique PathsB Power Set - جميع المجموعات الفرعية للمجموعةA Hamiltonian Cycle - قم بزيارة كل قمة مرة واحدة بالضبطA N-Queens ProblemA Knight's TourA Combination Sum - ابحث عن جميع التركيبات التي تشكل مبلغًا محددًا** Branch & Bound ** - تذكر الحل الأقل تكلفة الموجود في كل مرحلة من مراحل التراجعالبحث ، واستخدام تكلفة الحل الأقل تكلفة الموجود حتى الآن بحد أدنى لتكلفةالحل الأقل تكلفة للمشكلة ، من أجل تجاهل الحلول الجزئية بتكاليف أكبر منتم العثور على حل بأقل تكلفة حتى الآن. اجتياز BFS عادةً بالاشتراك مع اجتياز DFS لمساحة الحالةيتم استخدام الشجرة.كيفية استخدام هذا المستودعتثبيت كل التبعياتnpm installقم بتشغيل ESLintقد ترغب في تشغيله للتحقق من جودة الكود.npm run lintقم بإجراء جميع الاختباراتnpm testقم بإجراء الاختبارات بالاسمnpm test -- 'LinkedList'ملعبيمكنك اللعب بهياكل البيانات والخوارزميات في ملف . /src/playground/playground.js والكتابةاختبارات لها في ./src/playground/__test__/playground.test.js.ثم قم ببساطة بتشغيل الأمر التالي لاختبار ما إذا كان كود الملعب الخاص بك يعمل كما هو متوقع:npm test -- 'playground'معلومات مفيدةالمراجع▶ هياكل البيانات والخوارزميات على موقع يوتيوبBig O Notationيتم استخدام Big O notation لتصنيف الخوارزميات وفقًا لكيفية نمو متطلبات وقت التشغيل أو المساحة مع نمو حجم الإدخال.قد تجد في الرسم البياني أدناه الأوامر الأكثر شيوعًا لنمو الخوارزميات المحددة في تBig O notation.مصدر: Big O Cheat Sheet.فيما يلي قائمة ببعض رموز Big O notation الأكثر استخدامًا ومقارنات أدائها مقابل أحجام مختلفة من بيانات الإدخال.Big O NotationComputations for 10 elementsComputations for 100 elementsComputations for 1000 elementsO(1)111O(log N)369O(N)101001000O(N log N)306009000O(N^2)100100001000000O(2^N)10241.26e+291.07e+301O(N!)36288009.3e+1574.02e+2567تعقيد عمليات بنية البياناتData StructureAccessSearchInsertionDeletionCommentsArray1nnnStacknn11Queuenn11Linked Listnn1nHash Table-nnnفي حالة وجود تكاليف دالة تجزئة مثالية ستكون O (1)Binary Search Treennnnفي حالة توازن تكاليف الشجرة ستكون O (log (n))B-Treelog(n)log(n)log(n)log(n)Red-Black Treelog(n)log(n)log(n)log(n)AVL Treelog(n)log(n)log(n)log(n)Bloom Filter-11-الإيجابيات الكاذبة ممكنة أثناء البحثتعقيد خوارزميات فرز الصفيفNameBestAverageWorstMemoryStableCommentsBubble sortnn2n21نعمInsertion sortnn2n21نعمSelection sortn2n2n21لاHeap sortn log(n)n log(n)n log(n)1لاMerge sortn log(n)n log(n)n log(n)nنعمQuick sortn log(n)n log(n)n2log(n)Noعادةً ما يتم إجراء الفرز السريع في مكانه مع مساحة مكدس O (log (n))Shell sortn log(n)depends on gap sequencen (log(n))21لاCounting sortn + rn + rn + rn + rYesr - أكبر رقم في المجموعةRadix sortn * kn * kn * kn + kYesك - طول أطول مفتاحمؤيدو المشروعيمكنك دعم هذا المشروع عبر ❤️️ GitHub أو ❤️️ Patreon.الناس الذين يدعمون هذا المشروع ∑ = 0ℹ️ A few more projects and articles about JavaScript and algorithms on trekhleb.dev"
2,angular/angular.js,https://github.com/angular/angular.js/blob/master/README.closure.md,JavaScript,"Using AngularJS with the Closure CompilerThe Closure Compiler project contains definitions for the AngularJS JavaScriptin its contrib/externs directory.The definitions contain externs for use with the Closure compiler (akaJSCompiler). Passing these files to the --externs parameter of a compilerpass allows using type annotations for AngularJS objects. For example,AngularJS's $scope objects can be annotated as:/** @type {angular.Scope} */var scope = $scope;This allows JSCompiler to type check accesses to scope, give warnings aboutmissing methods or incorrect arguments, and also prevents renaming of propertyaccesses with advanced compilation.The externs are incomplete and maintained on an as-needed basis, but strive tobe correct. Externs for individual modules should be added in separate files.See https://developers.google.com/closure/compiler/"
3,TheOdinProject/javascript-exercises,https://github.com/TheOdinProject/javascript-exercises/blob/main/README.md,JavaScript,"JavaScript ExercisesThese JavaScript exercises are intended to complement the JavaScript content on The Odin Project (TOP). They should only be done when instructed during the course of the curriculum.Note: The generator-exercise file is not actually an exercise; it is a script that generates exercises. It was created to help efficiently write these exercises.ContributingIf you have a suggestion to improve an exercise, an idea for a new exercise, or notice an issue with an exercise, please feel free to open an issue after thoroughly reading our contributing guide.How To Use These ExercisesFork and clone this repository. To learn how to fork a repository, see the GitHub documentation on how to fork a repo.Copies of repositories on your machine are called clones. If you need help cloning to your local environment you can learn how from the GitHub documentation on cloning a repository.Before you start working on any exercises, you should first ensure you have the following installed:NPM. You should have installed NPM already in our Installing Node.js lesson. Just in case you need to check, type npm --version in your terminal. If you get back Command 'npm' not found, but can be installed with:, do not follow the instructions in the terminal to install with apt-get as this causes permission issues. Instead, go back to the installation lesson and install Node with NVM by following the instructions there.Jest. After cloning this repository to your local machine and installing NPM, go into the newly created directory (cd javascript-exercises) and run npm install. This will install Jest and set up the testing platform based on our preconfigured settings.Each exercise includes the following:A markdown file with a description of the task, an empty (or mostly empty) JavaScript file, and a set of tests.A solutions directory that contains a solution and the same test file with all of the tests unskipped.To complete an exercise, you'll need to go to the exercise directory with cd exerciseName in the terminal and run npm test exerciseName.spec.js. This should run the test file and show you the output. When you first run a test, it will fail. This is by design! You must open the exercise file and write the code needed to get the test to pass.Some of the exercises have test conditions defined in their spec file as test.skip compared to test. This is purposeful. After you pass one test, you will change the next test.skip to test and test your code again. You'll do this until all conditions are satisfied. All tests must pass at the same time, and you should not have any test.skip instances by the time you finish an exercise.Once you successfully finish an exercise, check the solutions directory within each exercise to compare it with yours.You should not be checking the solution for an exercise until you finish it!Keep in mind that TOP's solution is not the only solution. Generally as long as all of the tests pass, your solution should be fine.Do not submit your solutions to this repo, as any PRs that do so will be closed without merging.Note: Due to the way Jest handles failed tests, it may return an exit code of 1 if any tests fail. NPM will interpret this as an error and you may see some npm ERR! messages after Jest runs. You can ignore these, or run your test with npm test exerciseName.spec.js --silent to supress the errors.The first exercise, helloWorld, will walk you through the process in-depth.DebuggingTo debug functions, you can run the tests in the Visual Studio Code debugger terminal. You can open this by clicking the \""Run and Debug\"" icon on the left or pressing Ctrl + Shift + D, then clicking JavaScript Debug Terminal. You will be able to set breakpoints as you would in the Chrome DevTools debugger. You can run npm test exerciseName.spec.js to then execute your code up until your breakpoint and step through your code as necessary. NOTE: To take advantage of the debugger, you MUST run the script in the debugger terminal, not the bash or zsh terminal."
4,jquery/jquery,https://github.com/jquery/jquery/blob/main/README.md,JavaScript,"jQuery — New Wave JavaScriptMeetings are currently held on the matrix.org platform.Meeting minutes can be found at meetings.jquery.org.Contribution GuidesIn the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:Getting InvolvedCore Style GuideWriting Code for jQuery Foundation ProjectsReferences to issues/PRsGitHub issues/PRs are usually referenced via gh-NUMBER, where NUMBER is the numerical ID of the issue/PR. You can find such an issue/PR under https://github.com/jquery/jquery/issues/NUMBER.jQuery has used a different bug tracker - based on Trac - in the past, available under bugs.jquery.com. It is being kept in read only mode so that referring to past discussions is possible. When jQuery source references one of those issues, it uses the pattern trac-NUMBER, where NUMBER is the numerical ID of the issue. You can find such an issue under https://bugs.jquery.com/ticket/NUMBER.Environments in which to use jQueryBrowser supportjQuery also supports Node, browser extensions, and other non-browser environments.What you need to build your own jQueryTo build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.For Windows, you have to download and install git and Node.js.macOS users should install Homebrew. Once Homebrew is installed, run brew install git to install git,and brew install node to install Node.js.Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from sourceif you swing that way. Easy-peasy.How to build your own jQueryFirst, clone the jQuery git repo.Then, enter the jquery directory and run the build script:cd jquery && npm run buildThe built version of jQuery will be put in the dist/ subdirectory, along with the minified copy and associated map file.If you want to create custom build or help with jQuery development, it would be better to install grunt command line interface as a global package:npm install -g grunt-cliMake sure you have grunt installed by testing:grunt -VNow by running the grunt command, in the jquery directory, you can build a full version of jQuery, just like with an npm run build command:gruntThere are many other tasks available for jQuery Core:grunt -helpModulesSpecial builds can be created that exclude subsets of jQuery functionality.This allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used.For example, an app that only used JSONP for $.ajax() and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.Any module may be excluded except for core, and selector. To exclude a module, pass its path relative to the src folder (without the .js extension).Some example modules that can be excluded are:ajax: All AJAX functionality: $.ajax(), $.get(), $.post(), $.ajaxSetup(), .load(), transports, and ajax event shorthands such as .ajaxStart().ajax/xhr: The XMLHTTPRequest AJAX transport only.ajax/script: The <script> AJAX transport only; used to retrieve scripts.ajax/jsonp: The JSONP AJAX transport only; depends on the ajax/script transport.css: The .css() method. Also removes all modules depending on css (including effects, dimensions, and offset).css/showHide:  Non-animated .show(), .hide() and .toggle(); can be excluded if you use classes or explicit .css() calls to set the display property. Also removes the effects module.deprecated: Methods documented as deprecated but not yet removed.dimensions: The .width() and .height() methods, including inner- and outer- variations.effects: The .animate() method and its shorthands such as .slideUp() or .hide(\""slow\"").event: The .on() and .off() methods and all event functionality.event/trigger: The .trigger() and .triggerHandler() methods.offset: The .offset(), .position(), .offsetParent(), .scrollLeft(), and .scrollTop() methods.wrap: The .wrap(), .wrapAll(), .wrapInner(), and .unwrap() methods.core/ready: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with jQuery() will simply be called immediately. However, jQuery(document).ready() will not be a function and .on(\""ready\"", ...) or similar will not be triggered.deferred: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. Note that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (grunt custom:-deferred,-ajax,-effects,-core/ready).exports/global: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.exports/amd: Exclude the AMD definition.As a special case, you may also replace the full jQuery selector module by using a special flag grunt custom:-selector.selector: The full jQuery selector engine. When this module is excluded, it is replaced by a rudimentary selector engine based on the browser's querySelectorAll method that does not support jQuery selector extensions or enhanced semantics. See the selector-native.js file for details.Note: Excluding the full selector module will also exclude all jQuery selector extensions (such as effects/animatedSelector and css/hiddenVisibleSelectors).The build process shows a message for each dependent module it excludes or includes.AMD nameAs an option, you can set the module name for jQuery's AMD definition. By default, it is set to \""jquery\"", which plays nicely with plugins and third-party libraries, but there may be cases where you'd like to change this. Simply pass it to the --amd parameter:grunt custom --amd=\""custom-name\""Or, to define anonymously, set the name to an empty string.grunt custom --amd=\""\""File nameThe default name for the built jQuery file is jquery.js; it is placed under the dist/ directory. It's possible to change the file name using the --filename parameter:grunt custom:slim --filename=\""jquery.slim.js\""This would create a slim version of jQuery and place it under dist/jquery.slim.js. In fact, this is exactly the command we use to generate the slim jQuery during the release process.ECMAScript Module (ESM) modeBy default, jQuery generates a regular script JavaScript file. You can also generate an ECMAScript module exporting jQuery as the default export using the --esm parameter:grunt custom --esmThe default is script but you can also pass it explicitly via --no-esm:grunt custom --no-esmCustom Build ExamplesTo create a custom build, first check out the version:git pull; git checkout VERSIONWhere VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:npm installCreate the custom build using the grunt custom option, listing the modules to be excluded.Exclude all ajax functionality:grunt custom:-ajaxExcluding css removes modules depending on CSS: effects, offset, dimensions.grunt custom:-cssExclude a bunch of modules:grunt custom:-ajax/jsonp,-css,-deprecated,-dimensions,-effects,-offset,-wrapThere is also a special alias to generate a build with the same configuration as the official jQuery Slim build is generated:grunt custom:slimFor questions or requests regarding custom builds, please start a thread on the Developing jQuery Core section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery's unit test process.Running the Unit TestsMake sure you have the necessary dependencies:npm installStart grunt watch or npm start to auto-build jQuery as you work:grunt watchRun the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the \""test\"" directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:Windows: WAMP downloadMac: MAMP downloadLinux: Setting up LAMPMongoose (most platforms)Building to a different directoryTo copy the built jQuery files from /dist to another directory:grunt && grunt dist:/path/to/special/location/With this example, the output files would be:/path/to/special/location/jquery.js/path/to/special/location/jquery.min.jsTo add a permanent copy destination, create a file in dist/ called \"".destination.json\"". Inside the file, paste and customize the following:{  \""/Absolute/path/to/other/destination\"": true}Additionally, both methods can be combined.Essential GitAs the source code is handled by the Git version control system, it's useful to know some features used.CleaningIf you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you've worked on is gone after these):git reset --hard upstream/maingit clean -fdxRebasingFor feature/topic branches, you should always use the --rebase flag to git pull, or if you are usually handling many temporary \""to be in a github pull request\"" branches, run the following to automate this:git config branch.autosetuprebase local(see man git-config for more information)Handling merge conflictsIf you're getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the featuregit mergetool. Even though the default tool xxdiff looks awful/old, it's rather useful.The following are some commands that can be used there:Ctrl + Alt + M - automerge as much as possibleb - jump to next merge conflicts - change the order of the conflicted linesu - undo a mergeleft mouse button - mark a block to be the winnermiddle mouse button - mark a line to be the winnerCtrl + S - saveCtrl + Q - quitQUnit ReferenceTest methodsexpect( numAssertions );stop();start();Note: QUnit's eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.Test assertionsok( value, [message] );equal( actual, expected, [message] );notEqual( actual, expected, [message] );deepEqual( actual, expected, [message] );notDeepEqual( actual, expected, [message] );strictEqual( actual, expected, [message] );notStrictEqual( actual, expected, [message] );throws( block, [expected], [message] );Test Suite Convenience Methods Reference (See test/data/testinit.js)Returns an array of elements with the given IDsq( ... );Example:q(\""main\"", \""foo\"", \""bar\"");=> [ div#main, span#foo, input#bar ]Asserts that a selection matches the given IDst( testName, selector, [ \""array\"", \""of\"", \""ids\"" ] );Example:t(\""Check for something\"", \""//[a]\"", [\""foo\"", \""bar\""]);Fires a native DOM event without going through jQueryfireNative( node, eventType )Example:fireNative( jQuery(\""#elem\"")[0], \""click\"" );Add random number to url to stop cachingurl( \""some/url\"" );Example:url(\""index.html\"");=> \""data/index.html?10538358428943\""url(\""mock.php?foo=bar\"");=> \""data/mock.php?foo=bar&10538358345554\""Run tests in an iframeSome tests may require a document other than the standard test fixture, andthese can be run in a separate iframe. The actual test code and assertionsremain in jQuery's main test files; only the minimal test fixture markupand setup code should be placed in the iframe file.testIframe( testName, fileName,  function testCallback(      assert, jQuery, window, document,\t  [ additional args ] ) {\t...  } );This loads a page, constructing a url with fileName \""./data/\"" + fileName.The iframed page determines when the callback occurs in the test byincluding the \""/test/data/iframeTest.js\"" script and callingstartIframeTest( [ additional args ] ) when appropriate. Often thiswill be after either document ready or window.onload fires.The testCallback receives the QUnit assert object created by testIframefor this test, followed by the global jQuery, window, and document fromthe iframe. If the iframe code passes any arguments to startIframeTest,they follow the document argument.Questions?If you have any questions, please feel free to ask on theDeveloping jQuery Core forum or in #jquery on libera."
5,scutan90/DeepLearning-500-questions,https://github.com/scutan90/DeepLearning-500-questions/blob/master/README.md,JavaScript,京东售卖链接：https://item.jd.com/12785031.html京东商城100多家书店有现货。深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著内容简介本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。作者简介谈继勇 主编南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。郭子钊 副主编四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。李剑 副主编同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。佃松宜 副主编日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。王晋东 特邀编委中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。王超锋上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。郭晓锋中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。黄伟华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。陈方杰（Amusi）上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。李元伟国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。陈琳北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。目录第1章 数学基础 11.1 向量和矩阵 11.1.1 标量、向量、矩阵和张量 11.1.2 张量与矩阵的区别 21.1.3 矩阵和向量相乘的结果 21.1.4 向量和矩阵的范数归纳 21.1.5 判断一个矩阵是否为正定矩阵 41.2 导数和偏导数 51.2.1 导数偏导计算 51.2.2 导数和偏导数的区别 61.3 特征值和特征向量 61.3.1 特征值分解 61.3.2 奇异值和特征值的关系 61.4 概率分布与随机变量 71.4.1 机器学习为什么要使用概率 71.4.2 变量与随机变量的区别 71.4.3 随机变量与概率分布的联系 81.4.4 离散型随机变量和概率质量函数 81.4.5 连续型随机变量和概率密度函数 81.4.6 举例理解条件概率 91.4.7 联合概率与边缘概率的区别和联系 91.4.8 条件概率的链式法则 101.4.9 独立性和条件独立性 101.5 常见概率分布 111.5.1 伯努利分布 111.5.2 高斯分布 111.5.3 何时采用正态分布 121.5.4 指数分布 121.5.5 Laplace分布 131.5.6 Dirac分布和经验分布 131.6 期望、方差、协方差、相关系数 131.6.1 期望 131.6.2 方差 141.6.3 协方差 141.6.4 相关系数 15第2章 机器学习基础 162.1 基本概念 162.1.1 大话机器学习本质 162.1.2 什么是神经网络 162.1.3 各种常见算法图示 172.1.4 计算图的导数计算 172.1.5 理解局部最优与全局最优 182.1.6 大数据与深度学习之间的关系 192.2 机器学习的学习方式 202.2.1 监督学习 202.2.2 非监督学习 202.2.3 半监督学习 202.2.4 弱监督学习 202.2.5 监督学习模型的搭建步骤 212.3 分类算法 222.3.1 常用分类算法的优缺点 222.3.2 分类算法的评估方法 232.3.3 正确率能否很好地评估分类算法 252.3.4 什么样的分类器是最好的 262.4 逻辑回归 262.4.1 回归的种类 262.4.2 逻辑回归适用性 272.4.3 逻辑回归与朴素贝叶斯的区别 272.4.4 线性回归与逻辑回归的区别 272.5 代价函数 282.5.1 为什么需要代价函数 282.5.2 代价函数作用原理 282.5.3 常见代价函数 302.5.4 为什么代价函数要非负 312.5.5 为什么用交叉熵代替二次代价函数 312.6 损失函数 322.6.1 什么是损失函数 322.6.2 常见的损失函数 322.6.3 逻辑回归为什么使用对数损失函数 342.6.4 对数损失函数如何度量损失 342.7 梯度下降法 352.7.1 梯度下降法的作用 362.7.2 梯度下降法的直观理解 362.7.3 梯度下降法算法描述 372.7.4 梯度下降法的缺点 382.7.5 如何对梯度下降法进行调优 382.7.6 随机梯度下降和批量梯度下降的区别 382.7.7 各种梯度下降法性能比较 402.8 线性判别分析 402.8.1 LDA思想总结 402.8.2 图解LDA核心思想 412.8.3 二类LDA算法原理 412.8.4 LDA算法流程总结 422.8.5 LDA和PCA的异同 432.8.6 LDA的优缺点 432.9 主成分分析 432.9.1 图解PCA核心思想 432.9.2 PCA算法推理 442.9.3 PCA算法流程总结 452.9.4 PCA思想总结 462.9.5 PCA算法的优缺点 462.9.6 降维的必要性及目的 462.9.7 KPCA与PCA的区别 472.10 模型评估 472.10.1 模型评估常用方法 482.10.2 误差、偏差和方差的区别和联系 482.10.3 为什么使用标准差 492.10.4 经验误差与泛化误差 502.10.5 图解欠拟合与过拟合 502.10.6 如何解决欠拟合与过拟合 522.10.7 交叉验证的主要作用 522.10.8 理解K折交叉验证 532.10.9 理解混淆矩阵 532.10.10 理解查准率与查全率 532.10.11 理解ROC与AUC 542.10.12 如何绘制ROC曲线 552.10.13 如何计算TPR和FPR 562.10.14 如何计算AUC 582.10.15 直观理解AUC 582.10.16 ROC评估分类器 602.10.17 代价敏感错误率与代价曲线 602.10.18 比较检验方法 612.11 决策树 612.11.1 决策树的基本原理 622.11.2 决策树的生成过程 622.11.3 决策树学习基本算法步骤 622.11.4 决策树算法的优缺点 632.11.5 决策树和熵的联系 632.11.6 熵的概念及定义 632.11.7 理解信息增益 642.11.8 决策树中熵、条件熵和信息增益的联系 642.11.9 决策树算法中剪枝的作用及策略 652.12 支持向量机（SVM） 652.12.1 什么是SVM 652.12.2 SVM能解决的问题 662.12.3 核函数特点及其作用 672.12.4 SVM为什么引入对偶问题 672.12.5 如何理解SVM中的对偶问题 672.12.6 常见的核函数 692.12.7 SVM的主要特点 692.12.8 SVM的主要缺点 702.12.9 逻辑回归与SVM的异同 702.13 贝叶斯分类器 722.13.1 贝叶斯分类器的基本原理 722.13.2 朴素贝叶斯分类器 722.13.3 举例理解朴素贝叶斯分类器 732.13.4 半朴素贝叶斯分类器 752.13.5 极大似然估计和贝叶斯估计的联系与区别 752.13.6 极大似然估计原理 762.13.7 图解极大似然估计 762.14 EM算法 772.14.1 EM算法的基本思想 772.14.2 EM算法推导 772.14.3 图解EM算法 782.14.4 EM算法流程 792.15 降维和聚类 792.15.1 图解为什么会产生维数灾难 792.15.2 怎样避免维数灾难 832.15.3 聚类和降维 832.15.4 聚类算法优劣的衡量标准 842.15.5 聚类和分类 852.15.6 聚类算法的性能比较 852.15.7 4种常用聚类方法比较 85第3章 深度学习基础 893.1 基本概念 893.1.1 神经网络的类型 893.1.2 神经网络的常用模型结构 923.1.3 深度学习和机器学习的区别与联系 933.1.4 为什么使用深层表示 933.1.5 深度学习架构分类 943.1.6 如何选择深度学习开发平台 943.2 神经网络计算 953.2.1 前向传播和反向传播 953.2.2 如何计算神经网络的输出 963.2.3 如何计算卷积神经网络输出值 973.2.4 如何计算池化层输出值 1003.2.5 反向传播实例 1013.2.6 神经网络更“深”的意义 1043.3 激活函数 1043.3.1 为什么需要激活函数 1043.3.2 为什么激活函数需要非线性函数 1053.3.3 常见的激活函数及其图像 1053.3.4 常见激活函数的导数计算 1073.3.5 激活函数有哪些性质 1083.3.6 如何选择激活函数 1083.3.7 为什么tanh收敛速度比sigmoid快 1093.3.8 Relu激活函数的优点 1093.3.9 理解Relu激活函数的稀疏激活性 1093.3.10 什么时候可以用线性激活函数 1093.3.11 softmax函数的定义及作用 1103.3.12 softmax函数如何应用于多分类 1103.4 BATCH SIZE 1123.4.1 为什么需要Batch Size 1123.4.2 如何选择Batch Size值 1123.4.3 调节Batch Size对训练效果的影响 1133.4.4 在合理范围内增大Batch Size的好处 1133.4.5 盲目增大Batch Size的坏处 1143.5 归一化 1143.5.1 理解归一化含义 1143.5.2 归一化和标准化的联系与区别 1143.5.3 为什么要归一化或标准化 1153.5.4 图解为什么要归一化 1153.5.5 为什么归一化能提高求最优解速度 1153.5.6 归一化有哪些类型 1163.5.7 局部响应归一化作用 1163.5.8 局部响应归一化原理 1173.5.9 什么是批归一化 1183.5.10 批归一化的优点 1183.5.11 批归一化算法流程 1183.5.12 批归一化和组归一化比较 1193.5.13 权重归一化和批归一化比较 1193.5.14 批归一化适用范围 1203.5.15 BN、LN、IN和GN的对比 1203.6 参数初始化 1213.6.1 参数初始化应满足的条件 1213.6.2 常用的几种初始化方式 1213.6.3 全0初始化带来的问题 1213.6.4 全都初始化为同样的值 1223.6.5 初始化为小的随机数 1233.6.6 用 校准方差 1233.7 预训练与微调 1233.7.1 什么是预训练和微调 1233.7.2 预训练和微调的作用 1243.7.3 预训练模型的复用 1243.7.4 预训练和迁移学习 1253.7.5 微调时网络参数是否更新 1253.7.6 微调模型的三种状态 1253.7.7 为什么深层神经网络难以训练 1253.8 超参数 1273.8.1 超参数有哪些 1273.8.2 参数和模型的关系 1273.8.3 参数和超参数的区别 1273.8.4 如何寻找超参数的最优值 1283.8.5 超参数搜索的一般过程 1283.9 学习率 1293.9.1 学习率的作用 1293.9.2 学习率衰减的常用参数 1293.9.3 常用的学习率衰减方法 1293.10 正则化 1333.10.1 为什么要正则化 1333.10.2 常见正则化方法 1333.10.3 图解L1和L2正则化 1343.10.4 Dropout具体工作流程 1353.10.5 为什么Dropout可以解决过拟合问题 1373.10.6 Dropout的缺点
6,cyclic-software/starter-express-api,https://github.com/cyclic-software/starter-express-api/blob/main/README.md,JavaScript,starter-express-apiThis is the simplest possible nodejs api using express that responds to any request with:Yo!Deploy it in 7 seconds:
7,Binaryify/NeteaseCloudMusicApi,https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/README.MD,JavaScript,"网易云音乐 API网易云音乐 Node.js API service灵感来自disoul/electron-cloud-musicdarknessomi/musicboxsqaiyan/netmusic-nodegreats3an/pyncm环境要求需要 NodeJS 14+ 环境安装$ git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install或者$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install运行调用前务必阅读文档的调用前须知$ node app.js服务器启动默认端口为 3000,若不想使用 3000 端口,可使用以下命令: Mac/Linux$ PORT=4000 node app.jswindows 下使用 git-bash 或者 cmder 等终端执行以下命令:$ set PORT=4000 && node app.jsVercel 部署v4.0.8 加入了 Vercel 配置文件,可以直接在 Vercel 下部署了,不需要自己的服务器操作方法fork 此项目在 Vercel 官网点击 New Project点击 Import Git Repository 并选择你 fork 的此项目并点击import点击 PERSONAL ACCOUNT 的 select直接点ContinuePROJECT NAME自己填,FRAMEWORK PRESET 选 Other 然后直接点 Deploy 接着等部署完成即可腾讯云 serverless 部署因 Vercel 在国内访问太慢,在此提供腾讯云 serverless 部署方法(注意:腾讯云 serverless 并不是免费的,前三个月有免费额度,之后收费)操作方法fork 此项目在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击新建应用顶部创建方式选择 Web 应用选择 Express框架,点击底部下一步按钮输入应用名,上传方式选择代码仓库,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目启动文件填入:#!/bin/bashexport PORT=9000/var/lang/node16/bin/node app.js点击完成,等待部署完成,点击资源列表的 API网关 里的 URL,正常情况会打开文档地址,点击文档例子可查看接口调用效果可以在Node.js调用v3.31.0后支持Node.js调用,导入的方法为module内的文件名,返回内容包含status和body,status为状态码,body为请求返回内容,参考module_example 文件夹下的 test.jsconst { login_cellphone, user_cloud } = require('NeteaseCloudMusicApi')async function main() {  try {    const result = await login_cellphone({      phone: '手机号',      password: '密码'    })    console.log(result)    const result2 = await user_cloud({      cookie: result.body.cookie // 凭证    })    console.log(result2.body)        } catch (error) {    console.log(error)  }}main()支持 TypeScript// test.tsimport { banner } from 'NeteaseCloudMusicApi'banner({ type:0 }).then(res=>{  console.log(res)})使用文档文档地址文档地址2功能特性登录刷新登录发送验证码校验验证码注册(修改密码)获取用户信息 , 歌单，收藏，mv, dj 数量获取用户歌单获取用户电台获取用户关注列表获取用户粉丝列表获取用户动态获取用户播放记录获取精品歌单获取歌单详情搜索搜索建议获取歌词歌曲评论收藏单曲到歌单专辑评论歌单评论mv 评论电台节目评论banner获取歌曲详情获取专辑内容获取歌手单曲获取歌手 mv获取歌手专辑获取歌手描述获取相似歌手获取相似歌单相似 mv获取相似音乐获取最近 5 个听了这首歌的用户获取每日推荐歌单获取每日推荐歌曲私人 FM签到喜欢音乐垃圾桶歌单 ( 网友精选碟 )新碟上架热门歌手最新 mv推荐 mv推荐歌单推荐新音乐推荐电台推荐节目独家放送mv 排行获取 mv 数据播放 mv/视频排行榜歌手榜云盘电台 - 推荐电台 - 分类电台 - 分类推荐电台 - 订阅电台 - 详情电台 - 节目给评论点赞获取动态热搜列表(简略)发送私信发送私信歌单新建歌单收藏/取消收藏歌单歌单分类收藏的歌手列表订阅的电台列表相关歌单推荐付费精选接口音乐是否可用检查接口登录状态获取视频播放地址发送/删除评论热门评论视频评论退出登录所有榜单所有榜单内容摘要收藏视频收藏 MV视频详情相关视频关注用户新歌速递喜欢音乐列表(无序)收藏的 MV 列表获取最新专辑听歌打卡获取视频标签/分类下的视频已收藏专辑列表获取动态评论歌单收藏者列表云盘歌曲删除热门话题电台 - 推荐类型电台 - 非热门类型电台 - 今日优选心动模式/智能播放转发动态删除动态分享歌曲、歌单、mv、电台、电台节目到动态通知-私信通知-评论通知-@我通知-通知设置云盘数据详情私信内容我的数字专辑batch批量请求接口获取视频标签列表全部mv网易出品mv收藏/取消收藏专辑专辑动态信息热搜列表(详细)更换绑定手机检测手机号码是否已注册初始化昵称更新歌单描述更新歌单名更新歌单标签默认搜索关键词删除歌单电台banner用户电台热门电台电台 - 节目详情电台 - 节目榜电台 - 新晋电台榜/热门电台榜类别热门电台云村热评电台24小时节目榜电台24小时主播榜电台最热主播榜电台主播新人榜电台付费精品榜歌手热门50首歌曲购买数字专辑获取 mv 点赞转发评论数数据获取视频点赞转发评论数数据调整歌单顺序调整歌曲顺序独家放送列表获取推荐视频获取视频分类列表获取全部视频列表接口获取历史日推可用日期列表获取历史日推详细数据国家编码列表首页-发现首页-发现-圆形图标入口列表数字专辑-全部新碟数字专辑-热门新碟数字专辑&数字单曲-榜单数字专辑-语种风格馆数字专辑详情更新头像歌单封面上传楼层评论歌手全部歌曲精品歌单标签列表用户等级信息电台个性推荐用户绑定信息用户绑定手机新版评论点赞过的视频收藏视频到视频歌单删除视频歌单里的视频最近播放的视频音乐日历电台订阅者列表云贝签到信息云贝签到云贝所有任务云贝todo任务云贝今日签到信息云贝完成任务云贝收入云贝支出云贝账户信息账号信息最近联系人私信音乐抱一抱评论评论抱一抱列表收藏的专栏关注歌手新歌关注歌手新MV歌手详情云盘上传二维码登录话题详情话题详情热门动态歌单详情动态绑定手机一起听状态用户历史评论云盘歌曲信息匹配纠正云贝推歌云贝推歌历史记录已购单曲获取mlog播放地址将mlog id转为视频idvip成长值vip成长值获取记录vip任务领取vip成长值歌手粉丝数字专辑详情数字专辑销量音乐人数据概况音乐人播放趋势音乐人任务账号云豆数领取云豆获取 VIP 信息音乐人签到发送文本动态获取客户端歌曲下载 url获取歌单所有歌曲乐签信息最近播放-歌曲最近播放-视频最近播放-声音最近播放-歌单最近播放-专辑最近播放-播客签到进度重复昵称检测歌手粉丝数量音乐人任务(新)内部版本接口歌单更新播放量黑胶时光机音乐百科 - 简要信息乐谱列表乐谱内容曲风列表曲风偏好曲风详情曲风-歌曲曲风-专辑曲风-歌单曲风-歌手更新日志changelog单元测试$ npm testSDK语言作者地址类型JavaJackuXLhttps://github.com/JackuXL/NeteaseCloudMusicApi-SDK第三方Java1015770492https://github.com/1015770492/yumbo-music-utils第三方贡献者LicenseThe MIT License (MIT)"
8,tastejs/todomvc,https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/README.MD,JavaScript,"网易云音乐 API网易云音乐 Node.js API service灵感来自disoul/electron-cloud-musicdarknessomi/musicboxsqaiyan/netmusic-nodegreats3an/pyncm环境要求需要 NodeJS 14+ 环境安装$ git clone git@github.com:Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install或者$ git clone https://github.com/Binaryify/NeteaseCloudMusicApi.git$ cd NeteaseCloudMusicApi$ npm install运行调用前务必阅读文档的调用前须知$ node app.js服务器启动默认端口为 3000,若不想使用 3000 端口,可使用以下命令: Mac/Linux$ PORT=4000 node app.jswindows 下使用 git-bash 或者 cmder 等终端执行以下命令:$ set PORT=4000 && node app.jsVercel 部署v4.0.8 加入了 Vercel 配置文件,可以直接在 Vercel 下部署了,不需要自己的服务器操作方法fork 此项目在 Vercel 官网点击 New Project点击 Import Git Repository 并选择你 fork 的此项目并点击import点击 PERSONAL ACCOUNT 的 select直接点ContinuePROJECT NAME自己填,FRAMEWORK PRESET 选 Other 然后直接点 Deploy 接着等部署完成即可腾讯云 serverless 部署因 Vercel 在国内访问太慢,在此提供腾讯云 serverless 部署方法(注意:腾讯云 serverless 并不是免费的,前三个月有免费额度,之后收费)操作方法fork 此项目在腾讯云serverless应用管理页面( https://console.cloud.tencent.com/sls ),点击新建应用顶部创建方式选择 Web 应用选择 Express框架,点击底部下一步按钮输入应用名,上传方式选择代码仓库,进行GitHub授权(如已授权可跳过这一步),代码仓库选择刚刚fork的项目启动文件填入:#!/bin/bashexport PORT=9000/var/lang/node16/bin/node app.js点击完成,等待部署完成,点击资源列表的 API网关 里的 URL,正常情况会打开文档地址,点击文档例子可查看接口调用效果可以在Node.js调用v3.31.0后支持Node.js调用,导入的方法为module内的文件名,返回内容包含status和body,status为状态码,body为请求返回内容,参考module_example 文件夹下的 test.jsconst { login_cellphone, user_cloud } = require('NeteaseCloudMusicApi')async function main() {  try {    const result = await login_cellphone({      phone: '手机号',      password: '密码'    })    console.log(result)    const result2 = await user_cloud({      cookie: result.body.cookie // 凭证    })    console.log(result2.body)        } catch (error) {    console.log(error)  }}main()支持 TypeScript// test.tsimport { banner } from 'NeteaseCloudMusicApi'banner({ type:0 }).then(res=>{  console.log(res)})使用文档文档地址文档地址2功能特性登录刷新登录发送验证码校验验证码注册(修改密码)获取用户信息 , 歌单，收藏，mv, dj 数量获取用户歌单获取用户电台获取用户关注列表获取用户粉丝列表获取用户动态获取用户播放记录获取精品歌单获取歌单详情搜索搜索建议获取歌词歌曲评论收藏单曲到歌单专辑评论歌单评论mv 评论电台节目评论banner获取歌曲详情获取专辑内容获取歌手单曲获取歌手 mv获取歌手专辑获取歌手描述获取相似歌手获取相似歌单相似 mv获取相似音乐获取最近 5 个听了这首歌的用户获取每日推荐歌单获取每日推荐歌曲私人 FM签到喜欢音乐垃圾桶歌单 ( 网友精选碟 )新碟上架热门歌手最新 mv推荐 mv推荐歌单推荐新音乐推荐电台推荐节目独家放送mv 排行获取 mv 数据播放 mv/视频排行榜歌手榜云盘电台 - 推荐电台 - 分类电台 - 分类推荐电台 - 订阅电台 - 详情电台 - 节目给评论点赞获取动态热搜列表(简略)发送私信发送私信歌单新建歌单收藏/取消收藏歌单歌单分类收藏的歌手列表订阅的电台列表相关歌单推荐付费精选接口音乐是否可用检查接口登录状态获取视频播放地址发送/删除评论热门评论视频评论退出登录所有榜单所有榜单内容摘要收藏视频收藏 MV视频详情相关视频关注用户新歌速递喜欢音乐列表(无序)收藏的 MV 列表获取最新专辑听歌打卡获取视频标签/分类下的视频已收藏专辑列表获取动态评论歌单收藏者列表云盘歌曲删除热门话题电台 - 推荐类型电台 - 非热门类型电台 - 今日优选心动模式/智能播放转发动态删除动态分享歌曲、歌单、mv、电台、电台节目到动态通知-私信通知-评论通知-@我通知-通知设置云盘数据详情私信内容我的数字专辑batch批量请求接口获取视频标签列表全部mv网易出品mv收藏/取消收藏专辑专辑动态信息热搜列表(详细)更换绑定手机检测手机号码是否已注册初始化昵称更新歌单描述更新歌单名更新歌单标签默认搜索关键词删除歌单电台banner用户电台热门电台电台 - 节目详情电台 - 节目榜电台 - 新晋电台榜/热门电台榜类别热门电台云村热评电台24小时节目榜电台24小时主播榜电台最热主播榜电台主播新人榜电台付费精品榜歌手热门50首歌曲购买数字专辑获取 mv 点赞转发评论数数据获取视频点赞转发评论数数据调整歌单顺序调整歌曲顺序独家放送列表获取推荐视频获取视频分类列表获取全部视频列表接口获取历史日推可用日期列表获取历史日推详细数据国家编码列表首页-发现首页-发现-圆形图标入口列表数字专辑-全部新碟数字专辑-热门新碟数字专辑&数字单曲-榜单数字专辑-语种风格馆数字专辑详情更新头像歌单封面上传楼层评论歌手全部歌曲精品歌单标签列表用户等级信息电台个性推荐用户绑定信息用户绑定手机新版评论点赞过的视频收藏视频到视频歌单删除视频歌单里的视频最近播放的视频音乐日历电台订阅者列表云贝签到信息云贝签到云贝所有任务云贝todo任务云贝今日签到信息云贝完成任务云贝收入云贝支出云贝账户信息账号信息最近联系人私信音乐抱一抱评论评论抱一抱列表收藏的专栏关注歌手新歌关注歌手新MV歌手详情云盘上传二维码登录话题详情话题详情热门动态歌单详情动态绑定手机一起听状态用户历史评论云盘歌曲信息匹配纠正云贝推歌云贝推歌历史记录已购单曲获取mlog播放地址将mlog id转为视频idvip成长值vip成长值获取记录vip任务领取vip成长值歌手粉丝数字专辑详情数字专辑销量音乐人数据概况音乐人播放趋势音乐人任务账号云豆数领取云豆获取 VIP 信息音乐人签到发送文本动态获取客户端歌曲下载 url获取歌单所有歌曲乐签信息最近播放-歌曲最近播放-视频最近播放-声音最近播放-歌单最近播放-专辑最近播放-播客签到进度重复昵称检测歌手粉丝数量音乐人任务(新)内部版本接口歌单更新播放量黑胶时光机音乐百科 - 简要信息乐谱列表乐谱内容曲风列表曲风偏好曲风详情曲风-歌曲曲风-专辑曲风-歌单曲风-歌手更新日志changelog单元测试$ npm testSDK语言作者地址类型JavaJackuXLhttps://github.com/JackuXL/NeteaseCloudMusicApi-SDK第三方Java1015770492https://github.com/1015770492/yumbo-music-utils第三方贡献者LicenseThe MIT License (MIT)"
9,OpenZeppelin/openzeppelin-contracts,https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/README.md,JavaScript,"WarningVersion 5.0 is under active development. The code in this branch is not recommended for use.A library for secure smart contract development. Build on a solid foundation of community-vetted code.Implementations of standards like ERC20 and ERC721.Flexible role-based permissioning scheme.Reusable Solidity components to build custom contracts and complex decentralized systems.🧙 Not sure how to get started? Check out Contracts Wizard — an interactive smart contract generator.🏗️ Want to scale your decentralized application? Check out OpenZeppelin Defender — a secure platform for automating and monitoring your operations.OverviewInstallationHardhat, Truffle (npm)$ npm install @openzeppelin/contractsOpenZeppelin Contracts features a stable API, which means that your contracts won't break unexpectedly when upgrading to a newer minor version.Foundry (git)Warning When installing via git, it is a common error to use the master branch. This is a development branch that should be avoided in favor of tagged releases. The release process involves security measures that the master branch does not guarantee.Warning Foundry installs the latest version initially, but subsequent forge update commands will use the master branch.$ forge install OpenZeppelin/openzeppelin-contractsAdd @openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/ in remappings.txt.UsageOnce installed, you can use the contracts in the library by importing them:pragma solidity ^0.8.20;import {ERC721} from \""@openzeppelin/contracts/token/ERC721/ERC721.sol\"";contract MyCollectible is ERC721 {    constructor() ERC721(\""MyCollectible\"", \""MCO\"") {    }}If you're new to smart contract development, head to Developing Smart Contracts to learn about creating a new project and compiling your contracts.To keep your system secure, you should always use the installed code as-is, and neither copy-paste it from online sources nor modify it yourself. The library is designed so that only the contracts and functions you use are deployed, so you don't need to worry about it needlessly increasing gas costs.Learn MoreThe guides in the documentation site will teach about different concepts, and how to use the related contracts that OpenZeppelin Contracts provides:Access Control: decide who can perform each of the actions on your system.Tokens: create tradeable assets or collectives, and distribute them via Crowdsales.Utilities: generic useful tools including non-overflowing math, signature verification, and trustless paying systems.The full API is also thoroughly documented, and serves as a great reference when developing your smart contract application. You can also ask for help or follow Contracts's development in the community forum.Finally, you may want to take a look at the guides on our blog, which cover several common use cases and good practices. The following articles provide great background reading, though please note that some of the referenced tools have changed, as the tooling in the ecosystem continues to rapidly evolve.The Hitchhiker’s Guide to Smart Contracts in Ethereum will help you get an overview of the various tools available for smart contract development, and help you set up your environment.A Gentle Introduction to Ethereum Programming, Part 1 provides very useful information on an introductory level, including many basic concepts from the Ethereum platform.For a more in-depth dive, you may read the guide Designing the Architecture for Your Ethereum Application, which discusses how to better structure your application and its relationship to the real world.SecurityThis project is maintained by OpenZeppelin with the goal of providing a secure and reliable library of smart contract components for the ecosystem. We address security through risk management in various areas such as engineering and open source best practices, scoping and API design, multi-layered review processes, and incident response preparedness.The OpenZeppelin Contracts Security Center contains more details about the secure development process.The security policy is detailed in SECURITY.md as well, and specifies how you can report security vulnerabilities, which versions will receive security patches, and how to stay informed about them. We run a bug bounty program on Immunefi to reward the responsible disclosure of vulnerabilities.The engineering guidelines we follow to promote project quality can be found in GUIDELINES.md.Past audits can be found in audits/.Smart contracts are a nascent technology and carry a high level of technical risk and uncertainty. Although OpenZeppelin is well known for its security audits, using OpenZeppelin Contracts is not a substitute for a security audit.OpenZeppelin Contracts is made available under the MIT License, which disclaims all warranties in relation to the project and which limits the liability of those that contribute and maintain the project, including OpenZeppelin. As set out further in the Terms, you acknowledge that you are solely responsible for any use of OpenZeppelin Contracts and you assume all risks associated with any such use.ContributeOpenZeppelin Contracts exists thanks to its contributors. There are many ways you can participate and help build high quality software. Check out the contribution guide!LicenseOpenZeppelin Contracts is released under the MIT License.LegalYour use of this Project is governed by the terms found at www.openzeppelin.com/tos (the \""Terms\"")."
10,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
11,freeCodeCamp/boilerplate-npm,https://github.com/freeCodeCamp/boilerplate-npm/blob/main/README.md,JavaScript,Backend Challenges boilerplate - package.json
12,learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Intro to Functions LabObjectivesPractice writing functionsExplain basics of working with stringsExplain the difference between return and loggingPractice using return and console.log()IntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.Even if you've walked through some of this material before, it's a good idea toreview as we code-along — we're writing functions now, after all.Code-AlongFor now, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require('expect');const babel = require('babel-core');const jsdom = require('jsdom');const path = require('path');This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run your tests. A library is code that someone else(usually multiple someone elses) wrote for our use. Note that require won'twork out of the box in the browser. We're actually running our tests in adifferent environment.If you go to test/index-test.js, you'll seedescribe('shout(string)', function(){  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe('shout(string)', function(){  it('receives one argument and returns it in all caps', function() {    // we'll get to this in a sec  })})These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout('hello')).toEqual('HELLO')which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, run learn test in the terminal in your Learn IDE. The firstoutput you'll see will look like> java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) calls console.log() its one argument in all caps  logWhisper(string)    4) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  0 passing (99ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/index-test.js:4:5)      at processImmediate (internal/timers.js:456:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  3) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  4) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  7) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hm, seven failed tests. Let's see if we can get that first test topass. Open up index.js.When we write our code, we follow the guidance of the tests. Remember the line,describe('shout(string)', function() { ... }). Well, we know that we need afunction called shout that accepts an argument — let's add that first. Inindex.js:function shout(string) {}And what should that function do? Well, the it() description tells us that it\""receives one argument and returns it in all caps\"".Okay, so with that information, we know that our function should look like this:function shout(string) {  return string}But how do we make string all caps? JavaScript has a method for that! It'scalled toUpperCase(). We can call it on any string:'Hello!'.toUpperCase() // 'HELLO!'So let's try it with our shout() function:function shout(string) {  return string.toUpperCase()}And run our tests again:learn testshout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  logShout(string)    2) calls console.log() its one argument in all caps  logWhisper(string)    3) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    4) returns \""I can't hear you!\"" if `string` is lowercase    5) returns \""YES INDEED!\"" if `string` is uppercase    6) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  1 passing (108ms)  6 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  2) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  3) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  4) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hey! We got one to pass! Six left.Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!In this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing becasue whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.The next two tests are checking to see if a specific string is logged when afunction is called. You will still need to use the .toUpperCase() and.toLowerCase() methods for logShout(string) and logWhisper(string). Keep inmind though that these tests are not looking for return values, only logs.The final function you need to create is sayHiToGrandma(). Grandma is a bithard of hearing, so whispering can be a bit difficult, but she'll always hearyou if you say, \""I love you, Grandma.\"" This time, you will need to returndifferent strings depending on the string passed into the function.Note: Although there are 3 tests for sayHiToGrandma(), you only need towrite one function. This function should be able to handle all three testconditions:If the string that is passed into the function is all lowercase, thefunction should return \""I can't hear you!\""If the string that is passed into the function is all uppercase, thefunction should return \""YES INDEED!\""If the string that is passed into the function is equal to \""I love you,Grandma.\"", the function should return \""I love you, too.\""How do we check if a string is all lowercase or all uppercase?var uppercase = \""HELLO!\""uppercase.toUpperCase() === uppercase // truevar lowercase = 'hello!'lowercase.toLowerCase() === lowercase // truevar mixedCase = 'Hi there!'mixedCase.toLowerCase() === mixedCase // falsemixedCase.toUpperCase() === mixedCase // falseWe can simply check whether the string is the same when we convert it touppercase or lowercase! (The lines with the === comparisons are the ones thatcheck). If it's the same, then it was already in that case; if not, then it'seither in the other case or it's mixed case. Now that we know how to comparestrings, how can we use these comparisons to conditionally return differentstrings?Remember that punctuation is important! Humans might be able to understand that\""I love you Grandma\"" is close enough to \""I love you, Grandma.\"" and means thesame thing but JavaScript will not consider these equal!Good luck! When all tests are passing, be sure to run learn submit!View Intro to Functions Lab on Learn.co and start learning to code for free."
13,RedHatTraining/DO101-apps,https://github.com/RedHatTraining/DO101-apps/blob/main/README.md,JavaScript,DO101-appsApps for the DO101 course.
14,learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-intro-to-functions-lab/blob/master/README.md,JavaScript,"Introduction to Functions LabLearning GoalsPractice reading tests and test errorsPractice writing functionsLearn how to use JavaScript's toUpperCase() and toLowerCase() methodsPractice using return and console.log()Practice creating conditional statementsIntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code. (If you are using a different code editor,the command will be different.)Code-AlongTo start, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require(\""expect\"");const babel = require(\""babel-core\"");const jsdom = require(\""jsdom\"");const path = require(\""path\"");This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run the tests. You may recall that we talked aboutpackages in an earlier lesson. A library is similar: it's code that someoneelse (usually multiple someones) wrote for our use. The code above makes thelibraries available inside our test environment, which enables us to run thetests.If you go to test/indexTest.js, you'll seedescribe(\""shout(string)\"", function () {  // there's stuff in here, too});describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe(\""shout(string)\"", function () {  it(\""receives one argument and returns it in all caps\"", function () {    // we'll get to this in a sec  });});These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout(\""hello\"")).toEqual(\""HELLO\"");which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, first run npm install in the terminal to install thedependencies, then run npm test. The first output you'll see will looksomething like this:$ npm test> java-script-intro-to-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) takes a string argument and logs it in all caps using console.log()  logWhisper(string)    4) takes a string argument and logs it in all lowercase using console.log()  sayHiToHeadphonedRoommate(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I would love to!\"" if `string` is \""Let's have dinner together!\""`  0 passing (120ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:461:21)  3) logShout(string)       takes a string argument and logs it in all caps using console.log():     ReferenceError: logShout is not defined      at Context.<anonymous> (test/indexTest.js:18:5)      at processImmediate (internal/timers.js:461:21)  4) logWhisper(string)       takes a string argument and logs it in all lowercase using console.log():     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/indexTest.js:30:5)      at processImmediate (internal/timers.js:461:21)  5) sayHiToHeadphonedRoommate(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:40:5)      at processImmediate (internal/timers.js:461:21)  6) sayHiToHeadphonedRoommate(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:44:5)      at processImmediate (internal/timers.js:461:21)  7) sayHiToHeadphonedRoommate(string)       returns \""I would love to!\"" if `string` is \""Let's have dinner together!\""`:     ReferenceError: sayHiToHeadphonedRoommate is not defined      at Context.<anonymous> (test/indexTest.js:48:5)      at processImmediate (internal/timers.jHm, seven failed tests - that seems like a lot to navigate. Let's go ahead andget Mocha set up to only show the first failing test. Find the test script inthe package.json file and add the --bail tag to the end:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""Save the file and run the tests. You should now see something like this:$ npm test> java-script-intro-to-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail  shout(string)    1) receives one argument and returns it in all caps  0 passing (159ms)  1 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)Much better! Now let's see if we can get that first test to pass. Open upindex.js.When we write our code, we follow the guidance of the tests. Let's take a lookat that first error:  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/indexTest.js:4:5)      at processImmediate (internal/timers.js:461:21)The output above comes from this test in indexTest.js:describe(\""shout(string)\"", function () {  it(\""receives one argument and returns it in all caps\"", function () {    expect(shout(\""hello\"")).toEqual(\""HELLO\"");  });});We know that the test is expecting a function called shout that accepts anargument. The error tells us that shout isn't defined. So let's start bydeclaring our function in index.js:function shout(string) {  // todo}We know we won't pass the test yet because our function doesn't do anything yet.However, if we rerun the test, it should now give us more information about whatwe need to do:  1) shout(string)       receives one argument and returns it in all caps:     Error: Expected undefined to equal 'HELLO'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:4:28)      at processImmediate (internal/timers.js:461:21)Anytime you see Error: Expected undefined to equal [something], that meansthat the test is looking for a return value. We can also see the descriptionof what the function should do: it receives one argument and returns it in all caps.Okay, so with that information, we know that our function should return whateverstring is passed in as an argument:function shout(string) {  return string;}But we're still missing one piece: how do we make string all caps? JavaScripthas a built-in method for that! It's called toUpperCase(). We can call it onany string:\""Hello!\"".toUpperCase(); // 'HELLO!'Above, we've called it directly on a literal string but, of course, we can alsocall it on a variable. So let's try it with our shout() function:function shout(string) {  return string.toUpperCase();}and run our tests again. We get:  shout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  1 passing (147ms)  1 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:461:21)Hey! We got one to pass! Time to tackle the next error!Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!InstructionsIn this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/indexTest.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing because whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.After you get whisper(string) passing, the next two tests will be checking tosee if a specific string is logged when a function is called. You will stillneed to use the .toUpperCase() and .toLowerCase() methods forlogShout(string) and logWhisper(string). Keep in mind, though, that thesetests are not looking for return values, only logs.The final function you need to create is sayHiToHeadphonedRoommate(). Yourroommate is very into their music, so whispering can be a bit difficult, butthey'll always hear you if you say, \""Let's have dinner together!\"" This time,you will need to return different strings depending on the string passed intothe function.Note: Although there are 3 tests for sayHiToHeadphonedRoommate(), you onlyneed to write one function. This function should be able to handle all threetest conditions:If the string that is passed into the function is all lowercase, the functionshould return \""I can't hear you!\""If the string that is passed into the function is all uppercase, the functionshould return \""YES INDEED!\""If the string that is passed into the function is equal to \""Let's have dinnertogether!\"", the function should return \""I would love to!\""How do we check if a string is all lowercase or all uppercase? Let's take a lookusing a REPL. Click on \""Show files\"" and then the \""index.js\"" file to see the code:<iframe height=\""400px\"" width=\""100%\"" src=\""https://replit.com/@lizbur10/InsubstantialTanInternet?lite=true\"" scrolling=\""no\"" frameborder=\""no\"" allowtransparency=\""true\"" allowfullscreen=\""true\"" sandbox=\""allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\""></iframe>In the first line we're defining a string variable. In the next two lines we logthe original variable, then the variable after calling toUpperCase() on it.Finally, we're checking to see whether those two values are equal. If you clickthe Run button, you'll see that the original string is mixed case and the uppercased version of it is (not surprisingly) uppercase. It should not come as asurprise, therefore, that comparing them with the equality operator (===)returns false. What do you think will happen if we initialize string to\""HELLO!\"" instead? Play around with different values for string in replitand see what happens. Also try doing the same thing with toLowerCase() andmake sure you understand what's happening.Basically, if we compare a string to its uppercased (or lowercased) version andthe two values are equal, then we know that the original string is uppercase (orlowercase). So now that we know how to make these comparisons, how can we usethem to conditionally return different strings? If you need a refresher, go backand review the lesson on Selection with Conditionals.Remember that punctuation is important! Humans might be able to understand that\""Lets have dinner together\"" is close enough to \""Let's have dinner together!\"" andmeans the same thing, but JavaScript will not consider these equal!Reminder: As you're working through the tests, you can run your code byrunning node index.js in the terminal. If you want to do this, remember thatyou'll need to call the function inside index.js. If you are just runningtests, however, you don't need to include a function call — the tests willhandle that for you.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process.Good luck!"
15,learn-co-curriculum/phase-0-pac-3-function-parameters-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/blob/master/README.md,JavaScript,"JavaScript Function Parameters LabLearning GoalsDefine a function that uses a parameterDefine a function that uses two parametersDefine a function with a parameter that has a default valueIntroductionIn this lab, we'll practice using parameters in our functions. We'll also learnhow to create a default value for a parameter.If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)You will be writing your code in the index.js file and running the tests byrunning npm test in the terminal. Remember to run npm install first toinstall the lab's dependencies.Define a Function That Uses a ParameterInstructions: Define a function called introduction that defines aparameter, name, and returns the phrase: \""Hi, my name is ${name}.\""Define a Function That Uses Two ParametersSetting up your function to use two parameters is straightforward: simplyinclude both parameters in the parentheses in the function declaration line,separated by a comma:function logTwoValues(value1, value2) {  console.log(`The two values are ${value1} and ${value2}.`);}As you might expect, if we instead wanted to log three values — or tenvalues — we can just continue listing the parameters in the parentheses,with commas between each.Instructions: To pass the second test, you'll need to define a functioncalled introductionWithLanguage that defines two parameters, name andlanguage, and returns the phrase: \""Hi, my name is [name] and I am learning toprogram in [language].\""Define a Function That Uses an Optional ParameterIn a previous lesson, we created a function that logs a personalized greeting:function sayHelloTo(firstName) {  console.log(`Hello, ${firstName}!`);}What if we wanted to make this function work whether or not a first name ispassed in as an argument? We can do this by setting a default value for thefirstName parameter:function sayHelloTo(firstName = \""User\"") {  console.log(`Hello, ${firstName}!`);}Note that we have used the assignment operator (=) here to assign a defaultvalue. The way this works is, if the function is called with an argument, theargument's value will supersede the default value. If it's called without anargument, the function will use the default value, logging \""Hello, User!\""Instructions: Copy the function you created for the second test and name itintroductionWithLanguageOptional. It should have two parameters, name andlanguage, and the second parameter should have a default value of\""JavaScript\"".After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process."
16,romacher/morse-decoder,https://github.com/romacher/morse-decoder/blob/master/README.md,JavaScript,"Morse code decoderTaskYour task is to write a function, that decodes Morse code and returns a string.Write your solution in src/index.jsInput: String. Its length is multiple of 10.Each letter from alphabet encoded with dots(.) and dashes(-). 10 stands for dot(.), 11 stands for dash(-).Each encoded letter's length is 10.If the length of the encoded letter is less then 10, it left padded with 0.Space in string is **********.Output: String (decoded)Example: me -> m === -- === 0000001111, e === . === 0000000010 -> 00000011110000000010Prepare and testInstall Node.jsFork this repository: https://github.com/romacher/morse-decoder.gitClone your newly created repo: https://github.com/<%your_github_username%>/morse-decoder/Go to the folder morse-decoderRun npm install in command lineRun npm test in command lineYou will see the number of passed and failed testsSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (morse-decoder)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using any of features that does not supported by node v10, score won't be submitted.Please be sure that each of your test in limit of 30sec."
17,learn-co-curriculum/phase-0-pac-3-arithmetic-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-arithmetic-lab/blob/master/README.md,JavaScript,"JavaScript Calculator Challenge LabLearning GoalsPractice doing math with JavaScriptPractice writing functions that do things with numbersPractice parsing strings as numbersIntroductionIn this lab, we're going to practice writing functions and manipulating numbersin JavaScript. First, though, we need to review some basic math. In this lab,we're going to learn about various arithmetic operators. What's an operator, yousay? It's a symbol that operates on one or more (usually two) objects —+ is a good example. The + operator says \""add what's to the left of + andwhat's to the right of + together.\""If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)As you read through this lesson, you're going to be adding your solutions toindex.js. You'll write a total of eight functions. Use the results of runningnpm test to guide you towards the right function names and functionality.Remember to run npm install first to install the dependencies.Basic MathThe most fundamental math operations work as one might expect in JavaScript: +adds two numbers; - subtracts one number from another; * multiplies twonumbers; and / divides one number by another.Give it a try: type each of the following math examples into the REPL console.You can use the embedded console below or open replit in a separate windowif you prefer.1 + 80; //=> 8160 - 40; //=> 202 * 3.4; //=> 6.85.0 / 2.5; //=> 2<iframe height=\""400px\"" width=\""100%\"" src=\""https://replit.com/@lizbur10/Sandbox?embed=true\"" scrolling=\""no\"" frameborder=\""no\"" allowtransparency=\""true\"" allowfullscreen=\""true\"" sandbox=\""allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts allow-modals\""></iframe>Go ahead and run npm test and take a look at the first failing test:  1) basic math functions       'add()' is a valid function:     ReferenceError: add is not defined      at Context.<anonymous> (test/indexTest.js:10:12)      at processImmediate (node:internal/timers:464:21)The description of the test, 'add()' is a valid function, along with the errormessage, referenceError: add is not defined, tells us that we need to define afunction add(). Go ahead and create the add() function in index.js. Thistest is only looking for the function to exist, so we can leave the code blockempty for now:function add() {  // we'll fill this in shortly}Once you've added the empty function, run npm test again; the first testshould be passing. Go ahead and get the next three tests passing as well beforemoving on.Once you have the first four tests passing, the first error you get should looksimilar to this:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected undefined to equal 1078      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Note: the test document is randomly creating numbers to pass as arguments tothe functions in this lab, so the specific values you see in your errors willbe different from what's shown in this lesson, and will be different each timeyou run the tests!The tests have found our add() function, getting us past the first test, andnow we need to write the code inside the function to return what the test isexpecting. Let's break down the information from our error:add(a, b) adds two numbers and returns the result:Error: Expected undefined to equal 1078The first line tells us what our function needs to do, and the second line tellsus the specific error that is being thrown. Any time you see the error \""Expectedundefined to equal\"" something, that means the test is expecting your function toreturn a value but it's currently not returning anything (undefined). Let'ssee if we can just get that specific error cleared. We won't worry about exactlywhat we're returning just yet:function add() {  return \""something\"";}Running the tests now we get:  1) basic math functions       add(a, b) adds two numbers and returns the result:     Error: Expected 'something' to equal 853      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:26:23)      at processImmediate (node:internal/timers:464:21)Great! So now our function is returning \""something\"" instead of nothing! So thenext step is to look more closely at the test's description of the function tofigure out what should be returned:add(a, b) adds two numbers and returns the resultThe add(a, b) tells us the test is trying to pass two arguments to ourfunction, so let's get that set up:function add(a, b) {  return \""something\"";}The rest of the description tells us we need to add the two arguments togetherand return that value:function add(a, b) {  return a + b;}With this code, both tests for the add() function should now be passing!A Quick Note about Hard CodingThink back to the errors we were getting above, e.g., Expected undefined to equal 1078. One thing that might be tempting to do when addressing an errorlike this is to explicitly return exactly what the test is looking for:function add(a, b) {  return 1078;}This is what's known as hard coding and is virtually never what you shoulddo! If you think about it, it doesn't really make sense. We've created anadd() function that can take any two numbers as arguments but will alwaysreturn 1078. This makes it a pretty useless function. Instead, we want to createfunctions that will return the correct answer for whatever argument or argumentswe pass in.Go ahead and tackle the next three tests on your own. You should follow aprocess very similar to what we did above. Once you have those passing, continueto the next section.Math + AssignmentRecall that we can increment (++) and decrement (--) a number if it'sassigned to a variable. Don't forget to follow along in the REPL console.let number = 5;number++; //=> 5... hmmmmnumber; //=> 6 -- the number was incremented after it was evaluatednumber--; //=> 6number; //=> 5We can also put the increment and decrement operators before the number, inwhich case the number is evaluated after the operator is executed:--number; //=> 4number; //=> 4++number; //=> 5number; //=> 5But generally, you will see them placed after the number (and we recommendthat that's where you put them). If you're interested in the difference, take alook at the MDN documentation.And, while we're on the subject, you'll usually only want to use theseincrementors and decrementors when the shorthand makes what you're writingeasier to read (more on when exactly in a later lesson). Instead, it's best touse the basic arithmetic operators combined with =.Follow along in the REPL console. You can pick up where we left off with theprevious examples. Start by setting number equal to 5.+= modifies the value to the operator's left by adding to it the value tothe operator's right:number += 3; //=> 8-= modifies the value to the operator's left by subtracting from it thevalue to the operator's right:number -= 2; //=> 6*= modifies the value to the operator's left by multiplying it by the valueto the operator's right:number *= 10; //=> 60/= modifies the value to the operator's left by dividing it by the value tothe operator's right:number /= 5; //=> 12Note that these methods modify the variable in place. So, if we have twofunctions that depend on the same external variable, the order in which they arecalled matters. Follow along in the console://reset numbernumber = 10;function add5() {  return (number += 5);}function divideBy3() {  return (number /= 3);}divideBy3(); //=> 3.3333333333333335add5(); //=> 8.333333333333334// reset numbernumber = 10;add5(); //=> 15divideBy3(); //=> 5Because these methods are more explicit, we prefer += to ++ and -= to-- (usually).Okay, now we're ready to write solutions for the next two functions:increment(n) and decrement(n). As indicated by the tests, these methodsshould take a number as an argument, increment/decrement the provided value byone, and return the result.Parsing NumbersSometimes, we'll receive a number wrapped in quotes. We recognize it as anumber, but JavaScript will think it's a string. Luckily, JavaScript gives ustools to turn these strings into proper numbers (that is, numbers thatJavaScript understands).parseInt()The first such tool is the function parseInt(), which accepts two arguments:the value to parse and the base of the value being parsed (called the radix).Usually you will want to work with base 10, so a typical call to parseInt()looks like:parseInt(\""2\"", 10); //=> 2What happens if we pass a representation of a non-integer to parseInt()? Let'stry it:parseInt(\""2.2222\"", 10);If we enter the above in the REPL console, we will see that parseInt() forcesthe parsed number to be an integer — which makes sense when we think about it,right?What happens, though, if we pass utter nonsense to parseInt()? Go ahead andtry it — something like:parseInt(\""nonsense!\"", 10);What did it return? NaN? What is that?NaN stands for \""Not a Number\"" — pretty handy, right? This is the number (inthe JavaScript sense) that JavaScript returns when it can't determine a validvalue for a numeric operation.Note: You may see parseInt() used without a radix specified. In mostcases, the radix will default to 10, but not always! To be safe, you shouldalways specify a radix.parseFloat()Above, we saw that parseInt() lops off everything after the decimal point andonly returns integers. If we want to preserve decimals, we'll need to useparseFloat().Unlike parseInt(), parseFloat() accepts only a single argument, the thing tobe parsed. We can use it like so:parseFloat(\""80.123999\""); // 80.123999You now have the information you need to write the final two functions,makeInt(string) and preserveDecimal(string). makeInt(string) should takein a string, parse it into a base 10 integer and return it.preserveDecimal(string) should take in a string, parse it into a float andreturn it.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process.ResourcesMDN - parseInt()MDN - parseFloat()"
18,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
19,learn-co-curriculum/phase-0-the-dom-modifying-elements-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/blob/master/README.md,JavaScript,"Creating and Inserting DOM Nodes LabLearning GoalsCreate DOM elements programmaticallyAdd elements to the DOMUpdate elements using innerHTMLChange properties on DOM nodesRemove elements from the DOMIntroductionNow that you have an understanding of the DOM and powerful tools for selectingthe right elements, it's time to learn how to:Create new nodesDelete nodesUpdate node propertiesIf you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create DOM Elements Programmaticallydocument.createElement()Creating an element in JavaScript is an easy process. You simply calldocument.createElement('tagName'), where tagName is the name of any validHTML tag ('p', 'div', 'span', etc.).Open the index.html file in your browser and open up the browser's console. Inthe console, enter:const element = document.createElement(\""div\"");Then take a look at the Elements tab. The element doesn't show up on the page.Why not?Add Elements to the DOMTo get an element to appear in the DOM, we have to append() it to an existingDOM node. To go back to our tree metaphor, we have to glue our new leaf onto abranch that's already there. We can start as high up on the tree asdocument.body, or we can find a more specific element using any of the methodswe've learned for traversing the DOM.append()Let's append element to body to start:document.body.append(element);(Recall that element is a variable containing the div we created above.)Now if you look at the Elements tab, you'll see our new (empty) <div> nestedinside the body element.Next, let's create an unordered list:const ul = document.createElement(\""ul\"");To populate our unordered list, we'll use a for loop to create three li's,give them some content, and append them to the ul:for (let i = 0; i < 3; i++) {  const li = document.createElement(\""li\"");  li.textContent = (i + 1).toString();  ul.append(li);}In each iteration of our loop, we calculate the value i + 1 (an integer), turnit into a string using JavaScript's toString() method, and assign the resultas the value of the li's textContent attribute.Note: although the textContent attribute must be a string, the code wouldstill work even if we didn't use the toString() method — JavaScript willturn the value into a string for us. However, for clarity and completeness, itis best to set it to a string value explicitly.Finally, we'll append the ul to the div we created:element.append(ul);You should now see the unordered list rendered on the page, and see the newelements in the \""Elements\"" tab, like this:<div>  <ul>    <li>1</li>    <li>2</li>    <li>3</li>  </ul></div>Note that, each time we create a new element, we create a variable and save areference to it. That makes it quite easy to make additional updates and to addit to the DOM using append().Add Elements to the DOM via innerHTMLCreating elements and then appending them into the DOM is a multi-step process.It's also the safest and most reliable way to add content to the DOM. Mostrepeated code can be removed by using variables, functions and loops. It's TheRight Way.That said, however, there's another process that will also work, usingElement.innerHTML. Inside our loop above, we create an li element and setits textContent property to a simple number (expressed as a string) thatrepresents the current iteration through the loop. Once we append the li tothe ul and the ul to the document body, we see our unordered list in thebrowser window. This is a perfectly valid way to use textContent to addcontent to the DOM — essentially, textContent changes only what text shows upinside a DOM element:li.textContent = \""Hi there!\"";// => <li>Hi there!</li>console.log(li.textContent);// => \""Hi there!\""Imagine, however, that we want to add content that's more complicated.Assume our HTML includes a main element with an id of \""main.\"" We can grabthat element and set its innerHTML attribute to any HTML we like:const main = document.getElementById(\""main\"");main.innerHTML =  \""<h1>Poodles!</h1><h3>An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective</h3><p><em>By: Byron Q. Poodle, Esq., BA.</em></p>\"";Here we are using one big, long string, complete with multiple HTML tags, tocreate the following HTML in the DOM:<main id=\""main\"">  <h1>Poodles!</h1>  <h3>    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a    post-Frankfurt School Appropriationist Perspective  </h3>  <p><em>By: Byron Q. Poodle, Esq., BA.</em></p></main>This process works but it is not recommended for several reasons. First,it's more error-prone, and the errors can be difficult to find. Second, it cannegatively impact site performance. Finally, if you're inserting user-deriveddata (e.g., comments) into the DOM using innerHTML, you can expose your siteto the risk of users injecting malicious code.Programmatically creating and appending elements is safer and more efficient,and it results in code that's easier to read, easier to debug, and easier tomaintain.Change Properties on DOM NodesWe can change the appearance of a DOM node using its style attribute. Try thisout in the console:const element = document.getElementById(\""main\"");element.style.height = \""300px\"";element.style.backgroundColor = \""#27647B\"";You've changed what's on the screen!Feel free to set as many properties as you'd like — this is a good chance tolook around and explore different properties of DOM elements.Let's adjust the display. Add some text:element.textContent = \""You've changed what's on the screen!\"";Then change the style to see the effect:element.style.fontSize = \""24px\"";element.style.marginLeft = \""30px\"";element.style.lineHeight = 2;Perhaps the most common way to change how things appear in the DOM is bychanging an element's class attribute. As you know from CSS, we often changethe way a bit of rendered HTML appears by adding or removing a class.For example, we could create an alert class that turns the text red (using theCSS color attribute) and makes it big (using the CSS font-size attribute).We can then use JavaScript to first grab the element and then add the class byupdating the element's className property. This has the same effect as settingthe class property in the HTML. The className property expects a Stringwith one or more class names, separated by spaces:element.className = \""pet-listing dog\"";Check out the Elements tab to see the effect of this change:<main id=\""main\"" class=\""pet-listing dog\""></main>Another way to accomplish the same thing is by using the Element.classListproperty. This property has .add() and .remove() methods thatcan be used as follows:element.classList.remove(\""dog\"");element.classList.add(\""cat\"", \""sale\"");This approach allows you to easily add and remove classes programmatically,without having to create a long string of class names.<main id=\""main\"" class=\""pet-listing cat sale\""></main>Separation of ConcernsAn important thing to bear in mind is that we only want to use JavaScript tochange the appearance of an element when we need to make a change dynamically,i.e., in response to user actions. This goes back to a fundamental programmingconcept about separating concerns between technologies:HTML defines the structure of the website (not appearance or functionality)JavaScript defines functionality of the website (not structure or styling)CSS defines the visualization and style of the website (not structure orfunctionality)Defining the base CSS should still happen in the CSS files that are loaded intothe DOM when the page is opened.Remove Elements from the DOMWe know how to add elements and change their attributes. What if we want toremove an element from a page?removeChild()We use removeChild(), as you might guess, to remove a particular child of anelement:someElement.removeChild(someChildElement);Let's take a look at a more complex example:const ul = document.getElementsByTagName(\""ul\"")[0];const secondChild = ul.querySelector(\""li:nth-child(2)\"");ul.removeChild(secondChild);Here you can see the power of querySelector(): we can use it to find thesecond li element of ul. We then pass that element as the argument to ourremoveChild method, which removes the element from our ul.What if we want to remove the whole unordered list (ul)?element.remove()We can just call remove() on the element itself:ul.remove();And it's gone!InstructionsFrom this point forward, many of the labs will work a little differently fromones you've done before. Specifically, the tests will mock the process of 1)running JavaScript code in the browser and 2) seeing the results of that coderepresented in the DOM. Take a look at test/indexTest.js to see the tests'descriptions of the changes your code should be making to the DOM elements.Note that you do not need to create functions for this lab. Just create the lineor lines of JavaScript necessary to pass each test. As usual, you will writeyour code in the index.js file.One final note: the last test in the test/indexTest.js file is looking for thetext \""YOUR-NAME is the champion\"" (with your name — or whatever text you choose —in place of YOUR-NAME) inside your newly created DOM node. While there are anumber of ways you could accomplish this, you should use either thetextContent or innerHTML property to setthe text inside your DOM node. The innerText property would technically workas well; however, the tests won't pass if you use this approach, and generallyit's not a good practice to use innerText when setting the contents of anelement. This StackOverflow answer does a good job explaining somedifferences between these properties.Resourcesdocument.createElement()append()removeChild()element.remove()classList Property"
20,moment/moment,https://github.com/moment/moment/blob/develop/README.md,JavaScript,"Moment.jsA JavaScript date library for parsing, validating, manipulating, and formatting dates.Project StatusMoment.js is a legacy project, now in maintenance mode.  In most cases, you should choose a different library.For more details and recommendations, please see Project Status in the docs.Thank you.ResourcesDocumentationChangelogStack OverflowLicenseMoment.js is freely distributable under the terms of the MIT license."
21,learn-co-curriculum/phase-0-html-tag-lab,https://github.com/learn-co-curriculum/phase-0-html-tag-lab/blob/master/README.md,JavaScript,"Your First HTML Tag LabLearning GoalsCode an h1 tagSet the inner text of the h1 to Hello, World!IntroductionSo far, we've seen how to markup content with HTML, how to structure an HTMLdocument and what HTML tags look like. Now let's focus on writing a single HTMLtag from scratch and examining each of its parts.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Code an h1 TagOpen index.html in your text editor. Add the h1 opening and closing tags.Set the Inner TextInside of the opening and closing h1 tags, insert the text: Hello, World!.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Viewing Your Work in the BrowserWhile working through these assignments, your general workflow should center onwriting code in the text editor and periodically running the test suite in theterminal to check your work.Another great way to track your progress is to open up the HTML document in yourbrowser and watch how each change you make in the text editor affects the visuallayout in the browser.You can open index.html a few ways, depending on the environment you are in:For Mac users:Open from the Terminal by running open index.html in the root directory ofthis labUse Finder to navigate to this lab's local folder and click the index.htmlfileFor WSL users:Open from Ubuntu by running explorer.exe index.html in the root directory ofthis labOpen a new Explorer window. There is a bar that says \""Quick Access\"" along thetop of the window (similar to a URL bar in a browser). Click this and type\\\\wsl$ to access files and folders on Ubuntu. Navigate to/home/<your-user-name>/ to get to your home directory, then locate thislab's local folder and click the index.html file.Once you have the HTML document open in your browser, you can make changes to itin a text editor, save the file, refresh the page in the browser, and see thechanges.ConclusionCongratulations! You wrote your first HTML tag. Now you can use your knowledgeof this basic building block to learn more HTML tags and see how they work witheach other to create an entire HTML document structure. Remember to submit yourwork in CodeGrade before moving on.Resourcesh1-h6 TagsSolving the First HTML Lab (Ifyou're stuck, here's a video walk-through of the lab to help you out.)"
22,algorithm-visualizer/algorithm-visualizer,https://github.com/algorithm-visualizer/algorithm-visualizer/blob/master/README.md,JavaScript,"Algorithm VisualizerAlgorithm Visualizer is an interactive online platform that visualizes algorithms from code.Learning an algorithm gets much easier with visualizing it. Don't get what we mean? Check it out:algorithm-visualizer.orgContributingWe have multiple repositories under the hood that comprise the website. Take a look at the contributing guidelines in the repository you want to contribute to.algorithm-visualizer is a web app written in React. It contains UI components and interprets commands into visualizations. Check out the contributing guidelines.server serves the web app and provides APIs that it needs on the fly. (e.g., GitHub sign in, compiling/running code, etc.)algorithms contains visualizations of algorithms shown on the side menu of the website.tracers.* are visualization libraries written in each supported language. They extract visualizing commands from code."
23,learn-co-curriculum/phase-0-css-rainbow-lab,https://github.com/learn-co-curriculum/phase-0-css-rainbow-lab/blob/master/README.md,JavaScript,"My Little RainbowLearning GoalsReview HTML basicsReview CSS basicsSpecify hexadecimal color values with CSSIntroductionIn this lab, we're going to make a rainbow with HTML <div> elements. And whilewe do it we're going to learn about HTML elements, CSS styling, CSS selectors,how color works in CSS and importing style sheets.Before we start, here's some basic info about HTML and CSS. Skip toMake a CSS Rainbow if you feel comfortable enough with HTMLand CSS.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you work to see your test progress.Review HTML BasicsHyper Text Markup Language, or HTML, is a way to structure a document withdifferent parts. Each section of content is marked by elements (using tags).Each element has its own special meaning that the browser uses to render theHTML document. Use this cheat sheet on HTMLelements for guidance.ElementsAll begin with < and end with >, e.g., <div> (this last part is a tag).Most have an opening tag such as <div> and a closing tag </div>.The / indicates to the browser that that tag is a closing tag.The element is everything between the tags and the tags themselves.Some tags are self-closing like the line break element <br>.Elements can have IDs and classes to aid the browser in finding specific tags.Must begin with a letter A-Z or a-z.Can be followed by: letters (A-Za-z), digits (0-9), hyphens (-), andunderscores (_).IDs can only be used once per page. E.g.:<div id=\""this-special-div\""></div>.Classes can be used as many times as you want. E.g.:<div class=\""a-less-special-div\""></div>.Elements nested inside other elements are called children.Children inherit attributes from their parents.Don't nest everything.Elements next to one another are siblings.Siblings do not inherit from one another but are important for selecting inCSS.Here is an example of element relations:<div>  <!-- the parent element -->  <p></p>  <!-- the first sibling element/the first child-->  <p></p>  <!-- the second sibling element/the second child --></div>Review CSS BasicsCascading Style Sheets, or CSS, is a language created to style HTML documents bytelling the browser how specific elements should look. CSS does this byselecting elements based on their tag, ids, classes, or all of the above. Thereason for CSS is the separation of concerns. We want HTML to focus on thestructure and meaning of our content. We let CSS worry about how to make thatinformation appear clear and engaging.CSS selectorsThey select elements to assign them styles.* (wildcard) selects every element.An element, such as div, will select all elements of that type.They select an id like #some-idClasses are selected like this .some-classTo select all children elements of a parent do something like this div pTo select multiple different elements separate them by commas like thisdiv, p, aHere's an example of CSS styling:* {  color: red; /* color in CSS refers to font color */} /* all elements will have red font */ Make a CSS RainbowIn the directory, you'll see three files: index.html, main.css, and thisfile, README.md. Open index.html.If everything is working correctly, you should see a white page.Good job!Making the Divs VisibleIf you look at the file in your text editor or use the inspector, you'll seethat the basic HTML structure is present in index.html. So why can't we seeanything?Well, divs are structural elements. They're used to invisibly group othervisible elements together. But the style sheet that would tell our divs to dosomething a little different hasn't been linked yet!Let's fix this by adding the style sheet to the head:<head>  <title>My Little Rainbow</title>  <link rel=\""stylesheet\"" type=\""text/css\"" href=\""./main.css\"" /></head>Link is a self-closing tag that will create a relative path with the hrefattribute. A relative path ./main.css means the browser knows that themain.css file is in the same place as index.html. The head is a hiddenpart of the page that tells the browser where to find any other files it needsto display the page correctly, the title for the tab, and any other possibleimportant information.Now if you refresh the index.html page in your browser you should see aperfectly solid-black rainbow.We got the basic outline because in the main.css all the div elements wereselected and given a border whose color is #000, \""black.\"" While we could setborder-top-color: red;, we will have more colors available if we define colorswithout words.Instead of red, green, or the exotic tomato, professionals prefer a set ofnumbers with a base pair of 16 rather than a base pair of 10 like we use everyday. These numbers are called \""hexadecimal\"" and we can use them to make a widerange of colors.Some Stuff You Should Know About Hex Colors (and Web Colors in General)Hex colors begin with # and are followed by, generally, 6 numbers, but some ofthese numbers are actually letters. The lowest single digit number in hex is 0and the highest single digit number is f. This table might help to visualizewhat we mean by this.Decimal Numbers:      0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16Hexadecimal Numbers:  0, 1, 2, 3, 4, 5, 6, 7, 8, 9,  a,  b,  c,  d,  e,  f, 10Hex colors work by creating Red, Green, Blue (RGB) values. Traditional RGBcolors are on a scale of 0 to 255 for each of the three colors in the spectrum.Hex colors are considered true colors since they can represent ~16 millioncolors—but your eye can only see 10 million of those. So #000000 translates toblack since 0 reds, 0 green, 0 blues represents the absence of all colors, and#ffffff makes white since 255 reds, 255 greens, and 255 blues is the maximumof each of the colors.Hex colors can be shortened to just three numbers when each RGB value is thesame for each digit. So #11dd99 can be written as #1d9.Coloring the RainbowTo get ROYGBIV onto our rainbow we'll need seven hex colors. Red: #f00;Orange: #ffa500; Yellow: #ff0; Green: #00bc3f; Blue: #06f; Indigo:#8a2be2; Violet: #d300c9All we have to do next is select each div individually and apply each of thosecolors. That is a perfect use for ids since they're meant to style one specificelement only. We need to add an id for each div so a logical name for each divwould be the color that they have to be. It could be something random, but goodnames make for semantic code. So let's give the outermost div the id red.<div id=\""red\"">...</div>To give that id some CSS attributes we'll go into main.css, select the id, andmark its color as red.#red {  /* this selects any elements with the red id */  border-top-color: #f00;}To make sure the rainbow isn't so monochromatic you now need to repeat the abovesteps with the final six colors, and when you do you should have a complete,colorful rainbow.Moving OnWhen you're done with this lab type npm test to confirm you've passed all thetests.ConclusionAfter we reviewed HTML and CSS basics, we moved on to create an HTML rainbow. Welinked our style sheet to our HTML page and added ids to our HTML elements. Wethen created CSS rules, using hexadecimal color values, for those elements todisplay all the colors on our completed HTML page."
24,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
25,learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Intro to Functions LabObjectivesPractice writing functionsExplain basics of working with stringsExplain the difference between return and loggingPractice using return and console.log()IntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.Even if you've walked through some of this material before, it's a good idea toreview as we code-along — we're writing functions now, after all.Code-AlongFor now, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require('expect');const babel = require('babel-core');const jsdom = require('jsdom');const path = require('path');This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run your tests. A library is code that someone else(usually multiple someone elses) wrote for our use. Note that require won'twork out of the box in the browser. We're actually running our tests in adifferent environment.If you go to test/index-test.js, you'll seedescribe('shout(string)', function(){  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe('shout(string)', function(){  it('receives one argument and returns it in all caps', function() {    // we'll get to this in a sec  })})These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout('hello')).toEqual('HELLO')which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, run learn test in the terminal in your Learn IDE. The firstoutput you'll see will look like> java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) calls console.log() its one argument in all caps  logWhisper(string)    4) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  0 passing (99ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/index-test.js:4:5)      at processImmediate (internal/timers.js:456:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  3) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  4) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  7) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hm, seven failed tests. Let's see if we can get that first test topass. Open up index.js.When we write our code, we follow the guidance of the tests. Remember the line,describe('shout(string)', function() { ... }). Well, we know that we need afunction called shout that accepts an argument — let's add that first. Inindex.js:function shout(string) {}And what should that function do? Well, the it() description tells us that it\""receives one argument and returns it in all caps\"".Okay, so with that information, we know that our function should look like this:function shout(string) {  return string}But how do we make string all caps? JavaScript has a method for that! It'scalled toUpperCase(). We can call it on any string:'Hello!'.toUpperCase() // 'HELLO!'So let's try it with our shout() function:function shout(string) {  return string.toUpperCase()}And run our tests again:learn testshout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  logShout(string)    2) calls console.log() its one argument in all caps  logWhisper(string)    3) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    4) returns \""I can't hear you!\"" if `string` is lowercase    5) returns \""YES INDEED!\"" if `string` is uppercase    6) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  1 passing (108ms)  6 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  2) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  3) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  4) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hey! We got one to pass! Six left.Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!In this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing becasue whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.The next two tests are checking to see if a specific string is logged when afunction is called. You will still need to use the .toUpperCase() and.toLowerCase() methods for logShout(string) and logWhisper(string). Keep inmind though that these tests are not looking for return values, only logs.The final function you need to create is sayHiToGrandma(). Grandma is a bithard of hearing, so whispering can be a bit difficult, but she'll always hearyou if you say, \""I love you, Grandma.\"" This time, you will need to returndifferent strings depending on the string passed into the function.Note: Although there are 3 tests for sayHiToGrandma(), you only need towrite one function. This function should be able to handle all three testconditions:If the string that is passed into the function is all lowercase, thefunction should return \""I can't hear you!\""If the string that is passed into the function is all uppercase, thefunction should return \""YES INDEED!\""If the string that is passed into the function is equal to \""I love you,Grandma.\"", the function should return \""I love you, too.\""How do we check if a string is all lowercase or all uppercase?var uppercase = \""HELLO!\""uppercase.toUpperCase() === uppercase // truevar lowercase = 'hello!'lowercase.toLowerCase() === lowercase // truevar mixedCase = 'Hi there!'mixedCase.toLowerCase() === mixedCase // falsemixedCase.toUpperCase() === mixedCase // falseWe can simply check whether the string is the same when we convert it touppercase or lowercase! (The lines with the === comparisons are the ones thatcheck). If it's the same, then it was already in that case; if not, then it'seither in the other case or it's mixed case. Now that we know how to comparestrings, how can we use these comparisons to conditionally return differentstrings?Remember that punctuation is important! Humans might be able to understand that\""I love you Grandma\"" is close enough to \""I love you, Grandma.\"" and means thesame thing but JavaScript will not consider these equal!Good luck! When all tests are passing, be sure to run learn submit!View Intro to Functions Lab on Learn.co and start learning to code for free."
26,learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/blob/master/README.md,JavaScript,"Testing with JavaScript LabLearning GoalsRunning testsReading test resultsRunning TestsYou understand how to read tests; now it's time to run the tests.Recall that in the previous lesson, the tests were commented out. Be sure to forkand clone this lab into your local environment so you have the version of the testfile that is not commented out. (Return to the previous lesson if you need a reminderof how to do this.)Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code. (If you are using a different text editor, the commandwill be different.) Finally, run npm install to install the lab'sdependencies.What exactly do we mean by installing dependencies? Open the package.json fileand scroll down to the bottom. You'll see a list of 'DevDependencies'. What'slisted here are JavaScript packages: files or sets of files full of existing,reusable code. They are designed to be shared, allowing many developers to usethe same code in their own projects. The packages you see listed inpackage.json make it possible to run the lab's tests. In order to use thepackages, we have to install them; npm install does that for us.If you take a look at index.js and indexTest.js, you should see the samecode as in the previous lesson. The only difference is that the test code inindexTest.js is no longer commented out.Important: You should never need to make changes to test files unless alab's instructions specifically tell you to do so.To run the tests, run npm test in the terminal. That's it!The next step is learning how to read the results that the tests give you.Reading Results of TestsThe first time you run npm test, you should see something that looks likethis:> js-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40 and greater than 0    Message      ✓ gives the name and height  1 passing (552ms)  2 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)npm ERR! Test failed.  See above for more details.Note: If you also get an error that ends with \""unexpected character (after) at line 1, column 1 [parse.c:769] (Oj::ParseError)\"", make sure you've cloneddown the files for this lab, and are not running the tests on the files fromthe previous lesson.Let's break this down a bit. If you look about a third of the way down in theoutput, you'll see a summary of how the tests went:  1 passing (552ms)  2 failingGreat! We've already got one test passing! Now let's see how we failed the othertwo tests.  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)While there is no hard and fast rule, and there will be exceptions, it is mostoften best to address your test errors in order. So let's take a look at ourfirst error:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:456:21)Here is the specific error:      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +SusanIt tells us what the test is expecting (Expected 'Joe' to equal 'Susan') andthen gives us details about the expected and actual values. This shows youexactly how the value your code is returning (the actual value) differs fromwhat the test is looking for. Make sure you understand what this is telling you— it will come in handy in later labs!This error makes sense because we have the name variable set equal to \""Joe\"" inour index.js file. Let's change that line of code to set name equal to\""Susan\"" instead. Run the tests again by typing npm test in the terminal'scommand line (don't forget to save the file first!), and you should see thatwe are now passing 2 of the 3 tests!  what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40 and greater than 0    Message      ✓ gives the name and height  2 passing (736ms)  1 failing  1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)Woot! You passed another one. Now go ahead and try to pass the remaining test onyour own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Variable Not DefinedReferenceError: name is not definedThat one says that the name variable is not defined. That makes no sense! Weinitialized the name variable in index.js! What that actually means is thatthe test couldn't find the variable name. You'll get this error if the name ofone of your variables is different than the test is expecting. Check to makesure you used the correct variable names and look carefully for typos.Unexpected Identifier/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1cnst name = \""Susan\"";     ^^^^SyntaxError: Unexpected identifier    at wrapSafe (internal/modules/cjs/loader.js:979:16)    at Module._compile (internal/modules/cjs/loader.js:1027:27)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/indexTest.js:1:15)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36    at Array.forEach (<anonymous>)    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)    at internal/main/run_main_module.js:17:47npm ERR! Test failed.  See above for more details.Whoa! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake. It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to thecnst name = \""Susan\"" line of code. Take a look and read very carefully:const is misspelled. Whoops! Once we fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine-toothed comb... and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test isgiving us a unique message because it recognizes a problem. If we look at thistest in test/indexTest.js, we see this:describe(\""Height\"", () => {    it(\""is less than 40 and greater than 0\"", () => {      expect(height).toBeMoreThan(0)      expect(height).toBeLessThan(40);    });  });We can see that the word \""actual\"" in this case is referring to the heightvariable. The error message is telling us that height must be a number. Ifyou're seeing this, make sure that you have set the height variable to anumber that's less than 40 (e.g. 39), not a string (\""39\""). The testwill interpret the value as a string due to the quotation marks wrapping it.Optional Mocha ConfigurationIn this lab, we only had three tests to pass, but as you continue through thecurriculum you will encounter labs with many more tests. You can imagine thatthe test output could get very long, making it more difficult to focus in on howto fix a particular error.To help with this issue, there is some very simple setup you can put in place inMocha that will cause the tests to stop as soon as the first failing test isencountered.To implement this, open up the package.json file and find the test script. Itshould look something like this:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\""Add the --bail flag to the end of the line, inside the quotes:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""That's it!Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theComplete Your First Software Engineering Assignmentlesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.Note about the git push commandYou may recall from the Complete Your First Software EngineeringAssignment lesson that a different form of the git pushcommand was used:$ git push <remote> <branch>where remote is the \""alias\"" for the repo's url on GitHub, and branch is therepo's default branch (generally main for newer repos and master for olderones). For this lab, therefore, the full command would be:$ git push origin masterThis command tells git to push the code in the master branch of the local repoto the master branch of the remote repo identified by the origin alias.So why didn't you need to run that command?When you use the git clone command to clone down a repo from GitHub, gitautomatically assigns the \""origin\"" alias to the url you clone from, and usesthe default branch for that repo.As you work through the labs in this program, you should always:fork the lab's repo to your GitHub account, andclone that fork down to your local machine.As long as you always fork before you clone, it should be safe to run git push without specifying the remote and branch.If you want to verify that you're pushing to the right repo, you can use thegit remote command and include the -v flag:$ git remote -vorigin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (fetch)origin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (push)Here you can see that the origin alias points to your fork of the repo, soit's safe to run the shorter command, git push.ConclusionNow that you've gotten all your tests passing and submitted your work (andlearned a bit more about git push), you're ready to move on. Congratulations!You've solved your first JavaScript tests!"
27,NARKOZ/hacker-scripts,https://github.com/NARKOZ/hacker-scripts/blob/master/README.md,JavaScript,"English | 简体中文Hacker ScriptsBased on a truestory:xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.xxx: So we're sitting here, looking through his, uhm, \""legacy\""xxx: You're gonna love thisxxx: smack-my-bitch-up.sh - sends a text message \""late at work\"" to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.xxx: kumar-asshole.sh - scans the inbox for emails from \""Kumar\"" (a DBA at our clients). Looks for keywords like \""help\"", \""trouble\"", \""sorry\"" etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply \""no worries mate, be careful next time\"".xxx: hangover.sh - another cron-job that is set to specific dates. Sends automated emails like \""not feeling well/gonna work from home\"" etc. Adds a random \""reason\"" from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.xxx: (and the oscar goes to) fucking-coffee.sh - this one waits exactly 17 seconds (!), then opens a telnet session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has a TCP socket up and running) and sends something like sys brew. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.xxx: holy sh*t I'm keeping thoseOriginal: http://bash.im/quote/436725 (in Russian)  (Archive.org link)Pull requests with other implementations (Python, Perl, Shell, etc) are welcome.UsageYou need these environment variables:# used in `smack-my-bitch-up` and `hangover` scriptsTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy# used in `kumar_asshole` scriptGMAIL_USERNAME=admin@example.orgGMAIL_PASSWORD=passwordFor Ruby scripts you need to install gems:gem install dotenv twilio-ruby gmailCron jobs# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh >> /path/to/smack-my-bitch-up.log 2>&1# Runs `hangover.sh` monday to friday at 8:45 am.45 8 * * 1-5 /path/to/scripts/hangover.sh >> /path/to/hangover.log 2>&1# Runs `kumar-asshole.sh` every 10 minutes.*/10 * * * * /path/to/scripts/kumar-asshole.sh# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.shCode is released under WTFPL."
28,dcloudio/mui,https://github.com/dcloudio/mui/blob/master/README.md,JavaScript,mui性能和体验的差距，一直是mobile app开发者放弃HTML5的首要原因。 浏览器天生的切页白屏、不忍直视的转页动画、浮动元素的抖动、无法流畅下拉刷新等问题，这些都让HTML5开发者倍感挫败，尤其拿到Android低端机运行，摔手机的心都有； 另一方面，浏览器默认控件样式又少又丑，制作一个漂亮的控件非常麻烦，也有一些制作简单的ui框架但性能低下。mui框架有效的解决了这些问题，这是一个可以方便开发出高性能App的框架，也是目前最接近原生App效果的框架。赞助我们一个手艺人需要3万个粉丝养活，希望你能成为其中之一，前往赞助参考文档mui官网文档使用Jekyll 构建，立即查看。快速体验在线下载或扫描如下二维码下载Hello MUI，可在手机上体验MUI的控件UI及能力展示；在线交流若你在使用过程中有任何经验、想法、疑惑，都可以在问答社区 发起文章，和其它mui用户一起交流；Licensemui遵循MIT License；开发工具mui组件已被封装成HBuilder代码块，只需要简单几个字符，就可以快速生成各个组件对应的HTML代码，因此和Hbuilder两个一起用，效果会更好；
29,learn-co-curriculum/phase-0-javascript-events-event-listening-lab,https://github.com/learn-co-curriculum/phase-0-javascript-events-event-listening-lab/blob/master/README.md,JavaScript,"JavaScript Event Listeners LabLearning GoalsCreate event listeners on DOM nodes using addEventListener()IntroductionIn this lab we will learn how to teach nodes to \""listen\"" for an event usingaddEventListener().If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create Event Listeners on DOM Nodes with addEventListener()In order for JavaScript to handle an event, we first need to tell it to listenfor that event. We do this by calling the addEventListener() method on theelement we want to add the listener to, and passing it two arguments:the name of the event to listen for, anda callback function to \""handle\"" the eventOpen up index.html in the browser. When you click in the <input> area,nothing happens. Let's set up some event handling. Specifically, let's add anevent listener for the click event on the input#button element inindex.html.Try out the following in the Chrome DevTools console:const input = document.getElementById('button');input.addEventListener('click', function() {  alert('I was clicked!');});Now when you click inside of input#button, you will get an alert box.Let's review what's happening in this code.First, we grab the element that we want to add the event listener to and save areference to it in the input variable.Next, we call addEventListener() on that element to tell JavaScript to listenfor the event. We pass two arguments to addEventListener(): the name of theevent to listen for (in this case, click) and a callback function that willbe executed when the event is \""heard.\""According to MDN:A callback function is a function passed into another function as an argument,which is then invoked inside the outer function to complete some kind ofroutine or action.That's exactly what's happening here: we're passing a callback function as thesecond argument to the addEventListener() function; the callback will beinvoked as soon as the event occurs.Let's pull out that second argument and take a look at it:function() {  alert('I was clicked!');}This function has all the components of functions we've seen before (thefunction keyword, a pair of parentheses, and the body of the function enclosedin curly braces) except one: it doesn't have a name assigned to it. This iswhat's called an anonymous function. Because it doesn't have a name, it can'tbe invoked directly. But the event listener knows to execute whatever functionis passed as the second argument when it detects the event, so it doesn't needto be named.If we are only calling our callback function in that one place, using ananonymous function makes sense. However, what if we wanted to use that samealert message on a bunch of elements? In that case, it would make more sense tocreate a separate, named function that could be called by all of our eventlisteners. With this approach, we would pass the function name as the secondargument to addEventListener() rather than the function itself:const input = document.getElementById('button');function clickAlert() {  alert('I was clicked!');}input.addEventListener('click', clickAlert);We could then attach our clickAlert to as many elements as we'd like. Just aswe did for the input element, we would first use our CSS selector skills tograb the desired element and save it to a variable, then add the click eventlistener to that element. Give it a try!With this approach, even if we're using our clickAlert with a whole bunch ofelements, if we decide later that we want to change the text of the alert to\""Hee hee, that tickles!\"" instead, we would only need to make that change in oneplace: inside our clickAlert() function.Note: we pass clickAlert as the argument, not clickAlert(). This isbecause we don't want to invoke the function in this line of code. Instead, wewant to pass a reference to the function to addEventListener() so it cancall the function when the time comes.Refresh your browser and try out the latest version of the code in the consoleto verify that it works. Also try passing clickAlert() as the second argumentrather than clickAlert and see what happens.Passing the TestsNow let's set up index.js to do the same thing so we can get our test passing.To do that, simply copy the code into the index.js file'saddingEventListener() function and run the test. Either version should passthe test — just make sure that the code creating the event listener is insidethe addingEventListener() function.Checking the Code in the BrowserWe know that the code works in the console and passes the test, but we shouldalso check our changes to index.js in the browser. Because you've added theaddEventListener() function inside the addingEventListener() function,recall that you will need to call the outer function in index.js to executeaddEventListener() and activate the event listener. Be sure to refresh thepage to load the new code in index.js.ResourcesMDN - Web Events"
30,learn-co-curriculum/phase-0-html-images-lab,https://github.com/learn-co-curriculum/phase-0-html-images-lab/blob/master/README.md,JavaScript,"HTML ImagesLearning GoalsRecognize the img tagUse img tag attributesCreate imagesIntroductionImages are absolutely critical to making appealing and engaging websites. Canyou imagine the web without them? No cat memes. No animated dancing bananas! NoInstagram, at all. The internet would be a pretty boring and sad place!In this lesson, we will be discussing how to include images in your HTML, alongwith some important attributes of the tag. With images, you can make your webpages much more engaging and visually appealing.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize the img TagImages are inserted into HTML using the img tag. The tag can display a varietyof image types, including animated GIFs, bitmaps and vector graphics, thoughmost often, the images we see on the internet are JPEG and PNG files.The img tag is self closing, meaning it doesn't wrap around content or text.Instead, the relevant information is stored in attributes within the tag itself.There are two main attributes, src, the source of the image, and alt, thealternate text.Use the img Tag AttributesThe Image Source AttributeThe src attribute provides the relative path or URL to the image file we wantto display. The image file can be local; for example, if you're publishing awebsite and have your images stored in a folder within your file structure, yoursource may look like this:<img src=\""../images/my_company_logo.png\"" />However, it's very common, even when publishing your own websites, to haveimages hosted somewhere else on the internet. In these situations, we need toprovide a full URL as the source:<img src=\""https://i.imgur.com/H1qsYEl.png\"" />The src attribute is always necessary, as without it, the img tag would havenothing to display.The Image Alt AttributeThe alt attribute contains text relevant to the image we're displaying, andwill appear in its place if the image fails to load.Alt text is important for screen readers for the visually impaired, as the textwill be read out loud to the site visitor. Alt text also improves accessibilityfor non-disabled users, who will get a message if the image fails to load. It isespecially important if the image is used as additional content that expandsupon the written content.Alt text on a failed image will appear along with a small 'broken image' icon:To include an alt attribute, add it in along with the src attribute:<img  src=\""https://i.imgur.com/H1qsYEl.png\""  alt=\""comedic crow gets wholesome support\""/>Note that we've separated out each attribute on its own line in the HTML above.When an element gets too long for one line in your text editor, separating thecode as shown above will keep your HTML code more readable.Note: While alt text isn't required for the browser, adherence to theAmericans with Disabilities Act is often enforced through legislation. Yourbrowser will not throw an error if there is no alt text with an image, so itis up to you as the developer to adhere to best practices for accessibility.The Image Title AttributeOne additional attribute that can be useful is the title. Content added tothis attribute will display when we hover over the image with our mouse. If wewere creating an img tag with src, alt and title for a company logo, itmight look something like this:<img  src=\""../images/my_company_logo.png\""  alt=\""my company name\""  title=\""We're here to help you!\""/>When a visitor to your company site hovers over the logo, they'll see a messageappear saying 'We're here to help you!'The title attribute isn't necessary and is often left out, but can be a nicedetail to include.Create ImagesIts time to practice creating some images! For this challenge, feel free to useany images you'd like — the tests are looking for the correct tag andattributes, not the content. If you're not sure what to use, feel free to usethe following URL as your source:https://s3.amazonaws.com/ironboard-learn/lion.jpgYour challenge is to write three image tags:The first should have just a source attributeThe second should include an alt attribute, in addition to a sourceThe third should have both an alt and source attribute, as well as a titleattributeRun npm test and read the tests as you go.ConclusionWith images, we can fill our web pages with visual content in addition to text.Brand logos, animated instructional guides, personal artwork and photography, orpictures of you and your friends — you now have the ability to create visuallyappealing content of any type!"
31,learn-co-curriculum/phase-0-html-album-cover-lab,https://github.com/learn-co-curriculum/phase-0-html-album-cover-lab/blob/master/README.md,JavaScript,"HTML Album CoverLearning GoalsUse common HTML tags to produce a webpage based on a mock-upIntroductionLearning all the individual pieces that make up a web page is a necessary firststep in the process of learning HTML, but one of the best ways to solidify theconcepts we've learned is to apply concepts together. In this lab, your taskwill be to update index.html based on commented notes in the file, using whatwe've learned about text formatting and displaying images.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Apply Header, Paragraph, Image and Span TagsPharrell isn't quite happy, he needs some help coding the album cover for hishit song \""Happy.\"" His dev chops aren't quite as skilled as yours, so he's hiredyou to take care of business.Pharrell did provide us with a mock-up of what he would like to see for thedesign of the album cover:In the industry, front-end developers are typically given specs just like thisfrom the product team and then asked to write the code to make a website lookjust like the spec. Today, you're the developer and Pharrell is the productteam.Use SOURCE.mdPharrell has provided us with the text for the album and all the legalmumbo-jumbo to give credit where credit is due. You can find that text inSOURCE.md. Again, this is a typical industry standard workflow, where thedevelopers are given a copy for the site from the product team.Each line of text in this file corresponds to a note in index.html that willindicate where you'll need to add this information. It will be up to you to pickwhich HTML tags to use.DeliverablesWrite your code in index.html. Your job is to make sure the text fromSOURCE.md makes it into index.html surrounded by the appropriate HTML tags.You can see the images you'll be using in the 'images' folder, but you'll haveto write the correct URL paths (like http://..../image-name) in order for themto display correctly. The comments in the index.html will help you with this.You may not have encountered the span tag before, so if you are curious, takea moment to read up on some reference material to better understand its use.Open index.html in a separate browser tab to see your progress on the AlbumCover as you build it.Run npm test to make sure you've met all the deliverables and passed thetests.ConclusionA lot of the formatting in this lab is done using CSS, or Cascading StyleSheets, a language that defines styling for HTML. Before we can get to moreelaborate styling, though, it is important to have a strong understanding ofHTML fundamentals.In this lab, we've tested that understanding by having you practice applyingheaders, image, and paragraphs. Completing this lab means that you have a solidfoundation that we can build upon as we continue to learn about web development.Clap along if you feel you're getting the hang of HTML!"
32,layui/layui,https://github.com/layui/layui/blob/main/README.md,JavaScript,"        Layui  Classic modular front-end UI library                                  Layui 是一套开源免费的 Web UI 组件库，采用自身轻量级模块化规范，遵循原生态的 HTML/CSS/JavaScript 开发模式，极易上手，拿来即用。其风格简约轻盈，而内在雅致丰盈，甚至包括文档在内的每一处细节都经过精心雕琢，非常适合网页界面的快速构建。Layui 区别于一众主流的前端框架，却并非逆道而行，而是信奉返璞归真之道。确切地说，它更多是面向于追求简单的务实主义者，即无需涉足各类构建工具，只需面向浏览器本身，便可将页面所需呈现的元素与交互信手拈来。快速上手使用 Layui 只需在页面中引入核心文件即可：<!DOCTYPE html><html>  <head>    <meta charset=\""utf-8\"">    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1\"">    <title>Quick Start - Layui</title>    <link href=\""./layui/css/layui.css\"" rel=\""stylesheet\"">  </head>  <body>    <!-- HTML Content -->    <script src=\""./layui/layui.js\""></script>    <script>    // Usage    layui.use(function(){      var layer = layui.layer;      // Welcome      layer.msg('Hello World', {icon: 6});    });    </script>   </body></html>使用文档最新文档项目参与项目参与者破旧立新 🌱2016年10月14日，Layui 发布了 1.0.0 首版，此后多年被广泛应用于众多 Web 平台。2021年10月13日，Layui 发布了原官网下线的公告（导读），并将文档站点切换到了 Gitee Pages，社区及日常维护亦全面转移到了 Gitee 和 Github 平台，以此呼吁大家拥抱其他更好的主流框架，导致大家误以为 Layui 停更了。事实上，自那以后，Layui 仍然在 Github 和 Gitee 保持活跃，并不存在所谓的停止更新，从当时的 2.6.8 一直连续迭代到如今的最新版本。2023年4月24日，Layui 发布了 2.8.0 正式版，并上线了新的文档站点，这是一次朴实的回归，更是情怀的延续。 但我们仍然坚持两年前那则公告中的观点， 即仍然推荐大家去拥抱主流，始终保持对前沿技术的无限热爱，是开发者们都应具备的思维属性。 而 Layui 所做的，是为填补主流之外的那些略显狭小的空隙。Layui 虽不是前端主流，但也早已不是作者个人的 Layui，而是所有仍在坚持使用它的人的 Layui，它仍然支撑着许多项目，也代表着许多人的工作。作为开源创作者，应该要为这些坚持者而守望。未来，Layui 会持续陪伴着所有为之热爱的人们，共同去论证 Layui 开发模式的可行性。开源许可Layui 采用 MIT 许可发布。其他相关协议亦可参考《免责声明》。"
33,moment/moment,https://github.com/moment/moment/blob/develop/README.md,JavaScript,"Moment.jsA JavaScript date library for parsing, validating, manipulating, and formatting dates.Project StatusMoment.js is a legacy project, now in maintenance mode.  In most cases, you should choose a different library.For more details and recommendations, please see Project Status in the docs.Thank you.ResourcesDocumentationChangelogStack OverflowLicenseMoment.js is freely distributable under the terms of the MIT license."
34,learn-co-curriculum/phase-0-html-tag-lab,https://github.com/learn-co-curriculum/phase-0-html-tag-lab/blob/master/README.md,JavaScript,"Your First HTML Tag LabLearning GoalsCode an h1 tagSet the inner text of the h1 to Hello, World!IntroductionSo far, we've seen how to markup content with HTML, how to structure an HTMLdocument and what HTML tags look like. Now let's focus on writing a single HTMLtag from scratch and examining each of its parts.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Code an h1 TagOpen index.html in your text editor. Add the h1 opening and closing tags.Set the Inner TextInside of the opening and closing h1 tags, insert the text: Hello, World!.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Viewing Your Work in the BrowserWhile working through these assignments, your general workflow should center onwriting code in the text editor and periodically running the test suite in theterminal to check your work.Another great way to track your progress is to open up the HTML document in yourbrowser and watch how each change you make in the text editor affects the visuallayout in the browser.You can open index.html a few ways, depending on the environment you are in:For Mac users:Open from the Terminal by running open index.html in the root directory ofthis labUse Finder to navigate to this lab's local folder and click the index.htmlfileFor WSL users:Open from Ubuntu by running explorer.exe index.html in the root directory ofthis labOpen a new Explorer window. There is a bar that says \""Quick Access\"" along thetop of the window (similar to a URL bar in a browser). Click this and type\\\\wsl$ to access files and folders on Ubuntu. Navigate to/home/<your-user-name>/ to get to your home directory, then locate thislab's local folder and click the index.html file.Once you have the HTML document open in your browser, you can make changes to itin a text editor, save the file, refresh the page in the browser, and see thechanges.ConclusionCongratulations! You wrote your first HTML tag. Now you can use your knowledgeof this basic building block to learn more HTML tags and see how they work witheach other to create an entire HTML document structure. Remember to submit yourwork in CodeGrade before moving on.Resourcesh1-h6 TagsSolving the First HTML Lab (Ifyou're stuck, here's a video walk-through of the lab to help you out.)"
35,PanJiaChen/vue-admin-template,https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md,JavaScript,"vue-admin-template这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后台必要的东西。线上地址国内访问目前版本为 v4.0+ 基于 vue-cli 进行构建，若你想使用旧版本，可以切换分支到tag/3.11.0，它不依赖 vue-cli。  SPONSORED BY            Extra如果你想要根据用户角色来动态生成侧边栏和 router，你可以使用该分支permission-control相关项目vue-element-adminelectron-vue-adminvue-typescript-admin-templateawesome-project写了一个系列的教程配套文章，如何从零构建后一个完整的后台项目:手摸手，带你用 vue 撸后台 系列一(基础篇)手摸手，带你用 vue 撸后台 系列二(登录权限篇)手摸手，带你用 vue 撸后台 系列三 (实战篇)手摸手，带你用 vue 撸后台 系列四(vueAdmin 一个极简的后台基础模板,专门针对本项目的文章,算作是一篇文档)手摸手，带你封装一个 vue componentBuild Setup# 克隆项目git clone https://github.com/PanJiaChen/vue-admin-template.git# 进入项目目录cd vue-admin-template# 安装依赖npm install# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org# 启动服务npm run dev浏览器访问 http://localhost:9528发布# 构建测试环境npm run build:stage# 构建生产环境npm run build:prod其它# 预览发布环境效果npm run preview# 预览发布环境效果 + 静态资源分析npm run preview -- --report# 代码格式检查npm run lint# 代码格式检查并自动修复npm run lint -- --fix更多信息请参考 使用文档购买贴纸你也可以通过 购买官方授权的贴纸 的方式来支持 vue-element-admin - 每售出一张贴纸，我们将获得 2 元的捐赠。DemoBrowsers supportModern browsers and Internet Explorer 10+.IE / EdgeFirefoxChromeSafariIE10, IE11, Edgelast 2 versionslast 2 versionslast 2 versionsLicenseMIT license.Copyright (c) 2017-present PanJiaChen"
36,Shastel/towel-sort,https://github.com/Shastel/towel-sort/blob/master/README.md,JavaScript,"Towel SortTaskYour task is to implement the so-called 'towel sort' algorithm.towelSort function should expect matrix of any shape for example:[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ],]Following matrix should be 'sorted' to: [1, 2, 3, 6, 5, 4, 7, 8, 9 ]Write your code in `src/index.js.All test cases are designed as “error-free”, so don't worry about handling any errors.Prepare and testInstall Node.jsFork this repository: https://github.com/Shastel/towel-sort/Clone your newly created repo: https://github.com/<%your_github_username%>/towel-sort/Go to folder towel-sortTo install all dependencies use npm installRun npm test in the command lineYou will see the number of passing and failing tests you 100% of passing tests is equal to 100p in scoreSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (towel-sort)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using are any of the features which are not supported by v12, the score won't be submitted.Each of your test case is limited to 30 sec."
37,Superalgos/Superalgos,https://github.com/Superalgos/Superalgos/blob/master/README.md,JavaScript,"🔸 Superalgos 1.3.0🔸 Table of ContentsMain TopicsIntroductionBefore You BeginGetting StartedInstallation OptionsInstallation for Developers and ContributorsPre-RequisitesSuperalgos Platform Client InstallationUsageUninstallGet In TouchOther ResourcesContributingLicenseAppendixWorkspace Refactoring for Version 1Pre-Requisites NotesTroubleshooting Dependencies InstallationWSL2 VSCode IDE Environment SetupRunning Superalgos on a Headless Linux Server as a Daemon🔸 IntroductionSuperalgos is not just another open-source project. We are an open and welcoming community nurtured and incentivized with the project's native Superalgos (SA) Token, building an open trading intelligence network. You will notice the difference as soon as you join the Telegram Community Group or the new Discord Server!Superalgos is a vast project. The focus of this README file is the Superalgos Platform. Please, visit the platform's page on the website for an overview of features and functionality.🔸 Before You BeginWorth noting before you start:Online Demo | To get a feel of what Superalgos is about without installing anything, take the (limited) online demo for a spin!System requirementsFAQS:Before you beginTrust and safetyTrading with SuperalgosOpen-source strategiesDocumentation | The platform features interactive and searchable documentation counting over 1500 pages. At this point, the Docs are solely available within the app.🔸 Getting StartedSuperalgos is an ever-growing ecosystem of tools and applications. This guide will walk you through the main ways to install the Superalgos Platform — the flagship application of the ecosystem.Once you install and launch the app, a series of interactive tutorials take you by the hand and walk you all around the system while you learn the basic skills required to use the interface, mine data, backtest strategies, and even run a live trading session. It is highly recommended to do all tutorials, as they are carefully crafted to make your onboarding as easy as possible.✅ NOTE: Tutorials are the absolute best way to tackle the learning curve. You should do all tutorials before you start exploring other avenues on your own.The tutorial uses Binance or Binance US as the exchange of choice. If you don't have an account with Binance or Binance US, you will still be able to follow 100% of the tutorial. When you get to the live trading section, keep going even if you don't intend to run the session. You may learn how to work with other exchanges later on. If both Binance and Binance US are blocked in your region, you will need to set up a different exchange from the get-go.🔸 Installation OptionsThere are a variety of methods to install the Superalgos Platform ranging from docker installations and packaged application installations to fine-grained technical installations ideal for developers and contributors.We will briefly describe the options available. Click the link to go to the specific README file with further instructions for the installation method of your choice.Packaged and portable apps | This option is optimized for non-technical users and is by far the easiest way to get started with Superalgos. These are not suitable for development or for contributing.Docker deployments | Docker installations are another avenue that allows for a clean installation. While a little bit more technical than the packaged applications, Docker offers the ability to install the platform in a clean and isolated environment. The standard Docker installation is not optimized for development or contributions, but some workarounds are offered.Developers and Contributors | This is the default installation for developers that wish to dive into the codebase and contribute to making Superalgos better. It is also the recommended installation for non-developers who wish to contribute improvements to the Docs, translations, design work, and so on. Instructions are available further down this same file.Raspberry Pi | Raspberry Pi installations are a great economical option for running a trading system. You will need to be comfortable with either options 2 or 3 above to proceed here.✅ ABOUT REMOTE INSTALLATIONS AND MINIMALIST HARDWARE: Remote installations and minimalist hardware — both virtual and physical — are better suited for production deployments, where the use of the GUI is minimal. We highly recommend learning Superalgos in a local installation, on a full-size PC. Mastering the system takes time, and the use of the GUI to go through in-app tutorials is crucial during the learning process. Your experience will be orders of magnitude better if you follow this advice: leave remote installations and minimalist hardware for when you are ready to start trading live.✅ EXPERIENCING ISSUES INSTALLING SUPERALGOS? If you're having trouble installing or running the app for the first time, do not open an issue. Instead, join the Support Telegram Group and follow the instructions on the pinned message to ask for help. You may also join the new Discord Server, but bear in mind that the response time tends to be longer. Online support is provided by volunteers — please provide clear information and sufficient context about the issue you are facing, and be mindful of people's time.If you wish to try the packaged and portable apps or the docker deployments, there is nothing of critical importance left for you on this README file. That said, the Get In Touch, Other Resources, Contributing, and License sections are certainly of interest.If you opt for the installation for developers and contributors, please keep on reading. Otherwise, click one of the other options above.🔸 Installation for Developers and ContributorsThis is the purest, albeit more technical, way of installing Superalgos. It has no limitations to contributing, which is highly appreciated and rewarded with SA tokens, and gives you the most freedom for custom configurations.All procedures (other than pre-requisites) are the same for Windows, Linux, or Mac OS. Raspberry Pi terminal commands have been included for ease of use. Some edge cases are covered separately, further down this README.Pre-Requisites1️⃣ Install Node.JS, Git, and ChromeYou will need the latest versions of Node JS and Git installed. You will also need a web browser to access the interface. Google Chrome is recommended because it is the most tested browser being used by the development team and power users.Follow the installation wizards to install the latest NodeJS and Git. Make sure to follow all the default and recommended settings while installing Git. If desired also install Chrome.Node.js download pageGit download pageGoogle Chrome download page✅ NOTE: If you wish to test the (partial and incomplete) TensorFlow integration, you will also need Python 3.Additional notes about installing pre-requisites on specific environments and edge cases can be found in the Pre-Requisites Notes section in the Appendix.2️⃣ Get Your Github.com Personal Access TokenYou will need to get an access token from Github.com so that you may authenticate with the service from within the app and the terminal/command line.If you don't have a Github.com account, please open one! Once you are logged in, go to the New Github Personal Access Token Page and create a new token.Make sure you give it the repo and workflow scopes. Check the clip below for clarity:Once you get the token, copy it and save it somewhere in your local machine. You will need to retrieve it later on.Superalgos Platform Client InstallationNow that you have all the pre-requisites and optional environment configurations set up, we can get to the core installation of Superalgos!There are four steps required to install Superalgos:Fork the Superalgos RepositoryClone Your ForkInstall Node DependenciesInstall Community PluginsUpdate Forked Repositories from The Superalgos Upstream RepositoriesLet's get on with it!1️⃣ Fork the Superalgos RepositoryScroll the page to the top. Find and click the Fork button to create your fork/copy of this repository.✅ NOTE: On the page that opens when you click the fork button, Github gives you the option to fork only the master branch by default. You must remove the selection so that you fork all branches instead. Play the following video for clarity.To fork Superalgos you need a Github account. If you don't have one, go ahead and create it.✅ NOTE: A Fork is required so that the setup scripts may build the app from multiple repositories, and also for your contributions to the project. The reason why Superalgos is free and open-source is that the project has set up a collective business in which all users may participate. The way to participate is to contribute to make Superalgos better. The project's native SA token is distributed among contributors.2️⃣ Clone Your ForkOnce the fork is created, you will land on the page of your fork. Copy the complete URL from your browser's address bar.✅ NOTE: Notice it is your fork you will be cloning, not the upstream repository.In your computer/laptop/server, open a command prompt or terminal. Make sure you are in a directory where you have write permissions.✅ NOTE: On most systems, the terminal will open in your user's home directory. It's better to install Superalgos at the root folder of any of your drives, or at least in a path that is not too long. Some systems may experience issues with long paths.Clone the git repository using the command:git clone <URL of your Superalgos fork>For example, if your Github username is John, the command will look like this:git clone https://github.com/John/SuperalgosThis creates the Superalgos folder in the current directory, which contains the whole installation.3️⃣ Install Node DependenciesAfter the Superalgos directory has been installed, you need to set up the necessary node dependencies. In the same command prompt or terminal you just used, type the following:cd SuperalgosThat should take you inside the Superalgos folder created by the git clone command earlier. The node setup command installs the dependencies (notice there are a few options you may use).node setupAvailable Options:node setup <options>OptionDescriptionshortcutsUse this option to create desktop shortcuts. Otherwise, you will launch the app from the command line/terminal.tensorflowUse this option to include the TensorFlow dependencies, only if you intend to test the (partial and incomplete) TensorFlow integration.If you experience any issues installing dependencies, check the Troubleshooting Dependencies Installation section in the Appendix below.4️⃣ Install Community PluginsBefore using the software, you will need to install the plugins built by the community. To do so, just run this command from the Superalgos main folder:node setupPlugins <Your-Github-Username> <Your-Github-Personal-Access-Token>For example:node setupPlugins John ghz_2pBD4Sas0iYtwQGPjTq1Xlm3Ot4KpH3RLcr5✅ NOTE: This is the token you created on earlier steps!`This script is going to fork all Community Plugins repositories into your own Github account, and then it will clone each of these repositories into your local Superalgos/Plugins folder. The process is designed in a way that if someday a new type of plugin is added, you just need to run this command again and it will fork the new repo and clone it. This script will also find any missing forks needed and clone them too. You are safe running this script whenever you think is good.✅ NOTE: If you ever have issues with your Plugins repos, you can delete individual folders inside Superalgos/Plugins and run this script to fix the problems for you. Also, if you have any issues with any of your plugin forks at your Github account, you can delete the offending fork and run this script again to fix the problem.Congratulations! Your setup is complete. Now you may finally run the app for the first time. Please, follow the usage instructions below!5️⃣ Update Forked Repositories from The Superalgos Upstream RepositoriesPrerequisites:\""node setup\"" and \""node setupPlugins\"" commands must be executed beforehand.node updateGithubRepos🔸 UsagePartner ExchangesThe Superalgos Platform is exchange-agnostic, but the project offers partner exchanges custom support and a curated onboarding experience for their customers. In turn, partner exchanges offer preferential trading fees and, in some cases, other benefits to Superalgos users.Find more information on how to get the benefits, join the corresponding Telegram group.Partner ExchangeBenefitsTelegram GroupAscendEXVIP 2 (7.5 bip Maker, 8.5 bip Taker)https://t.me/superalgosascendexPartner exchanges have custom workspaces for the onboarding of their users.Run the Client and GUIUsing the shortcuts✅ NOTE: This method launches the platform with the fallback workspace only. If you wish to launch with a partner exchange workspace, use the Command Line method instead.If you ran node setup shortcuts while installing dependencies, then you should have a desktop icon that you can double click to launch the Superalgos application. A terminal window will show the server is running, and a browser window will open with the GUI.Using the Command LineTo launch the platform with one of the Partner Exchanges custom workspaces, go to the Superalgos directory and run the command as per the following table. You will learn about other options further down this page.Partner ExchangeLaunch CommandAscendEXnode platform Foundations 01-Onboarding-AscendEX✅ NOTE ABOUT ASCENDEX: An issue with AscendEX API may prevent the Welcome to Superalgos tutorial to run as expected. We suggest you use the fallback/default workspace in the meantime. The issue was reported to the exchange and is currently being investigated.To run Superalgos with the default/fallback workspace, go to the Superalgos directory/folder and run this command:node platformOptions usage:node platform <options> <project> <workspace>OptionDescriptionminMemoRun with minimal memory footprint. This is critical for running on platforms with 8GB of RAM or less, like a Raspberry Pi.noBrowserDo not open the GUI in a browser. This is useful on headless servers where a UI is not available.To load a specific workspace on launch, add any option you may require, then the project, then the workspace. For example, to load the Blank-Template workspace of the Foundations project with no options:node platform Foundations Blank-TemplateThe Client will run on your terminal and the GUI will launch on your default browser. If Chrome/Safari is not your default browser, copy the URL, close the browser, open Chrome/Safari, and paste the URL. Be patient... it takes a few seconds to fully load the GUI.Usage NotesWe are testing the UI on Google Chrome and Safari on macOS only. It may work on other browsers as well — or not. If you are running on a different browser and ever need support, make sure you mention that fact upfront, or even better, try on Chrome/Safari first.✅ TIP: If your computer has 8 GB of RAM or less, use node platform minMemo to run the system with minimal RAM requirements.🔸 UninstallSuperalgos writes nothing outside of the Superalgos folder other than shortcut files. To quickly remove the shortcut files, open a terminal or command prompt, navigate to your main Superalgos directory, and type the following command:node uninstallThen simply delete the Superalgos folder to completely remove the application.🔸 Get In TouchWe just opened a brand new Discord server for Support and the Community.We also meet on several Telegram groups, where it all started!⚠️ BEWARE OF IMPERSONATORS — SCAMMERS ARE LURKING! Superalgos Admins, the Founding Team, and Community Mods will never contact you directly unless you contact them first. We will never ask you for API keys, coins, or cash. We will never ask you to trust us in any way. Our Community Safety Policy explains why. In short, we want to make it clear that if someone contacts you directly claiming to work with or for the project, it is a scam. Please report scammers in the Community group so that they may be banned and to increase awareness of the problem, but also block them and report them to Telegram if the option is available.Via Telegram: online support through our Superalgos Support Group.In-App Integrated Documentation: Superalgos features interactive documentation built into the system.Video Tutorials: subscribe to the Superalgos YouTube Channel.In-App Tutorials: there are many interactive tutorials you may do and learn from.🔸 Other ResourcesWeb SiteFor an overview of what Superalgos can do for you, check the Superalgos Website.List of community resources featuring written, audiovisual, and interactive content.TelegramFor official news, join the Superalgos Announcements Channel.Meet other users in the Superalgos Telegram Community Group.Meet developers in the Superalgos Telegram Developer's Group.Users meet in other topic-specific Telegram Groups. There's a complete list of groups on the website.Blog: find official announcements and various articles on the Superalgos Blog.Twitter: to stay in the loop, follow Superalgos on Twitter. Help us spread the word!Facebook: follow Superalgos on Facebook.🔸 ContributingSuperalgos is a Community Project built by users for users. Learn how you may contribute.🔸 LicenseSuperalgos is open-source software released under Apache License 2.0.APPENDIX🔸 Workspace Refactoring for Version 1Version 1.2.0 carries with it a reorganization of the codebase where several projects were extracted from Foundations: Data-Mining, Algorithmic Trading, Machine Learning, and Community Plugins.This means that these projects can now have a project leader and a team working on them.To get your custom workspace upgraded to be compatible with beta 13 you will need to make a few changes:Project nodes need to be present in the workspace for things to work. The presence of the node of a project, somehow, enables that project features at a workspace. Go to the workspace node and click add missing projects.At the Plugins hierarchy, new guys appear, each one with their own type of plugin. Meaning that every workspace needs to be manually fixed because, currently, all plugins are loaded from the Foundations node there. The fix is easy though, it takes 2 - 3 min to delete the child nodes from the Foundation node, and add the same plugins from the project they belong to now.🔸 Pre-Requisites NotesWindows Pre-RequisitesWhen following the windows installer for Git, it is very important to make sure that you follow all the recommended and default settings. One of the most important one of these can be found in the screenshot below:Optional Windows Pre-RequisitesFor windows users interested in testing the (partial and incomplete) TensorFlow integration, you need to install Python.install Python 3.9.Github Desktop is a helpful tool to manage Git conflicts and issues. You can install it using the following link.GitHub Desktop download page. Click the \""Download for Windows\"" button and follow the wizard to install after the download completes.Mac OS Pre-Requisites Homebrew InstallationRather than manually installing NodeJS, Git, and Python, Homebrew can be used to install the pre-requisites with minimal effort on Mac OS.  After you clone the repository, change the directory to the Superalgos base and install the requirements using Homebrew.There are two ways to use Homebrew.  The first is to type:brew install git node npm python@3.9The second is to use the Brewfile included in the code repository. After downloading, run this command in the same directory where the Brewfile resides:brew bundle✅ NOTE: You can use Safari or Google Chrome as your default browser. If you run into a bug in Safari, you will be asked to reproduce it in Chrome as the development team uses Chrome.Linux (e.g. Ubuntu, or Raspberry Pi running Raspberry Pi OS/Raspbian) Pre-RequisitesFollow the Node.js package manager install instructions for your distribution to ensure you are getting the latest version of Node.js. Many distributions only maintain an older version in their default repositories.✅ NOTE: Python 3 is only required for testing the (partial and incomplete) TensorFlow integration.curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash - && sudo apt-get \\install -y \\nodejs npm git python3You may verify the installed versions with this command string:node \\-v && npm \\-v && git --versionIf you are running headless (i.e. as a server without a monitor attached) then you do not need to install a web browser and you can follow the tutorial for information on connecting remotely to the server.Alternatively, you can use https://github.com/nymea/berrylan to set up a tool for using Bluetooth to quickly assign WPA2 access on a WLAN on a Raspbian based Distro. Nymea also has tools for automation of IoT products to allow setting up SuperAlgos as a timed function without needing to learn how to code.✅ IMPORTANT:If you are having node version errors there is a chance you may need to read the information in the Debian Pre-Requisites section and use NVM to handle node versions. This is due to some distributions having out-of-date repositories in the package manager lists.Debian or Debian WSL/WSL2 Pre-Requisites(NVM & NPM Fix)Debian distributions have been found to have some additional issues with installing the right version of NodeJS needed to run Superalgos. What follows are the steps to fix this issue.For this to work you will need to [use NVM to install and control node] (https://github.com/nvm-sh/nvm)You will need to remove any versions of Node already installed on Debian due to the repositories currently being out of date.This is necessary before proceeding.sudo apt remove nodejs -ysudo apt \\update && apt upgrade \\-y sudo apt \\install npm -ysudo apt \\autoremove -y && \\sudo apt autoclean -ysudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bashWithout running the next 3 commands, you will need to logout off your shell/WSL2 user account before you are to use NVMexport NVM_DIR=\""$HOME/.nvm\""[ -s \""$NVM_DIR/nvm.sh\"" ] && \\. \""$NVM_DIR/nvm.sh\""[ -s \""$NVM_DIR/bash_completion\"" ] && \\. \""$NVM_DIR/bash_completion\""Make sure things are up to date and packages not needed are removedsudo apt update &&\\sudo apt upgrade && \\apt autoremove -ycd Superalgosinto the directory of SuperAlgosand run the install commands as follows:nvm run node <command string/var>✅ NOTE: This is for node.js/node only, npm should work fine with Debian.🔸 Troubleshooting Dependencies InstallationEdge Cases✅ NOTE FOR WINDOWS USERS INSTALLING TENSORFLOW DEPENDENCIES: You may get an error at the end of the setup process. If you do, please follow the instructions following the error message.✅ NOTE FOR USERS INSTALLING MULTIPLE INSTANCES OF SUPERALGOS ON THE SAME MACHINE: To avoid name conflicts between shortcuts, make sure to rename each Superalgos directory before running node setup shortcuts.✅ NOTE FOR USERS INSTALLING ON LINUX: If after running node setup you are prompted to address issues by running 'npm audit fix' ignore this step.✅ NOTE FOR USERS INSTALLING ON COMPUTERS WITH 1GB OF RAM Superalgos has just about outgrown computers with only 1GB of RAM. For Instance a Raspberry Pi 3 does run the Getting Started Tutorials, but over time (Into 2023) this may significantly slow and could even stop. If still wish to use a computer with only 1GB of RAM (you have been warned), you will need to use version 16.x of Node.js as version 18.x needs well over 1 GB of RAM during setup.General TroubleshootingIf you are having difficulty running the node setup command here are a few common issues that may be getting in the way.Check the version of node and npm you have installed. Make sure that you are running an updated version of node greater than version 16.6 and npm greater than version 5. You can check which version you have by typing node -v and npm -v into a command prompt or terminal. If your version numbers are below these, you can update your installation by following the instructions outlined in the \""Node JS Installation\"" step above.If you are installing Superalgos in an administratively protected directory you will need to do one of the following:For Windows start your command prompt as an administrator.For Linux and Mac Systems make sure to add the sudo command to node setup.  This will look like sudo node setup.For Windows it is important that you have C:\\Windows\\System32 added to your global PATH.  For instructions on how to do this google \""add to the path on Windows 10.\""If you are getting a lot of 'unexpected' errors during node setup, try resetting npm using the command npm ci before running node setup again.Enabling Desktop Shortcut in UbuntuThe majority of shortcuts that are installed will work out of the box. Desktop shortcuts on Ubuntu, however, require a few additional steps to set up. First, desktop icons need to be enabled within the Tweaks app.Check if Tweaks is installed.If not go to Ubuntu Software.Install Tweaks.Open Tweaks.Under extensions turn on Desktop Icons✅ TIP: If you do not see the desktop shortcut appear right away you may need to restart your computer.Finally, you will need to enable the desktop shortcut. Right-click Superalgos.desktop and select Allow Launching.Now both launcher and desktop shortcuts will launch Superalgos like any other program on your computer.🔸 WSL2 VSCode IDE Environment SetupVSCode is a popular IDE. This short section covers some helpful tips for setting up the IDE's development environment.There are a few things that need to be configured to obtain full functionality from VSCode. These configurations will make it possible to run notebooks for ML/AI algos and turn VSCode and Windows into a development bench for working with Superalgos.On windows:First, you need to install WSL and WSL2 https://docs.microsoft.com/en-us/windows/wsl/install then reboot if prompted.You may want to review the Docker WSL2 Backend information for VSCode as well before proceeding. https://aka.ms/vscode-remote/containers/docker-wsl2Install Debian or Ubuntu from the Windows Store, Setup the VM as instructed.On windows and Debian:To make managing these WSL instances a lot easier, we will now move to installing VSCode + Tools to allow for Dockerizing and rapidly deploying as well as editing and managing test/usage cases of Superalgos edit and forks you create and contribute.Install VSCode https://code.visualstudio.com/docs/?dv=win64userInstall the remote container and remote docker plugins/extensions for Visual Studio Code https://code.visualstudio.com/docs/remote/containers#_installationYou may want to spend time reading the specifics of this documentation on their website.When prompted install shell shortcuts for right-click options, this way you can open Superalgos easy inside of VSCode.✅ IMPORTANT:As mentioned above, you need to remove node.js/node from your system and install NVM if you are using Debian.Please refer to the information above for properly setting up node.js and npm on Debian systems with complications regarding versions of node.Once the install finishes you can now use VSCode as an interactive IDE/Shell to access SuperAlgos, run Dockers for working with Superalgos, and more.🔸 Running Superalgos on a Headless Linux Server as a DaemonIf you're running Superalgos on a headless Linux server like a Raspberry Pi, you might want to run it as a daemon so it isn't attached to your current login session. The easiest, most standard way to go about this is probably using systemd. Most Linux distributions use it as the default init system/service manager.Create a superalgos.service file looking like this (change <user> to your user name and /path/to/Superalgos to your Superalgos folder, for instance /home/John/Superalgos):[Unit]Description=Superalgos Platform Client[Service]Type=simpleUser=<user>WorkingDirectory=/path/to/SuperalgosExecStart=/usr/bin/node platform minMemo noBrowser[Install]WantedBy=multi-user.targetThere is no need to run Superalgos as root so we're running it as a user. The minMemo option assumes you're running on a small machine like a Raspberry Pi, while noBrowser makes sense for running daemonized. Now, you'll need to move the file to /etc/systemd/system/ for it to be recognized. You'll need then to enable and start the service.sudo mv superalgos.service /etc/systemd/systemsudo systemctl daemon-reloadsudo systemctl enable superalgossudo systemctl start superalgosTo check the service statussudo systemctl status superalgosTo stop the service:sudo systemctl stop superalgossudo systemctl disable superalgosTo see the output of Superalgos, use:journalctl -u superalgosor to follow the output with -f:journalctl -u superalgos -f"
38,algorithm-visualizer/algorithm-visualizer,https://github.com/algorithm-visualizer/algorithm-visualizer/blob/master/README.md,JavaScript,"Algorithm VisualizerAlgorithm Visualizer is an interactive online platform that visualizes algorithms from code.Learning an algorithm gets much easier with visualizing it. Don't get what we mean? Check it out:algorithm-visualizer.orgContributingWe have multiple repositories under the hood that comprise the website. Take a look at the contributing guidelines in the repository you want to contribute to.algorithm-visualizer is a web app written in React. It contains UI components and interprets commands into visualizations. Check out the contributing guidelines.server serves the web app and provides APIs that it needs on the fly. (e.g., GitHub sign in, compiling/running code, etc.)algorithms contains visualizations of algorithms shown on the side menu of the website.tracers.* are visualization libraries written in each supported language. They extract visualizing commands from code."
39,lodash/lodash,https://github.com/lodash/lodash/blob/master/README.md,JavaScript,"lodashSite |Docs |FP Guide |Contributing |Wiki |Code of Conduct |Twitter |ChatThe Lodash library exported as a UMD module.Generated using lodash-cli:$ npm run build$ lodash -o ./dist/lodash.js$ lodash core -o ./dist/lodash.core.jsDownloadCore build (~4 kB gzipped)Full build (~24 kB gzipped)CDN copies Lodash is released under the MIT license & supports modern environments.Review the build differences & pick one that’s right for you.InstallationIn a browser:<script src=\""lodash.js\""></script>Using npm:$ npm i -g npm$ npm i lodashNote: add --save if you are using npm < 5.0.0In Node.js:// Load the full build.var _ = require('lodash');// Load the core build.var _ = require('lodash/core');// Load the FP build for immutable auto-curried iteratee-first data-last methods.var fp = require('lodash/fp');// Load method categories.var array = require('lodash/array');var object = require('lodash/fp/object');// Cherry-pick methods for smaller browserify/rollup/webpack bundles.var at = require('lodash/at');var curryN = require('lodash/fp/curryN');Looking for Lodash modules written in ES6 or smaller bundle sizes? Check out lodash-es.Why Lodash?Lodash makes JavaScript easier by taking the hassle out of working with arrays,numbers, objects, strings, etc. Lodash’s modular methods are great for:Iterating arrays, objects, & stringsManipulating & testing valuesCreating composite functionsModule FormatsLodash is available in a variety of builds & module formats.lodash & per method packageslodash-es, babel-plugin-lodash, & lodash-webpack-pluginlodash/fplodash-amd"
40,learn-co-students/javascript-logging-lab-js-intro-000,https://github.com/learn-co-students/javascript-logging-lab-js-intro-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?Note: The test/index-test.js has great info that we want to look at, but do not edit this file otherwise you may have extra difficulty passing this lab.At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll see:describe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining two tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we go back to index.js and write something like...console.log(\""I would be a logger.\"") // get it?...we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
41,learn-co-curriculum/react-hooks-state-and-events-lab,https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab/blob/master/README.md,JavaScript,"React State LabLearning GoalsUpdate state based on eventsWork with multiple state variables togetherIntroductionIn the labs for this section, we'll be working on a grocery list app. Some ofthis app is already built out using static versions of the components. We'll beusing state and events to make our app dynamic.The components you have to work with are in the src/components folder. Startby examining these components and draw out your component hierarchy to see howdata can be passed from one component to another.In this lab, you'll update state and get more practice with the useState hook.It's recommended that you run npm start and work on this in the browserbefore running tests. Try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.DeliverablesDark Mode ToggleIn the App component, there is a button for toggling between dark mode andlight mode. Using the useState hook, create a state variable in the Appcomponent. Then, use that variable to determine if our app should be in darkmode or light mode.You will also need to add an event handler to the dark mode button, and updatestate when the button is clicked.The actual functionality of changing our app's theme is handled in CSS, so allyou have to do is set up the code to update the className of the div based onyour state variable:<div className=\""App dark\"">{/* for dark mode */}</div><div className=\""App light\"">{/* for light mode */}</div>Add to CartIn the Item component, when the user clicks the <button> element, the itemshould be added to their virtual cart. The way we'll show the user that the itemis in the cart is by changing the className on the <li> element:<li className=\""in-cart\"">{/* the item is in the cart */}</li><li className=\""\"">{/* the item is NOT in the cart */}</li>If the item is not in the cart, the <button> element's text should read \""Addto Cart\"", and if the item is in the cart, the <button> element's text shouldread \""Remove From Cart\"". Naturally, you'll also need to add state to the Itemcomponent to solve this deliverable!FilterIn the ShoppingList component, there is a <select> element that will allowus to filter the list of items by category.Use the useState hook to create a state variable called selectedCategory forkeeping track of the selected value from this <select> element. When the valueof the <select> element is changed, update state.You should also use the selectedCategory variable to determine which items todisplay in the shopping list. You'll need some way of filtering the array ofitems based on the selectedCategory.ResourcesReact Docs on useState"
42,learn-co-students/javascript-objects-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
43,prettier/prettier,https://github.com/prettier/prettier/blob/main/README.md,JavaScript,"Opinionated Code Formatter      JavaScript    · TypeScript    · Flow    · JSX    · JSON          CSS    · SCSS    · Less          HTML    · Vue    · Angular          GraphQL    · Markdown    · YAML                Your favorite language?                                                              IntroPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.Inputfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());Outputfoo(  reallyLongArg(),  omgSoManyParameters(),  IShouldRefactorThis(),  isThereSeriouslyAnotherOne(),);Prettier can be run in your editor on-save, in a pre-commit hook, or in CI environments to ensure your codebase has a consistent style without devs ever having to post a nit-picky comment on a code review ever again!DocumentationInstall ·Options ·CLI ·APIPlaygroundBadgeShow the world you're using Prettier → [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)ContributingSee CONTRIBUTING.md."
44,progedu/adding-up,https://github.com/prettier/prettier/blob/main/README.md,JavaScript,"Opinionated Code Formatter      JavaScript    · TypeScript    · Flow    · JSX    · JSON          CSS    · SCSS    · Less          HTML    · Vue    · Angular          GraphQL    · Markdown    · YAML                Your favorite language?                                                              IntroPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.Inputfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());Outputfoo(  reallyLongArg(),  omgSoManyParameters(),  IShouldRefactorThis(),  isThereSeriouslyAnotherOne(),);Prettier can be run in your editor on-save, in a pre-commit hook, or in CI environments to ensure your codebase has a consistent style without devs ever having to post a nit-picky comment on a code review ever again!DocumentationInstall ·Options ·CLI ·APIPlaygroundBadgeShow the world you're using Prettier → [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)ContributingSee CONTRIBUTING.md."
45,hasura-imad/imad-2016-app,https://github.com/prettier/prettier/blob/main/README.md,JavaScript,"Opinionated Code Formatter      JavaScript    · TypeScript    · Flow    · JSX    · JSON          CSS    · SCSS    · Less          HTML    · Vue    · Angular          GraphQL    · Markdown    · YAML                Your favorite language?                                                              IntroPrettier is an opinionated code formatter. It enforces a consistent style by parsing your code and re-printing it with its own rules that take the maximum line length into account, wrapping code when necessary.Inputfoo(reallyLongArg(), omgSoManyParameters(), IShouldRefactorThis(), isThereSeriouslyAnotherOne());Outputfoo(  reallyLongArg(),  omgSoManyParameters(),  IShouldRefactorThis(),  isThereSeriouslyAnotherOne(),);Prettier can be run in your editor on-save, in a pre-commit hook, or in CI environments to ensure your codebase has a consistent style without devs ever having to post a nit-picky comment on a code review ever again!DocumentationInstall ·Options ·CLI ·APIPlaygroundBadgeShow the world you're using Prettier → [![code style: prettier](https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square)](https://github.com/prettier/prettier)ContributingSee CONTRIBUTING.md."
46,linuxacademy/cicd-pipeline-train-schedule-dockerdeploy,https://github.com/linuxacademy/cicd-pipeline-train-schedule-dockerdeploy/blob/master/README.md,JavaScript,"cicd-pipeline-train-schedule-dockerdeployThis is a simple train schedule app written using nodejs. It is intended to be used as a sample application for a series of hands-on learning activities.Running the appYou need a Java JDK 7 or later to run the build. You can run the build like this:./gradlew buildYou can run the app with:./gradlew npm_startOnce it is running, you can access it in a browser at http://localhost:8080"
47,learn-co-curriculum/react-hooks-lists-and-keys-lab,https://github.com/learn-co-curriculum/react-hooks-lists-and-keys-lab/blob/master/README.md,JavaScript,"Lists and Keys LabLearning GoalsTransform a list of values into a list of componentsUse the key prop correctly with the list of componentsIntroductionWe'll keep building our portfolio site and add the ability to display a list ofprojects based on an array of project data.Here is an image of what we want once we are finished:...and here is a tree view of our component parent-child structure:└── App    ├── NavBar    ├── Home    ├── About    |   └── Links    └── ProjectList        |   ProjectItem        |   ProjectItem        └── ProjectItemDeliverablesIt's recommended that you run npm start and work on this in the browserbefore running tests — try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.NavBarIn the NavBar component, there is an array with three strings representingeach link on the page. For each of those strings, create an <a> tag that lookslike this:<a href=\""#home\"">home</a>Make sure each <a> element also gets a unique key prop.ProjectListIn the ProjectList component, a prop of projects is being passed down fromthe App component with an array of objects. For each object in the array,render one ProjectItem component with the correct props. Use the id of theproject for the key prop.ProjectItemThe ProjectItem component should get a prop of technologies passed down fromProjectList. For each element in this array of technologies, create a <span>tag that displays the name of the technology.ResourcesLists and Keys"
48,learn-co-students/js-beatles-loops-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-beatles-loops-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Beatles LoopsObjectivesBuild a for loopBuild a while loopBuild a do-while loopInstructionsMake sure you run the tests with learn.Create a function theBeatlesPlay, which accepts two parameters--an array ofmusicians and an array of instruments.Create a variable with an empty array.Use a for loop, which iterates over the array of musicians. Be carefulabout what value you set your counter variable to store. (Hint: Thinkabout what the first index of an array is).The first time through the loop, it should create a string using the firstindex of the musicians array and the first index of the instrumentsarray: \""John Lennon plays guitar\"".Add this string to the empty array you created. The loop should make thesame sentence for every member of the musicians array.The function should return the array of new strings containing whatinstruments each musician plays.Create a function johnLennonFacts.This function will accept one argument, an array of facts about JohnLennon (note that it might not be exactly the following facts):const facts = [  \""He was the last Beatle to learn to drive\"",  \""He was never a vegetarian\"",  \""He was a choir boy and boy scout\"",  \""He hated the sound of his own voice\""];Use a while loop to loop over the facts array and add \""!!!\"" to the end ofevery fact.Return an array of strings with exclamation points.Create a function iLoveTheBeatles which accepts a number as a parameter.The function should create a variable that stores an empty array.Implement a do-while loop inside the function that adds \""I love the Beatles!\"" to the empty array.The loop should then increment the number passed in as a parameter. Thecondition of the loop should check to see that the parameter number isless than 15. It should contain a number of strings that represents thedifference between the input number and 15.Return the array with the strings \""I love the Beatles!\""."
49,learn-co-students/js-deli-counter-bootcamp-prep-000,https://github.com/learn-co-students/js-deli-counter-bootcamp-prep-000/blob/master/README.md,JavaScript,"Deli Counter LabObjectivesAdd elements to an arrayReturn items from an arrayIterate through an arrayPass an array as a function parameterInstructionsA pretty important deli needs somebody to program the \""Take a Number\"" feature for their counter.At the beginning of the day, the deli is empty and is represented by an empty array, like var katzDeliLine = [];. However,  you don't need to code the array as a variable, since the test scripts will create it and pass it to the functions you are about to build.Build a function that a new customer will use when entering the deli. The function, takeANumber, should accept two parameters: the current line of people, along with the new person's name. The function should return a welcome message including the new person's position in line, such as \""Welcome, Ada. You are number 1 in line.\"". And don't go being too programmer-y and give them their index. These are normal people. If they are 7th in line, tell them that. Don't get their hopes up by telling them they are number 6 in line.Build a function nowServing. This function should accept the current line of people (katzDeliLine) and return the first person in line and then remove that individual from the line. If there is nobody in line, it should return \""There is nobody waiting to be served!\""Build a function currentLine that accepts the current line of people and returns the current line as a string; for example, if 'katzDeliLine' is currently [\""Ada\"", \""Grace\""], currentLine(katzDeliLine) would return \""The line is currently: 1. Ada, 2. Grace\"".  You don't have to use katzDeliLine as a variable or parameter name in your function though, it's just an example of a variable that might be passed to it. If there is nobody in line, it should return \""The line is currently empty.\""HintExample usage:var katzDeliLine = [];takeANumber(katzDeliLine, \""Ada\""); // \""Welcome, Ada. You are number 1 in line.\""takeANumber(katzDeliLine, \""Grace\""); // \""Welcome, Grace. You are number 2 in line.\""takeANumber(katzDeliLine, \""Kent\""); // \""Welcome, Kent. You are number 3 in line.\""currentLine(katzDeliLine); // \""The line is currently: 1. Ada, 2. Grace, 3. Kent\""nowServing(katzDeliLine); // \""Currently serving Ada.\""currentLine(katzDeliLine); // \""The line is currently: 1. Grace, 2. Kent\""takeANumber(katzDeliLine, \""Matz\""); // \""Welcome, Matz. You are number 1 in line.\""currentLine(katzDeliLine); // \""The line is currently: 1. Grace, 2. Kent, 3. Matz\""nowServing(katzDeliLine); // \""Currently serving Grace.\""currentLine(katzDeliLine); // \""The line is currently: 1. Kent, 2. Matz\""View Deli Counter Lab on Learn.co and start learning to code for free."
50,mikhama/core-js-101,https://github.com/mikhama/core-js-101/blob/master/README.md,JavaScript,"Core JS 101⚠️ Please note that you mustn't open PRs that contains the answers to this repo!However, PRs with the fixes or proposals are welcomed!TaskThe task is to implement functions on different Core JS topics. There are eight modules with different tasks. Each module consists of tasks for specified topic:StringsNumbersArraysDateObjectsPromisesConditions and LoopsFunctions and ClosuresActive usage of documentation is strongly recommended!Prepare and testInstall Node.jsFork this repository: https://github.com/mikhama/core-js-101/Clone your newly created repo: https://github.com/<%your_github_username%>/core-js-101/Go to folder core-js-101To install all dependencies use npm installEach task is usually a regular function:  /**   * Returns the result of concatenation of two strings.  *  * @param {string} value1  * @param {string} value2  * @return {string}  *  * @example  *   'aa', 'bb' => 'aabb'  *   'aa',''    => 'aa'  *   '',  'bb'  => 'bb'  */  function concatenateStrings(value1, value2) {    throw new Error('Not implemented');  }Read the task description in the comment above the function. Try to understand the idea. You can see the tests prepared if you don't understand it.Write your code in src/*.js.Remove the throwing error line from function body:    throw new Error('Not implemented'); Implement the function by any way and verify your solution by running tests until the failed test become passed (green).Run npm test in command line. If everything is OK you can try to resolve the next task.You will see the number of passing and pending tests: 101 of passing tests is equal to 100 in score.Submit to rs appOpen rs app and loginGo to submit task pageSelect your task (Core JS 101)Press submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using any of features that does not supported by node v14, score won't be submitted.Please be sure that each of your test in limit of 30sec.You will get 0 (zero) if you have any eslint's errors or warnings.FAQQuestion: I use Windows machine and have received a lot of errors like \""Expected linebreaks to be 'LF' but found 'CRLF'\"". How to handle it?Answer:First, you need to install Gitbash properly: you need to choose option \""Checkout as-is, commit as-is\"" in section \""Configuring the line ending conversions\"". It'll let you download repos with line endings set \""as-is\"" as well as commit. In other words, not to change them at all, because by default it converts them.Second, install editorconfig plugin to your editor. For VS Code you can find it here:https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfigI'll let you apply some rules when you saving your files in the repo. This plugin will use config-file .editorconfig that you can see in the root folder. It lets you save the file with needed line endings, trim whitespaces, etc.Finally, you need to apply linter's autofix feature in order to fix all linebreaks that was already changed to \""CLRF\"":$ npm run lint -- --fixThe task based on https://github.com/rolling-scopes-school/js-assignments."
51,learn-co-curriculum/phase-1-domcontentloaded,https://github.com/learn-co-curriculum/phase-1-domcontentloaded/blob/master/README.md,JavaScript,"The JavaScript DOMContentLoaded EventLearning GoalsUnderstand why DOMContentLoaded is importantSet up an event on DOMContentLoadedIntroductionAn important part of working with JavaScript is ensuring that your code runs atthe right time. Every now and then, you may have to add some extra code toensure your code doesn't run before the page is ready. Many factors go intodetermining the \""right time,\"" but there are two events that represent twoparticularly important milestones in terms of page load:The DOMContentLoaded event fires when your page's DOM is fully parsed fromthe underlying htmlThe load event fires when a resource and all its dependent resources(including CSS and JavaScript) have finished loadingIn this lesson, we'll be focusing on DOMContentLoaded.Why is DOMContentLoaded Important?The DOMContentLoaded event is the browser's built-in way to indicate when apage's html is loaded into the DOM. It isn't possible to manipulate HTMLelements that haven't rendered yet, so trying to manipulate the DOM before thepage fully loads can potentially lead to problems.We need to make sure to wait until after the DOMContentLoaded event istriggered to safely execute our code. By creating an event listener, we can keepour code from immediately firing when index.js is loaded.Set Up an Event Listener for DOMContentLoadedAs always, addEventListener takes a String with the name of theevent and a callback function.document.addEventListener(\""DOMContentLoaded\"", function() {  console.log(\""The DOM has loaded\"");});If you put the above code in index.js, 'The DOM has loaded' will not be loggedimmediately. In fact, you can confirm this yourself by putting a secondconsole.log() outside of the event listener callback:document.addEventListener(\""DOMContentLoaded\"", function() {  console.log(\""The DOM has loaded\"");});console.log(  \""This console.log() fires when index.js loads - before DOMContentLoaded is triggered\"");InstructionsCode your solution in index.js. First, set up a DOMContentLoaded eventlistener to detect when the HTML page has loaded and the document is ready to bemanipulated. Use the event's callback function to target the paragraph elementwith id=\""text\"" and replace the text with \""This is really cool!\""Note: Using the innerText property to modify DOM elementcontent will not work for this lab. Use textContent orinnerHTML instead.Test your event in the browser to confirm that it is working.DOMContentLoaded Does Not Wait For Stylesheets and Images to LoadIt is important to note that the DOMContentLoaded event fires once theinitial HTML document finishes loading, but does not wait for CSS stylesheets orimages to load. In situations where you need everything to completely load,use the load event instead.While both will work, it is often the case that we only need the HTML content tofully load in order to execute our JavaScript. Since images can take some timeto load, using the load event means visitors of a webpage may see your webpagein its original state for a couple of seconds before any JavaScript fires andupdates the DOM.For a comparison of the difference between DOMContentLoaded and loadedevents, check out this example.ConclusionJavaScript provides us the powerful ability to update webpage content withoutrefreshing. We can, for instance, have a page with some basic HTML structure anduse JavaScript to fill in the content, enabling the possibility of dynamicwebpages.This sort of action, however, will only work if the HTML content is loaded onthe page before the JavaScript is executed. The DOMContentLoaded event ensuresthat our JavaScript code is being executed immediately after the HTML isfinished loading.AddendumThe DOMContentLoaded event is now a widely accepted standard. Modern webdevelopment, however, provides us with additional choices for setting up when wewant our JavaScript to execute. For example, HTML5 now has a deferattribute for use in <script> tags:<script src=\""index.js\"" defer></script>This functions in a similar way to DOMContentLoaded: the JavaScript codestored in index.js will be loaded up but won't execute until the HTML pagecompletely loads.ResourcesDOMContentLoadedRunning Your Code at the Right Time"
52,is-a-dev/register,https://github.com/is-a-dev/register/blob/main/README.md,JavaScript,"            is-a.devis-a-dev is a service that allows developers to get a sweet-looking \"".is-a.dev\"" domain for their personal websites.   RegisterAutomated RegistrationEasiest method: Use the manage website, sign in with your github account and click the register page in the navbar. Fill out some questions and it will all happen automagically!Another method is to join our Discord then head to the commands channel and do /register . The bot will ask you a few questions then will generate your PR and domain automaticly. The bot also allows for domain deletion and editing.Manual RegistrationFork this repository.Add a new file called your-domain-name.json in the domains folder to register your-domain-name.is-a.dev.Read the documentation.Your pull request will be reviewed and merged. Make sure to keep an eye on it incase we need you to make any changes!After the pull request is merged, please allow up to 24 hours for the changes to propagate.Enjoy your new .is-a.dev domain!CLI RegistrationFor issues with the CLI, DO NOT OPEN AN ISSUE ON THIS REPOSITORY, instead open an issue here.Install the CLI:npm install @is-a-dev/cli -gLogin to the CLI:is-a-dev loginRegister a subdomain on the CLI:is-a-dev registerStatusYou can check the uptime of our services on our status dashboard.Similar ServicesIf you want to find services similar to is-a.dev, take a look on free-for.life.DonateIf you like this project, please consider donating so we can keep this project running forever!"
53,learn-co-students/javascript-logging-lab-js-intro-000,https://github.com/learn-co-students/javascript-logging-lab-js-intro-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?Note: The test/index-test.js has great info that we want to look at, but do not edit this file otherwise you may have extra difficulty passing this lab.At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll see:describe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining two tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we go back to index.js and write something like...console.log(\""I would be a logger.\"") // get it?...we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
54,learn-co-curriculum/react-hooks-state-and-events-lab,https://github.com/learn-co-curriculum/react-hooks-state-and-events-lab/blob/master/README.md,JavaScript,"React State LabLearning GoalsUpdate state based on eventsWork with multiple state variables togetherIntroductionIn the labs for this section, we'll be working on a grocery list app. Some ofthis app is already built out using static versions of the components. We'll beusing state and events to make our app dynamic.The components you have to work with are in the src/components folder. Startby examining these components and draw out your component hierarchy to see howdata can be passed from one component to another.In this lab, you'll update state and get more practice with the useState hook.It's recommended that you run npm start and work on this in the browserbefore running tests. Try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.DeliverablesDark Mode ToggleIn the App component, there is a button for toggling between dark mode andlight mode. Using the useState hook, create a state variable in the Appcomponent. Then, use that variable to determine if our app should be in darkmode or light mode.You will also need to add an event handler to the dark mode button, and updatestate when the button is clicked.The actual functionality of changing our app's theme is handled in CSS, so allyou have to do is set up the code to update the className of the div based onyour state variable:<div className=\""App dark\"">{/* for dark mode */}</div><div className=\""App light\"">{/* for light mode */}</div>Add to CartIn the Item component, when the user clicks the <button> element, the itemshould be added to their virtual cart. The way we'll show the user that the itemis in the cart is by changing the className on the <li> element:<li className=\""in-cart\"">{/* the item is in the cart */}</li><li className=\""\"">{/* the item is NOT in the cart */}</li>If the item is not in the cart, the <button> element's text should read \""Addto Cart\"", and if the item is in the cart, the <button> element's text shouldread \""Remove From Cart\"". Naturally, you'll also need to add state to the Itemcomponent to solve this deliverable!FilterIn the ShoppingList component, there is a <select> element that will allowus to filter the list of items by category.Use the useState hook to create a state variable called selectedCategory forkeeping track of the selected value from this <select> element. When the valueof the <select> element is changed, update state.You should also use the selectedCategory variable to determine which items todisplay in the shopping list. You'll need some way of filtering the array ofitems based on the selectedCategory.ResourcesReact Docs on useState"
55,learn-co-students/javascript-objects-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-objects-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Objects LabOverviewIn this lab, we'll create objects and perform various operations on them.InstructionsBe sure to run the tests to get a feel for the types of problems this lab isasking you to solve. In particular, you'll need to define a recipes object andthen apply certain updates (destructively and non-destructively) in variousfunctions.Good luck!HINT: You might find deleteFromObjectByKey to be a bit hard to write non-destructively. Think about how we learned to use Object.assign. What happens if we dovar obj = { foo: 'bar' }var newObj = Object.assign({}, obj)newObj // { foo: 'bar' }delete newObj.foo // truenewObj // {}obj // { foo: 'bar' }Hmmmmm...ResourcesMDN: Object"
56,learn-co-curriculum/react-hooks-npm-lab,https://github.com/learn-co-curriculum/react-hooks-npm-lab/blob/main/README.md,JavaScript,"npm Code-AlongLearning GoalsUse a package.json file to manage project dependenciesInstall a project dependency using npmImport code from a package into a JavaScript fileIntroductionWhen using npm, it is often the case that we aren't familiar with all of thecode in the dependency tree. Building modern JavaScript applications relies onour ability to use the tools built for us by others. As it turns out, most ofthose tools are also built using other people's tools. One package may beused in another, which is used in another, and another, and so on...Using npm, we download specific packages of code. If those packages havedependencies, the dependencies are also downloaded in a recursive manner. Forthe purposes of our own application, however, we only need to know about thenode packages we specifically need to get our app working. We don't need toworry about what packages those packages need. Why? Because every node packageincludes a package.json file that lists out all dependencies. This file letsNode know what to download when we run npm install. Node will download all thepackages, check the package.json files present in each of those packages,download any additional packages, and repeat.We will see in future labs that as the number of packages increases, more andmore happens when we run npm install. All we need to worry about, though, isthe top level — what is listed in our application's package.json file.In this code-along, we are going to practice the process of setting up apackage.json file. We will also install an npm package or two and use theirfunctionality in new code we write.Getting StartedBefore we create our package.json file, take a moment to look at thepackage.json file that is already at the top level of the directory for thiscode-along. If you look at the \""name\"" attribute at the top, you will see that itis the same as the name of the directory, react-hooks-npm-lab. This is thepackage.json file that belongs to this code-along; you should not make anychanges to this file! Instead, we will build out a simple application withinthis lesson's directory and create a package.json file for that application.Note that this lesson's files include a sub-folder, color-clock, that containssome basic starter files for a project. If you look at color-clock/index.html,you'll see a script tag:<script src=\""index.js\"" type=\""module\""></script>Taking a look inside index.js, we can see that this script relies on a uniquefunction call, format(new Date(), \""MMMM do yyyy, h:mm:ss a\""). We're alsoimporting that function from a node_modules folder that contains a dateformatting library called date-fns. Our goal is to get this code working. Wedo not need to change index.js. Instead, we will need to set up apackage.json file and install thedate-fns package.Navigate to the Project DirectoryThe first thing to do is change directory into this folder in your terminal bytyping the command cd color-clock.The next step is to create a package.json file in the color-clock directory,which in turn will be where the node_modules folder is.Important: to avoid overwriting the package.json file for this code-alongbe sure to change directory into color-clock before creating thepackage.json file!Create a package.json FileThe package.json can be written quickly from scratch, but we actually have ahandy command for creating these files: npm init.Run npm init and you will be prompted to confirm the information that will bestored in package.json, starting with the name of the project.Most prompts will provide a default value. Some are blank and can be left thisway for now. Follow the prompts by pressing enter in the terminal on each promptuntil you reach the end, when you will be prompted to type 'yes' to confirm. Afully constructed package.json file will then appear in the color-clockdirectory.Add a ScriptIn the process of creating the package.json file, you were prompted to write atest script. We left it blank at that time, but we can add it to thepackage.json file ourselves. Let's do that now to see how this works.Open the newly created package.json file and look for a section titled\""scripts\"". Let's replace the default \""test\"" script with a shell command:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\""}We can now call this script and have it run by using the command npm test inthe terminal (if that doesn't work, try npm run test). You should see aprintout of Hello World!.In all the JavaScript-based labs you've encountered so far, this sort of scriptis how we run tests. If you look at the \""test\"" script on JavaScript labs inthe previous phase, most will have something like this:\""test\"": \""mocha -R mocha-multi --reporter-options spec=-,json=.results.json\""The mocha command is actually a command that you can run in the terminal. Thisis a call to the testing package, mocha, along with a second package,mocha-multi that helps with reporting. When you run npm test in a lab, thecommand specified in the \""test\"" script is what gets called.Scripts are often useful for things like testing or to start a necessaryprocess, like a local server.Install a PackageWith package.json set up, we can now add a package we want to include in ourproject.Now, we're building a colorful clock — the project is simple enough that wecould build it entirely out of custom code. Here's the thing though: one ofthe reasons packages exist and are so useful is because programmers often runinto the same problems over and over. Node packages are written so we don't haveto recreate a solution to a problem other programmers have already solved.In the case of a colorful clock, we have to deal with formatting time. This issuch a common problem, that a package has been created to help us:date-fns. date-fns is a handy package that comes with a numberof functions that make displaying dates and times simpler than trying to figureout JavaScript's built-in functions.Let's install date-fns and incorporate it into our clock. To install a packageand save it to your package.json file, run npm install followed by thepackage name. In our case, that would be:$ npm install date-fnsThis command will add the package to the list of dependencies in package.json.When npm install is run, all dependencies are installed. If you were topublish this repository on GitHub, other users would now be able to clone downthe repo and install whatever is listed in package.json to get the programworking.The second package we'll need to run our application in the browser isserve, which will run a lightweight server. To install it, we run:$ npm install serveNext, in the \""scripts\"" section in package.json, let's add an npm script torun the server using the serve package:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\"",  \""start\"": \""serve\""}If you run npm start to run the script and openlocalhost:3000 in the browser, you will see that theclock is not appearing. Go ahead and open the console and you'll see thatwe're getting an error:Uncaught TypeError: Failed to resolve module specifier \""@babel/runtime/helpers/esm/typeof\"". Relative references must start with either \""/\"", \""./\"", or \""../\"".The specifics of this error are beyond the scope of this lesson, but basicallywhat it means is that not all of the files in our project are currently set upto be interpretable by the browser. Before we can get our clock runningcorrectly, we need to install one more tool, esbuild. esbuild is aJavaScript bundler, which is a tool that handles all of a project'sdependencies, and combines the code into a single file that is browser-ready.There are a number of different JavaScript bundlers available; we're usingesbuild because it is relatively easy to configure and works fine for oursimple application.Stop the server with ctrl-c, then install esbuild:$ npm install esbuildThen we'll add one more script to run the build:\""scripts\"": {  \""test\"": \""echo 'Hello World!'\"",  \""start\"": \""serve\"",  \""build\"": \""esbuild index.js --bundle --outfile=dist/out.js\""}When we run a build using esbuild, it makes sure that all the dependencies areincluded and up to date, and combines the code from multiple files into a singlefile that is ready to be loaded in the browser. Note that the name of this fileis specified in the build command above: dist/out.js.Go ahead and run npm run build. You should now see the dist folder in yourfile tree and the out.js file inside it. The final step is to update thescript in the index.html file to use this new file. Find this line:<script src=\""index.js\"" type=\""module\""></script>Change the src property to dist/out.js. Now we're finally ready to start theserver. Run npm start then open up localhost:3000 inthe browser. You should now see a colorful clock appear!ConclusionWhen building our own applications, we will often rely on existing packages tohandle specific pieces of a project. Although we only installed a couple ofpackages for this code-along, there were additional layers of dependencies forthem so many additional dependencies were installed as well. It isn't necessaryto understand how each of these works. The main thing to grasp is how toimplement and use the specific dependencies you need."
57,Semantic-Org/Semantic-UI-React,https://github.com/Semantic-Org/Semantic-UI-React/blob/master/README.md,JavaScript,"          Semantic UI React                                        Installation & UsageSee the Documentation for an introduction, usage information, and examples.Built With      Amazon Publishing — the full-service publisher of Amazon — APub.comNetflix's Edge Developer Experience team's numerous internal appsNetflix's flamescopeMicrosoft's Teams prototypingExample ProjectsThis is a listing of example projects and guides that will help you integrate Semantic UI React into your new or existing projects.  Show projectssemantic-ui-react-todosSemantic UI React implementation of react-redux Todo List.FAQ  Can I use custom Icons?  Yes.  Just use <Icon className='my-icon' /> instead of <Icon name='my-icon' />.  See #931 (comment) for detailed info and examples.  How do I setup CSS?There are several options. Refer to our doc on CSS Usage.  Can I use a custom CSS theme?  Yes.  Semantic UI React includes components that render valid Semantic UI HTML, no CSS is included.  This allows you to load any Semantic UI CSS theme on top of your Semantic UI React app.Here are some helpful links:Building CSS with WebpackBuilding CSS with MeteorCreating a standalone themeHow Can I Help?Voice Your OpinionHelp shape this library by weighing in on our RFC (request for comments) issues.ContributeOur CONTRIBUTING.md is a step-by-step setup and development guide.Good First IssueIssues labeled good first issue are a great way to ease into development on this project.Missing ComponentsWe're seeking component parity with Semantic UI, plus some addons. There is an issue for every missing component, labeled new component. Just comment on the issue you'd like to take.Help Wanted LabelAny other issue labeled help wanted is ready for a PR.PrinciplesNo animation dependenciesSimple declarative component APIs vs brittle HTML markupComplete keyboard supportComplete SUI component definition supportCompletely documentedCompletely testedAccessibleCreditCreated by @levithomason and an amazing community of contributors.Made possible only by @jlukic authoring Semantic UI.Blazing deployments by  Vercel."
58,cubiq/iscroll,https://github.com/cubiq/iscroll/blob/master/README.md,JavaScript,"iScroll, smooth scrolling for the webiScroll is a high performance, small footprint, dependency free, multi-platform javascript scroller.It works on desktop, mobile and smart TV. It has been vigorously optimized for performance and size so to offer the smoothest result on modern and old devices alike.iScroll does not just scroll. It can handle any element that needs to be moved with user interaction. It adds scrolling, zooming, panning, infinite scrolling, parallax scrolling, carousels to your projects and manages to do that in just 4kb. Give it a broom and it will also clean up your office.Even on platforms where native scrolling is good enough, iScroll adds features that wouldn't be possible otherwise. Specifically:Granular control over the scroll position, even during momentum. You can always get and set the x,y coordinates of the scroller.Animation can be customized with user defined easing functions (bounce, elastic, back, ...).You can easily hook to a plethora of custom events (onBeforeScrollStart, onScrollStart, onScroll, onScrollEnd, flick, ...).Out of the box multi-platform support. From older Android devices to the latest iPhone, from Chrome to Internet Explorer.The many faces of iScrolliScroll is all about optimization. To reach the highest performance it has been divided into multiple versions. You can pick the version that better suits your need.Currently we have the following fragrances:iscroll.js, it is the general purpose script. It includes the most commonly used features and grants very high performance in a small footprint.iscroll-lite.js, it is a stripped down version of the main script. It doesn't support snap, scrollbars, mouse wheel, key bindings. But if all you need is scrolling (especially on mobile) iScroll lite is the smallest, fastest solution.iscroll-probe.js, probing the current scroll position is a demanding task, that's why I decided to build a dedicated version for it. If you need to know the scrolling position at any given time, this is the iScroll for you. (I'm making some more tests, this might end up in the regular iscroll.js script, so keep an eye on it).iscroll-zoom.js, adds zooming to the standard scroll.iscroll-infinite.js, can do infinite and cached scrolling. Handling very long lists of elements is no easy task for mobile devices. iScroll infinite uses a caching mechanism that lets you scroll a potentially infinite number of elements.Getting startedSo you want to be an iScroll master. Cool, because that is what I'll make you into.The best way to learn the iScroll is by looking at the demos. In the archive you'll find a demo folder stuffed with examples. Most of the script features are outlined there.IScroll is a class that needs to be initiated for each scrolling area. There's no limit to the number of iScrolls you can have in each page if not that imposed by the device CPU/Memory.Try to keep the DOM as simple as possible. iScroll uses the hardware compositing layer but there's a limit to the elements the hardware can handle.The optimal HTML structure is:<div id=\""wrapper\"">    <ul>        <li>...</li>        <li>...</li>        ...    </ul></div>iScroll must be applied to the wrapper of the scrolling area. In the above example the UL element will be scrolled. Only the first child of the container element is scrolled, additional children are simply ignored.box-shadow, opacity, text-shadow and alpha channels are all properties that don't go very well together with hardware acceleration. Scrolling might look good with few elements but as soon as your DOM becomes more complex you'll start experiencing lag and jerkiness.Sometimes a background image to simulate the shadow performs better than box-shadow. The bottom line is: experiment with CSS properties, you'll be surprised by the difference in performance a small CSS change can do.The minimal call to initiate the script is as follow:<script type=\""text/javascript\"">var myScroll = new IScroll('#wrapper');</script>The first parameter can be a string representing the DOM selector of the scroll container element OR a reference to the element itself. The following is a valid syntax too:var wrapper = document.getElementById('wrapper');var myScroll = new IScroll(wrapper);So basically either you pass the element directly or a string that will be given to querySelector. Consequently to select a wrapper by its class name instead of the ID, you'd do:var myScroll = new IScroll('.wrapper');Note that iScroll uses querySelector not querySelectorAll, so only the first occurrence of the selector is used. If you need to apply iScroll to multiple objects you'll have to build your own cycle.You don't strictly need to assign the instance to a variable (myScroll), but it is handy to keep a reference to the iScroll.For example you could later check the scroller position or unload unnecessary events when you don't need the iScroll anymore.InitializationThe iScroll needs to be initiated when the DOM is ready. The safest bet is to start it on window onload event. DOMContentLoaded or inline initialization are also fine but remember that the script needs to know the height/width of the scrolling area. If you have images that don't have explicit width/height declaration, iScroll will most likely end up with a wrong scroller size.Add position:relative or absolute to the scroll container (the wrapper). That alone usually solves most of the problems with wrongly calculated wrapper dimensions.To sum up, the smallest iScroll configuration is:<head>...<script type=\""text/javascript\"" src=\""iscroll.js\""></script><script type=\""text/javascript\"">var myScroll;function loaded() {    myScroll = new IScroll('#wrapper');}</script></head>...<body onload=\""loaded()\""><div id=\""wrapper\"">    <ul>        <li>...</li>        <li>...</li>        ...    </ul></div></body>Refer to the barebone example for more details on the minimal CSS/HTML requirements.If you have a complex DOM it is sometimes smart to add a little delay from the onload event to iScroll initialization. Executing the iScroll with a 100 or 200 milliseconds delay gives the browser that little rest that can save your ass.Configuring the iScrolliScroll can be configured by passing a second parameter during the initialization phase.var myScroll = new IScroll('#wrapper', {    mouseWheel: true,    scrollbars: true});The example above turns on mouse wheel support and scrollbars.After initialization you can access the normalized values from the options object. Eg:console.dir(myScroll.options);The above will return the configuration the myScroll instance will run on. By normalized I mean that if you set useTransform:true (for example) but the browser doesn't support CSS transforms, useTransform will be false.Understanding the coreiScroll uses various techniques to scroll based on device/browser capability. Normally you don't need to configure the engine, iScroll is smart enough to pick the best for you.Nonetheless it is important to understand which mechanisms iScroll works on and how to configure them.options.useTransformBy default the engine uses the transform CSS property. Setting this to false scrolls like we were in 2007, ie: using the top/left (and thus the scroller needs to be absolutely positioned).This might be useful when scrolling sensitive content such as Flash, iframes and videos, but be warned: performance loss is huge.Default: trueoptions.useTransitioniScroll uses CSS transition to perform animations (momentum and bounce). By setting this to false, requestAnimationFrame is used instead.On modern browsers the difference is barely noticeable. On older devices transitions perform better.Default: trueoptions.HWCompositingThis option tries to put the scroller on the hardware layer by appending translateZ(0) to the transform CSS property. This greatly increases performance especially on mobile, but there are situations where you might want to disable it (notably if you have too many elements and the hardware can't catch up).Default: trueIf unsure leave iScroll decide what's the optimal config. For best performance all the above options should be set to true (or better leave them undefined as they are set to true automatically). You may try to play with them in case you encounter hiccups and memory leaks.Basic featuresoptions.bounceWhen the scroller meets the boundary it performs a small bounce animation. Disabling bounce may help reach smoother results on old or slow devices.Default: trueoptions.clickTo override the native scrolling iScroll has to inhibit some default browser behaviors, such as mouse clicks. If you want your application to respond to the click event you have to explicitly set this option to true. Please note that it is suggested to use the custom tap event instead (see below).Default: falseoptions.disableMouseoptions.disablePointeroptions.disableTouchBy default iScroll listens to all pointer events and reacts to the first one that occurs. It may seem a waste of resources but feature detection has proven quite unreliable and this listen-to-all approach is our safest bet for wide browser/device compatibility.If you have an internal mechanism for device detection or you know in advance where your script will run on, you may want to disable all event sets you don't need (mouse, pointer or touch events).For example to disable mouse and pointer events:var myScroll = new IScroll('#wrapper', {    disableMouse: true,    disablePointer: true});Default: falseoptions.eventPassthroughSometimes you want to preserve native vertical scroll but being able to add an horizontal iScroll (maybe a carousel). Set this to true and the iScroll area will react to horizontal swipes only. Vertical swipes will naturally scroll the whole page.See event passthrough demo on a mobile device. Note that this can be set to 'horizontal' to inverse the behavior (native horizontal scroll, vertical iScroll).options.freeScrollThis is useful mainly on 2D scrollers (when you need to scroll both horizontally and vertically). Normally when you start scrolling in one direction the other is locked.Sometimes you just want to move freely with no constrains. In these cases you can set this option to true. See 2D scroll demo.Default: falseoptions.keyBindingsSet this to true to activate keyboard (and remote controls) interaction. See the Key bindings section below for more information.Default: falseoptions.invertWheelDirectionMeaningful when mouse wheel support is activated, in which case it just inverts the scrolling direction. (ie. going down scrolls up and vice-versa).Default: falseoptions.momentumYou can turn on/off the momentum animation performed when the user quickly flicks on screen. Turning this off greatly enhances performance.Default: trueoptions.mouseWheelListen to the mouse wheel event.Default: falseoptions.preventDefaultWhether or not to preventDefault() when events are fired. This should be left true unless you really know what you are doing.See preventDefaultException in the Advanced options for more control over the preventDefault behavior.Default: trueoptions.scrollbarsWheter or not to display the default scrollbars. See more in the Scrollbar section.Default: false.options.scrollXoptions.scrollYBy default only vertical scrolling is enabled. If you need to scroll horizontally you have to set scrollX to true. See horizontal demo.See also the freeScroll option.Default: scrollX: false, scrollY: trueNote that scrollX/Y: true has the same effect as overflow: auto. Setting one direction to false helps to spare some checks and thus CPU cycles.options.startXoptions.startYBy default iScroll starts at 0, 0 (top left) position, you can instruct the scroller to kickoff at a different location.Default: 0options.tapSet this to true to let iScroll emit a custom tap event when the scroll area is clicked/tapped but not scrolled.This is the suggested way to handle user interaction with clickable elements. To listen to the tap event you would add an event listener as you would do for a standard event. Example:element.addEventListener('tap', doSomething, false); \\\\ Native$('#element').on('tap', doSomething); \\\\ jQueryYou can also customize the event name by passing a string. Eg:tap: 'myCustomTapEvent'In this case you'd listen to myCustomTapEvent.Default: falseScrollbarsThe scrollbars are more than just what the name suggests. In fact internally they are referenced as indicators.An indicator listens to the scroller position and normally it just shows its position in relation to whole, but what it can do is so much more.Let's start with the basis.options.scrollbarsAs we mentioned in the Basic features section there's only one thing that you got to do to activate the scrollbars in all their splendor, and that one thing is:var myScroll = new IScroll('#wrapper', {    scrollbars: true});Of course the default behavior can be personalized.options.fadeScrollbarsWhen not in use the scrollbar fades away. Leave this to false to spare resources.Default: falseoptions.interactiveScrollbarsThe scrollbar becomes draggable and user can interact with it.Default: falseoptions.resizeScrollbarsThe scrollbar size changes based on the proportion between the wrapper and the scroller width/height. Setting this to false makes the scrollbar a fixed size. This might be useful in case of custom styled scrollbars (see below).Default: trueoptions.shrinkScrollbarsWhen scrolling outside of the boundaries the scrollbar is shrunk by a small amount.Valid values are: 'clip' and 'scale'.'clip' just moves the indicator outside of its container, the impression is that the scrollbar shrinks but it is simply moving out of the screen. If you can live with the visual effect this option immensely improves overall performance.'scale' turns off useTransition hence all animations are served with requestAnimationFrame. The indicator is actually varied in size and the end result is nicer to the eye.Default: falseNote that resizing can't be performed by the GPU, so scale is all on the CPU.If your application runs on multiple devices my suggestion would be to switch this option to 'scale', 'clip' or false based on the platform responsiveness (eg: on older mobile devices you could set this to 'clip' and on desktop browser to 'scale').See the scrollbar demo.Styling the scrollbarSo you don't like the default scrollbar styling and you think you could do better. Help yourself! iScroll makes dressing the scrollbar a snap. First of all set the scrollbars option to 'custom':var myScroll = new IScroll('#wrapper', {    scrollbars: 'custom'});Then use the following CSS classes to style the little bastards..iScrollHorizontalScrollbar, this is applied to the horizontal container. The element that actually hosts the scrollbar indicator..iScrollVerticalScrollbar, same as above but for the vertical container..iScrollIndicator, the actual scrollbar indicator..iScrollBothScrollbars, this is added to the container elements when both scrollbars are shown. Normally just one (horizontal or vertical) is visible.The styled scrollbars demo should make things clearer than my lousy explanation.If you set resizeScrollbars: false you could make the scrollbar of a fixed size, otherwise it would be resized based on the scroller length.Please keep reading to the following section for a revelation that will shake your world.IndicatorsAll the scrollbar options above are in reality just wrappers to the low level indicators option. It looks more or less like this:var myScroll = new IScroll('#wrapper', {    indicators: {        el: [element|element selector]        fade: false,        ignoreBoundaries: false,        interactive: false,        listenX: true,        listenY: true,        resize: true,        shrink: false,        speedRatioX: 0,        speedRatioY: 0,    }});options.indicators.elThis is a mandatory parameter which holds a reference to the scrollbar container element. The first child inside the container will be the indicator. Note that the scrollbar can be anywhere on your document, it doesn't need to be inside the scroller wrapper. Do you start perceiving the power of such tool?Valid syntax would be:indicators: {    el: document.getElementById('indicator')}Or simply:indicators: {    el: '#indicator'}options.indicators.ignoreBoundariesThis tells the indicator to ignore the boundaries imposed by its container. Since we can alter the speed ratio of the scrollbar, it is useful to just let the scrollbar go. Say you want the indicator to go twice as fast as the scroller, it would reach the end of its run very quickly. This option is used for parallax scrolling.Default: falseoptions.indicators.listenXoptions.indicators.listenYTo which axis the indicator listens to. It can be just one or both.Default: trueoptions.indicators.speedRatioXoptions.indicators.speedRatioYThe speed the indicator moves in relation to the main scroller size. By default this is set automatically. You rarely need to alter this value.Default: 0options.indicators.fadeoptions.indicators.interactiveoptions.indicators.resizeoptions.indicators.shrinkThese are the same options we explored in the scrollbars section, I'm not going to insult your intelligence and repeat them here.Do not cross the streams. It would be bad! Do not mix the scrollbars syntax (options.scrollbars, options.fadeScrollbars, options.interactiveScrollbars, ...) with the indicators! Use one or the other.Have a look at the minimap demo to get a glance at the power of the indicators option.The wittiest of you would have noticed that indicators is actually plural... Yes, exactly, passing an array of objects you can have a virtually infinite number of indicators. I don't know what you may need them for, but hey! who am I to argue about your scrollbar preferences?Parallax scrollingParallax scrolling is just a collateral damage of the Indicators functionality.An indicator is just a layer that follows the movement and animation applied to the main scroller. If you see it like that you'll understand the power behind this feature. To this add that you can have any number of indicators and the parallax scrolling is served.Please refer to the parallax demo.Scrolling programmaticallyYou silly! Of course you can scroll programmaticaly!scrollTo(x, y, time, easing)Say your iScroll instance resides into the myScroll variable. You can easily scroll to any position with the following syntax:myScroll.scrollTo(0, -100);That would scroll down by 100 pixels. Remember: 0 is always the top left corner. To scroll you have to pass negative numbers.time and easing are optional. They regulates the duration (in ms) and the easing function of the animation respectively.The easing functions are available in the IScroll.utils.ease object. For example to apply a 1 second elastic easing you'd do:myScroll.scrollTo(0, -100, 1000, IScroll.utils.ease.elastic);The available options are: quadratic, circular, back, bounce, elastic.scrollBy(x, y, time, easing)Same as above but X and Y are relative to the current position.myScroll.scrollBy(0, -10);Would scroll 10 pixels down. If you are at -100, you'll end up at -110.scrollToElement(el, time, offsetX, offsetY, easing)You're gonna like this. Sit tight.The only mandatory parameter is el. Pass an element or a selector and iScroll will try to scroll to the top/left of that element.time is optional and sets the animation duration.offsetX and offsetY define an offset in pixels, so that you can scroll to that element plus a the specified offset. Not only that. If you set them to true the element will be centered on screen. Refer to the scroll to element example.easing works the same way as per the scrollTo method.SnapiScroll can snap to fixed positions and elements.options.snapThe simplest snap config is as follow:var myScroll = new IScroll('#wrapper', {    snap: true});This would automatically split the scroller into pages the size of the container.snap also takes a string as a value. The string will be the selector to the elements the scroller will be snapped to. So the followingvar myScroll = new IScroll('#wrapper', {    snap: 'li'});would snap to each and every LI tag.To help you navigate through the snap points iScroll grants access to a series of interesting methods.goToPage(x, y, time, easing)x and y represent the page number you want to scroll to in the horizontal or vertical axes (yeah, it's the plural of axis, I checked). If the scroller in mono-dimensional, just pass 0 to the axis you don't need.time is the duration of the animation, easing the easing function used to scroll to the point. Refer to the option.bounceEasing in the Advanced options. They are both optional.myScroll.goToPage(10, 0, 1000);This would scroll to the 10th page on the horizontal axis in 1 second.next()prev()Go to the next and previous page based on current position.ZoomTo use the pinch/zoom functionality you better use the iscroll-zoom.js script.options.zoomSet this to true to activate zoom.Default: falseoptions.zoomMaxMaximum zoom level.Default: 4options.zoomMinMinimum zoom level.Default: 1options.startZoomStarting zoom level.Default: 1options.wheelActionWheel action can be set to 'zoom' to have the wheel regulate the zoom level instead of scrolling position.Default: undefined (ie: the mouse wheel scrolls)To sum up, a nice zoom config would be:myScroll = new IScroll('#wrapper', {    zoom: true,    mouseWheel: true,    wheelAction: 'zoom'});The zoom is performed with CSS transform. iScroll can zoom only on browsers that support that.Some browsers (notably webkit based ones) take a snapshot of the zooming area as soon as they are placed on the hardware compositing layer (say as soon as you apply a transform to them). This snapshot is used as a texture for the zooming area and it can hardly be updated. This means that your texture will be based on elements at scale 1 and zooming in will result in blurred, low definition text and images.A simple solution is to load content at double (or triple) its actual resolution and scale it down inside a scale(0.5) div. This should be enough to grant you a better result. I hope to be able to post more demos soonRefer to the zoom demo.zoom(scale, x, y, time)Juicy method that lets you zoom programmatically.scale is the zoom factor.x and y the focus point, aka the center of the zoom. If not specified, the center of the screen will be used.time is the duration of the animation in milliseconds (optional).Infinite scrollingiScroll integrates a smart caching system that allows to handle of a virtually infinite amount of data using (and reusing) just a bunch of elements.Infinite scrolling is in an early stage of development and although it can be considered stable, it is not ready for wide consumption.Please review the infinite demo and send your suggestions and bug reports.I will add more details as soon as the functionality evolves.Advanced optionsFor the hardcore developer.options.bindToWrapperThe move event is normally bound to the document and not the scroll container. When you move the cursor/finger out of the wrapper the scrolling keeps going. This is usually what you want, but you can also bind the move event to wrapper itself. Doing so as soon as the pointer leaves the container the scroll stops.Default: falseoptions.bounceEasingEasing function performed during the bounce animation. Valid values are: 'quadratic', 'circular', 'back', 'bounce', 'elastic'. See the bounce easing demo, drag the scroller down and release.bounceEasing is a bit smarter than that. You can also feed a custom easing function, like so:bounceEasing: {    style: 'cubic-bezier(0,0,1,1)',    fn: function (k) { return k; }}The above would perform a linear easing. The style option is used every time the animation is executed with CSS transitions, fn is used with requestAnimationFrame. If the easing function is too complex and can't be represented by a cubic bezier just pass '' (empty string) as style.Note that bounce and elastic can't be performed by CSS transitions.Default: 'circular'options.bounceTimeDuration in millisecond of the bounce animation.Default: 600options.decelerationThis value can be altered to change the momentum animation duration/speed. Higher numbers make the animation shorter. Sensible results can be experienced starting with a value of 0.01, bigger than that basically doesn't make any momentum at all.Default: 0.0006options.mouseWheelSpeedSet the speed of the mouse wheel.Default: 20options.preventDefaultExceptionThese are all the exceptions when preventDefault() would be fired anyway despite the preventDefault option value.This is a pretty powerful option, if you don't want to preventDefault() on all elements with formfield class name for example, you could pass the following:preventDefaultException: { className: /(^|\\s)formfield(\\s|$)/ }Default: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ }.options.resizePollingWhen you resize the window iScroll has to recalculate elements position and dimension. This might be a pretty daunting task for the poor little fella. To give it some rest the polling is set to 60 milliseconds.By reducing this value you get better visual effect but the script becomes more aggressive on the CPU. The default value seems a good compromise.Default: 60Mastering the refresh methodiScroll needs to know the exact dimensions of both the wrapper and the scroller. They are computed at start up but if your elements change in size, we need to tell iScroll that you are messing with the DOM.This is achieved by calling the refresh method with the right timing. Please follow me closely, understanding this will save you hours of frustration.Every time you touch the DOM the browser renderer repaints the page. Once this repaint has happened we can safely read the new DOM properties. The repaint phase is not instantaneous and it happens only at the end of the scope that triggered it. That's why we need to give the renderer a little rest before refreshing the iScroll.To ensure that javascript gets the updated properties you should defer the refresh with something like this:ajax('page.php', onCompletion);function onCompletion () {    // Update here your DOM        setTimeout(function () {        myScroll.refresh();    }, 0);};We have placed the refresh() call into a zero timeout. That is likely all you need to correctly refresh the iScroll boundaries. There are other ways to wait for the repaint, but the zero-timeout has proven pretty solid.Consider that if you have a very complex HTML structure you may give the browser some more rest and raise the timeout to 100 or 200 milliseconds.This is generally true for all the tasks that have to be done on the DOM. Always give the renderer some rest.Custom eventsiScroll also emits some useful custom events you can hook to.To register them you use the on(type, fn) method.myScroll = new IScroll('#wrapper');myScroll.on('scrollEnd', doSomething);The above code executes the doSomething function every time the content stops scrolling.The available types are:beforeScrollStart, executed as soon as user touches the screen but before the scrolling has initiated.scrollCancel, scroll initiated but didn't happen.scrollStart, the scroll started.scroll, the content is scrolling. Available only in scroll-probe.js edition. See onScroll event.scrollEnd, content stopped scrolling.flick, user flicked left/right.zoomStart, user started zooming.zoomEnd, zoom ended.onScroll eventThe scroll event is available on iScroll probe edition only (iscroll-probe.js). The probe behavior can be altered through the probeType option.options.probeTypeThis regulates the probe aggressiveness or the frequency at which the scroll event is fired. Valid values are: 1, 2, 3. The higher the number the more aggressive the probe. The more aggressive the probe the higher the impact on the CPU.probeType: 1 has no impact on performance. The scroll event is fired only when the scroller is not busy doing its stuff.probeType: 2 always executes the scroll event except during momentum and bounce. This resembles the native onScroll event.probeType: 3 emits the scroll event with a to-the-pixel precision. Note that the scrolling is forced to requestAnimationFrame (ie: useTransition:false).Please see the probe demo.Key bindingsYou can activate support for keyboards and remote controls with the keyBindings option. By default iScroll listens to the arrow keys, page up/down, home/end but they are (wait for it) totally customizable.You can pass an object with the list of key codes you want iScroll to react to.The default values are as follow:keyBindings: {    pageUp: 33,    pageDown: 34,    end: 35,    home: 36,    left: 37,    up: 38,    right: 39,    down: 40}You can also pass a string (eg: pageUp: 'a') and iScroll will convert it for you. You could just think of a key code and iScroll would read it out of your mind.Useful scroller infoiScroll stores many useful information that you can use to augment your application.You will probably find useful:myScroll.x/y, current positionmyScroll.directionX/Y, last direction (-1 down/right, 0 still, 1 up/left)myScroll.currentPage, current snap point infoThese pieces of information may be useful when dealing with custom events. Eg:myScroll = new IScroll('#wrapper');myScroll.on('scrollEnd', function () {    if ( this.x < -1000 ) {        // do something    }});The above executes some code if the x position is lower than -1000px when the scroller stops. Note that I used this instead of myScroll, you can use both of course, but iScroll passes itself as this context when firing custom event functions.DestroyThe public destroy() method can be used to free some memory when the iScroll is not needed anymore.myScroll.destroy();myScroll = null;Contributing and CLAIf you want to contribute to the iScroll development, before I can accept your submission I have to ask you to sign the Contributor License Agreement. Unfortunately that is the only way to enforce the openness of the script.As an end user you have to do nothing of course. Actually the CLA ensures that nobody will even come after you asking for your first born for using the iScroll.Please note that pull requests may take some time to be accepted. Testing iScroll is one of the most time consuming tasks of the project. iScroll works from desktop to smartphone, from tablets to smart TVs. I do not have physical access to all the testing devices, so before I can push a change I have to make sure that the new code is working everywhere.Critical bugs are usually applied very quickly, but enhancements and coding style changes have to pass a longer review phase. Remember that this is still a side project for me.Who is using iScrollIt's impossible to track all the websites and applications that use the iScroll. It has been spotted on: Apple, Microsoft, People, LinkedIn, IKEA, Nike, Playboy, Bose, and countless others.License (MIT)Copyright (c) 2014 Matteo Spinelli, cubiq.orgPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \""Software\""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
59,progedu/adding-up,https://github.com/cubiq/iscroll/blob/master/README.md,JavaScript,"iScroll, smooth scrolling for the webiScroll is a high performance, small footprint, dependency free, multi-platform javascript scroller.It works on desktop, mobile and smart TV. It has been vigorously optimized for performance and size so to offer the smoothest result on modern and old devices alike.iScroll does not just scroll. It can handle any element that needs to be moved with user interaction. It adds scrolling, zooming, panning, infinite scrolling, parallax scrolling, carousels to your projects and manages to do that in just 4kb. Give it a broom and it will also clean up your office.Even on platforms where native scrolling is good enough, iScroll adds features that wouldn't be possible otherwise. Specifically:Granular control over the scroll position, even during momentum. You can always get and set the x,y coordinates of the scroller.Animation can be customized with user defined easing functions (bounce, elastic, back, ...).You can easily hook to a plethora of custom events (onBeforeScrollStart, onScrollStart, onScroll, onScrollEnd, flick, ...).Out of the box multi-platform support. From older Android devices to the latest iPhone, from Chrome to Internet Explorer.The many faces of iScrolliScroll is all about optimization. To reach the highest performance it has been divided into multiple versions. You can pick the version that better suits your need.Currently we have the following fragrances:iscroll.js, it is the general purpose script. It includes the most commonly used features and grants very high performance in a small footprint.iscroll-lite.js, it is a stripped down version of the main script. It doesn't support snap, scrollbars, mouse wheel, key bindings. But if all you need is scrolling (especially on mobile) iScroll lite is the smallest, fastest solution.iscroll-probe.js, probing the current scroll position is a demanding task, that's why I decided to build a dedicated version for it. If you need to know the scrolling position at any given time, this is the iScroll for you. (I'm making some more tests, this might end up in the regular iscroll.js script, so keep an eye on it).iscroll-zoom.js, adds zooming to the standard scroll.iscroll-infinite.js, can do infinite and cached scrolling. Handling very long lists of elements is no easy task for mobile devices. iScroll infinite uses a caching mechanism that lets you scroll a potentially infinite number of elements.Getting startedSo you want to be an iScroll master. Cool, because that is what I'll make you into.The best way to learn the iScroll is by looking at the demos. In the archive you'll find a demo folder stuffed with examples. Most of the script features are outlined there.IScroll is a class that needs to be initiated for each scrolling area. There's no limit to the number of iScrolls you can have in each page if not that imposed by the device CPU/Memory.Try to keep the DOM as simple as possible. iScroll uses the hardware compositing layer but there's a limit to the elements the hardware can handle.The optimal HTML structure is:<div id=\""wrapper\"">    <ul>        <li>...</li>        <li>...</li>        ...    </ul></div>iScroll must be applied to the wrapper of the scrolling area. In the above example the UL element will be scrolled. Only the first child of the container element is scrolled, additional children are simply ignored.box-shadow, opacity, text-shadow and alpha channels are all properties that don't go very well together with hardware acceleration. Scrolling might look good with few elements but as soon as your DOM becomes more complex you'll start experiencing lag and jerkiness.Sometimes a background image to simulate the shadow performs better than box-shadow. The bottom line is: experiment with CSS properties, you'll be surprised by the difference in performance a small CSS change can do.The minimal call to initiate the script is as follow:<script type=\""text/javascript\"">var myScroll = new IScroll('#wrapper');</script>The first parameter can be a string representing the DOM selector of the scroll container element OR a reference to the element itself. The following is a valid syntax too:var wrapper = document.getElementById('wrapper');var myScroll = new IScroll(wrapper);So basically either you pass the element directly or a string that will be given to querySelector. Consequently to select a wrapper by its class name instead of the ID, you'd do:var myScroll = new IScroll('.wrapper');Note that iScroll uses querySelector not querySelectorAll, so only the first occurrence of the selector is used. If you need to apply iScroll to multiple objects you'll have to build your own cycle.You don't strictly need to assign the instance to a variable (myScroll), but it is handy to keep a reference to the iScroll.For example you could later check the scroller position or unload unnecessary events when you don't need the iScroll anymore.InitializationThe iScroll needs to be initiated when the DOM is ready. The safest bet is to start it on window onload event. DOMContentLoaded or inline initialization are also fine but remember that the script needs to know the height/width of the scrolling area. If you have images that don't have explicit width/height declaration, iScroll will most likely end up with a wrong scroller size.Add position:relative or absolute to the scroll container (the wrapper). That alone usually solves most of the problems with wrongly calculated wrapper dimensions.To sum up, the smallest iScroll configuration is:<head>...<script type=\""text/javascript\"" src=\""iscroll.js\""></script><script type=\""text/javascript\"">var myScroll;function loaded() {    myScroll = new IScroll('#wrapper');}</script></head>...<body onload=\""loaded()\""><div id=\""wrapper\"">    <ul>        <li>...</li>        <li>...</li>        ...    </ul></div></body>Refer to the barebone example for more details on the minimal CSS/HTML requirements.If you have a complex DOM it is sometimes smart to add a little delay from the onload event to iScroll initialization. Executing the iScroll with a 100 or 200 milliseconds delay gives the browser that little rest that can save your ass.Configuring the iScrolliScroll can be configured by passing a second parameter during the initialization phase.var myScroll = new IScroll('#wrapper', {    mouseWheel: true,    scrollbars: true});The example above turns on mouse wheel support and scrollbars.After initialization you can access the normalized values from the options object. Eg:console.dir(myScroll.options);The above will return the configuration the myScroll instance will run on. By normalized I mean that if you set useTransform:true (for example) but the browser doesn't support CSS transforms, useTransform will be false.Understanding the coreiScroll uses various techniques to scroll based on device/browser capability. Normally you don't need to configure the engine, iScroll is smart enough to pick the best for you.Nonetheless it is important to understand which mechanisms iScroll works on and how to configure them.options.useTransformBy default the engine uses the transform CSS property. Setting this to false scrolls like we were in 2007, ie: using the top/left (and thus the scroller needs to be absolutely positioned).This might be useful when scrolling sensitive content such as Flash, iframes and videos, but be warned: performance loss is huge.Default: trueoptions.useTransitioniScroll uses CSS transition to perform animations (momentum and bounce). By setting this to false, requestAnimationFrame is used instead.On modern browsers the difference is barely noticeable. On older devices transitions perform better.Default: trueoptions.HWCompositingThis option tries to put the scroller on the hardware layer by appending translateZ(0) to the transform CSS property. This greatly increases performance especially on mobile, but there are situations where you might want to disable it (notably if you have too many elements and the hardware can't catch up).Default: trueIf unsure leave iScroll decide what's the optimal config. For best performance all the above options should be set to true (or better leave them undefined as they are set to true automatically). You may try to play with them in case you encounter hiccups and memory leaks.Basic featuresoptions.bounceWhen the scroller meets the boundary it performs a small bounce animation. Disabling bounce may help reach smoother results on old or slow devices.Default: trueoptions.clickTo override the native scrolling iScroll has to inhibit some default browser behaviors, such as mouse clicks. If you want your application to respond to the click event you have to explicitly set this option to true. Please note that it is suggested to use the custom tap event instead (see below).Default: falseoptions.disableMouseoptions.disablePointeroptions.disableTouchBy default iScroll listens to all pointer events and reacts to the first one that occurs. It may seem a waste of resources but feature detection has proven quite unreliable and this listen-to-all approach is our safest bet for wide browser/device compatibility.If you have an internal mechanism for device detection or you know in advance where your script will run on, you may want to disable all event sets you don't need (mouse, pointer or touch events).For example to disable mouse and pointer events:var myScroll = new IScroll('#wrapper', {    disableMouse: true,    disablePointer: true});Default: falseoptions.eventPassthroughSometimes you want to preserve native vertical scroll but being able to add an horizontal iScroll (maybe a carousel). Set this to true and the iScroll area will react to horizontal swipes only. Vertical swipes will naturally scroll the whole page.See event passthrough demo on a mobile device. Note that this can be set to 'horizontal' to inverse the behavior (native horizontal scroll, vertical iScroll).options.freeScrollThis is useful mainly on 2D scrollers (when you need to scroll both horizontally and vertically). Normally when you start scrolling in one direction the other is locked.Sometimes you just want to move freely with no constrains. In these cases you can set this option to true. See 2D scroll demo.Default: falseoptions.keyBindingsSet this to true to activate keyboard (and remote controls) interaction. See the Key bindings section below for more information.Default: falseoptions.invertWheelDirectionMeaningful when mouse wheel support is activated, in which case it just inverts the scrolling direction. (ie. going down scrolls up and vice-versa).Default: falseoptions.momentumYou can turn on/off the momentum animation performed when the user quickly flicks on screen. Turning this off greatly enhances performance.Default: trueoptions.mouseWheelListen to the mouse wheel event.Default: falseoptions.preventDefaultWhether or not to preventDefault() when events are fired. This should be left true unless you really know what you are doing.See preventDefaultException in the Advanced options for more control over the preventDefault behavior.Default: trueoptions.scrollbarsWheter or not to display the default scrollbars. See more in the Scrollbar section.Default: false.options.scrollXoptions.scrollYBy default only vertical scrolling is enabled. If you need to scroll horizontally you have to set scrollX to true. See horizontal demo.See also the freeScroll option.Default: scrollX: false, scrollY: trueNote that scrollX/Y: true has the same effect as overflow: auto. Setting one direction to false helps to spare some checks and thus CPU cycles.options.startXoptions.startYBy default iScroll starts at 0, 0 (top left) position, you can instruct the scroller to kickoff at a different location.Default: 0options.tapSet this to true to let iScroll emit a custom tap event when the scroll area is clicked/tapped but not scrolled.This is the suggested way to handle user interaction with clickable elements. To listen to the tap event you would add an event listener as you would do for a standard event. Example:element.addEventListener('tap', doSomething, false); \\\\ Native$('#element').on('tap', doSomething); \\\\ jQueryYou can also customize the event name by passing a string. Eg:tap: 'myCustomTapEvent'In this case you'd listen to myCustomTapEvent.Default: falseScrollbarsThe scrollbars are more than just what the name suggests. In fact internally they are referenced as indicators.An indicator listens to the scroller position and normally it just shows its position in relation to whole, but what it can do is so much more.Let's start with the basis.options.scrollbarsAs we mentioned in the Basic features section there's only one thing that you got to do to activate the scrollbars in all their splendor, and that one thing is:var myScroll = new IScroll('#wrapper', {    scrollbars: true});Of course the default behavior can be personalized.options.fadeScrollbarsWhen not in use the scrollbar fades away. Leave this to false to spare resources.Default: falseoptions.interactiveScrollbarsThe scrollbar becomes draggable and user can interact with it.Default: falseoptions.resizeScrollbarsThe scrollbar size changes based on the proportion between the wrapper and the scroller width/height. Setting this to false makes the scrollbar a fixed size. This might be useful in case of custom styled scrollbars (see below).Default: trueoptions.shrinkScrollbarsWhen scrolling outside of the boundaries the scrollbar is shrunk by a small amount.Valid values are: 'clip' and 'scale'.'clip' just moves the indicator outside of its container, the impression is that the scrollbar shrinks but it is simply moving out of the screen. If you can live with the visual effect this option immensely improves overall performance.'scale' turns off useTransition hence all animations are served with requestAnimationFrame. The indicator is actually varied in size and the end result is nicer to the eye.Default: falseNote that resizing can't be performed by the GPU, so scale is all on the CPU.If your application runs on multiple devices my suggestion would be to switch this option to 'scale', 'clip' or false based on the platform responsiveness (eg: on older mobile devices you could set this to 'clip' and on desktop browser to 'scale').See the scrollbar demo.Styling the scrollbarSo you don't like the default scrollbar styling and you think you could do better. Help yourself! iScroll makes dressing the scrollbar a snap. First of all set the scrollbars option to 'custom':var myScroll = new IScroll('#wrapper', {    scrollbars: 'custom'});Then use the following CSS classes to style the little bastards..iScrollHorizontalScrollbar, this is applied to the horizontal container. The element that actually hosts the scrollbar indicator..iScrollVerticalScrollbar, same as above but for the vertical container..iScrollIndicator, the actual scrollbar indicator..iScrollBothScrollbars, this is added to the container elements when both scrollbars are shown. Normally just one (horizontal or vertical) is visible.The styled scrollbars demo should make things clearer than my lousy explanation.If you set resizeScrollbars: false you could make the scrollbar of a fixed size, otherwise it would be resized based on the scroller length.Please keep reading to the following section for a revelation that will shake your world.IndicatorsAll the scrollbar options above are in reality just wrappers to the low level indicators option. It looks more or less like this:var myScroll = new IScroll('#wrapper', {    indicators: {        el: [element|element selector]        fade: false,        ignoreBoundaries: false,        interactive: false,        listenX: true,        listenY: true,        resize: true,        shrink: false,        speedRatioX: 0,        speedRatioY: 0,    }});options.indicators.elThis is a mandatory parameter which holds a reference to the scrollbar container element. The first child inside the container will be the indicator. Note that the scrollbar can be anywhere on your document, it doesn't need to be inside the scroller wrapper. Do you start perceiving the power of such tool?Valid syntax would be:indicators: {    el: document.getElementById('indicator')}Or simply:indicators: {    el: '#indicator'}options.indicators.ignoreBoundariesThis tells the indicator to ignore the boundaries imposed by its container. Since we can alter the speed ratio of the scrollbar, it is useful to just let the scrollbar go. Say you want the indicator to go twice as fast as the scroller, it would reach the end of its run very quickly. This option is used for parallax scrolling.Default: falseoptions.indicators.listenXoptions.indicators.listenYTo which axis the indicator listens to. It can be just one or both.Default: trueoptions.indicators.speedRatioXoptions.indicators.speedRatioYThe speed the indicator moves in relation to the main scroller size. By default this is set automatically. You rarely need to alter this value.Default: 0options.indicators.fadeoptions.indicators.interactiveoptions.indicators.resizeoptions.indicators.shrinkThese are the same options we explored in the scrollbars section, I'm not going to insult your intelligence and repeat them here.Do not cross the streams. It would be bad! Do not mix the scrollbars syntax (options.scrollbars, options.fadeScrollbars, options.interactiveScrollbars, ...) with the indicators! Use one or the other.Have a look at the minimap demo to get a glance at the power of the indicators option.The wittiest of you would have noticed that indicators is actually plural... Yes, exactly, passing an array of objects you can have a virtually infinite number of indicators. I don't know what you may need them for, but hey! who am I to argue about your scrollbar preferences?Parallax scrollingParallax scrolling is just a collateral damage of the Indicators functionality.An indicator is just a layer that follows the movement and animation applied to the main scroller. If you see it like that you'll understand the power behind this feature. To this add that you can have any number of indicators and the parallax scrolling is served.Please refer to the parallax demo.Scrolling programmaticallyYou silly! Of course you can scroll programmaticaly!scrollTo(x, y, time, easing)Say your iScroll instance resides into the myScroll variable. You can easily scroll to any position with the following syntax:myScroll.scrollTo(0, -100);That would scroll down by 100 pixels. Remember: 0 is always the top left corner. To scroll you have to pass negative numbers.time and easing are optional. They regulates the duration (in ms) and the easing function of the animation respectively.The easing functions are available in the IScroll.utils.ease object. For example to apply a 1 second elastic easing you'd do:myScroll.scrollTo(0, -100, 1000, IScroll.utils.ease.elastic);The available options are: quadratic, circular, back, bounce, elastic.scrollBy(x, y, time, easing)Same as above but X and Y are relative to the current position.myScroll.scrollBy(0, -10);Would scroll 10 pixels down. If you are at -100, you'll end up at -110.scrollToElement(el, time, offsetX, offsetY, easing)You're gonna like this. Sit tight.The only mandatory parameter is el. Pass an element or a selector and iScroll will try to scroll to the top/left of that element.time is optional and sets the animation duration.offsetX and offsetY define an offset in pixels, so that you can scroll to that element plus a the specified offset. Not only that. If you set them to true the element will be centered on screen. Refer to the scroll to element example.easing works the same way as per the scrollTo method.SnapiScroll can snap to fixed positions and elements.options.snapThe simplest snap config is as follow:var myScroll = new IScroll('#wrapper', {    snap: true});This would automatically split the scroller into pages the size of the container.snap also takes a string as a value. The string will be the selector to the elements the scroller will be snapped to. So the followingvar myScroll = new IScroll('#wrapper', {    snap: 'li'});would snap to each and every LI tag.To help you navigate through the snap points iScroll grants access to a series of interesting methods.goToPage(x, y, time, easing)x and y represent the page number you want to scroll to in the horizontal or vertical axes (yeah, it's the plural of axis, I checked). If the scroller in mono-dimensional, just pass 0 to the axis you don't need.time is the duration of the animation, easing the easing function used to scroll to the point. Refer to the option.bounceEasing in the Advanced options. They are both optional.myScroll.goToPage(10, 0, 1000);This would scroll to the 10th page on the horizontal axis in 1 second.next()prev()Go to the next and previous page based on current position.ZoomTo use the pinch/zoom functionality you better use the iscroll-zoom.js script.options.zoomSet this to true to activate zoom.Default: falseoptions.zoomMaxMaximum zoom level.Default: 4options.zoomMinMinimum zoom level.Default: 1options.startZoomStarting zoom level.Default: 1options.wheelActionWheel action can be set to 'zoom' to have the wheel regulate the zoom level instead of scrolling position.Default: undefined (ie: the mouse wheel scrolls)To sum up, a nice zoom config would be:myScroll = new IScroll('#wrapper', {    zoom: true,    mouseWheel: true,    wheelAction: 'zoom'});The zoom is performed with CSS transform. iScroll can zoom only on browsers that support that.Some browsers (notably webkit based ones) take a snapshot of the zooming area as soon as they are placed on the hardware compositing layer (say as soon as you apply a transform to them). This snapshot is used as a texture for the zooming area and it can hardly be updated. This means that your texture will be based on elements at scale 1 and zooming in will result in blurred, low definition text and images.A simple solution is to load content at double (or triple) its actual resolution and scale it down inside a scale(0.5) div. This should be enough to grant you a better result. I hope to be able to post more demos soonRefer to the zoom demo.zoom(scale, x, y, time)Juicy method that lets you zoom programmatically.scale is the zoom factor.x and y the focus point, aka the center of the zoom. If not specified, the center of the screen will be used.time is the duration of the animation in milliseconds (optional).Infinite scrollingiScroll integrates a smart caching system that allows to handle of a virtually infinite amount of data using (and reusing) just a bunch of elements.Infinite scrolling is in an early stage of development and although it can be considered stable, it is not ready for wide consumption.Please review the infinite demo and send your suggestions and bug reports.I will add more details as soon as the functionality evolves.Advanced optionsFor the hardcore developer.options.bindToWrapperThe move event is normally bound to the document and not the scroll container. When you move the cursor/finger out of the wrapper the scrolling keeps going. This is usually what you want, but you can also bind the move event to wrapper itself. Doing so as soon as the pointer leaves the container the scroll stops.Default: falseoptions.bounceEasingEasing function performed during the bounce animation. Valid values are: 'quadratic', 'circular', 'back', 'bounce', 'elastic'. See the bounce easing demo, drag the scroller down and release.bounceEasing is a bit smarter than that. You can also feed a custom easing function, like so:bounceEasing: {    style: 'cubic-bezier(0,0,1,1)',    fn: function (k) { return k; }}The above would perform a linear easing. The style option is used every time the animation is executed with CSS transitions, fn is used with requestAnimationFrame. If the easing function is too complex and can't be represented by a cubic bezier just pass '' (empty string) as style.Note that bounce and elastic can't be performed by CSS transitions.Default: 'circular'options.bounceTimeDuration in millisecond of the bounce animation.Default: 600options.decelerationThis value can be altered to change the momentum animation duration/speed. Higher numbers make the animation shorter. Sensible results can be experienced starting with a value of 0.01, bigger than that basically doesn't make any momentum at all.Default: 0.0006options.mouseWheelSpeedSet the speed of the mouse wheel.Default: 20options.preventDefaultExceptionThese are all the exceptions when preventDefault() would be fired anyway despite the preventDefault option value.This is a pretty powerful option, if you don't want to preventDefault() on all elements with formfield class name for example, you could pass the following:preventDefaultException: { className: /(^|\\s)formfield(\\s|$)/ }Default: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT)$/ }.options.resizePollingWhen you resize the window iScroll has to recalculate elements position and dimension. This might be a pretty daunting task for the poor little fella. To give it some rest the polling is set to 60 milliseconds.By reducing this value you get better visual effect but the script becomes more aggressive on the CPU. The default value seems a good compromise.Default: 60Mastering the refresh methodiScroll needs to know the exact dimensions of both the wrapper and the scroller. They are computed at start up but if your elements change in size, we need to tell iScroll that you are messing with the DOM.This is achieved by calling the refresh method with the right timing. Please follow me closely, understanding this will save you hours of frustration.Every time you touch the DOM the browser renderer repaints the page. Once this repaint has happened we can safely read the new DOM properties. The repaint phase is not instantaneous and it happens only at the end of the scope that triggered it. That's why we need to give the renderer a little rest before refreshing the iScroll.To ensure that javascript gets the updated properties you should defer the refresh with something like this:ajax('page.php', onCompletion);function onCompletion () {    // Update here your DOM        setTimeout(function () {        myScroll.refresh();    }, 0);};We have placed the refresh() call into a zero timeout. That is likely all you need to correctly refresh the iScroll boundaries. There are other ways to wait for the repaint, but the zero-timeout has proven pretty solid.Consider that if you have a very complex HTML structure you may give the browser some more rest and raise the timeout to 100 or 200 milliseconds.This is generally true for all the tasks that have to be done on the DOM. Always give the renderer some rest.Custom eventsiScroll also emits some useful custom events you can hook to.To register them you use the on(type, fn) method.myScroll = new IScroll('#wrapper');myScroll.on('scrollEnd', doSomething);The above code executes the doSomething function every time the content stops scrolling.The available types are:beforeScrollStart, executed as soon as user touches the screen but before the scrolling has initiated.scrollCancel, scroll initiated but didn't happen.scrollStart, the scroll started.scroll, the content is scrolling. Available only in scroll-probe.js edition. See onScroll event.scrollEnd, content stopped scrolling.flick, user flicked left/right.zoomStart, user started zooming.zoomEnd, zoom ended.onScroll eventThe scroll event is available on iScroll probe edition only (iscroll-probe.js). The probe behavior can be altered through the probeType option.options.probeTypeThis regulates the probe aggressiveness or the frequency at which the scroll event is fired. Valid values are: 1, 2, 3. The higher the number the more aggressive the probe. The more aggressive the probe the higher the impact on the CPU.probeType: 1 has no impact on performance. The scroll event is fired only when the scroller is not busy doing its stuff.probeType: 2 always executes the scroll event except during momentum and bounce. This resembles the native onScroll event.probeType: 3 emits the scroll event with a to-the-pixel precision. Note that the scrolling is forced to requestAnimationFrame (ie: useTransition:false).Please see the probe demo.Key bindingsYou can activate support for keyboards and remote controls with the keyBindings option. By default iScroll listens to the arrow keys, page up/down, home/end but they are (wait for it) totally customizable.You can pass an object with the list of key codes you want iScroll to react to.The default values are as follow:keyBindings: {    pageUp: 33,    pageDown: 34,    end: 35,    home: 36,    left: 37,    up: 38,    right: 39,    down: 40}You can also pass a string (eg: pageUp: 'a') and iScroll will convert it for you. You could just think of a key code and iScroll would read it out of your mind.Useful scroller infoiScroll stores many useful information that you can use to augment your application.You will probably find useful:myScroll.x/y, current positionmyScroll.directionX/Y, last direction (-1 down/right, 0 still, 1 up/left)myScroll.currentPage, current snap point infoThese pieces of information may be useful when dealing with custom events. Eg:myScroll = new IScroll('#wrapper');myScroll.on('scrollEnd', function () {    if ( this.x < -1000 ) {        // do something    }});The above executes some code if the x position is lower than -1000px when the scroller stops. Note that I used this instead of myScroll, you can use both of course, but iScroll passes itself as this context when firing custom event functions.DestroyThe public destroy() method can be used to free some memory when the iScroll is not needed anymore.myScroll.destroy();myScroll = null;Contributing and CLAIf you want to contribute to the iScroll development, before I can accept your submission I have to ask you to sign the Contributor License Agreement. Unfortunately that is the only way to enforce the openness of the script.As an end user you have to do nothing of course. Actually the CLA ensures that nobody will even come after you asking for your first born for using the iScroll.Please note that pull requests may take some time to be accepted. Testing iScroll is one of the most time consuming tasks of the project. iScroll works from desktop to smartphone, from tablets to smart TVs. I do not have physical access to all the testing devices, so before I can push a change I have to make sure that the new code is working everywhere.Critical bugs are usually applied very quickly, but enhancements and coding style changes have to pass a longer review phase. Remember that this is still a side project for me.Who is using iScrollIt's impossible to track all the websites and applications that use the iScroll. It has been spotted on: Apple, Microsoft, People, LinkedIn, IKEA, Nike, Playboy, Bose, and countless others.License (MIT)Copyright (c) 2014 Matteo Spinelli, cubiq.orgPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \""Software\""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
60,learn-co-curriculum/phase-1-arrow-functions,https://github.com/learn-co-curriculum/phase-1-arrow-functions/blob/master/README.md,JavaScript,"Arrow FunctionsLearning GoalsReview declaring a function using a function expressionDeclare a function using arrow syntaxDescribe situations where arrow functions are usedIntroductionThe original style for defining functions in JavaScript is the functiondeclaration. But JavaScript has two other ways to write functions: thefunction expression and the arrow function expression (often simplycalled an arrow function). In this lesson, we will start by brieflyreviewing function expressions, then we will learn how to write functionsusing arrow syntax.Getting StartedIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Review: Declare a Function Using a Function ExpressionThe first method we learned for defining a function is the functiondeclaration:function foo() {  return 'bar';}But, as we've learned, a function can also be written as follows:const foo = function() {  return 'bar';}The function() {...} to the right of the assignment operator (=) is called afunction expression. The best way to understand function expressions is byanalogy.const sum = 1 + 1Evaluate the expression 1 + 1, returning 2, and assign it to the variablesum.const difference = 10 - 1;Evaluate the expression 10 - 1, returning 9, and assign it to the variabledifference.const foo = function() {  return 'bar';}Evaluate the expression function() { return 'bar' }, returning a thing thatcan be called, and assign it to the variable foo.We've also learned that the function expression (again, the thing to the rightof =) is known as an anonymous function. It doesn't have a name associatedwith it like you see in a function declaration.However, when we assign an anonymous function to a variable, we have a name thatpoints to a callable thing. We can call this anonymous function by invokingfoo(). That anonymous function is now, for all practical purposes, namedfoo.There are a few subtle differences between function declarations and functionexpressions, but they are very minute. Neither is really better than the other.Over time, conventions have evolved in the JavaScript programming community forwhen to use one vs. the other; you will develop a sense for these as youcontinue to learn JavaScript. Ultimately, however, you are free to use whicheverone you prefer.Declare a Function Using An Arrow FunctionThe arrow syntax builds on the syntax of the function expression and provides ashorthand way to declare functions that doesn't require using the functionkeyword. In fact, in cases where the function body consists of one line of code,we can define it in a single line:const add = (parameter1, parameter2) => parameter1 + parameter2;add(2,3); //=> 5Here, we're declaring a variable add and assigning an anonymous function asits value. Let's look to the right of the =:(parameter1, parameter2) => parameter1 + parameter2;// Parameter list ^^^^^   // Function Body ^^^^^^^^This is a very short function body! It adds parameter1 and parameter2.There are a couple of things to be aware of in the code above: first, note thatif the function body consists of a single expression, we no longer need to wrapit in curly braces. Second, when there are no braces, arrow functions have animplicit return, i.e., they automatically return the result of the lastexpression! This is the only situation in which a JavaScript function doesn'trequire explicit return with the return keyword.To the left of the =>, you see the parameters that are defined for thefunction. This looks similar to what we would have done with a functiondeclaration: list the parameters, separated by commas, inside of ().If your arrow function has only one parameter, the () around the parameterbecomes optional:const twoAdder = x => x + 2;// is the same asconst twoAdder = (x) => x + 2;Almost all developers will drop the parentheses in this case.If we need to do more work than return a single expression, we'll need {} towrap the multiple lines of code, and we'll have to declare a return. Thatsweet no-return syntax is only available if your function body is oneexpression long.const sum = (parameter1, parameter2) => {  console.log(`Adding ${parameter1}`);  console.log(`Adding ${parameter2}`);  return parameter1 + parameter2;}sum(1,2); //=> 3Describe Situations Where Arrow Functions Are UsedArrow functions are often used in JavaScript's iterator methods. An iteratoris a method that allows you to deal with a set of data one at a time. Forexample, if you had a group of students' essays, you could only grade them oneat a time.In addition to looping constructs such as for, JavaScript includes a number ofadvanced iterators; we'll learn about these later in this section. For now, tosee an example of how arrow functions are used in these methods, we'll previewJavaScript's .map() method.The .map() method is called on an Array and takes a function as an argument.It iterates through the array, passing each element in turn to the function. Itthen takes that function's return value and adds it to a new array, leaving theoriginal array unchanged. That new array, containing the modified elements, isreturned at the end after all iterations are complete.const nums = [1,2,3];const squares = nums.map(x => x ** 2); squares; //=> [1,4,9]nums; //=> [1,2,3]Note that the argument being passed to map above is an arrow function! In eachiteration through the nums array, map passes the value of the currentelement to the arrow function as an argument and it is assigned to the parameterx. That value is then squared and stored in a new array. After map hasiterated through all of the elements, it returns the new array containing thesquared values.If all this math stuff seems a bit too textbook-y, be reassured that we caniterate through anything, not just numbers. In the following example, we canimagine that overdueTodoItems is a collection of DOM elements:finishedItems = overdueTodoItems.map( item => item.className = \""complete\"" );header.innerText = `You finished ${finishedItems.length} items!`;Or we might use map in billing software:lapsedUserAccounts.map( u => sendBillTo(u.address) );Don't worry if you don't completely follow everything that goes on here — wewill cover advanced iterators in detail later in this section.InstructionsYou are going to write several methods. Write your code in the index.js file.Let the tests guide you through the process. Once the tests are passing,remember to commit and push your changes up to GitHub, then submit your work toCanvas using CodeGrade.ConclusionIn this lesson you saw two different styles for declaring functions: functionexpressions and arrow functions. Neither is \""better\"" than the standard functiondeclaration we've been using. Arrow functions excel when a simple change oroperation needs to be used repeatedly. But they're certainly used to write long,complex functions too! As you continue through the course, you'll see all threemethods used to write functions, and develop a feel for when to use each.ResourcesMDN: Arrow Functions"
61,learn-co-students/js-what-is-a-test-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-what-is-a-test-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Running TestsYou understand how to read tests, now it's time to run the tests. We've made itfairly easy. In the same terminal that you used to write node tests.js ornode index.js now, you just need to write learn. That's it! No matter whatthe lab, our Learn command will figure out where you are and run the appropriatetests and give you results.Speaking of results... let's talk about how to read the results that tests giveyou.Reading Results of TestsIf we run learn in our terminal right now, you'll get a bunch of failed tests.It will look something like this:Output from running learn in Terminal> js-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/js-what-is-a-test-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40    Message      3) gives the name and height  0 passing (293ms)  3 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  3) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Joe'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Let's break this down a bit. If you look at about a third of the way down theoutput, you'll see a summary of how the tests went:  0 passing (293ms)  3 failingThat should be fairly obvious. You passed 0 tests and failed 3 tests. Not agreat start, but plenty of room for improvement. Let's see how we failed thethree tests.1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  3) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Joe'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)This is all three of the fails. If we break it down even further we can see justthe test for name:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/index-test.js:6:26)      at processImmediate (internal/timers.js:456:21)The tests expects name to return \""Susan\"". But if you look at theError: Expected 'Joe' to equal 'Susan' line you can see that it received Joeand expected Susan. That makes sense! In our index.js file we have thename variable equal \""Joe\"". If you change that line to be equal to \""Susan\""and then run the tests again by typing learn in the command line you shouldsee progress!what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40    Message      2) gives the name and height  1 passing (544ms)  2 failing  1) what-is-a-test       Height         is less than 40:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)  2) what-is-a-test       Message         gives the name and height:     Error: Expected ' is 74 inches tall' to include 'Susan'      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toInclude (node_modules/expect/lib/Expectation.js:215:28)      at Context.<anonymous> (test/index-test.js:19:29)      at processImmediate (internal/timers.js:456:21)Woot! You passed one. Now you can go ahead and try and pass all of the othertests on your own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Expected UndefinedError: Expected undefined to equal 'Susan'That one says that it expected undefined to equal Susan. That makes no sense!You didn't set the name variable to undefined. Why does it think that nameis equal to undefined? What that actually means is that the test couldn't findthe variable name. This can happen if you by accident rename the variable.Taking a look at index.js I made this mistake: var nae = \""Susan\"". Whoops! IfI change that back to name everything works. :)Unexpected Identifier/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/index.js:2vr name = \""Susan\""   ^^^^SyntaxError: Unexpected identifier    at createScript (vm.js:56:10)    at Object.runInThisContext (vm.js:97:10)    at Module._compile (module.js:542:28)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.require (module.js:497:17)    at require (internal/module.js:20:19)    at Object.<anonymous> (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/test/index-test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.require (module.js:497:17)    at require (internal/module.js:20:19)    at /Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:220:27    at Array.forEach (native)    at Mocha.loadFiles (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:217:14)    at Mocha.run (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:469:10)    at Object.<anonymous> (/Users/joe/Documents/Documents/flatiron/js-what-is-a-test-lab/node_modules/mocha/bin/_mocha:404:18)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3Woah! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake, It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to the vr name = \""Susan\"" line of code. Take a look and read very carefully. Imisspelled var. Whoops! If you fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine toothed comb...and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/index-test.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test is giving us a unique message because it recognizes a problem. If we look at this test in test/index-test.js, we see this:  describe('Height', () => {    it('is less than 40', () => {      expect(index.height).toBeLessThan(40)    })  })The word \""actual\"" is no where to be found - index.height is what is beingtested. The test expects index.height to be less than 40. The error messageis telling us that index.height must be a number. If you're seeing this,make sure that you have set index.height to be equal to the number 40,not the string \""40\"". Ruby will interpret the value as a string due to thequotation marks wrapping it.ConclusionOnce you have all three tests passing, run learn submit to register completion. Congratulations, you've solved your first tests! On to many more!"
62,LeCoupa/awesome-cheatsheets,https://github.com/LeCoupa/awesome-cheatsheets/blob/master/README.md,JavaScript," WEBSITE DIRECTORY: Available here.📚 Awesome cheatsheets for popular programming languages, frameworks and development tools. They include everything you should know in one single file.🤔 Why Awesome-Cheatsheets?I usually make a cheat sheet when I want to improve my skills in a programming language, a framework or a development tool. I started doing these kinds of things a long time ago on Gist. To better keep track of the history and to let people contribute, I re-organized all of them into this single repository. Most of the content is coming from official documentation and some books I have read.Feel free to take a look. You might learn new things. They have been designed to provide a quick way to assess your knowledge and to save you time.📚 Table of Contents📃 LanguagesView cheatsheetsCommand line interfaceBashImperativeCC#GoJavaPHPPythonFunctionalJavaScript📦 BackendView cheatsheetsPHPLaravelPythonDjangoJavascriptAdonis.jsExpress.jsFeathers.jsMoleculerNode.jsSails.js🌐 FrontendView cheatsheetsBasicsHTML5CSS3FrameworksReact.jsVue.jsTailwind.cssEmber.jsAngular (2+)AngularJS🗃️ DatabasesView cheatsheetsSQLMySQLNoSQLRedis🔧 ToolsView cheatsheetsDevelopmentcURLDrushElasticsearchEmmetGitPuppeteerSublime TextVIMVisual Studio CodeXcodeInfrastructureAWS CLIDockerHeroku CLIKubernetesNanobox BoxfileNanobox CLINginxPM2UbuntuFirebase CLI🙌🏼 How to Contribute?You are more than welcome to contribute and build your own cheat sheet for your favorite programming language, framework or development tool. Just submit changes via pull request and I will review them before merging.👩‍💻👨‍💻 Our valuable Contributors  "
63,docsifyjs/docsify,https://github.com/docsifyjs/docsify/blob/develop/README.md,JavaScript,"          A magical documentation site generator.                  Gold Sponsor via Open Collective        Docsify turns one or more Markdown files into a Website, with no build process required.FeaturesNo statically built html filesSimple and lightweightSmart full-text search pluginMultiple themesUseful plugin APISupport embedded filesQuick StartGet going fast by using a static web server or GitHub Pages with this ready-to-use Docsify Template, review the quick start tutorial or jump right into a CodeSandbox example site with the button below.ShowcaseA large collection of showcase projects are included in awesome-docsify.LinksDocumentationDocsify CLI (Command Line Interface)CDN: UNPKG | jsDelivr | cdnjsdevelop branch previewAwesome docsifyCommunity chatContributingSee CONTRIBUTING.md.BackersThank you to all our backers! 🙏 [Become a backer]SponsorsThank you for supporting this project！❤️ [Become a sponsor]ContributorsThis project exists thanks to all the people who contribute. [Contribute].LicenseMITSpecial ThanksA preview of Docsify's PR and develop branch is Powered by "
64,jashkenas/backbone,https://github.com/jashkenas/backbone/blob/master/README.md,JavaScript," ____                     __      __/\\  _`\\                  /\\ \\    /\\ \\                                   __\\ \\ \\ \\ \\     __      ___\\ \\ \\/'\\\\ \\ \\____    ___     ___      __      /\\_\\    ____ \\ \\  _ <'  /'__`\\   /'___\\ \\ , < \\ \\ '__`\\  / __`\\ /' _ `\\  /'__`\\    \\/\\ \\  /',__\\  \\ \\ \\ \\ \\/\\ \\ \\.\\_/\\ \\__/\\ \\ \\\\`\\\\ \\ \\ \\ \\/\\ \\ \\ \\/\\ \\/\\ \\/\\  __/  __ \\ \\ \\/\\__, `\\   \\ \\____/\\ \\__/.\\_\\ \\____\\\\ \\_\\ \\_\\ \\_,__/\\ \\____/\\ \\_\\ \\_\\ \\____\\/\\_\\_\\ \\ \\/\\____/    \\/___/  \\/__/\\/_/\\/____/ \\/_/\\/_/\\/___/  \\/___/  \\/_/\\/_/\\/____/\\/_/\\ \\_\\ \\/___/                                                                       \\ \\____/                                                                        \\/___/(_'_______________________________________________________________________________'_)(_.———————————————————————————————————————————————————————————————————————————————._)Backbone supplies structure to JavaScript-heavy applications by providing models with key-value binding and custom events, collections with a rich API of enumerable functions, views with declarative event handling, and connects it all to your existing application over a RESTful JSON interface.For Docs, License, Tests, pre-packed downloads, and everything else, really, see:https://backbonejs.orgTo suggest a feature or report a bug:https://github.com/jashkenas/backbone/issuesFor questions on working with Backbone or general discussions:security policy,https://stackoverflow.com/questions/tagged/backbone.js,https://matrix.to/#/#jashkenas_backbone:gitter.im orhttps://groups.google.com/g/backbonejsBackbone is an open-sourced component of DocumentCloud:https://github.com/documentcloudTesting powered by SauceLabs:https://saucelabs.comMany thanks to our contributors:https://github.com/jashkenas/backbone/graphs/contributorsSpecial thanks to Robert Kieffer for the original philosophy behind Backbone.https://github.com/broofaThis project adheres to a code of conduct. By participating, you are expected to uphold this code."
65,learn-co-curriculum/phase-1-review-strings-lab,https://github.com/learn-co-curriculum/phase-1-review-strings-lab/blob/master/README.md,JavaScript,"Review: Strings LabLearning GoalsConcatenate strings with the + operatorInterpolate variables and other JavaScript expressions inside template literalsRead the MDN documentation on string methods and practice using a fewIntroductionFor this lab, you've just been onboarded to the dev team working on Flatbook,the world's premier Flatiron School-based social network. At the moment, theview that our users see upon logging in is pretty generic. We'd like to improvethe user experience by adding some custom greeting capabilities.Work Through Failing Tests in a JavaScript Test SuiteIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Next, let's run npm install to install the dependencies then run the testsuite with the npm test command. Our code is currently failing all of thetests, but we expected that because we haven't done anything yet. Let's get towork!currentUserThe first test is telling us that currentUser is not defined. Let's go toindex.js and write the following code:const currentUser = 'Grace Hopper';Note: Generally, when the tests ask you to define something, you want todefine it exactly as indicated in the test. But in this case, you don't haveto write 'Grace Hopper', because the important part is the variable name:currentUser.  You can use your own name, your pet's name, your favoriteprogrammer's name — whatever you'd like.Rerun the tests and you should see that the first one is passing.welcomeMessageThe next failing test is similarly helpful, telling us exactly what we have tofix: welcomeMessage contains \""Welcome to Flatbook, \"".Let's return to index.js and define our second variable below where wedeclared currentUser:const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, ';Rerun the tests; you should see a second passing test.The third test tells us that welcomeMessage should contain the value stored incurrentUser. This seems like it might contradict the second test a bit, butlet's try it out. Let's erase 'Welcome to Flatbook, ' and set welcomeMessageequal to currentUser instead:const currentUser = 'Grace Hopper';const welcomeMessage = currentUser;When we rerun the tests, we still have two passing. But now the first and thirdtests are passing instead of the first and second! That doesn't seem quiteright.It turns out that the tests want welcomeMessage to include both 'Welcome to Flatbook, ' and the value stored in currentUser. Maybe we can include both ofthem in a single string?const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, currentUser';If we rerun the tests, we're once again passing the second test, but we're backto failing the third test. The new error message for the third test gives us ahint about what's happening:AssertionError: expected 'Welcome to Flatbook, currentUser' to contain 'Grace Hopper'When JavaScript is expecting a variable to contain one thing, and it does not,that is known as an AssertionError. The test suite looked at the value storedin welcomeMessage and expected to find the string 'Grace Hopper', which isthe value stored in currentUser. Instead, welcomeMessage contains theliteral string \""currentUser\"". It's important to understand the distinction:currentUser is a variable that contains a string ('Grace Hopper' in our examples).'currentUser' is a string, not a variable.The JavaScript engine sees a matching pair of single quotes (' '), creates anew string, and assumes that everything in between the matching punctuationmarks is part of that string. For example, if we add quotation marks around thefirst line of code that we wrote, it becomes a simple string consisting of 35characters:typeof \""const currentUser = 'Grace Hopper';\"";//=> \""string\""\""const currentUser = 'Grace Hopper';\"".length;//=> 35currentUser;//=> Uncaught ReferenceError: currentUser is not definedAs demonstrated by the last line in that snippet, because we turned our codeinto a string it no longer functions as JavaScript code for declaring andassigning a currentUser variable.Since we want welcomeMessage to contain both 'Welcome to Flatbook, ' and thevalue stored in currentUser, we have two options: concatenation andinterpolation.Concatenate Strings with the + OperatorString concatenation is a way to take two strings and add one to the other,creating a single, longer string. The easiest way to concatenate strings inJavaScript is with the + operator, like so:\""High \"" + \""five!\"";//=> \""High five!\""\""We\"" + ' ' + `can` + \"" \"" + 'concat' + `enate` + \"" as many strings \"" + 'as our heart ' + `desires.`;//=> \""We can concatenate as many strings as our heart desires.\""Since our currentUser variable contains a string, we can concatenate it to theend of 'Welcome to Flatbook, ' to dynamically create a new string based onwhatever value currentUser contains at a given moment:const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, ' + currentUser;If we run the test suite with our updated code, we'll see both the second andthird tests passing! However, before we move on, let's talk about interpolation.Interpolate Variables and Other JavaScript Expressions Inside Template LiteralsString interpolation lets us dynamically insert values in the middle of astring. To do this, we need to use template literals, whichare simply strings wrapped in backticks rather than single or double quotes.Template literals enable us to interpolate the value of a variable into a stringby wrapping the variable in curly braces preceded by a dollar sign:${yourVariable}. The ${}, when inside backticks, tells the JavaScript enginethat it needs to interpret the value of yourVariable and insert that valueinto the string. If you forget to use the backticks and use single or doublequotes instead, the dollar sign, curly braces and variable name will all beinserted into the string instead of the variable's value.Unlike string concatenation, template literals will also allow you to usemulti-line strings. Wrapping the string in backticks preserves any new lineswhen the string is returned or output.const myString = 'template literal';const myNumber = 10;const myBoolean = false;`Saying that interpolation with ${myString}s is better than concatenation ${90 + myNumber}% of the time is simply ${myBoolean}. But it is pretty cool!Beware that new lines inside of a ${myString} will be preserved as new lines in the resulting ${typeof myString}!`;//=> \""Saying that interpolation with template literals is better than concatenation 100% of the time is simply false. But it is pretty cool!// Beware that new lines inside of a template literal will be preserved as new lines in the resulting string!\""Note that, in the example above, one of the things we interpolated into ourstring is an arithmetic expression: ${90 + myNumber}. We aren't limited tointerpolating just variables — we can use any expression inside thecurly braces.While, for most purposes, the choice of whether to use concatenation or stringinterpolation is primarily a matter of personal preference, JavaScriptprogrammers tend to use string interpolation for all but the simplest of cases.Let's rewrite our welcomeMessage to use a template literal:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}`;The first three tests are still passing, but the fourth wants ourwelcomeMessage to end with an exclamation point. The fix is as simple asadding a ! as the last character in the template literal:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;Four tests down, six to go!Read the MDN Documentation on String Methods and Practice Using a FewexcitedWelcomeMessageSometimes we get so excited when someone logs into their Flatbook account thatwe just want to shout out loud. We could copy over most of the code fromwelcomeMessage and then change every character to its uppercase equivalent,but as developers we try not to repeat ourselves. Instead, let's use the.toUpperCase() string method:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;const excitedWelcomeMessage = welcomeMessage.toUpperCase();All strings in JavaScript have access to the same set of default methods, whichare common operations like changing a string and returning the new version,searching through a string for specific character(s) and returning the match,and so on. For example, we can use .toUpperCase() and.toLowerCase() on a string to make the entire string uppercaseor lowercase. There are lots of other string methods thatyou'll find useful at various points throughout your JavaScript programmingcareer.Rerun the tests; you should see the first seven tests passing. Woohoo!shortGreetingThe mobile team at Flatbook is busy redesigning the site for smaller devices,and they're a bit concerned about how much real estate the welcomeMessagetakes up on the screen. They want us to create a shorter version that truncatesthe currentUser's name into just their first initial.If you take a look at the first error, you'll see that the JavaScript engine istelling us that it can't find shortGreeting:shortGreeting  contains \""Welcome, \""    ReferenceError: shortGreeting is not definedOnce we define it in index.js:...const shortGreeting = '';we see a new error from the test suite:shortGreeting  contains \""Welcome, \""    AssertionError: expected '' to contain 'Welcome, 'It expected shortGreeting to contain the string \""Welcome, \"", butshortGreeting is currently an empty string, ''. We can fix that now:...const shortGreeting = 'Welcome, ';Next up is another AssertionError, this one checking that shortGreetingcontains the first letter from currentUser:shortGreeting  contains the first initial of the name stored in the 'currentUser' variable    AssertionError: expected 'Welcome, ' to contain 'G'To get a sense of how specific the tests are, let's start by adding the entiretyof currentUser to shortGreeting:const currentUser = 'Grace Hopper';...const shortGreeting = `Welcome, ${currentUser}`;Notice that we changed the single quotes to backticks, which allows us tointerpolate with ${ }.The new error reads as follows:shortGreeting  contains the first initial of the name stored in the 'currentUser' variable    AssertionError: expected 'Welcome, Grace Hopper' to not contain 'race Hopper'The test suite checks that shortGreeting contains the first character incurrentUser (G in our example) and that it doesn't contain the rest of thestring (race Hopper).There are a few different ways we could get just the first character ofcurrentUser. The easiest would be to use bracket notation or the .charAt()method to grab the character at index 0:'Edsger Dijkstra'[0];//=> \""E\""'Edsger Dijkstra'.charAt(0);//=> \""E\""However, it's a good practice to make our code flexible and future-proof it abit. What if our product team decides it would be better to shortencurrentName to two characters instead of one? Or three characters?For the added flexibility, we're going to use .slice(), but you can alwaysexplore the MDN documentation on string methods to pick outyour own strategy..slice()If you take a look at the documentation for .slice(), you will seethe following description:The slice() method extracts a section of a string and returns it as a newstring, without modifying the original string.The method takes two arguments: the index at which the extraction should beginand the index before which it should end. When we talk about indexes of astring, we're talking about how to access specific characters at various pointswithin the string. Recall that computers start counting with 0. Because we startat index 0 instead of 1, the index of each character in a string is alwaysone less than the character's place in the string. The second character is atindex 1, the fifth at index 4, the twelfth at index 11, and so on. Theindex of the last character is always one less than the length of thestring:'Edsger Dijkstra'.length;//=> 15'Edsger Dijkstra'[15];//=> undefined'Edsger Dijkstra'[14];//=> \""a\""If we omit both arguments, .slice() will return a full copy of the originalstring:'Edsger Dijkstra'.slice();//=> \""Edsger Dijkstra\""If we provide a single argument, .slice() will return a copy from that indexto the end of the string. For example, to grab Dijkstra's last name, we couldstart the slice on index 7:'Edsger Dijkstra'.slice(7);//=> \""Dijkstra\""If we wanted the first three characters of Dijkstra's name, we would specify 0as the first argument, the index at which to start, and 3 as the secondargument, the index before which to end:'Edsger Dijkstra'.slice(0, 3);//=> \""Eds\""To satisfy our team's current specifications for shortGreeting, we need tostart our slice at index 0 and end it before index 1:currentUser.slice(0, 1);Now, when our product team asks us to use the first two characters ofcurrentUser, the change is as simple as currentUser.slice(0, 1) →currentUser.slice(0, 2).Add an exclamation point to the end, and the entire test suite should bepassing:const currentUser = 'Grace Hopper';...const shortGreeting = `Welcome, ${currentUser.slice(0, 1)}!`;After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Completing and Submitting Assignments withCodeGrade lesson to review the process.Great work!ResourcesStackExchange – How to open the JavaScript consoleMDN — Template literalsDRY — Don't Repeat YourselfMDN — String — .lengthMDN — String — Character accessMDN — String — MethodsMDN — .toUpperCase()MDN — .toLowerCase()MDN — .slice()"
66,goitacademy/nodejs-homework-template,https://github.com/learn-co-curriculum/phase-1-review-strings-lab/blob/master/README.md,JavaScript,"Review: Strings LabLearning GoalsConcatenate strings with the + operatorInterpolate variables and other JavaScript expressions inside template literalsRead the MDN documentation on string methods and practice using a fewIntroductionFor this lab, you've just been onboarded to the dev team working on Flatbook,the world's premier Flatiron School-based social network. At the moment, theview that our users see upon logging in is pretty generic. We'd like to improvethe user experience by adding some custom greeting capabilities.Work Through Failing Tests in a JavaScript Test SuiteIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Next, let's run npm install to install the dependencies then run the testsuite with the npm test command. Our code is currently failing all of thetests, but we expected that because we haven't done anything yet. Let's get towork!currentUserThe first test is telling us that currentUser is not defined. Let's go toindex.js and write the following code:const currentUser = 'Grace Hopper';Note: Generally, when the tests ask you to define something, you want todefine it exactly as indicated in the test. But in this case, you don't haveto write 'Grace Hopper', because the important part is the variable name:currentUser.  You can use your own name, your pet's name, your favoriteprogrammer's name — whatever you'd like.Rerun the tests and you should see that the first one is passing.welcomeMessageThe next failing test is similarly helpful, telling us exactly what we have tofix: welcomeMessage contains \""Welcome to Flatbook, \"".Let's return to index.js and define our second variable below where wedeclared currentUser:const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, ';Rerun the tests; you should see a second passing test.The third test tells us that welcomeMessage should contain the value stored incurrentUser. This seems like it might contradict the second test a bit, butlet's try it out. Let's erase 'Welcome to Flatbook, ' and set welcomeMessageequal to currentUser instead:const currentUser = 'Grace Hopper';const welcomeMessage = currentUser;When we rerun the tests, we still have two passing. But now the first and thirdtests are passing instead of the first and second! That doesn't seem quiteright.It turns out that the tests want welcomeMessage to include both 'Welcome to Flatbook, ' and the value stored in currentUser. Maybe we can include both ofthem in a single string?const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, currentUser';If we rerun the tests, we're once again passing the second test, but we're backto failing the third test. The new error message for the third test gives us ahint about what's happening:AssertionError: expected 'Welcome to Flatbook, currentUser' to contain 'Grace Hopper'When JavaScript is expecting a variable to contain one thing, and it does not,that is known as an AssertionError. The test suite looked at the value storedin welcomeMessage and expected to find the string 'Grace Hopper', which isthe value stored in currentUser. Instead, welcomeMessage contains theliteral string \""currentUser\"". It's important to understand the distinction:currentUser is a variable that contains a string ('Grace Hopper' in our examples).'currentUser' is a string, not a variable.The JavaScript engine sees a matching pair of single quotes (' '), creates anew string, and assumes that everything in between the matching punctuationmarks is part of that string. For example, if we add quotation marks around thefirst line of code that we wrote, it becomes a simple string consisting of 35characters:typeof \""const currentUser = 'Grace Hopper';\"";//=> \""string\""\""const currentUser = 'Grace Hopper';\"".length;//=> 35currentUser;//=> Uncaught ReferenceError: currentUser is not definedAs demonstrated by the last line in that snippet, because we turned our codeinto a string it no longer functions as JavaScript code for declaring andassigning a currentUser variable.Since we want welcomeMessage to contain both 'Welcome to Flatbook, ' and thevalue stored in currentUser, we have two options: concatenation andinterpolation.Concatenate Strings with the + OperatorString concatenation is a way to take two strings and add one to the other,creating a single, longer string. The easiest way to concatenate strings inJavaScript is with the + operator, like so:\""High \"" + \""five!\"";//=> \""High five!\""\""We\"" + ' ' + `can` + \"" \"" + 'concat' + `enate` + \"" as many strings \"" + 'as our heart ' + `desires.`;//=> \""We can concatenate as many strings as our heart desires.\""Since our currentUser variable contains a string, we can concatenate it to theend of 'Welcome to Flatbook, ' to dynamically create a new string based onwhatever value currentUser contains at a given moment:const currentUser = 'Grace Hopper';const welcomeMessage = 'Welcome to Flatbook, ' + currentUser;If we run the test suite with our updated code, we'll see both the second andthird tests passing! However, before we move on, let's talk about interpolation.Interpolate Variables and Other JavaScript Expressions Inside Template LiteralsString interpolation lets us dynamically insert values in the middle of astring. To do this, we need to use template literals, whichare simply strings wrapped in backticks rather than single or double quotes.Template literals enable us to interpolate the value of a variable into a stringby wrapping the variable in curly braces preceded by a dollar sign:${yourVariable}. The ${}, when inside backticks, tells the JavaScript enginethat it needs to interpret the value of yourVariable and insert that valueinto the string. If you forget to use the backticks and use single or doublequotes instead, the dollar sign, curly braces and variable name will all beinserted into the string instead of the variable's value.Unlike string concatenation, template literals will also allow you to usemulti-line strings. Wrapping the string in backticks preserves any new lineswhen the string is returned or output.const myString = 'template literal';const myNumber = 10;const myBoolean = false;`Saying that interpolation with ${myString}s is better than concatenation ${90 + myNumber}% of the time is simply ${myBoolean}. But it is pretty cool!Beware that new lines inside of a ${myString} will be preserved as new lines in the resulting ${typeof myString}!`;//=> \""Saying that interpolation with template literals is better than concatenation 100% of the time is simply false. But it is pretty cool!// Beware that new lines inside of a template literal will be preserved as new lines in the resulting string!\""Note that, in the example above, one of the things we interpolated into ourstring is an arithmetic expression: ${90 + myNumber}. We aren't limited tointerpolating just variables — we can use any expression inside thecurly braces.While, for most purposes, the choice of whether to use concatenation or stringinterpolation is primarily a matter of personal preference, JavaScriptprogrammers tend to use string interpolation for all but the simplest of cases.Let's rewrite our welcomeMessage to use a template literal:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}`;The first three tests are still passing, but the fourth wants ourwelcomeMessage to end with an exclamation point. The fix is as simple asadding a ! as the last character in the template literal:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;Four tests down, six to go!Read the MDN Documentation on String Methods and Practice Using a FewexcitedWelcomeMessageSometimes we get so excited when someone logs into their Flatbook account thatwe just want to shout out loud. We could copy over most of the code fromwelcomeMessage and then change every character to its uppercase equivalent,but as developers we try not to repeat ourselves. Instead, let's use the.toUpperCase() string method:const currentUser = 'Grace Hopper';const welcomeMessage = `Welcome to Flatbook, ${currentUser}!`;const excitedWelcomeMessage = welcomeMessage.toUpperCase();All strings in JavaScript have access to the same set of default methods, whichare common operations like changing a string and returning the new version,searching through a string for specific character(s) and returning the match,and so on. For example, we can use .toUpperCase() and.toLowerCase() on a string to make the entire string uppercaseor lowercase. There are lots of other string methods thatyou'll find useful at various points throughout your JavaScript programmingcareer.Rerun the tests; you should see the first seven tests passing. Woohoo!shortGreetingThe mobile team at Flatbook is busy redesigning the site for smaller devices,and they're a bit concerned about how much real estate the welcomeMessagetakes up on the screen. They want us to create a shorter version that truncatesthe currentUser's name into just their first initial.If you take a look at the first error, you'll see that the JavaScript engine istelling us that it can't find shortGreeting:shortGreeting  contains \""Welcome, \""    ReferenceError: shortGreeting is not definedOnce we define it in index.js:...const shortGreeting = '';we see a new error from the test suite:shortGreeting  contains \""Welcome, \""    AssertionError: expected '' to contain 'Welcome, 'It expected shortGreeting to contain the string \""Welcome, \"", butshortGreeting is currently an empty string, ''. We can fix that now:...const shortGreeting = 'Welcome, ';Next up is another AssertionError, this one checking that shortGreetingcontains the first letter from currentUser:shortGreeting  contains the first initial of the name stored in the 'currentUser' variable    AssertionError: expected 'Welcome, ' to contain 'G'To get a sense of how specific the tests are, let's start by adding the entiretyof currentUser to shortGreeting:const currentUser = 'Grace Hopper';...const shortGreeting = `Welcome, ${currentUser}`;Notice that we changed the single quotes to backticks, which allows us tointerpolate with ${ }.The new error reads as follows:shortGreeting  contains the first initial of the name stored in the 'currentUser' variable    AssertionError: expected 'Welcome, Grace Hopper' to not contain 'race Hopper'The test suite checks that shortGreeting contains the first character incurrentUser (G in our example) and that it doesn't contain the rest of thestring (race Hopper).There are a few different ways we could get just the first character ofcurrentUser. The easiest would be to use bracket notation or the .charAt()method to grab the character at index 0:'Edsger Dijkstra'[0];//=> \""E\""'Edsger Dijkstra'.charAt(0);//=> \""E\""However, it's a good practice to make our code flexible and future-proof it abit. What if our product team decides it would be better to shortencurrentName to two characters instead of one? Or three characters?For the added flexibility, we're going to use .slice(), but you can alwaysexplore the MDN documentation on string methods to pick outyour own strategy..slice()If you take a look at the documentation for .slice(), you will seethe following description:The slice() method extracts a section of a string and returns it as a newstring, without modifying the original string.The method takes two arguments: the index at which the extraction should beginand the index before which it should end. When we talk about indexes of astring, we're talking about how to access specific characters at various pointswithin the string. Recall that computers start counting with 0. Because we startat index 0 instead of 1, the index of each character in a string is alwaysone less than the character's place in the string. The second character is atindex 1, the fifth at index 4, the twelfth at index 11, and so on. Theindex of the last character is always one less than the length of thestring:'Edsger Dijkstra'.length;//=> 15'Edsger Dijkstra'[15];//=> undefined'Edsger Dijkstra'[14];//=> \""a\""If we omit both arguments, .slice() will return a full copy of the originalstring:'Edsger Dijkstra'.slice();//=> \""Edsger Dijkstra\""If we provide a single argument, .slice() will return a copy from that indexto the end of the string. For example, to grab Dijkstra's last name, we couldstart the slice on index 7:'Edsger Dijkstra'.slice(7);//=> \""Dijkstra\""If we wanted the first three characters of Dijkstra's name, we would specify 0as the first argument, the index at which to start, and 3 as the secondargument, the index before which to end:'Edsger Dijkstra'.slice(0, 3);//=> \""Eds\""To satisfy our team's current specifications for shortGreeting, we need tostart our slice at index 0 and end it before index 1:currentUser.slice(0, 1);Now, when our product team asks us to use the first two characters ofcurrentUser, the change is as simple as currentUser.slice(0, 1) →currentUser.slice(0, 2).Add an exclamation point to the end, and the entire test suite should bepassing:const currentUser = 'Grace Hopper';...const shortGreeting = `Welcome, ${currentUser.slice(0, 1)}!`;After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Completing and Submitting Assignments withCodeGrade lesson to review the process.Great work!ResourcesStackExchange – How to open the JavaScript consoleMDN — Template literalsDRY — Don't Repeat YourselfMDN — String — .lengthMDN — String — Character accessMDN — String — MethodsMDN — .toUpperCase()MDN — .toLowerCase()MDN — .slice()"
67,ryanhanwu/How-To-Ask-Questions-The-Smart-Way,https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md,JavaScript,"提问的智慧How To Ask Questions The Smart WayCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。原文网址：http://www.catb.org/~esr/faqs/smart-questions.htmlCopyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；协助指出翻译问题，请发 issue，或直接发 pull request 给我。本文另有繁體中文版。原文版本历史目录声明简介在提问之前当你提问时慎选提问的论坛Stack Overflow网站和 IRC 论坛第二步，使用项目邮件列表使用有意义且描述明确的标题使问题容易回复使用清晰、正确、精准且合乎语法的语句使用易于读取且标准的文件格式发送问题精确地描述问题并言之有物话不在多而在精别动辄声称找到 Bug低声下气不能代替你的功课描述问题症状而非你的猜测按发生时间先后列出问题症状描述目标而不是过程别要求使用私人电邮回复清楚明确的表达你的问题以及需求询问有关代码的问题时别把自己家庭作业的问题贴上来去掉无意义的提问句即使你很急也不要在标题写紧急礼多人不怪，而且有时还很有帮助问题解决后，加个简短的补充说明如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了如果还是搞不懂处理无礼的回应如何避免扮演失败者不该问的问题好问题与蠢问题如果得不到回答如何更好地回答问题相关资源鸣谢声明许多项目在他们网站的帮助文档中链接了本指南。这很好，这正是我们想要的用途。但如果你是该项目管理员并试图创建指向本指南的超链接，请在超链接附近的显著位置注明：本指南不提供此项目的实际支持服务！我们已经深刻领教到缺少上述声明所带来的痛苦：我们将不停地被那些认为发布这本指南就意味着有责任解决世上所有技术问题的傻瓜苦苦纠缠。如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些傻瓜之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确地提问以获得你满意的答案。现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件好事；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们认可这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们只为那些真正有兴趣并愿意积极参与问题解决的人调整回答问题的风格。这点不会变，也不该变：否则，我们就是在最擅长的事情上降低效率。我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）的问题。如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。（欢迎对本指南提出改进意见。你可以把你的建议发送至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：尝试在你准备提问的论坛的旧文章中搜索答案。尝试上网搜索以找到答案。尝试阅读手册以找到答案。尝试阅读常见问题文件（FAQ）以找到答案。尝试自己检查或试验以找到答案。向你身边的强者朋友打听以找到答案。如果你是程序开发者，请尝试阅读源代码以找到答案。当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 Google 论坛和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐得舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。准备好你的问题，再将问题仔细地思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：在与主题不合的论坛上贴出你的问题。在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。在太多的不同新闻群组上重复转贴同样的问题（cross-post）。向既非熟人也没有义务解决你问题的人发送私人电邮。黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。Stack Overflow搜索，然后在 Stack Exchange 问。近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。如果你还是找不到任何对你的问题有用的内容，请把你的问题发在与它最相关的网站上。提问的时候请善用格式化工具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语言、操作系统或库/包的名称）。当有人要求你提供更多相关信息时，请编辑你的贴子来补充它们[译注：而不是发一个回帖或回答！]。如果你觉得一个答案对你有帮助，点击向上的箭头来为它投票；如果一个答案提供了问题的正确解决方案，点击投票按钮下方的对勾来将它标记为正解。Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站：Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。Stack Overflow 是问写程序有关的问题。Server Fault 是问服务器和网管相关的问题。网站和 IRC 论坛本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用我们的版本”。在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。然而，如果你确信你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。蠢问题：救命啊！我的笔记本电脑不能正常显示了！聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。编写目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标指针或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。使问题容易回复以请将你的回复发送到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。使用清晰、正确、精准且合乎语法的语句我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。正确地拼写、使用标点和大小写，不要将its混淆为it's，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行）。更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通信中的简写或火星文，如将的简化为d会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用]English is not my native language; please excuse typing errors.英文不是我的母语，请原谅我的错字或语法。If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question.如果你说某语言，请向我发电邮/私信；我需要有人协助我翻译我的问题。I am familiar with the technical terms,but some slang expressions and idioms are difficult for me.我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。I've posted my question in $LANGUAGE and English.I'll be glad to translate responses, if you only use one or the other.我把我的问题用某语言和英文写出来。如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：使用纯文字而不是 HTML (关闭 HTML 并不难）。使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。但是，对一些特殊的文件不要设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] > [校订] > [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。精确地描述问题并言之有物仔细、清楚地描述你的问题或 Bug 的症状。描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。描述在提问前你是怎样去研究和理解这个问题的。描述在提问前为确定问题而采取的诊断步骤。描述最近做过什么可能相关的硬件或软件变更。尽可能地提供一个可以重现这个问题的可控环境的方法。尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。低声下气不能代替你的功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。描述问题症状而非你的猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。蠢问题我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？聪明问题我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方地展示给我们看吧！按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。蠢问题我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？聪明问题我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。清楚明确地表达你的问题以及需求漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有用的答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好地理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。询问有关代码的问题时如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 <x>，但实际出现的是 <y>比较有可能让你得到回应。最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看话不在多而在精一节）。一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做是一个好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的用户邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的用户也许仍会给你一些提示。去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。首先：如果你对问题的描述不是很好，这样问更是画蛇添足。其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛茸茸的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。）问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X有趣），因此可以利用此时间去解决其它问题。补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM（Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！）在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为：你需要的信息非常容易获得；你自己去搜索这些信息比灌给你，能让你学到更多。你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）Jeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。如何避免扮演失败者在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被言语攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做：熬过去，这很正常。事实上，它是有益健康且合理的。社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的：问题：我能在哪找到 X 程序或 X 资源？问题：我怎样用 X 做 Y？问题：如何设定我的 shell 提示？问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？问题：我的程序/设定/SQL 语句没有用问题：我的 Windows 电脑有问题，你能帮我吗？问题：我的程序不会动了，我认为系统工具 X 有问题问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？问题：我能在哪找到 X 程序或 X 资源？回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？问题：我怎样用 X 做 Y？回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。问题：如何设定我的 shell 提示？？回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。问题：我的{程序/设定/SQL 语句}没有用回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种你还有什么要补充的吗？真糟糕，希望你能搞定。这关我屁事？问题：我的 Windows 电脑有问题，你能帮我吗？回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。问题：我的程序不会动了，我认为系统工具 X 有问题回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到用户群组的清单）。注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。蠢问题：我可以在哪儿找到关于 Foonly Flurbamatic 的资料？这种问法无非想得到 STFW 这样的回答。聪明问题：我用 Google 搜索过 \""Foonly Flurbamatic 2600\""，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？这个问题已经 STFW 过了，看起来他真的遇到了麻烦。蠢问题：我从 foo 项目找来的源码没法编译。它怎么这么烂？他觉得都是别人的错，这个傲慢自大的提问者。聪明问题：foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。蠢问题：我的主机板有问题了，谁来帮我？某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。聪明问题：我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。如何更好地回答问题态度和善一点。 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。如果你决定回答，就请给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。正面地回答问题！ 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。帮助你的社区从问题中学习。 当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。如果你在研究一番后才作出了回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。当你发布软件或补丁时，试着按软件发布实践操作。鸣谢Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。"
68,learn-co-curriculum/phase-0-completing-assignments,https://github.com/learn-co-curriculum/phase-0-completing-assignments/blob/master/README.md,JavaScript,"Complete Your First Software Engineering AssignmentLearning GoalsUnderstand the steps needed to complete an assignment and submit it in CanvasIntroductionDuring this course, you will work on various assignments as you learn to code.All assignments will be interactive pieces of curriculum that require some work.Some assignments may ask you to follow a set of instructions, while others willask you to figure out your own solution to pass specific tests. This lesson isyour first assignment!All assignments are hosted on GitHub. In order to work on them, however, youwill need to complete work on your local machine. The general process is:Click the blue \""Fork\"" button in CanvasCreate a personal copy (a 'fork') of the assignment in GitHubDownload your personal copy (referred to as 'cloning') to your computerComplete the required workSubmit your completed work to CanvasIn this assignment, you'll learn the workflow that you will be using to completeyour assignments. You can follow along with the steps in the videos below, orcontinue reading to get a more detailed explanation of the process of working onlessons in Canvas.WSL: Completing Assignments Code AlongFor Windows users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/wkM_3VZT2Nw\"" frameborder=\""0\"" allowfullscreen></iframe>MacOS: Completing Assignments Code AlongFor Mac users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/otfhhI-5qtM\"" frameborder=\""0\"" allowfullscreen></iframe>A Quick Note on Organizing Work on Your MachineThroughout this course, you will be downloading many assignments, so it isimportant to keep your code organized. If you haven't yet, we recommend that yougo through the steps inthe previous lessonto set up a directory where you can keep all of your work for this course.Note: The process we'll go through in this lesson will create sub-foldersautomatically. Whenever you are starting a new assignment, navigate back toyour main prework folder (cd ~/Development/code/prework) before cloningthe assignment to ensure these sub-folders don't get createdwithin each other.Accessing GitHub and ForkingAll the lessons in this course have a corresponding repository (repo) in GitHub.On this page in Canvas, you should see three icons in the upper rightcorner. The first says Fork. The second is a button that looks like alarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHubrepo without forking. The third is a flag, which you can use to submit anissue for the lesson (e.g., if you find a typo or other error).One way to fork an assignment is to click the Octocat button to go to theassignment's GitHub repo and fork directly from that page. (We'll go throughthat process in a later lesson.) However, when completing your Canvasassignments, you should use the Fork button. Doing so will automate severalsteps for you and ensure that, when you complete a lab, it is registered ascomplete in Canvas.Go ahead and fork this assignment by clicking the Fork button at the top ofthe page.    This is just a picture, the button is up at the top of the page.Clicking the Fork button will do one of two things — it will either startthe forking process or bring you to a page where you select where to create yourfork. If you're prompted to choose, select your personal GitHub account. Theforking process will begin and may take a few moments. When complete, you willbe redirected to a new copy of the assignment that exists under your GitHubaccount. The README.md file in your copy of the repository contains theseinstructions, so you can continue this lesson here or in GitHub.Forking is a process which creates an exact copy of a collection of code andfiles. Once you've created a fork on your own GitHub account, you will be ableto edit the files in the repository and write your own code solution withoutinterfering with the original copy.Once your fork is ready, the next step is to download (clone) your newrepository to your local machine.Cloning to Your Local MachineTo download the repository for this lesson, make sure you're in your personalfork on GitHub, then click the Code button. A pop-up will appear which showsseveral options for cloning: HTTPS, SSH, and GitHub CLI. Beforedoing anything else, be sure to switch to SSH. With SSH selected, youshould see what looks sort of like an email in the box below, starting withgit@github.com:. You should see your GitHub name after the :.Aside: Why SSH? If you followed the setup instructions, you have addedyour personal SSH key to GitHub. GitHub will store your personal copies of allthe work you do in this course. Because you've added your SSH key, GitHub willknow who you are when you send work from your local machine to GitHub to bestored. Using HTTPS instead would require you to sign in from your terminalusing your log-in credentials each time you try to push your code to GitHub;it also may not work at all for some assignments.From here, click the copy button.Now, open your terminal and navigate to where you'd like to download theassignment (e.g. cd ~/Development/code). Type git clone and a space, thenpaste in the copied SSH link from GitHub. It should look something like this:$ git clone git@github.com:<your-user-name>/phase-0-completing-assignments.gitPress enter, and you should see a flurry of terminal activity.Troubleshooting: If you are a Mac user and you see the following message:xcrun: error: invalid active developer pathYou need to install the Xcode Command Line Tools. Run the following command toinstall them:$ xcode-select --installAnd follow the prompts. Then try running the git clone command again. Seethis Stack Overflow post for moredetails. Note that you may need to re-install xcode-select any time youupdate your Mac OS version.Once the terminal gives you control to type again, a new folder with the GitHubname of the assignment will have been created. Change directory into this folderto access the assignment files.$ cd phase-0-completing-assignmentsNow type code . to open up a text editor window with access to all of theassignment's files. These instructions are now also available on your localmachine in README.md.Note: the first time you open a directory in Visual Studio Code, you'll see amessage asking \""Do you trust the authors of the files in this folders?\"" Thisis a security feature of Visual Studio Code. It's safe tochoose \""Yes\"", and we recommend selecting the \""Trust the authors of all thefiles in the parent folder\"" option to prevent this warning from coming upevery time you open a lesson. Just be sure to download your code from trustedsources!Completing an AssignmentMost assignments will have tests that check your work and provide immediatefeedback in the terminal. We'll walk through some examples in upcoming lessons.This assignment has a single test: check to see if you've correctly cloned thisassignment to your local machine. If you've followed the steps above, you'vecompleted everything you need to do to pass the test; all that is left to do isrun it.Run learn test in the terminal. This command will install all the lessondependencies and run the test. You should again see a flurry of text asdependencies are installed. Then you'll see the results of your test. By cloningthis assignment down, you've already passed the test!This assignment    ✓ has been correctly cloned to your local environment  1 passing (5ms)Note: If you did not receive a passing test, or if your terminal producedsome sort of error, walk through the steps in this lesson again and make sureyou've followed each one. If you got a \""command not found\"" error, go back tothe Configuring the Flatiron Student Portallesson and go through the steps provided there to make sure the learn-co gemwas installed correctly. If you're still receiving errors, we recommend goingback through the local environment setup instructions again to ensureeverything is set up properly.Once the test is passing, you can head back to the assignment on Canvas. Refreshthe assignment page and you should see that Canvas now registers the assignmentas both Submitted and Complete. A URL to your fork of the assignment hasbeen submitted in Canvas, so you are ready to move on to the next lesson.Each assignment will be different and will include instructions on what isrequired to complete it. Some labs will have many tests. You can runlearn test as many times as you'd like while working to solve these labs. Youwill submit your work to Canvas each time you do, but the assignment will bemarked Incomplete until all tests are passing.Your Work in GitHubEvery time you run learn test, all the changes you've made locally will beautomatically pushed to your GitHub fork of the repo. If you head back to yourrepo after running learn test, you should see a message that a new branch,fis-wip, has been created:Note: you should disregard the Compare & pull request button.This branch contains the work you've done so far. If you ever want to go back toa previous solution, go to your repository on GitHub and switch to the fis-wipbranch.Types of AssignmentsFor most assignments, you will go through the process we just walked through. Inour curriculum, these assignments are often referred to as labs — codinglessons that include tests. There are a few other types of assignments, though,that require slightly different submission steps:Code-alongs: These also require code, but will guide you through whatneeds to be written. There are no tests to pass, but you will still need to gothrough forking, cloning, and running learn test. You should see a messagestating that no tests were found, but if you check the assignment in Canvas,you should see it is marked as Complete.Portfolio Projects: For these assignments, you'll be building fullyfunctional applications. Some guidelines and requirements will be provided,but it will be up to you to design and create your own app. These willeventually become the projects you showcase to potential employers! You willsubmit your projects in Canvas by submitting a link to your GitHub repo.Blog Submissions: Blogs are a required part of our Software Engineeringcourses. They help to develop your online presence and are a great way toreinforce the concepts you learn. You'll write your blog posts on a differentplatform, but submit links to them in Canvas.Submitting Projects and BlogsFor both portfolio projects and blog posts, you'll need to manually submit alink to your work on Canvas. While viewing the assignment, you should see aSubmit Assignment button in the upper-right section of the page.Clicking this button will bring you to the bottom of the page where you cansubmit a URL link to your work.Upon submission you should see confetti appear, indicating that your submissionhas been accepted.Note: It is possible to submit lab and code-along assignments manuallythis way. However, the assignment will only be marked as Submitted, notComplete.ConclusionCongratulations! You've completed your first assignment using the learn-cogem! You now know how to work on and submit assignments going forward:Click the Fork button on the Canvas assignmentOnce the assignment is forked, clone it down to your local machineComplete any required work, then run learn testWhen all tests pass, the assignment will be submitted to Canvas and marked asCompleteYour work will also be pushed to GitHub and will be available on the fis-wipbranchEquipped with this knowledge, you are now ready to tackle greater challenges!"
69,ajaxorg/ace,https://github.com/learn-co-curriculum/phase-0-completing-assignments/blob/master/README.md,JavaScript,"Complete Your First Software Engineering AssignmentLearning GoalsUnderstand the steps needed to complete an assignment and submit it in CanvasIntroductionDuring this course, you will work on various assignments as you learn to code.All assignments will be interactive pieces of curriculum that require some work.Some assignments may ask you to follow a set of instructions, while others willask you to figure out your own solution to pass specific tests. This lesson isyour first assignment!All assignments are hosted on GitHub. In order to work on them, however, youwill need to complete work on your local machine. The general process is:Click the blue \""Fork\"" button in CanvasCreate a personal copy (a 'fork') of the assignment in GitHubDownload your personal copy (referred to as 'cloning') to your computerComplete the required workSubmit your completed work to CanvasIn this assignment, you'll learn the workflow that you will be using to completeyour assignments. You can follow along with the steps in the videos below, orcontinue reading to get a more detailed explanation of the process of working onlessons in Canvas.WSL: Completing Assignments Code AlongFor Windows users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/wkM_3VZT2Nw\"" frameborder=\""0\"" allowfullscreen></iframe>MacOS: Completing Assignments Code AlongFor Mac users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/otfhhI-5qtM\"" frameborder=\""0\"" allowfullscreen></iframe>A Quick Note on Organizing Work on Your MachineThroughout this course, you will be downloading many assignments, so it isimportant to keep your code organized. If you haven't yet, we recommend that yougo through the steps inthe previous lessonto set up a directory where you can keep all of your work for this course.Note: The process we'll go through in this lesson will create sub-foldersautomatically. Whenever you are starting a new assignment, navigate back toyour main prework folder (cd ~/Development/code/prework) before cloningthe assignment to ensure these sub-folders don't get createdwithin each other.Accessing GitHub and ForkingAll the lessons in this course have a corresponding repository (repo) in GitHub.On this page in Canvas, you should see three icons in the upper rightcorner. The first says Fork. The second is a button that looks like alarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHubrepo without forking. The third is a flag, which you can use to submit anissue for the lesson (e.g., if you find a typo or other error).One way to fork an assignment is to click the Octocat button to go to theassignment's GitHub repo and fork directly from that page. (We'll go throughthat process in a later lesson.) However, when completing your Canvasassignments, you should use the Fork button. Doing so will automate severalsteps for you and ensure that, when you complete a lab, it is registered ascomplete in Canvas.Go ahead and fork this assignment by clicking the Fork button at the top ofthe page.    This is just a picture, the button is up at the top of the page.Clicking the Fork button will do one of two things — it will either startthe forking process or bring you to a page where you select where to create yourfork. If you're prompted to choose, select your personal GitHub account. Theforking process will begin and may take a few moments. When complete, you willbe redirected to a new copy of the assignment that exists under your GitHubaccount. The README.md file in your copy of the repository contains theseinstructions, so you can continue this lesson here or in GitHub.Forking is a process which creates an exact copy of a collection of code andfiles. Once you've created a fork on your own GitHub account, you will be ableto edit the files in the repository and write your own code solution withoutinterfering with the original copy.Once your fork is ready, the next step is to download (clone) your newrepository to your local machine.Cloning to Your Local MachineTo download the repository for this lesson, make sure you're in your personalfork on GitHub, then click the Code button. A pop-up will appear which showsseveral options for cloning: HTTPS, SSH, and GitHub CLI. Beforedoing anything else, be sure to switch to SSH. With SSH selected, youshould see what looks sort of like an email in the box below, starting withgit@github.com:. You should see your GitHub name after the :.Aside: Why SSH? If you followed the setup instructions, you have addedyour personal SSH key to GitHub. GitHub will store your personal copies of allthe work you do in this course. Because you've added your SSH key, GitHub willknow who you are when you send work from your local machine to GitHub to bestored. Using HTTPS instead would require you to sign in from your terminalusing your log-in credentials each time you try to push your code to GitHub;it also may not work at all for some assignments.From here, click the copy button.Now, open your terminal and navigate to where you'd like to download theassignment (e.g. cd ~/Development/code). Type git clone and a space, thenpaste in the copied SSH link from GitHub. It should look something like this:$ git clone git@github.com:<your-user-name>/phase-0-completing-assignments.gitPress enter, and you should see a flurry of terminal activity.Troubleshooting: If you are a Mac user and you see the following message:xcrun: error: invalid active developer pathYou need to install the Xcode Command Line Tools. Run the following command toinstall them:$ xcode-select --installAnd follow the prompts. Then try running the git clone command again. Seethis Stack Overflow post for moredetails. Note that you may need to re-install xcode-select any time youupdate your Mac OS version.Once the terminal gives you control to type again, a new folder with the GitHubname of the assignment will have been created. Change directory into this folderto access the assignment files.$ cd phase-0-completing-assignmentsNow type code . to open up a text editor window with access to all of theassignment's files. These instructions are now also available on your localmachine in README.md.Note: the first time you open a directory in Visual Studio Code, you'll see amessage asking \""Do you trust the authors of the files in this folders?\"" Thisis a security feature of Visual Studio Code. It's safe tochoose \""Yes\"", and we recommend selecting the \""Trust the authors of all thefiles in the parent folder\"" option to prevent this warning from coming upevery time you open a lesson. Just be sure to download your code from trustedsources!Completing an AssignmentMost assignments will have tests that check your work and provide immediatefeedback in the terminal. We'll walk through some examples in upcoming lessons.This assignment has a single test: check to see if you've correctly cloned thisassignment to your local machine. If you've followed the steps above, you'vecompleted everything you need to do to pass the test; all that is left to do isrun it.Run learn test in the terminal. This command will install all the lessondependencies and run the test. You should again see a flurry of text asdependencies are installed. Then you'll see the results of your test. By cloningthis assignment down, you've already passed the test!This assignment    ✓ has been correctly cloned to your local environment  1 passing (5ms)Note: If you did not receive a passing test, or if your terminal producedsome sort of error, walk through the steps in this lesson again and make sureyou've followed each one. If you got a \""command not found\"" error, go back tothe Configuring the Flatiron Student Portallesson and go through the steps provided there to make sure the learn-co gemwas installed correctly. If you're still receiving errors, we recommend goingback through the local environment setup instructions again to ensureeverything is set up properly.Once the test is passing, you can head back to the assignment on Canvas. Refreshthe assignment page and you should see that Canvas now registers the assignmentas both Submitted and Complete. A URL to your fork of the assignment hasbeen submitted in Canvas, so you are ready to move on to the next lesson.Each assignment will be different and will include instructions on what isrequired to complete it. Some labs will have many tests. You can runlearn test as many times as you'd like while working to solve these labs. Youwill submit your work to Canvas each time you do, but the assignment will bemarked Incomplete until all tests are passing.Your Work in GitHubEvery time you run learn test, all the changes you've made locally will beautomatically pushed to your GitHub fork of the repo. If you head back to yourrepo after running learn test, you should see a message that a new branch,fis-wip, has been created:Note: you should disregard the Compare & pull request button.This branch contains the work you've done so far. If you ever want to go back toa previous solution, go to your repository on GitHub and switch to the fis-wipbranch.Types of AssignmentsFor most assignments, you will go through the process we just walked through. Inour curriculum, these assignments are often referred to as labs — codinglessons that include tests. There are a few other types of assignments, though,that require slightly different submission steps:Code-alongs: These also require code, but will guide you through whatneeds to be written. There are no tests to pass, but you will still need to gothrough forking, cloning, and running learn test. You should see a messagestating that no tests were found, but if you check the assignment in Canvas,you should see it is marked as Complete.Portfolio Projects: For these assignments, you'll be building fullyfunctional applications. Some guidelines and requirements will be provided,but it will be up to you to design and create your own app. These willeventually become the projects you showcase to potential employers! You willsubmit your projects in Canvas by submitting a link to your GitHub repo.Blog Submissions: Blogs are a required part of our Software Engineeringcourses. They help to develop your online presence and are a great way toreinforce the concepts you learn. You'll write your blog posts on a differentplatform, but submit links to them in Canvas.Submitting Projects and BlogsFor both portfolio projects and blog posts, you'll need to manually submit alink to your work on Canvas. While viewing the assignment, you should see aSubmit Assignment button in the upper-right section of the page.Clicking this button will bring you to the bottom of the page where you cansubmit a URL link to your work.Upon submission you should see confetti appear, indicating that your submissionhas been accepted.Note: It is possible to submit lab and code-along assignments manuallythis way. However, the assignment will only be marked as Submitted, notComplete.ConclusionCongratulations! You've completed your first assignment using the learn-cogem! You now know how to work on and submit assignments going forward:Click the Fork button on the Canvas assignmentOnce the assignment is forked, clone it down to your local machineComplete any required work, then run learn testWhen all tests pass, the assignment will be submitted to Canvas and marked asCompleteYour work will also be pushed to GitHub and will be available on the fis-wipbranchEquipped with this knowledge, you are now ready to tackle greater challenges!"
70,goitacademy/nodejs-homework-template,https://github.com/learn-co-curriculum/phase-0-completing-assignments/blob/master/README.md,JavaScript,"Complete Your First Software Engineering AssignmentLearning GoalsUnderstand the steps needed to complete an assignment and submit it in CanvasIntroductionDuring this course, you will work on various assignments as you learn to code.All assignments will be interactive pieces of curriculum that require some work.Some assignments may ask you to follow a set of instructions, while others willask you to figure out your own solution to pass specific tests. This lesson isyour first assignment!All assignments are hosted on GitHub. In order to work on them, however, youwill need to complete work on your local machine. The general process is:Click the blue \""Fork\"" button in CanvasCreate a personal copy (a 'fork') of the assignment in GitHubDownload your personal copy (referred to as 'cloning') to your computerComplete the required workSubmit your completed work to CanvasIn this assignment, you'll learn the workflow that you will be using to completeyour assignments. You can follow along with the steps in the videos below, orcontinue reading to get a more detailed explanation of the process of working onlessons in Canvas.WSL: Completing Assignments Code AlongFor Windows users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/wkM_3VZT2Nw\"" frameborder=\""0\"" allowfullscreen></iframe>MacOS: Completing Assignments Code AlongFor Mac users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/otfhhI-5qtM\"" frameborder=\""0\"" allowfullscreen></iframe>A Quick Note on Organizing Work on Your MachineThroughout this course, you will be downloading many assignments, so it isimportant to keep your code organized. If you haven't yet, we recommend that yougo through the steps inthe previous lessonto set up a directory where you can keep all of your work for this course.Note: The process we'll go through in this lesson will create sub-foldersautomatically. Whenever you are starting a new assignment, navigate back toyour main prework folder (cd ~/Development/code/prework) before cloningthe assignment to ensure these sub-folders don't get createdwithin each other.Accessing GitHub and ForkingAll the lessons in this course have a corresponding repository (repo) in GitHub.On this page in Canvas, you should see three icons in the upper rightcorner. The first says Fork. The second is a button that looks like alarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHubrepo without forking. The third is a flag, which you can use to submit anissue for the lesson (e.g., if you find a typo or other error).One way to fork an assignment is to click the Octocat button to go to theassignment's GitHub repo and fork directly from that page. (We'll go throughthat process in a later lesson.) However, when completing your Canvasassignments, you should use the Fork button. Doing so will automate severalsteps for you and ensure that, when you complete a lab, it is registered ascomplete in Canvas.Go ahead and fork this assignment by clicking the Fork button at the top ofthe page.    This is just a picture, the button is up at the top of the page.Clicking the Fork button will do one of two things — it will either startthe forking process or bring you to a page where you select where to create yourfork. If you're prompted to choose, select your personal GitHub account. Theforking process will begin and may take a few moments. When complete, you willbe redirected to a new copy of the assignment that exists under your GitHubaccount. The README.md file in your copy of the repository contains theseinstructions, so you can continue this lesson here or in GitHub.Forking is a process which creates an exact copy of a collection of code andfiles. Once you've created a fork on your own GitHub account, you will be ableto edit the files in the repository and write your own code solution withoutinterfering with the original copy.Once your fork is ready, the next step is to download (clone) your newrepository to your local machine.Cloning to Your Local MachineTo download the repository for this lesson, make sure you're in your personalfork on GitHub, then click the Code button. A pop-up will appear which showsseveral options for cloning: HTTPS, SSH, and GitHub CLI. Beforedoing anything else, be sure to switch to SSH. With SSH selected, youshould see what looks sort of like an email in the box below, starting withgit@github.com:. You should see your GitHub name after the :.Aside: Why SSH? If you followed the setup instructions, you have addedyour personal SSH key to GitHub. GitHub will store your personal copies of allthe work you do in this course. Because you've added your SSH key, GitHub willknow who you are when you send work from your local machine to GitHub to bestored. Using HTTPS instead would require you to sign in from your terminalusing your log-in credentials each time you try to push your code to GitHub;it also may not work at all for some assignments.From here, click the copy button.Now, open your terminal and navigate to where you'd like to download theassignment (e.g. cd ~/Development/code). Type git clone and a space, thenpaste in the copied SSH link from GitHub. It should look something like this:$ git clone git@github.com:<your-user-name>/phase-0-completing-assignments.gitPress enter, and you should see a flurry of terminal activity.Troubleshooting: If you are a Mac user and you see the following message:xcrun: error: invalid active developer pathYou need to install the Xcode Command Line Tools. Run the following command toinstall them:$ xcode-select --installAnd follow the prompts. Then try running the git clone command again. Seethis Stack Overflow post for moredetails. Note that you may need to re-install xcode-select any time youupdate your Mac OS version.Once the terminal gives you control to type again, a new folder with the GitHubname of the assignment will have been created. Change directory into this folderto access the assignment files.$ cd phase-0-completing-assignmentsNow type code . to open up a text editor window with access to all of theassignment's files. These instructions are now also available on your localmachine in README.md.Note: the first time you open a directory in Visual Studio Code, you'll see amessage asking \""Do you trust the authors of the files in this folders?\"" Thisis a security feature of Visual Studio Code. It's safe tochoose \""Yes\"", and we recommend selecting the \""Trust the authors of all thefiles in the parent folder\"" option to prevent this warning from coming upevery time you open a lesson. Just be sure to download your code from trustedsources!Completing an AssignmentMost assignments will have tests that check your work and provide immediatefeedback in the terminal. We'll walk through some examples in upcoming lessons.This assignment has a single test: check to see if you've correctly cloned thisassignment to your local machine. If you've followed the steps above, you'vecompleted everything you need to do to pass the test; all that is left to do isrun it.Run learn test in the terminal. This command will install all the lessondependencies and run the test. You should again see a flurry of text asdependencies are installed. Then you'll see the results of your test. By cloningthis assignment down, you've already passed the test!This assignment    ✓ has been correctly cloned to your local environment  1 passing (5ms)Note: If you did not receive a passing test, or if your terminal producedsome sort of error, walk through the steps in this lesson again and make sureyou've followed each one. If you got a \""command not found\"" error, go back tothe Configuring the Flatiron Student Portallesson and go through the steps provided there to make sure the learn-co gemwas installed correctly. If you're still receiving errors, we recommend goingback through the local environment setup instructions again to ensureeverything is set up properly.Once the test is passing, you can head back to the assignment on Canvas. Refreshthe assignment page and you should see that Canvas now registers the assignmentas both Submitted and Complete. A URL to your fork of the assignment hasbeen submitted in Canvas, so you are ready to move on to the next lesson.Each assignment will be different and will include instructions on what isrequired to complete it. Some labs will have many tests. You can runlearn test as many times as you'd like while working to solve these labs. Youwill submit your work to Canvas each time you do, but the assignment will bemarked Incomplete until all tests are passing.Your Work in GitHubEvery time you run learn test, all the changes you've made locally will beautomatically pushed to your GitHub fork of the repo. If you head back to yourrepo after running learn test, you should see a message that a new branch,fis-wip, has been created:Note: you should disregard the Compare & pull request button.This branch contains the work you've done so far. If you ever want to go back toa previous solution, go to your repository on GitHub and switch to the fis-wipbranch.Types of AssignmentsFor most assignments, you will go through the process we just walked through. Inour curriculum, these assignments are often referred to as labs — codinglessons that include tests. There are a few other types of assignments, though,that require slightly different submission steps:Code-alongs: These also require code, but will guide you through whatneeds to be written. There are no tests to pass, but you will still need to gothrough forking, cloning, and running learn test. You should see a messagestating that no tests were found, but if you check the assignment in Canvas,you should see it is marked as Complete.Portfolio Projects: For these assignments, you'll be building fullyfunctional applications. Some guidelines and requirements will be provided,but it will be up to you to design and create your own app. These willeventually become the projects you showcase to potential employers! You willsubmit your projects in Canvas by submitting a link to your GitHub repo.Blog Submissions: Blogs are a required part of our Software Engineeringcourses. They help to develop your online presence and are a great way toreinforce the concepts you learn. You'll write your blog posts on a differentplatform, but submit links to them in Canvas.Submitting Projects and BlogsFor both portfolio projects and blog posts, you'll need to manually submit alink to your work on Canvas. While viewing the assignment, you should see aSubmit Assignment button in the upper-right section of the page.Clicking this button will bring you to the bottom of the page where you cansubmit a URL link to your work.Upon submission you should see confetti appear, indicating that your submissionhas been accepted.Note: It is possible to submit lab and code-along assignments manuallythis way. However, the assignment will only be marked as Submitted, notComplete.ConclusionCongratulations! You've completed your first assignment using the learn-cogem! You now know how to work on and submit assignments going forward:Click the Fork button on the Canvas assignmentOnce the assignment is forked, clone it down to your local machineComplete any required work, then run learn testWhen all tests pass, the assignment will be submitted to Canvas and marked asCompleteYour work will also be pushed to GitHub and will be available on the fis-wipbranchEquipped with this knowledge, you are now ready to tackle greater challenges!"
71,ryanhanwu/How-To-Ask-Questions-The-Smart-Way,https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md,JavaScript,"提问的智慧How To Ask Questions The Smart WayCopyright © 2001,2006,2014 Eric S. Raymond, Rick Moen本指南英文版版权为 Eric S. Raymond, Rick Moen 所有。原文网址：http://www.catb.org/~esr/faqs/smart-questions.htmlCopyleft 2001 by D.H.Grand(nOBODY/Ginux), 2010 by Gasolin, 2015 by Ryan Wu本中文指南是基于原文 3.10 版以及 2010 年由 Gasolin 所翻译版本的最新翻译；协助指出翻译问题，请发 issue，或直接发 pull request 给我。本文另有繁體中文版。原文版本历史目录声明简介在提问之前当你提问时慎选提问的论坛Stack Overflow网站和 IRC 论坛第二步，使用项目邮件列表使用有意义且描述明确的标题使问题容易回复使用清晰、正确、精准且合乎语法的语句使用易于读取且标准的文件格式发送问题精确地描述问题并言之有物话不在多而在精别动辄声称找到 Bug低声下气不能代替你的功课描述问题症状而非你的猜测按发生时间先后列出问题症状描述目标而不是过程别要求使用私人电邮回复清楚明确的表达你的问题以及需求询问有关代码的问题时别把自己家庭作业的问题贴上来去掉无意义的提问句即使你很急也不要在标题写紧急礼多人不怪，而且有时还很有帮助问题解决后，加个简短的补充说明如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了如果还是搞不懂处理无礼的回应如何避免扮演失败者不该问的问题好问题与蠢问题如果得不到回答如何更好地回答问题相关资源鸣谢声明许多项目在他们网站的帮助文档中链接了本指南。这很好，这正是我们想要的用途。但如果你是该项目管理员并试图创建指向本指南的超链接，请在超链接附近的显著位置注明：本指南不提供此项目的实际支持服务！我们已经深刻领教到缺少上述声明所带来的痛苦：我们将不停地被那些认为发布这本指南就意味着有责任解决世上所有技术问题的傻瓜苦苦纠缠。如果你因寻求某些帮助而阅读本指南，并在离开时还觉得可以从本文作者这里得到直接帮助，那你就是我们之前说的那些傻瓜之一。别问我们问题，我们只会忽略你。我们在这本指南中想教你如何从那些真正懂得你所遇到的软件或硬件问题的人处取得协助，而 99% 的情况下那不会是我们。除非你确定本指南的作者之一刚好是你所遇到的问题领域的专家，否则请不要打扰我们，这样大家都会开心一点。简介在黑客的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确地提问以获得你满意的答案。现在开源（Open Source）软件已经相当盛行，您通常可以从其他更有经验的用户那里获得与黑客一样好的答案，这是件好事；和黑客相比，用户们往往对那些新手常遇到的问题更宽容一些。尽管如此，以我们在此推荐的方式对待这些有经验的用户通常也是从他们那里获得有用答案的最有效方式。首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，“好问题！”是诚挚的大力称赞。尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 失败者（撸瑟） （由于历史原因，我们有时把它拼作 lusers）。我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们认可这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们只为那些真正有兴趣并愿意积极参与问题解决的人调整回答问题的风格。这点不会变，也不该变：否则，我们就是在最擅长的事情上降低效率。我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情地滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效地利用时间来回答赢家（winner）的问题。如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。（欢迎对本指南提出改进意见。你可以把你的建议发送至 esr@thyrsus.com 或 respond-auto@linuxmafia.com。然而请注意，本文并非网络礼节的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。在提问之前在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：尝试在你准备提问的论坛的旧文章中搜索答案。尝试上网搜索以找到答案。尝试阅读手册以找到答案。尝试阅读常见问题文件（FAQ）以找到答案。尝试自己检查或试验以找到答案。向你身边的强者朋友打听以找到答案。如果你是程序开发者，请尝试阅读源代码以找到答案。当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所学到的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 Google 论坛和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 我在 Google 中搜过下列句子但没有找到什么有用的东西 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐得舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。准备好你的问题，再将问题仔细地思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着蠢问题…，一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。绝不要自以为够格得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去挣到一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动地从他人处索取知识。另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。谁能给点提示？、我的这个例子里缺了什么？以及我应该检查什么地方比请把我需要的确切的过程贴出来更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。当你提问时慎选提问的论坛小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：在与主题不合的论坛上贴出你的问题。在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。在太多的不同新闻群组上重复转贴同样的问题（cross-post）。向既非熟人也没有义务解决你问题的人发送私人电邮。黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括阅读 FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。在选择论坛、新闻群组或邮件列表时，别太相信它的名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。别像机关枪似的一次“扫射”所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者由于涌入其私人邮箱的大量不堪忍受的无用邮件而不再提供支持。Stack Overflow搜索，然后在 Stack Exchange 问。近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的几率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。如果你还是找不到任何对你的问题有用的内容，请把你的问题发在与它最相关的网站上。提问的时候请善用格式化工具，尤其注意为代码添加格式，并且添加相关的标签（特别是编程语言、操作系统或库/包的名称）。当有人要求你提供更多相关信息时，请编辑你的贴子来补充它们[译注：而不是发一个回帖或回答！]。如果你觉得一个答案对你有帮助，点击向上的箭头来为它投票；如果一个答案提供了问题的正确解决方案，点击投票按钮下方的对勾来将它标记为正解。Stack Exchange 已经成长到超过一百个网站，以下是最常用的几个站：Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。Stack Overflow 是问写程序有关的问题。Server Fault 是问服务器和网管相关的问题。网站和 IRC 论坛本地的用户群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表），这些都是开始提问的好地方，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复“使用我们的版本”。在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。通过论坛或 IRC 频道来提供用户支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。第二步，使用项目邮件列表当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，那这也不能成为骚扰个别开发者的理由。向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其他人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。如果一个项目既有“用户”也有“开发者”（或“黑客”）邮件列表或论坛，而你又不会动到那些源代码，那么就向“用户”列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。然而，如果你确信你的问题很特别，而且在“用户”列表或论坛中几天都没有回复，可以试试前往“开发者”列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。使用有意义且描述明确的标题在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的帮帮忙、跪求、急（更别说救命啊！！！！这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。一个好标题范例是目标 —— 差异式的描述，许多技术支持组织就是这样做的。在目标部分指出是哪一个或哪一组东西有问题，在差异部分则描述与期望的行为不一致的地方。蠢问题：救命啊！我的笔记本电脑不能正常显示了！聪明问题：X.org 6.8.1 的鼠标指针会变形，某牌显卡 MV1005 芯片组。更聪明问题：X.org 6.8.1 的鼠标指针，在某牌显卡 MV1005 芯片组环境下 - 会变形。编写目标 —— 差异 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标指针或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境和你遇到的问题。总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 Re: 测试 或者 Re: 新 bug 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许用户按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你只想在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。使问题容易回复以请将你的回复发送到……来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，换个好点的；如果是操作系统不支持这种邮件程序，也换个好点的。在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如追踪此讨论串、有回复时发送邮件提醒等功能。使用清晰、正确、精准且合乎语法的语句我们从经验中发现，粗心的提问者通常也会粗心地写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它必须很准确，而且有迹象表明你是在思考和关注问题。正确地拼写、使用标点和大小写，不要将its混淆为it's，loose搞成lose或者将discrete弄成discreet。不要全部用大写，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。Alan Cox 也许可以这样做，但你不行）。更白话的说，如果你写得像是个半文盲[译注：小白]，那多半得不到理睬。也不要使用即时通信中的简写或火星文，如将的简化为d会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂的语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：[译注：以下附上原文以供使用]English is not my native language; please excuse typing errors.英文不是我的母语，请原谅我的错字或语法。If you speak $LANGUAGE, please email/PM me;I may need assistance translating my question.如果你说某语言，请向我发电邮/私信；我需要有人协助我翻译我的问题。I am familiar with the technical terms,but some slang expressions and idioms are difficult for me.我对技术名词很熟悉，但对于俗语或是特别用法不甚了解。I've posted my question in $LANGUAGE and English.I'll be glad to translate responses, if you only use one or the other.我把我的问题用某语言和英文写出来。如果你只用其中的一种语言回答，我会乐意将回复翻译成为你使用的语言。使用易于读取且标准的文件格式发送问题如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：使用纯文字而不是 HTML (关闭 HTML 并不难）。使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。但是，对一些特殊的文件不要设置固定宽度（譬如日志文件拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。在英语论坛中，不要使用Quoted-Printable MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的=20符号既难看也分散注意力，甚至有可能破坏内容的语意。绝对，永远不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的智能引号功能 （从[选项] > [校订] > [自动校正选项]，勾选掉智能引号单选框），以免在你的邮件中到处散布垃圾字符。在论坛，勿滥用表情符号和HTML功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的查看源代码命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。精确地描述问题并言之有物仔细、清楚地描述你的问题或 Bug 的症状。描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：Fedora Core 4、Slackware 9.1等）。描述在提问前你是怎样去研究和理解这个问题的。描述在提问前为确定问题而采取的诊断步骤。描述最近做过什么可能相关的硬件或软件变更。尽可能地提供一个可以重现这个问题的可控环境的方法。尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能提出的问题回答一遍。以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。Simon Tatham 写过一篇名为《如何有效的报告 Bug》的出色文章。强力推荐你也读一读。话不在多而在精你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。这样做的用处至少有三点。第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；第二，简化问题使你更有可能得到有用的答案；第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。别动辄声称找到 Bug当你在使用软件中遇到问题，除非你非常、非常的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的Bug，你应该能提供相应位置的修正或替代文件。请记得，还有其他许多用户没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前已经做了这些，是吧？）。这也意味着很有可能是你弄错了而不是软件本身有问题。编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有Bug时，这尤其严重。提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是你做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。低声下气不能代替你的功课有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：我知道我只是个可悲的新手，一个撸瑟，但...。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。描述问题症状而非你的猜测告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。蠢问题我在编译内核时接连遇到 SIG11 错误，我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？聪明问题我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。所有内存都换过了，没有效果。相关部分的标准编译记录如下…由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：所有的诊断专家都来自密苏里州。 美国国务院的官方座右铭则是：让我看看（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方地展示给我们看吧！按发生时间先后列出问题症状问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，多不等于好。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。描述目标而不是过程如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。蠢问题我怎样才能从某绘图程序的颜色选择器中取得十六进制的 RGB 值？聪明问题我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），但却无法从某绘图程序的颜色选择器取得十六进制的 RGB 值。第二种提问法比较聪明，你可能得到像是建议采用另一个更合适的工具的回复。别要求使用私人电邮回复黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。当你要求私下回复时，这个过程和奖励都被中止。别这样做，让回复者来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于不可能使其他人产生兴趣。这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是向我发电邮，我将为论坛归纳这些回复。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。清楚明确地表达你的问题以及需求漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你获得有用的答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问我想更好地理解 X，可否指点一下哪有好一点说明？通常比问你能解释一下 X 吗？更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。询问有关代码的问题时如果没有提示别人应该从何入手，别要求他人帮你调试有问题的代码。张贴几百行的代码，然后说一声：它不能工作会让你完全被忽略。只贴几十行代码，然后说一句：在第七行以后，我期待它显示 <x>，但实际出现的是 <y>比较有可能让你得到回应。最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能刚好展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看话不在多而在精一节）。一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做是一个好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。别把自己家庭作业的问题贴上来黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由你来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在用户群组，论坛或（最后一招）在项目的用户邮件列表或论坛中提问。尽管黑客们会看出来，但一些有经验的用户也许仍会给你一些提示。去掉无意义的提问句避免用无意义的话结束提问，例如有人能帮我吗？或者这有答案吗？。首先：如果你对问题的描述不是很好，这样问更是画蛇添足。其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：没错，有人能帮你或者不，没答案。一般来说，避免用 是或否、对或错、有或没有类型的问句，除非你想得到是或否类型的回答。即使你很急也不要在标题写紧急这是你的问题，不是我们的。宣称紧急极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，紧急这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如紧急：帮我救救这个毛茸茸的小海豹！肯定让你被黑客忽略或惹恼他们，即使他们认为毛茸茸的小海豹很重要。如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。礼多人不怪，而且有时还很有帮助彬彬有礼，多用请和谢谢您的关注，或谢谢你的关照。让大家都知道你对他们花时间免费提供帮助心存感激。坦白说，这一点并没有比使用清晰、正确、精准且合乎语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得先谢了意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说先谢了，然后事后再对回复者表示感谢，或者换种方式表达感激，譬如用谢谢你的关注或谢谢你的关照。）问题解决后，加个简短的补充说明问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。最理想的方式是向最初提问的话题回复此消息，并在标题中包含已修正，已解决或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串问题 X和问题 X - 已解决的潜在回复者就明白不用再浪费时间了（除非他个人觉得问题 X有趣），因此可以利用此时间去解决其它问题。补充说明不必很长或是很深入；简单的一句你好，原来是网线出了问题！谢谢大家 – Bill比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此之后才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。如何解读答案RTFM 和 STFW：如何知道你已完全搞砸了有一个古老而神圣的传统：如果你收到RTFM（Read The Fucking Manual）的回应，回答者认为你应该去读他妈的手册。当然，基本上他是对的，你应该去读一读。RTFM 有一个年轻的亲戚。如果你收到STFW（Search The Fucking Web）的回应，回答者认为你应该到他妈的网上搜索。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 Google 是你的朋友！）在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为：你需要的信息非常容易获得；你自己去搜索这些信息比灌给你，能让你学到更多。你不应该因此不爽；依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见。你应该对他祖母般的慈祥表示感谢。如果还是搞不懂如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。比方说，如果我回答你：看来似乎是 zentry 卡住了；你应该先清除它。，然后，这是一个很糟的后续问题回应：zentry 是什么？ 好的问法应该是这样：哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？处理无礼的回应很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直截了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这没有发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而你将被视为有错的一方，这将伤害到你获取信息或帮助的机会。另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会正常交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们喜欢我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑。）Jeff Bigler 的观察总结和这个相关也值得一读 (tact filters)。在下一节，我们会谈到另一个问题，当你行为不当时所会受到的冒犯。如何避免扮演失败者在黑客社区的论坛中，你以本指南所描述的或类似的方式，可能会有那么几次搞砸了。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被言语攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、不去关马桶盖等等。相反地，你该这么做：熬过去，这很正常。事实上，它是有益健康且合理的。社区的标准不会自行维持，它们是通过参与者积极而公开地执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称如果你不想帮助用户就闭嘴。 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心你和他的社区而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是真的会把问题搞砸。这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。不该问的问题以下是几个经典蠢问题，以及黑客没回答时心中所想的：问题：我能在哪找到 X 程序或 X 资源？问题：我怎样用 X 做 Y？问题：如何设定我的 shell 提示？问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？问题：我的程序/设定/SQL 语句没有用问题：我的 Windows 电脑有问题，你能帮我吗？问题：我的程序不会动了，我认为系统工具 X 有问题问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？问题：我能在哪找到 X 程序或 X 资源？回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 Google 吗？问题：我怎样用 X 做 Y？回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。问题：如何设定我的 shell 提示？？回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 RTFM，然后自己去找出来。问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 文件转换为 TeX 格式吗？回答：试试看就知道了。如果你试过，你就知道了答案，就不用浪费我的时间了。问题：我的{程序/设定/SQL 语句}没有用回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种你还有什么要补充的吗？真糟糕，希望你能搞定。这关我屁事？问题：我的 Windows 电脑有问题，你能帮我吗？回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你可以问与 Windows 相关的问题，只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。问题：我的程序不会动了，我认为系统工具 X 有问题回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库文件有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在这儿找到用户群组的清单）。注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地用户群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 Linux 和所有被怀疑的硬件作关键词仔细搜索。问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！好问题与蠢问题最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。蠢问题：我可以在哪儿找到关于 Foonly Flurbamatic 的资料？这种问法无非想得到 STFW 这样的回答。聪明问题：我用 Google 搜索过 \""Foonly Flurbamatic 2600\""，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？这个问题已经 STFW 过了，看起来他真的遇到了麻烦。蠢问题：我从 foo 项目找来的源码没法编译。它怎么这么烂？他觉得都是别人的错，这个傲慢自大的提问者。聪明问题：foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。蠢问题：我的主机板有问题了，谁来帮我？某黑客对这类问题的回答通常是：好的，还要帮你拍拍背和换尿布吗？，然后按下删除键。聪明问题：我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。在最后一个问题中，注意告诉我答案和给我启示，指出我还应该做什么诊断工作之间微妙而又重要的区别。事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候，一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的名人，而是因为我用了正确的方式来提问。黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我像个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。如果得不到回答如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。总的来说，简单地重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。有许多网上的以及本地的用户群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名用户。根本不可能由一个人来处理来自上万名用户的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。如何更好地回答问题态度和善一点。 问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。对初犯者私下回复。 对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。如果你不确定，一定要说出来！ 一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。如果帮不了忙，也别妨碍他。 不要在实际步骤上开玩笑，那样也许会毁了提问者的设置 —— 有些可怜的呆瓜会把它当成真的指令。试探性的反问以引出更多的细节。 如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。尽管对那些懒虫抱怨一声 RTFM 是正当的，但能给出文档的链接（即使只是建议个 Google 搜索关键词）会更好。如果你决定回答，就请给出好的答案。 当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。正面地回答问题！ 如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 试试看 A 或是 B 或者 试试 X 、 Y 、 Z 、 A 、 B 、 C 并附上一个链接一点用都没有。帮助你的社区从问题中学习。 当回复一个好问题时，问问自己如何修改相关文件或常见问题文件以免再次解答同样的问题？，接着再向文件维护者发一份补丁。如果你在研究一番后才作出了回答，展现你的技巧而不是直接端出结果。毕竟授人以鱼不如授人以渔。相关资源如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 Unix 系统和网络基本原理。当你发布软件或补丁时，试着按软件发布实践操作。鸣谢Evelyn Mitchel 贡献了一些愚蠢问题例子并启发了编写如何更好地回答问题这一节， Mikhail Ramendik 贡献了一些特别有价值的建议和改进。"
72,learn-co-curriculum/phase-0-completing-assignments,https://github.com/learn-co-curriculum/phase-0-completing-assignments/blob/master/README.md,JavaScript,"Complete Your First Software Engineering AssignmentLearning GoalsUnderstand the steps needed to complete an assignment and submit it in CanvasIntroductionDuring this course, you will work on various assignments as you learn to code.All assignments will be interactive pieces of curriculum that require some work.Some assignments may ask you to follow a set of instructions, while others willask you to figure out your own solution to pass specific tests. This lesson isyour first assignment!All assignments are hosted on GitHub. In order to work on them, however, youwill need to complete work on your local machine. The general process is:Click the blue \""Fork\"" button in CanvasCreate a personal copy (a 'fork') of the assignment in GitHubDownload your personal copy (referred to as 'cloning') to your computerComplete the required workSubmit your completed work to CanvasIn this assignment, you'll learn the workflow that you will be using to completeyour assignments. You can follow along with the steps in the videos below, orcontinue reading to get a more detailed explanation of the process of working onlessons in Canvas.WSL: Completing Assignments Code AlongFor Windows users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/wkM_3VZT2Nw\"" frameborder=\""0\"" allowfullscreen></iframe>MacOS: Completing Assignments Code AlongFor Mac users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/otfhhI-5qtM\"" frameborder=\""0\"" allowfullscreen></iframe>A Quick Note on Organizing Work on Your MachineThroughout this course, you will be downloading many assignments, so it isimportant to keep your code organized. If you haven't yet, we recommend that yougo through the steps inthe previous lessonto set up a directory where you can keep all of your work for this course.Note: The process we'll go through in this lesson will create sub-foldersautomatically. Whenever you are starting a new assignment, navigate back toyour main prework folder (cd ~/Development/code/prework) before cloningthe assignment to ensure these sub-folders don't get createdwithin each other.Accessing GitHub and ForkingAll the lessons in this course have a corresponding repository (repo) in GitHub.On this page in Canvas, you should see three icons in the upper rightcorner. The first says Fork. The second is a button that looks like alarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHubrepo without forking. The third is a flag, which you can use to submit anissue for the lesson (e.g., if you find a typo or other error).One way to fork an assignment is to click the Octocat button to go to theassignment's GitHub repo and fork directly from that page. (We'll go throughthat process in a later lesson.) However, when completing your Canvasassignments, you should use the Fork button. Doing so will automate severalsteps for you and ensure that, when you complete a lab, it is registered ascomplete in Canvas.Go ahead and fork this assignment by clicking the Fork button at the top ofthe page.    This is just a picture, the button is up at the top of the page.Clicking the Fork button will do one of two things — it will either startthe forking process or bring you to a page where you select where to create yourfork. If you're prompted to choose, select your personal GitHub account. Theforking process will begin and may take a few moments. When complete, you willbe redirected to a new copy of the assignment that exists under your GitHubaccount. The README.md file in your copy of the repository contains theseinstructions, so you can continue this lesson here or in GitHub.Forking is a process which creates an exact copy of a collection of code andfiles. Once you've created a fork on your own GitHub account, you will be ableto edit the files in the repository and write your own code solution withoutinterfering with the original copy.Once your fork is ready, the next step is to download (clone) your newrepository to your local machine.Cloning to Your Local MachineTo download the repository for this lesson, make sure you're in your personalfork on GitHub, then click the Code button. A pop-up will appear which showsseveral options for cloning: HTTPS, SSH, and GitHub CLI. Beforedoing anything else, be sure to switch to SSH. With SSH selected, youshould see what looks sort of like an email in the box below, starting withgit@github.com:. You should see your GitHub name after the :.Aside: Why SSH? If you followed the setup instructions, you have addedyour personal SSH key to GitHub. GitHub will store your personal copies of allthe work you do in this course. Because you've added your SSH key, GitHub willknow who you are when you send work from your local machine to GitHub to bestored. Using HTTPS instead would require you to sign in from your terminalusing your log-in credentials each time you try to push your code to GitHub;it also may not work at all for some assignments.From here, click the copy button.Now, open your terminal and navigate to where you'd like to download theassignment (e.g. cd ~/Development/code). Type git clone and a space, thenpaste in the copied SSH link from GitHub. It should look something like this:$ git clone git@github.com:<your-user-name>/phase-0-completing-assignments.gitPress enter, and you should see a flurry of terminal activity.Troubleshooting: If you are a Mac user and you see the following message:xcrun: error: invalid active developer pathYou need to install the Xcode Command Line Tools. Run the following command toinstall them:$ xcode-select --installAnd follow the prompts. Then try running the git clone command again. Seethis Stack Overflow post for moredetails. Note that you may need to re-install xcode-select any time youupdate your Mac OS version.Once the terminal gives you control to type again, a new folder with the GitHubname of the assignment will have been created. Change directory into this folderto access the assignment files.$ cd phase-0-completing-assignmentsNow type code . to open up a text editor window with access to all of theassignment's files. These instructions are now also available on your localmachine in README.md.Note: the first time you open a directory in Visual Studio Code, you'll see amessage asking \""Do you trust the authors of the files in this folders?\"" Thisis a security feature of Visual Studio Code. It's safe tochoose \""Yes\"", and we recommend selecting the \""Trust the authors of all thefiles in the parent folder\"" option to prevent this warning from coming upevery time you open a lesson. Just be sure to download your code from trustedsources!Completing an AssignmentMost assignments will have tests that check your work and provide immediatefeedback in the terminal. We'll walk through some examples in upcoming lessons.This assignment has a single test: check to see if you've correctly cloned thisassignment to your local machine. If you've followed the steps above, you'vecompleted everything you need to do to pass the test; all that is left to do isrun it.Run learn test in the terminal. This command will install all the lessondependencies and run the test. You should again see a flurry of text asdependencies are installed. Then you'll see the results of your test. By cloningthis assignment down, you've already passed the test!This assignment    ✓ has been correctly cloned to your local environment  1 passing (5ms)Note: If you did not receive a passing test, or if your terminal producedsome sort of error, walk through the steps in this lesson again and make sureyou've followed each one. If you got a \""command not found\"" error, go back tothe Configuring the Flatiron Student Portallesson and go through the steps provided there to make sure the learn-co gemwas installed correctly. If you're still receiving errors, we recommend goingback through the local environment setup instructions again to ensureeverything is set up properly.Once the test is passing, you can head back to the assignment on Canvas. Refreshthe assignment page and you should see that Canvas now registers the assignmentas both Submitted and Complete. A URL to your fork of the assignment hasbeen submitted in Canvas, so you are ready to move on to the next lesson.Each assignment will be different and will include instructions on what isrequired to complete it. Some labs will have many tests. You can runlearn test as many times as you'd like while working to solve these labs. Youwill submit your work to Canvas each time you do, but the assignment will bemarked Incomplete until all tests are passing.Your Work in GitHubEvery time you run learn test, all the changes you've made locally will beautomatically pushed to your GitHub fork of the repo. If you head back to yourrepo after running learn test, you should see a message that a new branch,fis-wip, has been created:Note: you should disregard the Compare & pull request button.This branch contains the work you've done so far. If you ever want to go back toa previous solution, go to your repository on GitHub and switch to the fis-wipbranch.Types of AssignmentsFor most assignments, you will go through the process we just walked through. Inour curriculum, these assignments are often referred to as labs — codinglessons that include tests. There are a few other types of assignments, though,that require slightly different submission steps:Code-alongs: These also require code, but will guide you through whatneeds to be written. There are no tests to pass, but you will still need to gothrough forking, cloning, and running learn test. You should see a messagestating that no tests were found, but if you check the assignment in Canvas,you should see it is marked as Complete.Portfolio Projects: For these assignments, you'll be building fullyfunctional applications. Some guidelines and requirements will be provided,but it will be up to you to design and create your own app. These willeventually become the projects you showcase to potential employers! You willsubmit your projects in Canvas by submitting a link to your GitHub repo.Blog Submissions: Blogs are a required part of our Software Engineeringcourses. They help to develop your online presence and are a great way toreinforce the concepts you learn. You'll write your blog posts on a differentplatform, but submit links to them in Canvas.Submitting Projects and BlogsFor both portfolio projects and blog posts, you'll need to manually submit alink to your work on Canvas. While viewing the assignment, you should see aSubmit Assignment button in the upper-right section of the page.Clicking this button will bring you to the bottom of the page where you cansubmit a URL link to your work.Upon submission you should see confetti appear, indicating that your submissionhas been accepted.Note: It is possible to submit lab and code-along assignments manuallythis way. However, the assignment will only be marked as Submitted, notComplete.ConclusionCongratulations! You've completed your first assignment using the learn-cogem! You now know how to work on and submit assignments going forward:Click the Fork button on the Canvas assignmentOnce the assignment is forked, clone it down to your local machineComplete any required work, then run learn testWhen all tests pass, the assignment will be submitted to Canvas and marked asCompleteYour work will also be pushed to GitHub and will be available on the fis-wipbranchEquipped with this knowledge, you are now ready to tackle greater challenges!"
73,ajaxorg/ace,https://github.com/learn-co-curriculum/phase-0-completing-assignments/blob/master/README.md,JavaScript,"Complete Your First Software Engineering AssignmentLearning GoalsUnderstand the steps needed to complete an assignment and submit it in CanvasIntroductionDuring this course, you will work on various assignments as you learn to code.All assignments will be interactive pieces of curriculum that require some work.Some assignments may ask you to follow a set of instructions, while others willask you to figure out your own solution to pass specific tests. This lesson isyour first assignment!All assignments are hosted on GitHub. In order to work on them, however, youwill need to complete work on your local machine. The general process is:Click the blue \""Fork\"" button in CanvasCreate a personal copy (a 'fork') of the assignment in GitHubDownload your personal copy (referred to as 'cloning') to your computerComplete the required workSubmit your completed work to CanvasIn this assignment, you'll learn the workflow that you will be using to completeyour assignments. You can follow along with the steps in the videos below, orcontinue reading to get a more detailed explanation of the process of working onlessons in Canvas.WSL: Completing Assignments Code AlongFor Windows users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/wkM_3VZT2Nw\"" frameborder=\""0\"" allowfullscreen></iframe>MacOS: Completing Assignments Code AlongFor Mac users, follow along with this video:<iframe width=\""640\"" height=\""480\"" src=\""https://www.youtube.com/embed/otfhhI-5qtM\"" frameborder=\""0\"" allowfullscreen></iframe>A Quick Note on Organizing Work on Your MachineThroughout this course, you will be downloading many assignments, so it isimportant to keep your code organized. If you haven't yet, we recommend that yougo through the steps inthe previous lessonto set up a directory where you can keep all of your work for this course.Note: The process we'll go through in this lesson will create sub-foldersautomatically. Whenever you are starting a new assignment, navigate back toyour main prework folder (cd ~/Development/code/prework) before cloningthe assignment to ensure these sub-folders don't get createdwithin each other.Accessing GitHub and ForkingAll the lessons in this course have a corresponding repository (repo) in GitHub.On this page in Canvas, you should see three icons in the upper rightcorner. The first says Fork. The second is a button that looks like alarge-headed cat (GitHub's 'Octocat' icon), which will open the lesson's GitHubrepo without forking. The third is a flag, which you can use to submit anissue for the lesson (e.g., if you find a typo or other error).One way to fork an assignment is to click the Octocat button to go to theassignment's GitHub repo and fork directly from that page. (We'll go throughthat process in a later lesson.) However, when completing your Canvasassignments, you should use the Fork button. Doing so will automate severalsteps for you and ensure that, when you complete a lab, it is registered ascomplete in Canvas.Go ahead and fork this assignment by clicking the Fork button at the top ofthe page.    This is just a picture, the button is up at the top of the page.Clicking the Fork button will do one of two things — it will either startthe forking process or bring you to a page where you select where to create yourfork. If you're prompted to choose, select your personal GitHub account. Theforking process will begin and may take a few moments. When complete, you willbe redirected to a new copy of the assignment that exists under your GitHubaccount. The README.md file in your copy of the repository contains theseinstructions, so you can continue this lesson here or in GitHub.Forking is a process which creates an exact copy of a collection of code andfiles. Once you've created a fork on your own GitHub account, you will be ableto edit the files in the repository and write your own code solution withoutinterfering with the original copy.Once your fork is ready, the next step is to download (clone) your newrepository to your local machine.Cloning to Your Local MachineTo download the repository for this lesson, make sure you're in your personalfork on GitHub, then click the Code button. A pop-up will appear which showsseveral options for cloning: HTTPS, SSH, and GitHub CLI. Beforedoing anything else, be sure to switch to SSH. With SSH selected, youshould see what looks sort of like an email in the box below, starting withgit@github.com:. You should see your GitHub name after the :.Aside: Why SSH? If you followed the setup instructions, you have addedyour personal SSH key to GitHub. GitHub will store your personal copies of allthe work you do in this course. Because you've added your SSH key, GitHub willknow who you are when you send work from your local machine to GitHub to bestored. Using HTTPS instead would require you to sign in from your terminalusing your log-in credentials each time you try to push your code to GitHub;it also may not work at all for some assignments.From here, click the copy button.Now, open your terminal and navigate to where you'd like to download theassignment (e.g. cd ~/Development/code). Type git clone and a space, thenpaste in the copied SSH link from GitHub. It should look something like this:$ git clone git@github.com:<your-user-name>/phase-0-completing-assignments.gitPress enter, and you should see a flurry of terminal activity.Troubleshooting: If you are a Mac user and you see the following message:xcrun: error: invalid active developer pathYou need to install the Xcode Command Line Tools. Run the following command toinstall them:$ xcode-select --installAnd follow the prompts. Then try running the git clone command again. Seethis Stack Overflow post for moredetails. Note that you may need to re-install xcode-select any time youupdate your Mac OS version.Once the terminal gives you control to type again, a new folder with the GitHubname of the assignment will have been created. Change directory into this folderto access the assignment files.$ cd phase-0-completing-assignmentsNow type code . to open up a text editor window with access to all of theassignment's files. These instructions are now also available on your localmachine in README.md.Note: the first time you open a directory in Visual Studio Code, you'll see amessage asking \""Do you trust the authors of the files in this folders?\"" Thisis a security feature of Visual Studio Code. It's safe tochoose \""Yes\"", and we recommend selecting the \""Trust the authors of all thefiles in the parent folder\"" option to prevent this warning from coming upevery time you open a lesson. Just be sure to download your code from trustedsources!Completing an AssignmentMost assignments will have tests that check your work and provide immediatefeedback in the terminal. We'll walk through some examples in upcoming lessons.This assignment has a single test: check to see if you've correctly cloned thisassignment to your local machine. If you've followed the steps above, you'vecompleted everything you need to do to pass the test; all that is left to do isrun it.Run learn test in the terminal. This command will install all the lessondependencies and run the test. You should again see a flurry of text asdependencies are installed. Then you'll see the results of your test. By cloningthis assignment down, you've already passed the test!This assignment    ✓ has been correctly cloned to your local environment  1 passing (5ms)Note: If you did not receive a passing test, or if your terminal producedsome sort of error, walk through the steps in this lesson again and make sureyou've followed each one. If you got a \""command not found\"" error, go back tothe Configuring the Flatiron Student Portallesson and go through the steps provided there to make sure the learn-co gemwas installed correctly. If you're still receiving errors, we recommend goingback through the local environment setup instructions again to ensureeverything is set up properly.Once the test is passing, you can head back to the assignment on Canvas. Refreshthe assignment page and you should see that Canvas now registers the assignmentas both Submitted and Complete. A URL to your fork of the assignment hasbeen submitted in Canvas, so you are ready to move on to the next lesson.Each assignment will be different and will include instructions on what isrequired to complete it. Some labs will have many tests. You can runlearn test as many times as you'd like while working to solve these labs. Youwill submit your work to Canvas each time you do, but the assignment will bemarked Incomplete until all tests are passing.Your Work in GitHubEvery time you run learn test, all the changes you've made locally will beautomatically pushed to your GitHub fork of the repo. If you head back to yourrepo after running learn test, you should see a message that a new branch,fis-wip, has been created:Note: you should disregard the Compare & pull request button.This branch contains the work you've done so far. If you ever want to go back toa previous solution, go to your repository on GitHub and switch to the fis-wipbranch.Types of AssignmentsFor most assignments, you will go through the process we just walked through. Inour curriculum, these assignments are often referred to as labs — codinglessons that include tests. There are a few other types of assignments, though,that require slightly different submission steps:Code-alongs: These also require code, but will guide you through whatneeds to be written. There are no tests to pass, but you will still need to gothrough forking, cloning, and running learn test. You should see a messagestating that no tests were found, but if you check the assignment in Canvas,you should see it is marked as Complete.Portfolio Projects: For these assignments, you'll be building fullyfunctional applications. Some guidelines and requirements will be provided,but it will be up to you to design and create your own app. These willeventually become the projects you showcase to potential employers! You willsubmit your projects in Canvas by submitting a link to your GitHub repo.Blog Submissions: Blogs are a required part of our Software Engineeringcourses. They help to develop your online presence and are a great way toreinforce the concepts you learn. You'll write your blog posts on a differentplatform, but submit links to them in Canvas.Submitting Projects and BlogsFor both portfolio projects and blog posts, you'll need to manually submit alink to your work on Canvas. While viewing the assignment, you should see aSubmit Assignment button in the upper-right section of the page.Clicking this button will bring you to the bottom of the page where you cansubmit a URL link to your work.Upon submission you should see confetti appear, indicating that your submissionhas been accepted.Note: It is possible to submit lab and code-along assignments manuallythis way. However, the assignment will only be marked as Submitted, notComplete.ConclusionCongratulations! You've completed your first assignment using the learn-cogem! You now know how to work on and submit assignments going forward:Click the Fork button on the Canvas assignmentOnce the assignment is forked, clone it down to your local machineComplete any required work, then run learn testWhen all tests pass, the assignment will be submitted to Canvas and marked asCompleteYour work will also be pushed to GitHub and will be available on the fis-wipbranchEquipped with this knowledge, you are now ready to tackle greater challenges!"
74,learn-co-students/javascript-arrays-bootcamp-prep-000,https://github.com/learn-co-students/javascript-arrays-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript ArraysObjectivesExplain what an array is and why we use itCreate an arrayAdd an element to an arrayAccess an element in an arrayDelete an element from an arrayInstructionsYou'll be coding along in arrays.js. There are tests to run to make sure you're on the right track.IntroductionLet's say that we have a list of ingredients for a kickin' grilled cheese (code along in console):var ingredient1 = \""bread\""var ingredient2 = \""mild cheese\""var ingredient3 = \""sharp cheese\""var ingredient4 = \""butter\""var ingredient5 = \""tomato\""var ingredient6 = \""garlic\""But now what if we want to make a tomato sauce? Well, we already have garlic and tomato — but we have no idea what recipe they belong to. Pretty soon, we'll have a hard time keeping our ingredients safe, and we'd end up with bread in our tomato sauce.This is an admittedly contrived example, but it goes to show that we can't just put everything in a variable and hope to remember what order things should go in. It also shows that sometimes it would be helpful to be able to group like items together.In JavaScript, we can group like items in an object (well, everything in JavaScript is an object — but more on that some other time) called an array. An array is an ordered list of items (called \""elements\"" of the array) separated by commas.Arrays look like this: [1, 2, 3].Or like this:var grilledCheeseIngredients = [  'bread',  'mild cheese',  'sharp cheese',  'butter',  'tomato',  'garlic']var tomatoSauceIngredients = [  'tomato',  'garlic',  'olive oil',  'basil',  'oregano']CreationJavaScript arrays can contain all types of values and they can be of mixed types. You can create arrays in two different ways, the most common of which is to list values in a pair of square brackets. These are called array literals.var myArray = [element0, element1, ..., elementN];Examples:var primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37];var tvShows = [\""game of thrones\"", \""true detective\"", \""the good wife\"", \""empire\""];var weirdGreeting = [ \""he\"", 110, \""w\"", 0, \""r\"", 1, \""d\"" ];var empty = [];The Array constructor is another approach to making a new array.var evenNumbers = new Array();Arrays are ordered, meaning that the elements in them will always appear in the same order. The array [1, 1, 2], is different from the array [1, 2, 1].TODO: In arrays.js, define a variable called chocolateBars. Its value should be an array of the strings snickers, hundred grand, kitkat, and skittles.Adding an ElementJavaScript allows us to push elements onto the end of an array:var superheroines = [\""catwoman\"", \""she-hulk\"", \""mystique\""];superheroines.push(\""wonder woman\"");// superheroines is now [\""catwoman\"", \""she-hulk\"", \""mystique\"", \""wonder woman\""]We can also unshift elements onto the beginning of an array:var cities = [\""New York\"", \""San Francisco\""]cities.unshift(\""Philadelphia\"")// cities is now [\""Philadelphia\"", \""New York\"", \""San Francisco\""]These actions change the underlying array — in other words, they mutate its value.Most modern browsers (Chrome, FireFox, and Safari) support what is called the spread operator — it's three dots in a row: .... When used with an array, it spreads out the array's contents.We can use the spread operator to create a new array in place, rather than modifying the original one. Let's try it!var cities = [\""New York\"", \""San Francisco\""][\""Philadelphia\"", ...cities] // [\""Philadelphia\"", \""New York\"", \""San Francisco\""]cities // [\""New York\"", \""San Francisco\""]Whoa! Did you see that? Our cities array was untouched when we used the spread operator: ...cities. We can do the same at the beginning of the array:var cities = [\""New York\"", \""San Francisco\""][...cities, \""Philadelphia\""] // [\""New York\"", \""San Francisco\"", \""Philadelphia\""]To preserve the new array, we need to assign it to a variable:var cities = [\""New York\"", \""San Francisco\""]// we can assign it to the existing `cities` variablecities = [\""Philadelphia\"", ...cities]// but if we have a constconst cats = [\""Milo\"", \""Garfield\""]// we need a new variable:const moreCats = [\""Felix\"", ...cats]While we can add elements to an array directly at specific indexesvar myArray = [1, 2, 3]myArray[5] = 5myArray // [1, 2, 3, undefined, undefined, 5]it's best not to. We should treat arrays as ordered lists of information that can be any length, so updating a specific index should feel like a weird thing to do. Moreover, adding elements directly inserts undefined (as demonstrated above) if we also need to increase the array's length, which can lead to unexpected behavior.TODO: In arrays.js, define two functions, addElementToBeginningOfArray and destructivelyAddElementToBeginningOfArray. Both functions take two parameters, an array and an element to add to the beginning of the array, and both functions should add the element to the beginning of the array and then return the whole array. The destructive function, destructivelyAddElementToBeginningOfArray, should alter the original array that's passed in; addElementToBeginningOfArray, on the other hand, should return a new array and not modify the original.TODO: Define two more functions, addElementToEndOfArray and destructivelyAddElementToEndOfArray. These functions also take two arguments, an array and an element to add to the end of the array. addElementToEndOfArray should not alter the original array; destructivelyAddElementToEndOfArray should alter the original array.Accessing an ElementYou can get elements out of arrays if you know their index. Array elements' indexes start at 0 and increment by 1, so the first element's index is 0, the second element's index is 1, the third element's is 2, etc.var entrepreneurs = [\""Oprah Winfrey\"", \""Laurene Powell Jobs\"", \""Arianna Huffington\""];// the line below will print the string \""Oprah Winfrey\""console.log(entrepreneurs[0]);// the code below will print the string \""Arianna Huffington is the co-founder and editress-in-chief of The Huffington Post\""var bio = \"" is the co-founder and editress-in-chief of The Huffington Post\"";console.log(entrepreneurs[2] + bio);// the line below will return undefinedentrepreneurs[9];TODO: Define a function in arrays.js called accessElementInArray. The function should accept an array and an index and return the element at that index.Removing an ElementFrom the Beginning of an ArrayTo remove an element from the beginning of an array, we can use the shift method:const days = [\""Monday\"", \""Tuesday\"", \""Wednesday\""]days.shift() // returns the removed element, in this case \""Monday\""days // [\""Tuesday\"", \""Wednesday\""]As with unshift, this method is destructive; it mutates the underlying array.TODO: Define a function in arrays.js called destructivelyRemoveElementFromBeginningOfArray that takes an array as its only argument and removes the first element. Your function should then return the entire array, and it should mutate the array.Because we tend to want to avoid destruction, there is also a way to remove the first element from an array without changing the underlying array: we can use the slice method.slice does just what its name implies: it takes a slice from its array. The first argument specifies where the slice starts, and the second argument specifies where it ends. If there is no second argument, the slice goes from the first argument (the start) to the end of the array. This means removing the first element is as simple as slice(1).var cats = [\""Milo\"", \""Garfield\"", \""Otis\""]cats.slice(1) // [\""Garfield\"", \""Otis\""]cats // [\""Milo\"", \""Garfield\"", \""Otis\""]As with other non-destructive methods, we need to assign the results to a new variable to save our changes:var cats = [\""Milo\"", \""Garfield\"", \""Otis\""]cats = cats.slice(1) // [\""Garfield\"", \""Otis\""]cats // [\""Garfield\"", \""Otis\""]slice is also handy if we know we want the last n elements of an array: pass it a negative index.var cats = [\""Milo\"", \""Garfield\"", \""Otis\""]// get the last 2 catscats.slice(-2) // [\""Garfield\"", \""Otis\""]// get the last 1 catcats.slice(-1) // [\""Otis\""]TODO: Define a function in arrays.js called removeElementFromBeginningOfArray. It takes an array as its only argument. The function should remove the first element in the array. This function should return the entire array in the same line, and it should not mutate the original array.From the End of an ArrayTo remove an element from the end of an array, we can use the pop method:var iceCreams = [\""chocolate\"", \""vanilla\"", \""raspberry\""]iceCreams.pop() // returns the removed element, in this case \""raspberry\""iceCreams // [\""chocolate\"", \""vanilla\""]As with push, this method is destructive; it mutates the underlying array.TODO: Define a function in arrays.js called destructivelyRemoveElementFromEndOfArray that takes an array as its only argument and removes the last element. Your function should return the entire array, and it should mutate the array.We can use slice to perform the above action without changing the underlying array. It takes a bit more work than removing the first element, since we want the slice from index 0 (remember, the first element is at index 0!) to the end. Hmmmm — what property do arrays have that can help us? length!var iceCreams = [\""chocolate\"", \""vanilla\"", \""raspberry\""]iceCreams.slice(0, iceCreams.length - 1) // [\""chocolate\"", \""vanilla\""]iceCreams // [\""chocolate\"", \""vanilla\"", \""raspberry\""]TODO: Define a function in arrays.js called removeElementFromEndOfArray that takes an array as its only argument and removes the last element. Your function should return the array without the last element, and it should not mutate the original array.From the Middle of an ArrayRemoving an element from the middle of an array in JavaScript is a bit trickier than removing an element from the beginning or end. We have the splice method, which takes an index in the array as its first argument, the number of elements to remove as its second argument, and any number of elements to add as any arguments after the second. All arguments are optional, but with no arguments, splice() returns an empty array and does nothing to the target array.It might be helpful to refer to MDN to check out their examples, in addition to our examples here.let items = [1, 2, 3, 4]// this will remove everything after index 1 (inclusive)// it returns the removed items: [2, 3, 4]items.splice(1)items // [1]items = [1, 2, 3, 4] // \""at index 1, remove 1 item\"" // it returns the removed item(s): [2]items.splice(1, 1)items // [1, 3, 4]items = [1, 2, 3, 4]// \""at index 1, remove 1 item and add 6 and add 7\""// it returns the removed items: [2]// and adds the items to add starting at the removal indexitems.splice(1, 1, 6, 7)items // [1, 6, 7, 3, 4]As we noted above, adding elements at specific indexes in the middle of an array feels weird — it's intentionally difficult to do, as doing so with objects (where we have keys instead of sequential indexes) is much more natural.BONUSWe can use slice, combined with the spread operator, to make removing from the middle of an array much easier.var items = [1, 2, 3, 4, 5]// let's remove the third element// a slice from the start up to but not including index 2 (the third element)// and a slice from index 3 to the end[...items.slice(0, 2), ...items.slice(3)] // [1, 2, 4, 5]Play around with this a bit until it makes sense. It's the trickiest thing that you've encountered so far, so don't sweat it if it takes a little bit to sink in!Array WackinessArray indexes aren't exactly what they seem to beIf you had to guess, would you say that array indexes are numbers or strings? Think about it for a second, then read on.Array indexes are actually strings, even though we commonly refer to them as numbers. But you don't have to take my word for it: try typing Object.keys([1, 2, ,3]) in your console and see what comes back.Ultimately, this means array indexes are strings that can be accessed by array-style notation using brackets, and the numbers will be coerced into strings when they're needed under the hood.  In a console, try accessing an index using a string to see for yourself:var arr = [\""under\"", \""the\"", \""hood\""];arr[0];  // \""under\""arr['0']; // \""under\""arr[02]; // 02 the number *is* 2, so you get \""hood\""arr['02']: // '02' the string is *not* 2, so you get undefinedThis little tidbit might come in handy if you ever try to assign a value to an array index by using a string unintentionally.  Like, say, by getting your array positions from a zero-filled formatted list of numbers which you store as strings, then using those strings to access array elements.Or by indexing an array with a variable whose contents don't in any way represent a number--like typing myArray['bonobo monkey'] = 27.You'll get no complaints, because rather than adding an index to the array, you're adding a property.  Speaking of which...We can add properties to arraysIn JavaScript, everything is ultimately an object. We'll explore more about what that means when we cover objects, but for now, know that this means that we can add properties to just about anything, including arrays.A property is a named piece of information. They're kind of like variables (don't go too far with that analogy) but we can only get that information with reference to the property owner.What makes arrays special, then? Arrays keep track of how many elements they have in them via the length property: [1, 2, 3].length // 3. length doesn't work like other keys/indexes in objects/arrays — it updates automatically, and if we change it, we change the whole array.var myArray = [1, 2, 3]myArray.length // 3myArray.length = 1myArray // [1] (!!!)It's important to remember that arrays in JavaScript are kind of wonky. You can assign properties to them:var array = [1, 2, 3];array.myProperty = \""I'm a property!\"";Which can lead to weird behavior:array;// [1, 2, 3];// Where did our property go?array.myProperty;// \""I'm a property!\"";array.length;// 3 - Would you have expected 3 or 4?We don't tend to do these kinds of things on purpose, but it's important to be aware that they can happen so that you have a good sense of where to look if/when strange bugs start to appear.ResourcesMDN - ArraysCodecademy - Arrays"
75,learn-co-curriculum/phase-1-first-class-functions,https://github.com/learn-co-curriculum/phase-1-first-class-functions/blob/master/README.md,JavaScript,"First-Class FunctionsLearning GoalsDefine \""first-class function\""Use inline functionsUse functions as return valuesDefine \""higher-order function\""IntroductionSometimes in life, we need to take a first step. Since life isn't scripted likea reality TV show, anything can happen after that initial step. We need to beable to adjust accordingly.Imagine an exercise routine: every morning, we run 5 miles. But afterwards —depending on the day — we might lift weights, go for a swim, or run an extra 5miles.In programming-speak, we could write out a function for every day (follow alongby writing out these examples in a REPL, or in the index.js file!):function Monday() {  console.log(\""Go for a five-mile run\"");  console.log(\""Pump iron\"");}function Tuesday() {  console.log(\""Go for a five-mile run\"");  console.log(\""Swim 40 laps\"");}function Wednesday() {  console.log(\""Go for a five-mile run\"");  console.log(\""Go for a five-mile run\"");}function Thursday() {  console.log(\""Go for a five-mile run\"");  console.log(\""Pump iron\"");}function Friday() {  console.log(\""Go for a five-mile run\"");  console.log(\""Swim 40 laps\"");}But that's pretty tedious. And we already know that functions are supposed tohelp us reduce this kind of repetition.What if we pull all of our five-mile runs into their own function?function runFiveMiles() {  console.log(\""Go for a five-mile run\"");}Okay, that cuts down slightly on how much code we need to write. Let's do thesame thing for lifting weights and swimming:function liftWeights() {  console.log(\""Pump iron\"");}function swimFortyLaps() {  console.log(\""Swim 40 laps\"");}Awesome! We've cut down a little bit more: Monday() could now look like:function Monday() {  runFiveMiles();  liftWeights();}While it is a tiny bit shorter than before, there is definitely still room forimprovement. We know that every day, our routine includes two activities. Wealso know that the first activity is always a run. That means that the secondactivity can be variable. What if we created a function that took the secondactivity as a parameter?function exerciseRoutine(postRunActivity) {  runFiveMiles();  postRunActivity();}Notice that, in exerciseRoutine(), the postRunActivity parameter is acallback function — we call it after we call runFiveMiles(). Now let's tryto use this new function we created in our Monday() function:function Monday() {  exerciseRoutine(liftWeights);}function exerciseRoutine(postRunActivity) {  runFiveMiles();  postRunActivity();}Note that we aren't calling liftWeights. When we want to pass a function asa value, we pass it by reference by omitting the parentheses at the end of thefunction. We're not running the function at this point. It's up toexerciseRoutine() to call the function when it is needed.If we call Monday(), we'll see that we run five miles, and then we liftweights — awesome!Define First-Class FunctionsFunctions in JavaScript are first-class objects, which means they can betreated like any other object: they can be assigned to a variable, passed asvalues to other functions, returned as the value from another function, etc.They're super useful, as you can see — they even help us exercise in themornings!Note that we stated above that JavaScript functions can be treated like anyother object. In JavaScript, functions are a special type of object!Inline FunctionsWhat if, though, we want to have a one-off day of Pilates in our exerciseroutine? Keep in mind that our exerciseRoutine() function requires a functionas its first (and only) parameter. However, that function doesn't have to bedefined beforehand! We can pass an anonymous function to exerciseRoutine().To start with, let's use the full function syntax we've come to know and love:exerciseRoutine(function () {  console.log(\""Stretch! Work that core!\"");});// \""Go for a five-mile run\""// \""Stretch! Work that core!\""We can rewrite this to be more concise by using an arrow function:exerciseRoutine(() => {  console.log(\""Stretch! Work that core!\"");});// Or even shorter:exerciseRoutine(() => console.log(\""Stretch! Work that core!\""));Because we only need to use our function this one time, there's no need to giveit a name or assign it to a variable. Instead, we define it inline as ananonymous function, passing it as the argument when we call exerciseRoutine().Returning FunctionsFunctions can also return other functions. This is useful when we want topackage up a function and its environment, but don't want to call it just yet.For example, let's say our morning routine involves drinking a cup of coffee,exercising immediately, and then at some point later (depending on how we feel),eating breakfast. What we'll have for breakfast depends on what kind of exercisewe're doing.Let's translate this to a function:function morningRoutine(exercise) {  let breakfast;  if (exercise === liftWeights) {    breakfast = \""protein bar\"";  } else if (exercise === swimFortyLaps) {    breakfast = \""kale smoothie\"";  } else {    breakfast = \""granola\"";  }  exerciseRoutine(exercise);  // we could give this function a name if we wanted to, but since  // it's only available _inside_ morningRoutine(), we don't need to  return function () {    console.log(`Nom nom nom, this ${breakfast} is delicious!`);  };}Now when we call morningRoutine(), our exercise routine will be logged asbefore, but we'll also get a function back:const afterExercise = morningRoutine(liftWeights);// LOG: Go for a five-mile run// LOG: Pump ironafterExercise;//=> ƒ () { console.log(`Nom nom nom, this ${breakfast} is delicious!`); }And we can call that function later:afterExercise();// LOG: Nom nom nom, this protein bar is delicious!If you haven't been following along, it's vitally important that you go back anddo so. First-class functions are one of JavaScript's most powerful features, butit takes some practice for them to sink in.Higher-Order FunctionsA higher-order function is a function that can accept functions as argumentsand/or return a function. You can read more about them hereand here.InstructionsIf you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.To get more practice with first-class functions, this lesson has three tests topass that require you to write the following functions in the index.js file:The receivesAFunction function should:take a callback function as an argumentcall the callback functionit doesn't matter what this function returns, so long as it calls thecallback functionThe returnsANamedFunction function should:take no argumentsreturn a named functionThe returnsAnAnonymousFunction function should:take no argumentsreturn an anonymous functionWhen you're done, remember to commit and push your changes up to GitHub, thensubmit your work to Canvas using CodeGrade.ResourcesWikipedia: First-class functionFreeCodeCamp: A Quick Intro to Higher-Order Functions in JavaScriptDmitri Pavlutin: What are Higher-Order Functions in JavaScript?MDN Function Expression (named vs anonymous functions)"
76,Rob--W/cors-anywhere,https://github.com/Rob--W/cors-anywhere/blob/master/README.md,JavaScript,"CORS Anywhere is a NodeJS proxy which adds CORS headers to the proxied request.The url to proxy is literally taken from the path, validated and proxied. The protocolpart of the proxied URI is optional, and defaults to \""http\"". If port 443 is specified,the protocol defaults to \""https\"".This package does not put any restrictions on the http methods or headers, except forcookies. Requesting user credentials is disallowed.The app can be configured to require a header for proxying a request, for example to avoida direct visit from the browser.Example// Listen on a specific host via the HOST environment variablevar host = process.env.HOST || '0.0.0.0';// Listen on a specific port via the PORT environment variablevar port = process.env.PORT || 8080;var cors_proxy = require('cors-anywhere');cors_proxy.createServer({    originWhitelist: [], // Allow all origins    requireHeader: ['origin', 'x-requested-with'],    removeHeaders: ['cookie', 'cookie2']}).listen(port, host, function() {    console.log('Running CORS Anywhere on ' + host + ':' + port);});Request examples:http://localhost:8080/http://google.com/ - Google.com with CORS headershttp://localhost:8080/google.com - Same as previous.http://localhost:8080/google.com:443 - Proxies https://google.com/http://localhost:8080/ - Shows usage text, as defined in lib/help.txthttp://localhost:8080/favicon.ico - Replies 404 Not foundLive examples:https://cors-anywhere.herokuapp.com/https://robwu.nl/cors-anywhere.html - This demo shows how to use the API.DocumentationClientTo use the API, just prefix the URL with the API URL. Take a look at demo.html for an example.A concise summary of the documentation is provided at lib/help.txt.Note: as of February 2021, access to the demo server requires an opt-in,see: https://github.com/Rob--W/cors-anywhere/issues/301If you want to automatically enable cross-domain requests when needed, use the following snippet:(function() {    var cors_api_host = 'cors-anywhere.herokuapp.com';    var cors_api_url = 'https://' + cors_api_host + '/';    var slice = [].slice;    var origin = window.location.protocol + '//' + window.location.host;    var open = XMLHttpRequest.prototype.open;    XMLHttpRequest.prototype.open = function() {        var args = slice.call(arguments);        var targetOrigin = /^https?:\\/\\/([^\\/]+)/i.exec(args[1]);        if (targetOrigin && targetOrigin[0].toLowerCase() !== origin &&            targetOrigin[1] !== cors_api_host) {            args[1] = cors_api_url + args[1];        }        return open.apply(this, args);    };})();If you're using jQuery, you can also use the following code instead of the previous one:jQuery.ajaxPrefilter(function(options) {    if (options.crossDomain && jQuery.support.cors) {        options.url = 'https://cors-anywhere.herokuapp.com/' + options.url;    }});ServerThe module exports createServer(options), which creates a server that handlesproxy requests. The following options are supported:function getProxyForUrl - If set, specifies which intermediate proxy to use for a given URL.If the return value is void, a direct request is sent. The default implementation isproxy-from-env, which respects the standard proxyenvironment variables (e.g. https_proxy, no_proxy, etc.).array of strings originBlacklist - If set, requests whose origin is listed are blocked.Example: ['https://bad.example.com', 'http://bad.example.com']array of strings originWhitelist - If set, requests whose origin is not listed are blocked.If this list is empty, all origins are allowed.Example: ['https://good.example.com', 'http://good.example.com']function handleInitialRequest - If set, it is called with the request, response and a parsedURL of the requested destination (null if unavailable). If the function returns true, the requestwill not be handled further. Then the function is responsible for handling the request.This feature can be used to passively monitor requests, for example for logging (return false).function checkRateLimit - If set, it is called with the origin (string) of the request. If thisfunction returns a non-empty string, the request is rejected and the string is send to the client.boolean redirectSameOrigin - If true, requests to URLs from the same origin will not be proxied but redirected.The primary purpose for this option is to save server resources by delegating the request to the client(since same-origin requests should always succeed, even without proxying).array of strings requireHeader - If set, the request must include this header or the API will refuse to proxy.Recommended if you want to prevent users from using the proxy for normal browsing.Example: ['Origin', 'X-Requested-With'].array of lowercase strings removeHeaders - Exclude certain headers from being included in the request.Example: [\""cookie\""]dictionary of lowercase strings setHeaders - Set headers for the request (overwrites existing ones).Example: {\""x-powered-by\"": \""CORS Anywhere\""}number corsMaxAge - If set, an Access-Control-Max-Age request header with this value (in seconds) will be added.Example: 600 - Allow CORS preflight request to be cached by the browser for 10 minutes.string helpFile - Set the help file (shown at the homepage).Example: \""myCustomHelpText.txt\""For advanced users, the following options are also provided.httpProxyOptions - Under the hood, http-proxyis used to proxy requests. Use this option if you really need to pass optionsto http-proxy. The documentation for these options can be found here.httpsOptions - If set, a https.Server will be created. The given options are passed to thehttps.createServer method.For even more advanced usage (building upon CORS Anywhere),see the sample code in test/test-examples.js.Demo serverA public demo of CORS Anywhere is available at https://cors-anywhere.herokuapp.com. This server isonly provided so that you can easily and quickly try out CORS Anywhere. To ensure that the servicestays available to everyone, the number of requests per period is limited, except for requests fromsome explicitly whitelisted origins.Note: as of February 2021, access to the demo server requires an opt-in,see: https://github.com/Rob--W/cors-anywhere/issues/301If you expect lots of traffic, please host your own instance of CORS Anywhere, and make sure thatthe CORS Anywhere server only whitelists your site to prevent others from using your instance ofCORS Anywhere as an open proxy.For instance, to run a CORS Anywhere server that accepts any request from some example.com sites onport 8080, use:export PORT=8080export CORSANYWHERE_WHITELIST=https://example.com,http://example.com,http://example.com:8080node server.jsThis application can immediately be run on Heroku, see https://devcenter.heroku.com/articles/nodejsfor instructions. Note that their Acceptable Use Policy forbidsthe use of Heroku for operating an open proxy, so make sure that you either enforce a whitelist asshown above, or severly rate-limit the number of requests.For example, to blacklist abuse.example.com and rate-limit everything to 50 requests per 3 minutes,except for my.example.com and my2.example.com (which may be unlimited), use:export PORT=8080export CORSANYWHERE_BLACKLIST=https://abuse.example.com,http://abuse.example.comexport CORSANYWHERE_RATELIMIT='50 3 my.example.com my2.example.com'node server.jsLicenseCopyright (C) 2013 - 2021 Rob Wu rob@robwu.nlPermission is hereby granted, free of charge, to any person obtaining a copy ofthis software and associated documentation files (the \""Software\""), to deal inthe Software without restriction, including without limitation the rights touse, copy, modify, merge, publish, distribute, sublicense, and/or sell copiesof the Software, and to permit persons to whom the Software is furnished to doso, subject to the following conditions:The above copyright notice and this permission notice shall be included in allcopies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THESOFTWARE."
77,cyclic-software/express-hello-world,https://github.com/cyclic-software/express-hello-world/blob/main/README.md,JavaScript,"Cyclic - Express Hello WorldThis is a basic starter Expressjs app with:Static file hostingLogging MiddlewareCatch-all handler that echoes request infoLocal Quick StartClone to your localInstall dependencies npm installRun locally npm serveMake requestsBrowser: http://localhost:3000/some/path?q=query+one&q=second+query&single=valueCommand line: curl -i -XGET \""http://localhost:3000/cmd/line-curl\""Deploy in under 10 secondsSets up instant continuous deployment on git pushRealtime backend logs and API request monitoringCyclic RuntimeCyclic hosts your app on serverless infrastructure. That means there is no guarantee of memory or file system persistence between requests.The runtime expects a nodejs entry point defined as:package.json \""main\"" field defines the entry point file (if missing uses index.js)Entry point starts a server on process.env.PORTSay HiAsk a question or give us a shout out:💌 hello@cyclic.sh🐣 https://twitter.com/cyclicsoftware"
78,ViktoryiaYatskova/clean-code-s1e1,https://github.com/cyclic-software/express-hello-world/blob/main/README.md,JavaScript,"Cyclic - Express Hello WorldThis is a basic starter Expressjs app with:Static file hostingLogging MiddlewareCatch-all handler that echoes request infoLocal Quick StartClone to your localInstall dependencies npm installRun locally npm serveMake requestsBrowser: http://localhost:3000/some/path?q=query+one&q=second+query&single=valueCommand line: curl -i -XGET \""http://localhost:3000/cmd/line-curl\""Deploy in under 10 secondsSets up instant continuous deployment on git pushRealtime backend logs and API request monitoringCyclic RuntimeCyclic hosts your app on serverless infrastructure. That means there is no guarantee of memory or file system persistence between requests.The runtime expects a nodejs entry point defined as:package.json \""main\"" field defines the entry point file (if missing uses index.js)Entry point starts a server on process.env.PORTSay HiAsk a question or give us a shout out:💌 hello@cyclic.sh🐣 https://twitter.com/cyclicsoftware"
79,sudheerj/javascript-interview-questions,https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md,JavaScript,"JavaScript Interview Questions & AnswersClick ⭐if you like the project and follow @SudheerJonna for more updates. Coding questions available here. PDF and Epub versions available at actions tab.                  Take this JavaScript Projects course to go from a JS beginner to confidently building your own projects    Take this coding interview bootcamp if you’re serious about getting hired and don’t have a CS degree    Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer      Table of ContentsNo.Questions1What are the possible ways to create objects in JavaScript2What is prototype chain3What is the difference between Call, Apply and Bind4What is JSON and its common operations5What is the purpose of the array slice method6What is the purpose of the array splice method7What is the difference between slice and splice8How do you compare Object and Map9What is the difference between == and === operators10What are lambda or arrow functions11What is a first class function12What is a first order function13What is a higher order function14What is a unary function15What is the currying function16What is a pure function17What is the purpose of the let keyword18What is the difference between let and var19What is the reason to choose the name let as a keyword20How do you redeclare variables in switch block without an error21What is the Temporal Dead Zone22What is IIFE(Immediately Invoked Function Expression)23How do you decode or encode a URL in JavaScript?24What is memoization25What is Hoisting26What are classes in ES627What are closures28What are modules29Why do you need modules30What is scope in javascript31What is a service worker32How do you manipulate DOM using a service worker33How do you reuse information across service worker restarts34What is IndexedDB35What is web storage36What is a post message37What is a cookie38Why do you need a Cookie39What are the options in a cookie40How do you delete a cookie41What are the differences between cookie, local storage and session storage42What is the main difference between localStorage and sessionStorage43How do you access web storage44What are the methods available on session storage45What is a storage event and its event handler46Why do you need web storage47How do you check web storage browser support48How do you check web workers browser support49Give an example of a web worker50What are the restrictions of web workers on DOM51What is a promise52Why do you need a promise53What are the three states of promise54What is a callback function55Why do we need callbacks56What is a callback hell57What are server-sent events58How do you receive server-sent event notifications59How do you check browser support for server-sent events60What are the events available for server sent events61What are the main rules of promise62What is callback in callback63What is promise chaining64What is promise.all65What is the purpose of the race method in promise66What is a strict mode in javascript67Why do you need strict mode68How do you declare strict mode69What is the purpose of double exclamation70What is the purpose of the delete operator71What is typeof operator72What is undefined property73What is null value74What is the difference between null and undefined75What is eval76What is the difference between window and document77How do you access history in javascript78How do you detect caps lock key turned on or not79What is isNaN80What are the differences between undeclared and undefined variables81What are global variables82What are the problems with global variables83What is NaN property84What is the purpose of isFinite function85What is an event flow86What is event bubbling87What is event capturing88How do you submit a form using JavaScript89How do you find operating system details90What is the difference between document load and DOMContentLoaded events91What is the difference between native, host and user objects92What are the tools or techniques used for debugging JavaScript code93What are the pros and cons of promises over callbacks94What is the difference between an attribute and a property95What is same-origin policy96What is the purpose of void 097Is JavaScript a compiled or interpreted language98Is JavaScript a case-sensitive language99Is there any relation between Java and JavaScript100What are events101Who created javascript102What is the use of preventDefault method103What is the use of stopPropagation method104What are the steps involved in return false usage105What is BOM106What is the use of setTimeout107What is the use of setInterval108Why is JavaScript treated as Single threaded109What is an event delegation110What is ECMAScript111What is JSON112What are the syntax rules of JSON113What is the purpose JSON stringify114How do you parse JSON string115Why do you need JSON116What are PWAs117What is the purpose of clearTimeout method118What is the purpose of clearInterval method119How do you redirect new page in javascript120How do you check whether a string contains a substring121How do you validate an email in javascript122How do you get the current url with javascript123What are the various url properties of location object124How do get query string values in javascript125How do you check if a key exists in an object126How do you loop through or enumerate javascript object127How do you test for an empty object128What is an arguments object129How do you make first letter of the string in an uppercase130What are the pros and cons of for loop131How do you display the current date in javascript132How do you compare two date objects133How do you check if a string starts with another string134How do you trim a string in javascript135How do you add a key value pair in javascript136Is the '!--' notation represents a special operator137How do you assign default values to variables138How do you define multiline strings139What is an app shell model140Can we define properties for functions141What is the way to find the number of parameters expected by a function142What is a polyfill143What are break and continue statements144What are js labels145What are the benefits of keeping declarations at the top146What are the benefits of initializing variables147What are the recommendations to create new object148How do you define JSON arrays149How do you generate random integers150Can you write a random integers function to print integers with in a range151What is tree shaking152What is the need of tree shaking153Is it recommended to use eval154What is a Regular Expression155What are the string methods available in Regular expression156What are modifiers in regular expression157What are regular expression patterns158What is a RegExp object159How do you search a string for a pattern160What is the purpose of exec method161How do you change the style of a HTML element162What would be the result of 1+2+'3'163What is a debugger statement164What is the purpose of breakpoints in debugging165Can I use reserved words as identifiers166How do you detect a mobile browser167How do you detect a mobile browser without regexp168How do you get the image width and height using JS169How do you make synchronous HTTP request170How do you make asynchronous HTTP request171How do you convert date to another timezone in javascript172What are the properties used to get size of window173What is a conditional operator in javascript174Can you apply chaining on conditional operator175What are the ways to execute javascript after page load176What is the difference between proto and prototype177Give an example where do you really need semicolon178What is a freeze method179What is the purpose of freeze method180Why do I need to use freeze method181How do you detect a browser language preference182How to convert string to title case with javascript183How do you detect javascript disabled in the page184What are various operators supported by javascript185What is a rest parameter186What happens if you do not use rest parameter as a last argument187What are the bitwise operators available in javascript188What is a spread operator189How do you determine whether object is frozen or not190How do you determine two values same or not using object191What is the purpose of using object is method192How do you copy properties from one object to other193What are the applications of assign method194What is a proxy object195What is the purpose of seal method196What are the applications of seal method197What are the differences between freeze and seal methods198How do you determine if an object is sealed or not199How do you get enumerable key and value pairs200What is the main difference between Object.values and Object.entries method201How can you get the list of keys of any object202How do you create an object with prototype203What is a WeakSet204What are the differences between WeakSet and Set205List down the collection of methods available on WeakSet206What is a WeakMap207What are the differences between WeakMap and Map208List down the collection of methods available on WeakMap209What is the purpose of uneval210How do you encode an URL211How do you decode an URL212How do you print the contents of web page213What is the difference between uneval and eval214What is an anonymous function215What is the precedence order between local and global variables216What are javascript accessors217How do you define property on Object constructor218What is the difference between get and defineProperty219What are the advantages of Getters and Setters220Can I add getters and setters using defineProperty method221What is the purpose of switch-case222What are the conventions to be followed for the usage of switch case223What are primitive data types224What are the different ways to access object properties225What are the function parameter rules226What is an error object227When you get a syntax error228What are the different error names from error object229What are the various statements in error handling230What are the two types of loops in javascript231What is nodejs232What is an Intl object233How do you perform language specific date and time formatting234What is an Iterator235How does synchronous iteration works236What is an event loop237What is call stack238What is an event queue239What is a decorator240What are the properties of Intl object241What is an Unary operator242How do you sort elements in an array243What is the purpose of compareFunction while sorting arrays244How do you reversing an array245How do you find min and max value in an array246How do you find min and max values without Math functions247What is an empty statement and purpose of it248How do you get metadata of a module249What is a comma operator250What is the advantage of a comma operator251What is typescript252What are the differences between javascript and typescript253What are the advantages of typescript over javascript254What is an object initializer255What is a constructor method256What happens if you write constructor more than once in a class257How do you call the constructor of a parent class258How do you get the prototype of an object259What happens If I pass string type for getPrototype method260How do you set prototype of one object to another261How do you check whether an object can be extendable or not262How do you prevent an object to extend263What are the different ways to make an object non-extensible264How do you define multiple properties on an object265What is MEAN in javascript266What Is Obfuscation in javascript267Why do you need Obfuscation268What is Minification269What are the advantages of minification270What are the differences between Obfuscation and Encryption271What are the common tools used for minification272How do you perform form validation using javascript273How do you perform form validation without javascript274What are the DOM methods available for constraint validation275What are the available constraint validation DOM properties276What are the list of validity properties277Give an example usage of rangeOverflow property278Is enums feature available in javascript279What is an enum280How do you list all properties of an object281How do you get property descriptors of an object282What are the attributes provided by a property descriptor283How do you extend classes284How do I modify the url without reloading the page285How do you check whether an array includes a particular value or not286How do you compare scalar arrays287How to get the value from get parameters288How do you print numbers with commas as thousand separators289What is the difference between java and javascript290Does javascript supports namespace291How do you declare namespace292How do you invoke javascript code in an iframe from parent page293How do get the timezone offset from date294How do you load CSS and JS files dynamically295What are the different methods to find HTML elements in DOM296What is jQuery297What is V8 JavaScript engine298Why do we call javascript as dynamic language299What is a void operator300How to set the cursor to wait301How do you create an infinite loop302Why do you need to avoid with statement303What is the output of below for loops304List down some of the features of ES6305What is ES6306Can I redeclare let and const variables307Is const variable makes the value immutable308What are default parameters309What are template literals310How do you write multi-line strings in template literals311What are nesting templates312What are tagged templates313What are raw strings314What is destructuring assignment315What are default values in destructuring assignment316How do you swap variables in destructuring assignment317What are enhanced object literals318What are dynamic imports319What are the use cases for dynamic imports320What are typed arrays321What are the advantages of module loaders322What is collation323What is for...of statement324What is the output of below spread operator array325Is PostMessage secure326What are the problems with postmessage target origin as wildcard327How do you avoid receiving postMessages from attackers328Can I avoid using postMessages completely329Is postMessages synchronous330What paradigm is Javascript331What is the difference between internal and external javascript332Is JavaScript faster than server side script333How do you get the status of a checkbox334What is the purpose of double tilde operator335How do you convert character to ASCII code336What is ArrayBuffer337What is the output of below string expression338What is the purpose of Error object339What is the purpose of EvalError object340What are the list of cases error thrown from non-strict mode to strict mode341Do all objects have prototypes342What is the difference between a parameter and an argument343What is the purpose of some method in arrays344How do you combine two or more arrays345What is the difference between Shallow and Deep copy346How do you create specific number of copies of a string347How do you return all matching strings against a regular expression348How do you trim a string at the beginning or ending349What is the output of below console statement with unary operator350Does javascript uses mixins351What is a thunk function352What are asynchronous thunks353What is the output of below function calls354How to remove all line breaks from a string355What is the difference between reflow and repaint356What happens with negating an array357What happens if we add two arrays358What is the output of prepend additive operator on falsy values359How do you create self string using special characters360How do you remove falsy values from an array361How do you get unique values of an array362What is destructuring aliases363How do you map the array values without using map method364How do you empty an array365How do you rounding numbers to certain decimals366What is the easiest way to convert an array to an object367How do you create an array with some data368What are the placeholders from console object369Is it possible to add CSS to console messages370What is the purpose of dir method of console object371Is it possible to debug HTML elements in console372How do you display data in a tabular format using console object373How do you verify that an argument is a Number or not374How do you create copy to clipboard button375What is the shortcut to get timestamp376How do you flattening multi dimensional arrays377What is the easiest multi condition checking378How do you capture browser back button379How do you disable right click in the web page380What are wrapper objects381What is AJAX382What are the different ways to deal with Asynchronous Code383How to cancel a fetch request384What is web speech API385What is minimum timeout throttling386How do you implement zero timeout in modern browsers387What are tasks in event loop388What is microtask389What are different event loops390What is the purpose of queueMicrotask391How do you use javascript libraries in typescript file392What are the differences between promises and observables393What is heap394What is an event table395What is a microTask queue396What is the difference between shim and polyfill397How do you detect primitive or non primitive value type398What is babel399Is Node.js completely single threaded400What are the common use cases of observables401What is RxJS402What is the difference between Function constructor and function declaration403What is a Short circuit condition404What is the easiest way to resize an array405What is an observable406What is the difference between function and class declarations407What is an async function408How do you prevent promises swallowing errors409What is deno410How do you make an object iterable in javascript411What is a Proper Tail Call412How do you check an object is a promise or not413How to detect if a function is called as constructor414What are the differences between arguments object and rest parameter415What are the differences between spread operator and rest parameter416What are the different kinds of generators417What are the built-in iterables418What are the differences between for...of and for...in statements419How do you define instance and non-instance properties420What is the difference between isNaN and Number.isNaN?421How to invoke an IIFE without any extra brackets?422Is that possible to use expressions in switch cases?423What is the easiest way to ignore promise errors?424How do style the console output using CSS?425What is nullish coalescing operator (??)?426How do you group and nest console output?427What is the difference between dense and sparse arrays?428What are the different ways to create sparse arrays?429What is the difference between setTimeout, setImmediate and process.nextTick?430How do you reverse an array without modifying original array?431How do you create custom HTML element?432What is global execution context?433What is function execution context?434What is debouncing?435What is throttling?436What is optional chaining?437What is an environment record?438How to verify if a variable is an array?439What is pass by value and pass by reference?440What are the differences between primitives and non-primitives?441What are hidden classes?442What is inline caching?443How do you create your own bind method using either call or apply method?444What are the differences between pure and impure functions?445What is  referential transparency?446What are the possible side-effects in javascript?447What are compose and pipe functions?448What is module pattern?449What is Functon Composition?450How to use await outside of async function prior to ES2022?What are the possible ways to create objects in JavaScriptThere are many ways to create objects in javascript as belowObject constructor:The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.var object = new Object();Object's create method:The create method of Object creates a new object by passing the prototype object as a parametervar object = Object.create(null);Object literal syntax:The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.var object = {     name: \""Sudheer\"",     age: 34};Object literal property values can be of any data type, including array, function, and nested object.Note: This is an easiest way to create an objectFunction constructor:Create any function and apply the new operator to create object instances,function Person(name) {  this.name = name;  this.age = 21;}var object = new Person(\""Sudheer\"");Function constructor with prototype:This is similar to function constructor but it uses prototype for their properties and methods,function Person() {}Person.prototype.name = \""Sudheer\"";var object = new Person();This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.function func() {};new func(x, y, z);(OR)// Create a new instance using function prototype.var newInstance = Object.create(func.prototype)// Call the functionvar result = func.call(newInstance, x, y, z),// If the result is a non-null object then use it otherwise just use the new instance.console.log(result && typeof result === 'object' ? result : newInstance);ES6 Class syntax:ES6 introduces class feature to create the objectsclass Person {  constructor(name) {    this.name = name;  }}var object = new Person(\""Sudheer\"");Singleton pattern:A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.var object = new (function () {  this.name = \""Sudheer\"";})();⬆ Back to TopWhat is a prototype chainPrototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.The prototype on object instance is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.⬆ Back to TopWhat is the difference between Call, Apply and BindThe difference between Call, Apply and Bind can be explained with below examples,Call: The call() method invokes a function with a given this value and arguments provided one by onevar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.call(employee1, \""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?invite.call(employee2, \""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Apply: Invokes the function with a given this value and allows you to pass in arguments as an arrayvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.apply(employee1, [\""Hello\"", \""How are you?\""]); // Hello John Rodson, How are you?invite.apply(employee2, [\""Hello\"", \""How are you?\""]); // Hello Jimmy Baily, How are you?bind: returns a new function, allowing you to pass any number of argumentsvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}var inviteEmployee1 = invite.bind(employee1);var inviteEmployee2 = invite.bind(employee2);inviteEmployee1(\""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?inviteEmployee2(\""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array.Whereas Bind creates a new function that will have this set to the first parameter passed to bind().⬆ Back to TopWhat is JSON and its common operationsJSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/jsonParsing: Converting a string to a native objectJSON.parse(text);Stringification: converting a native object to a string so it can be transmitted across the networkJSON.stringify(object);⬆ Back to TopWhat is the purpose of the array slice methodThe slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.Some of the examples of this method are,let arrayIntegers = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]let arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]Note: Slice method won't mutate the original array but it returns the subset as a new array.⬆ Back to TopWhat is the purpose of the array splice methodThe splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.Some of the examples of this method are,let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \""a\"", \""b\"", \""c\""); //returns [4]; original array: [1, 2, 3, \""a\"", \""b\"", \""c\"", 5]Note: Splice method modifies the original array and returns the deleted array.⬆ Back to TopWhat is the difference between slice and spliceSome of the major difference in a tabular formSliceSpliceDoesn't modify the original array(immutable)Modifies the original array(mutable)Returns the subset of original arrayReturns the deleted elements as arrayUsed to pick the elements from arrayUsed to insert or delete elements to/from array⬆ Back to TopHow do you compare Object and MapObjects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.A Map may perform better in scenarios involving frequent addition and removal of key pairs.⬆ Back to TopWhat is the difference between == and === operatorsJavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.There are two special cases in this,NaN is not equal to anything, including NaN.Positive and negative zeros are equal to one another.Two Boolean operands are strictly equal if both are true or both are false.Two objects are strictly equal if they refer to the same Object.Null and Undefined types are not equal with ===, but equal with ==. i.e,null===undefined --> false but null==undefined --> trueSome of the example which covers the above cases,0 == false   // true0 === false  // false1 == \""1\""     // true1 === \""1\""    // falsenull == undefined // truenull === undefined // false'0' == false // true'0' === false // false[]==[] or []===[] //false, refer different objects in memory{}=={} or {}==={} //false, refer different objects in memory⬆ Back to TopWhat are lambda or arrow functionsAn arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.⬆ Back to TopWhat is a first class functionIn Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listenerconst handler = () => console.log(\""This is a click handler function\"");document.addEventListener(\""click\"", handler);⬆ Back to TopWhat is a first order functionFirst-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.const firstOrder = () => console.log(\""I am a first order function!\"");⬆ Back to TopWhat is a higher order functionHigher-order function is a function that accepts another function as an argument or returns a function as a return value or both.const firstOrderFunc = () =>  console.log(\""Hello, I am a First order function\"");const higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();higherOrder(firstOrderFunc);⬆ Back to TopWhat is a unary functionUnary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.Let us take an example of unary function,const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value⬆ Back to TopWhat is the currying functionCurrying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function.Let's take an example of n-ary function and how it turns into a currying function,const multiArgFunction = (a, b, c) => a + b + c;console.log(multiArgFunction(1, 2, 3)); // 6const curryUnaryFunction = (a) => (b) => (c) => a + b + c;curryUnaryFunction(1); // returns a function: b => c =>  1 + b + ccurryUnaryFunction(1)(2); // returns a function: c => 3 + ccurryUnaryFunction(1)(2)(3); // returns the number 6Curried functions are great to improve code reusability and functional composition.⬆ Back to TopWhat is a pure functionA Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.Let's take an example to see the difference between pure and impure functions,//Impurelet numberArray = [];const impureAddNumber = (number) => numberArray.push(number);//Pureconst pureAddNumber = (number) => (argNumberArray) =>  argNumberArray.concat([number]);//Display the resultsconsole.log(impureAddNumber(6)); // returns 1console.log(numberArray); // returns [6]console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]console.log(numberArray); // returns [6]As per the above code snippets, the Push function is impure itself by altering the array and returning a push number index independent of the parameter value. . Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array.Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with Immutability concept of ES6 by giving preference to const over let usage.⬆ Back to TopWhat is the purpose of the let keywordThe let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.Let's take an example to demonstrate the usage,let counter = 30;if (counter === 30) {  let counter = 31;  console.log(counter); // 31}console.log(counter); // 30 (because the variable in if block won't exist here)⬆ Back to TopWhat is the difference between let and varYou can list out the differences in a tabular formatvarletIt is been available from the beginning of JavaScriptIntroduced as part of ES6It has function scopeIt has block scopeVariables will be hoistedHoisted but not initializedLet's take an example to see the difference,function userDetails(username) {  if (username) {    console.log(salary); // undefined due to hoisting    console.log(age); // ReferenceError: Cannot access 'age' before initialization    let age = 30;    var salary = 10000;  }  console.log(salary); //10000 (accessible due to function scope)  console.log(age); //error: age is not defined(due to block scope)}userDetails(\""John\"");⬆ Back to TopWhat is the reason to choose the name let as a keywordlet is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.⬆ Back to TopHow do you redeclare variables in switch block without an errorIf you try to redeclare variables in a switch block then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,let counter = 1;switch (x) {  case 0:    let name;    break;  case 1:    let name; // SyntaxError for redeclaration.    break;}To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.let counter = 1;switch (x) {  case 0: {    let name;    break;  }  case 1: {    let name; // No SyntaxError for redeclaration.    break;  }}⬆ Back to TopWhat is the Temporal Dead ZoneThe Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.Let's see this behavior with an example,function somemethod() {  console.log(counter1); // undefined  console.log(counter2); // ReferenceError  var counter1 = 1;  let counter2 = 2;}⬆ Back to TopWhat is IIFE(Immediately Invoked Function Expression)IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,(function () {  // logic here})();The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,(function () {  var message = \""IIFE\"";  console.log(message);})();console.log(message); //Error: message is not defined⬆ Back to TopHow do you decode or encode a URL in JavaScript?encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string.decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.Note: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().let uri = \""employeeDetails?name=john&occupation=manager\"";let encoded_uri = encodeURI(uri);let decoded_uri = decodeURI(encoded_uri);⬆ Back to TopWhat is memoizationMemoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache.Let's take an example of adding function with memoization,const memoizAddition = () => {  let cache = {};  return (value) => {    if (value in cache) {      console.log(\""Fetching from cache\"");      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.    } else {      console.log(\""Calculating result\"");      let result = value + 20;      cache[value] = result;      return result;    }  };};// returned function from memoizAdditionconst addition = memoizAddition();console.log(addition(20)); //output: 40 calculatedconsole.log(addition(20)); //output: 40 cached⬆ Back to TopWhat is HoistingHoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation.Let's take a simple example of variable hoisting,console.log(message); //output : undefinedvar message = \""The variable Has been hoisted\"";The above code looks like as below to the interpreter,var message;console.log(message);message = \""The variable Has been hoisted\"";In the same fashion, function declarations are hoisted toomessage(\""Good morning\""); //Good morningfunction message(name) {  console.log(name);}This hoisting makes functions to be safely used in code before they are declared.⬆ Back to TopWhat are classes in ES6In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.For example, the prototype based inheritance written in function expression as below,function Bike(model, color) {  this.model = model;  this.color = color;}Bike.prototype.getDetails = function () {  return this.model + \"" bike has\"" + this.color + \"" color\"";};Whereas ES6 classes can be defined as an alternativeclass Bike {  constructor(color, model) {    this.color = color;    this.model = model;  }  getDetails() {    return this.model + \"" bike has\"" + this.color + \"" color\"";  }}⬆ Back to TopWhat are closuresA closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chainsOwn scope where variables defined between its curly bracketsOuter function’s variablesGlobal variablesLet's take an example of closure concept,function Welcome(name) {  var greetingInfo = function (message) {    console.log(message + \"" \"" + name);  };  return greetingInfo;}var myFunction = Welcome(\""John\"");myFunction(\""Welcome \""); //Output: Welcome JohnmyFunction(\""Hello Mr.\""); //output: Hello Mr.JohnAs per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.⬆ Back to TopWhat are modulesModules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor⬆ Back to TopWhy do you need modulesBelow are the list of benefits using modules in javascript ecosystemMaintainabilityReusabilityNamespacing⬆ Back to TopWhat is scope in javascriptScope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.⬆ Back to TopWhat is a service workerA Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.⬆ Back to TopHow do you manipulate DOM using a service workerService worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM.⬆ Back to TopHow do you reuse information across service worker restartsThe problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.⬆ Back to TopWhat is IndexedDBIndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.⬆ Back to TopWhat is web storageWeb storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.Local storage: It stores data for current origin with no expiration date.Session storage: It stores data for one session and the data is lost when the browser tab is closed.⬆ Back to TopWhat is a post messagePost message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).⬆ Back to TopWhat is a CookieA cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs.For example, you can create a cookie named username as below,document.cookie = \""username=John\"";⬆ Back to TopWhy do you need a CookieCookies are used to remember information about the user profile(such as username). It basically involves two steps,When a user visits a web page, the user profile can be stored in a cookie.Next time the user visits the page, the cookie remembers the user profile.⬆ Back to TopWhat are the options in a cookieThere are few below options available for a cookie,By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).document.cookie = \""username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\"";By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.document.cookie = \""username=John; path=/services\"";⬆ Back to TopHow do you delete a cookieYou can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case.For example, you can delete a username cookie in the current page as below.document.cookie =  \""username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;\"";Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.⬆ Back to TopWhat are the differences between cookie, local storage and session storageBelow are some of the differences between cookie, local storage and session storage,FeatureCookieLocal storageSession storageAccessed on client or server sideBoth server-side & client-sideclient-side onlyclient-side onlyLifetimeAs configured using Expires optionuntil deleteduntil tab is closedSSL supportSupportedNot supportedNot supportedMaximum data size4KB5 MB5MB⬆ Back to TopWhat is the main difference between localStorage and sessionStorageLocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.⬆ Back to TopHow do you access web storageThe Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(window.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local).For example, you can read and write on local storage objects as belowlocalStorage.setItem(\""logo\"", document.getElementById(\""logo\"").value);localStorage.getItem(\""logo\"");⬆ Back to TopWhat are the methods available on session storageThe session storage provided methods for reading, writing and clearing the session data// Save data to sessionStoragesessionStorage.setItem(\""key\"", \""value\"");// Get saved data from sessionStoragelet data = sessionStorage.getItem(\""key\"");// Remove saved data from sessionStoragesessionStorage.removeItem(\""key\"");// Remove all saved data from sessionStoragesessionStorage.clear();⬆ Back to TopWhat is a storage event and its event handlerThe StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events.The syntax would be as belowwindow.onstorage = functionRef;Let's take the example usage of onstorage event handler which logs the storage key and it's valueswindow.onstorage = function (e) {  console.log(    \""The \"" +      e.key +      \"" key has been changed from \"" +      e.oldValue +      \"" to \"" +      e.newValue +      \"".\""  );};⬆ Back to TopWhy do you need web storageWeb storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.⬆ Back to TopHow do you check web storage browser supportYou need to check browser support for localStorage and sessionStorage before using web storage,if (typeof Storage !== \""undefined\"") {  // Code for localStorage/sessionStorage.} else {  // Sorry! No Web Storage support..}⬆ Back to TopHow do you check web workers browser supportYou need to check browser support for web workers before using itif (typeof Worker !== \""undefined\"") {  // code for Web worker support.} else {  // Sorry! No Web Worker support..}⬆ Back to TopGive an example of a web workerYou need to follow below steps to start using web workers for counting exampleCreate a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.jslet i = 0;function timedCount() {  i = i + 1;  postMessage(i);  setTimeout(\""timedCount()\"", 500);}timedCount();Here postMessage() method is used to post a message back to the HTML pageCreate a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.jsif (typeof w == \""undefined\"") {  w = new Worker(\""counter.js\"");}and we can receive messages from web workerw.onmessage = function (event) {  document.getElementById(\""message\"").innerHTML = event.data;};Terminate a Web Worker:Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.w.terminate();Reuse the Web Worker: If you set the worker variable to undefined you can reuse the codew = undefined;⬆ Back to TopWhat are the restrictions of web workers on DOMWebWorkers don't have access to below javascript objects since they are defined in an external filesWindow objectDocument objectParent object⬆ Back to TopWhat is a promiseA promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.The syntax of Promise creation looks like below,const promise = new Promise(function (resolve, reject) {  // promise description});The usage of a promise would be as below,const promise = new Promise(  (resolve) => {    setTimeout(() => {      resolve(\""I'm a Promise!\"");    }, 5000);  },  (reject) => {});promise.then((value) => console.log(value));The action flow of a promise will be as below,⬆ Back to TopWhy do you need a promisePromises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.⬆ Back to TopWhat are the three states of promisePromises have three states:Pending: This is an initial state of the Promise before an operation beginsFulfilled: This state indicates that the specified operation was completed.Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.⬆ Back to TopWhat is a callback functionA callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action.Let's take a simple example of how to use callback functionfunction callbackFunction(name) {  console.log(\""Hello \"" + name);}function outerFunction(callback) {  let name = prompt(\""Please enter your name.\"");  callback(name);}outerFunction(callbackFunction);⬆ Back to TopWhy do we need callbacksThe callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events.Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.function firstFunction() {  // Simulate a code delay  setTimeout(function () {    console.log(\""First function called\"");  }, 1000);}function secondFunction() {  console.log(\""Second function called\"");}firstFunction();secondFunction();Output;// Second function called// First function calledAs observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.⬆ Back to TopWhat is a callback hellCallback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,async1(function(){    async2(function(){        async3(function(){            async4(function(){                ....            });        });    });});⬆ Back to TopWhat are server-sent eventsServer-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.⬆ Back to TopHow do you receive server-sent event notificationsThe EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,if (typeof EventSource !== \""undefined\"") {  var source = new EventSource(\""sse_generator.js\"");  source.onmessage = function (event) {    document.getElementById(\""output\"").innerHTML += event.data + \""<br>\"";  };}⬆ Back to TopHow do you check browser support for server-sent eventsYou can perform browser support for server-sent events before using it as below,if (typeof EventSource !== \""undefined\"") {  // Server-sent events supported. Let's have some code here!} else {  // No server-sent events supported}⬆ Back to TopWhat are the events available for server sent eventsBelow are the list of events available for server sent eventsEventDescriptiononopenIt is used when a connection to the server is openedonmessageThis event is used when a message is receivedonerrorIt happens when an error occurs⬆ Back to TopWhat are the main rules of promiseA promise must follow a specific set of rules:A promise is an object that supplies a standard-compliant .then() methodA pending promise may transition into either fulfilled or rejected stateA fulfilled or rejected promise is settled and it must not transition into any other state.Once a promise is settled, the value must not change.⬆ Back to TopWhat is callback in callbackYou can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.loadScript(\""/script1.js\"", function (script) {  console.log(\""first script is loaded\"");  loadScript(\""/script2.js\"", function (script) {    console.log(\""second script is loaded\"");    loadScript(\""/script3.js\"", function (script) {      console.log(\""third script is loaded\"");      // after all scripts are loaded    });  });});⬆ Back to TopWhat is promise chainingThe process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,new Promise(function (resolve, reject) {  setTimeout(() => resolve(1), 1000);})  .then(function (result) {    console.log(result); // 1    return result * 2;  })  .then(function (result) {    console.log(result); // 2    return result * 3;  })  .then(function (result) {    console.log(result); // 6    return result * 4;  });In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,The initial promise resolves in 1 second,After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2.After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3.Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.⬆ Back to TopWhat is promise.allPromise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,Promise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))Note: Remember that the order of the promises(output the result) is maintained as per input order.⬆ Back to TopWhat is the purpose of the race method in promisePromise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved firstvar promise1 = new Promise(function (resolve, reject) {  setTimeout(resolve, 500, \""one\"");});var promise2 = new Promise(function (resolve, reject) {  setTimeout(resolve, 100, \""two\"");});Promise.race([promise1, promise2]).then(function (value) {  console.log(value); // \""two\"" // Both promises will resolve, but promise2 is faster});⬆ Back to TopWhat is a strict mode in javascriptStrict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression \""use strict\""; instructs the browser to use the javascript code in the Strict mode.⬆ Back to TopWhy do you need strict modeStrict mode is useful to write \""secure\"" JavaScript by notifying \""bad syntax\"" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.⬆ Back to TopHow do you declare strict modeThe strict mode is declared by adding \""use strict\""; to the beginning of a script or a function.If declared at the beginning of a script, it has global scope.\""use strict\"";x = 3.14; // This will cause an error because x is not declaredand if you declare inside a function, it has local scopex = 3.14; // This will not cause an error.myFunction();function myFunction() {  \""use strict\"";  y = 3.14; // This will cause an error}⬆ Back to TopWhat is the purpose of double exclamationThe double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true.For example, you can test IE version using this expression as below,let isIE8 = false;isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);console.log(isIE8); // returns true or falseIf you don't use this expression then it returns the original value.console.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or nullNote: The expression !! is not an operator, but it is just twice of ! operator.⬆ Back to TopWhat is the purpose of the delete operatorThe delete keyword is used to delete the property as well as its value.var user = { name: \""John\"", age: 20 };delete user.age;console.log(user); // {name: \""John\""}⬆ Back to TopWhat is typeof operatorYou can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.typeof \""John Abraham\""; // Returns \""string\""typeof (1 + 2); // Returns \""number\""typeof [1, 2, 3] // Returns \""object\"" because all arrays are also objects⬆ Back to TopWhat is undefined propertyThe undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.var user; // Value is undefined, type is undefinedconsole.log(typeof user); //undefinedAny variable can be emptied by setting the value to undefined.user = undefined;⬆ Back to TopWhat is null valueThe value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object.You can empty the variable by setting the value to null.var user = null;console.log(typeof user); //object⬆ Back to TopWhat is the difference between null and undefinedBelow are the main differences between null and undefined,NullUndefinedIt is an assignment value which indicates that variable points to no object.It is not an assignment value where a variable has been declared but has not yet been assigned a value.Type of null is objectType of undefined is undefinedThe null value is a primitive value that represents the null, empty, or non-existent reference.The undefined value is a primitive value used when a variable has not been assigned a value.Indicates the absence of a value for a variableIndicates absence of variable itselfConverted to zero (0) while performing primitive operationsConverted to NaN while performing primitive operations⬆ Back to TopWhat is evalThe eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.console.log(eval(\""1 + 2\"")); //  3⬆ Back to TopWhat is the difference between window and documentBelow are the main differences between window and document,WindowDocumentIt is the root level element in any web pageIt is the direct child of the window object. This is also known as Document Object Model(DOM)By default window object is available implicitly in the pageYou can access it via window.document or document.It has methods like alert(), confirm() and properties like document, locationIt provides methods like getElementById, getElementsByTagName, createElement etc⬆ Back to TopHow do you access history in javascriptThe window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.function goBack() {  window.history.back();}function goForward() {  window.history.forward();}Note: You can also access history without window prefix.⬆ Back to TopHow do you detect caps lock key turned on or notThe mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.Let's take an input element to detect the CapsLock on/off behavior with an example,<input type=\""password\"" onmousedown=\""enterInput(event)\"" /><p id=\""feedback\""></p><script>  function enterInput(e) {    var flag = e.getModifierState(\""CapsLock\"");    if (flag) {      document.getElementById(\""feedback\"").innerHTML = \""CapsLock activated\"";    } else {      document.getElementById(\""feedback\"").innerHTML =        \""CapsLock not activated\"";    }  }</script>⬆ Back to TopWhat is isNaNThe isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.isNaN(\""Hello\""); //trueisNaN(\""100\""); //false⬆ Back to TopWhat are the differences between undeclared and undefined variablesBelow are the major differences between undeclared(not defined) and undefined variables,undeclaredundefinedThese variables do not exist in a program and are not declaredThese variables declared in the program but have not assigned any valueIf you try to read the value of an undeclared variable, then a runtime error is encounteredIf you try to read the value of an undefined variable, an undefined value is returned.⬆ Back to TopWhat are global variablesGlobal variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variablemsg = \""Hello\""; // var is missing, it becomes global variable⬆ Back to TopWhat are the problems with global variablesThe problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.⬆ Back to TopWhat is NaN propertyThe NaN property is a global property that represents \""Not-a-Number\"" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few casesMath.sqrt(-1);parseInt(\""Hello\"");⬆ Back to TopWhat is the purpose of isFinite functionThe isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.isFinite(Infinity); // falseisFinite(NaN); // falseisFinite(-Infinity); // falseisFinite(100); // true⬆ Back to TopWhat is an event flowEvent flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.There are two ways of event flowTop to Bottom(Event Capturing)Bottom to Top (Event Bubbling)⬆ Back to TopWhat is event bubblingEvent bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.⬆ Back to TopWhat is event capturingEvent capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.⬆ Back to TopHow do you submit a form using JavaScriptYou can submit a form using document.forms[0].submit(). All the form input's information is submitted using onsubmit event handlerfunction submit() {  document.forms[0].submit();}⬆ Back to TopHow do you find operating system detailsThe window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property,console.log(navigator.platform);⬆ Back to TopWhat is the difference between document load and DOMContentLoaded eventsThe DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).⬆ Back to TopWhat is the difference between native, host and user objectsNative objects are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.Host objects are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects.User objects are objects defined in the javascript code. For example, User objects created for profile information.⬆ Back to TopWhat are the tools or techniques used for debugging JavaScript codeYou can use below tools or techniques for debugging javascriptChrome Devtoolsdebugger statementGood old console.log statement⬆ Back to TopWhat are the pros and cons of promises over callbacksBelow are the list of pros and cons of promises over callbacks,Pros:It avoids callback hell which is unreadableEasy to write sequential asynchronous code with .then()Easy to write parallel asynchronous code with Promise.all()Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)Cons:It makes little complex codeYou need to load a polyfill if ES6 is not supported⬆ Back to TopWhat is the difference between an attribute and a propertyAttributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes type and value,<input type=\""text\"" value=\""Name:\"">You can retrieve the attribute value as below,const input = document.querySelector(\""input\"");console.log(input.getAttribute(\""value\"")); // Good morningconsole.log(input.value); // Good morningAnd after you change the value of the text field to \""Good evening\"", it becomes likeconsole.log(input.getAttribute(\""value\"")); // Good eveningconsole.log(input.value); // Good evening⬆ Back to TopWhat is same-origin policyThe same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).⬆ Back to TopWhat is the purpose of void 0Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=\""JavaScript:Void(0);\"" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression.For example, the below link notify the message without reloading the page<a href=\""JavaScript:void(0);\"" onclick=\""alert('Well done!')\"">  Click Me!</a>⬆ Back to TopIs JavaScript a compiled or interpreted languageJavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.⬆ Back to TopIs JavaScript a case-sensitive languageYes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any other identifiers must always be typed with a consistent capitalization of letters.⬆ Back to TopIs there any relation between Java and JavaScriptNo, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).⬆ Back to TopWhat are eventsEvents are \""things\"" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on these events. Some of the examples of HTML events are,Web page has finished loadingInput field was changedButton was clickedLet's describe the behavior of click event for button element,<!doctype html><html> <head>   <script>     function greeting() {       alert('Hello! Good morning');     }   </script> </head> <body>   <button type=\""button\"" onclick=\""greeting()\"">Click me</button> </body></html>⬆ Back to TopWho created javascriptJavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name Mocha, but later the language was officially called LiveScript when it first shipped in beta releases of Netscape.⬆ Back to TopWhat is the use of preventDefault methodThe preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.document  .getElementById(\""link\"")  .addEventListener(\""click\"", function (event) {    event.preventDefault();  });Note: Remember that not all events are cancelable.⬆ Back to TopWhat is the use of stopPropagation methodThe stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)<p>Click DIV1 Element</p><div onclick=\""secondFunc()\"">DIV 2  <div onclick=\""firstFunc(event)\"">DIV 1</div></div><script>function firstFunc(event) {  alert(\""DIV 1\"");  event.stopPropagation();}function secondFunc() {  alert(\""DIV 2\"");}</script>⬆ Back to TopWhat are the steps involved in return false usageThe return false statement in event handlers performs the below steps,First it stops the browser's default action or behaviour.It prevents the event from propagating the DOMStops callback execution and returns immediately when called.⬆ Back to TopWhat is BOMThe Browser Object Model (BOM) allows JavaScript to \""talk to\"" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.⬆ Back to TopWhat is the use of setTimeoutThe setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,setTimeout(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhat is the use of setIntervalThe setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method,setInterval(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhy is JavaScript treated as Single threadedJavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.⬆ Back to TopWhat is an event delegationEvent delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.For example, if you wanted to detect field changes in inside a specific form, you can use event delegation technique,var form = document.querySelector(\""#registration-form\"");// Listen for changes to fields inside the formform.addEventListener(  \""input\"",  function (event) {    // Log the field that was changed    console.log(event.target);  },  false);⬆ Back to TopWhat is ECMAScriptECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.⬆ Back to TopWhat is JSONJSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.⬆ Back to TopWhat are the syntax rules of JSONBelow are the list of syntax rules of JSONThe data is in name/value pairsThe data is separated by commasCurly braces hold objectsSquare brackets hold arrays⬆ Back to TopWhat is the purpose JSON stringifyWhen sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.var userJSON = { name: \""John\"", age: 31 };var userString = JSON.stringify(userJSON);console.log(userString); //\""{\""name\"":\""John\"",\""age\"":31}\""⬆ Back to TopHow do you parse JSON stringWhen receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.var userString = '{\""name\"":\""John\"",\""age\"":31}';var userJSON = JSON.parse(userString);console.log(userJSON); // {name: \""John\"", age: 31}⬆ Back to TopWhy do you need JSONWhen exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.⬆ Back to TopWhat are PWAsProgressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.⬆ Back to TopWhat is the purpose of clearTimeout methodThe clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg =setTimeout(greeting, 3000);}function stop() {    clearTimeout(msg);}</script>⬆ Back to TopWhat is the purpose of clearInterval methodThe clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg = setInterval(greeting, 3000);}function stop() {    clearInterval(msg);}</script>⬆ Back to TopHow do you redirect new page in javascriptIn vanilla javascript, you can redirect to a new page using the location property of window object. The syntax would be as follows,function redirect() {  window.location.href = \""newPage.html\"";}⬆ Back to TopHow do you check whether a string contains a substringThere are 3 possible ways to check whether a string contains a substring or not,Using includes: ES6 provided String.prototype.includes method to test a string contains a substringvar mainString = \""hello\"",  subString = \""hell\"";mainString.includes(subString);Using indexOf: In an ES5 or older environment, you can use String.prototype.indexOf which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.var mainString = \""hello\"",  subString = \""hell\"";mainString.indexOf(subString) !== -1;Using RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressionsvar mainString = \""hello\"",  regex = /hell/;regex.test(mainString);⬆ Back to TopHow do you validate an email in javascriptYou can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.function validateEmail(email) {  var re =    /^(([^<>()\\[\\]\\\\.,;:\\s@\""]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\""]+)*)|(\"".+\""))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;  return re.test(String(email).toLowerCase());}⬆ Back to TopThe above regular expression accepts unicode characters.How do you get the current url with javascriptYou can use window.location.href expression to get the current url path and you can use the same expression for updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.console.log(\""location.href\"", window.location.href); // Returns full URL⬆ Back to TopWhat are the various url properties of location objectThe below Location object properties can be used to access URL components of the page,href - The entire URLprotocol - The protocol of the URLhost - The hostname and port of the URLhostname - The hostname of the URLport - The port number in the URLpathname - The path name of the URLsearch - The query portion of the URLhash - The anchor portion of the URL⬆ Back to TopHow do get query string values in javascriptYou can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string,const urlParams = new URLSearchParams(window.location.search);const clientCode = urlParams.get(\""clientCode\"");⬆ Back to TopHow do you check if a key exists in an objectYou can check whether a key exists in an object or not using three approaches,Using in operator: You can use the in operator whether a key exists in an object or not\""key\"" in obj;and If you want to check if a key doesn't exist, remember to use parenthesis,!(\""key\"" in obj);Using hasOwnProperty method: You can use hasOwnProperty to particularly test for properties of the object instance (and not inherited properties)obj.hasOwnProperty(\""key\""); // trueUsing undefined comparison: If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.const user = {  name: \""John\"",};console.log(user.name !== undefined); // trueconsole.log(user.nickName !== undefined); // false⬆ Back to TopHow do you loop through or enumerate javascript objectYou can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using hasOwnProperty method.var object = {  k1: \""value1\"",  k2: \""value2\"",  k3: \""value3\"",};for (var key in object) {  if (object.hasOwnProperty(key)) {    console.log(key + \"" -> \"" + object[key]); // k1 -> value1 ...  }}⬆ Back to TopHow do you test for an empty objectThere are different solutions based on ECMAScript versionsUsing Object entries(ECMA 7+): You can use object entries length along with constructor type.Object.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing Object keys(ECMA 5+): You can use object keys length along with constructor type.Object.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing for-in with hasOwnProperty(Pre-ECMA 5): You can use a for-in loop along with hasOwnProperty.function isEmpty(obj) {  for (var prop in obj) {    if (obj.hasOwnProperty(prop)) {      return false;    }  }  return JSON.stringify(obj) === JSON.stringify({});}⬆ Back to TopWhat is an arguments objectThe arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function,function sum() {  var total = 0;  for (var i = 0, len = arguments.length; i < len; ++i) {    total += arguments[i];  }  return total;}sum(1, 2, 3); // returns 6Note: You can't apply array methods on arguments object. But you can convert into a regular array as below.var argsArray = Array.prototype.slice.call(arguments);⬆ Back to TopHow do you make first letter of the string in an uppercaseYou can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.function capitalizeFirstLetter(string) {  return string.charAt(0).toUpperCase() + string.slice(1);}⬆ Back to TopWhat are the pros and cons of for loopThe for-loop is a commonly used iteration syntax in javascript. It has both pros and consProsWorks on every environmentYou can use break and continue flow control statementsConsToo verboseImperativeYou might face one-by-off errors⬆ Back to TopHow do you display the current date in javascriptYou can use new Date() to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyyvar today = new Date();var dd = String(today.getDate()).padStart(2, \""0\"");var mm = String(today.getMonth() + 1).padStart(2, \""0\""); //January is 0!var yyyy = today.getFullYear();today = mm + \""/\"" + dd + \""/\"" + yyyy;document.write(today);⬆ Back to TopHow do you compare two date objectsYou need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !== operators)var d1 = new Date();var d2 = new Date(d1);console.log(d1.getTime() === d2.getTime()); //Trueconsole.log(d1 === d2); // False⬆ Back to TopHow do you check if a string starts with another stringYou can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage,\""Good morning\"".startsWith(\""Good\""); // true\""Good morning\"".startsWith(\""morning\""); // false⬆ Back to TopHow do you trim a string in javascriptJavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.\""  Hello World   \"".trim(); //Hello WorldIf your browser(<IE9) doesn't support this method then you can use below polyfill.if (!String.prototype.trim) {  (function () {    // Make sure we trim BOM and NBSP    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;    String.prototype.trim = function () {      return this.replace(rtrim, \""\"");    };  })();}⬆ Back to TopHow do you add a key value pair in javascriptThere are two possible solutions to add new properties to an object. Let's take a simple object to explain these solutions.var object = {  key1: value1,  key2: value2,};Using dot notation: This solution is useful when you know the name of the propertyobject.key3 = \""value3\"";Using square bracket notation: This solution is useful when the name of the property is dynamically determined.obj[\""key3\""] = \""value3\"";⬆ Back to TopIs the !-- notation represents a special operatorNo,that's not a special operator. But it is a combination of 2 standard operators one after the other,A logical not (!)A prefix decrement (--)At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.⬆ Back to TopHow do you assign default values to variablesYou can use the logical or operator || in an assignment expression to provide a default value. The syntax looks like as below,var a = b || c;As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'.⬆ Back to TopHow do you define multiline stringsYou can define multiline string literals using the '\\' character followed by line terminator.var str =  \""This is a \\very lengthy \\sentence!\"";But if you have a space after the '\\' character, the code will look exactly the same, but it will raise a SyntaxError.⬆ Back to TopWhat is an app shell modelAn application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.⬆ Back to TopCan we define properties for functionsYes, We can define properties for functions because functions are also objects.fn = function (x) {  //Function code goes here};fn.name = \""John\"";fn.profile = function (y) {  //Profile code goes here};⬆ Back to TopWhat is the way to find the number of parameters expected by a functionYou can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers,function sum(num1, num2, num3, num4) {  return num1 + num2 + num3 + num4;}sum.length; // 4 is the number of parameters expected.⬆ Back to TopWhat is a polyfillA polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.⬆ Back to TopWhat are break and continue statementsThe break statement is used to \""jump out\"" of a loop. i.e, It breaks the loop and continues executing the code after the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    break;  }  text += \""Number: \"" + i + \""<br>\"";}The continue statement is used to \""jump over\"" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    continue;  }  text += \""Number: \"" + i + \""<br>\"";}⬆ Back to TopWhat are js labelsThe label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,var i, j;loop1: for (i = 0; i < 3; i++) {  loop2: for (j = 0; j < 3; j++) {    if (i === j) {      continue loop1;    }    console.log(\""i = \"" + i + \"", j = \"" + j);  }}// Output is://   \""i = 1, j = 0\""//   \""i = 2, j = 0\""//   \""i = 2, j = 1\""⬆ Back to TopWhat are the benefits of keeping declarations at the topIt is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,Gives cleaner codeIt provides a single place to look for local variablesEasy to avoid unwanted global variablesIt reduces the possibility of unwanted re-declarations⬆ Back to TopWhat are the benefits of initializing variablesIt is recommended to initialize variables because of the below benefits,It gives cleaner codeIt provides a single place to initialize variablesAvoid undefined values in the code⬆ Back to TopWhat are the recommendations to create new objectIt is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.Assign {} instead of new Object()Assign \""\"" instead of new String()Assign 0 instead of new Number()Assign false instead of new Boolean()Assign [] instead of new Array()Assign /()/ instead of new RegExp()Assign function (){} instead of new Function()You can define them as an example,var v1 = {};var v2 = \""\"";var v3 = 0;var v4 = false;var v5 = [];var v6 = /()/;var v7 = function () {};⬆ Back to TopHow do you define JSON arraysJSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,\""users\"":[  {\""firstName\"":\""John\"", \""lastName\"":\""Abrahm\""},  {\""firstName\"":\""Anna\"", \""lastName\"":\""Smith\""},  {\""firstName\"":\""Shane\"", \""lastName\"":\""Warn\""}]⬆ Back to TopHow do you generate random integersYou can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,Math.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10Math.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100Note: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)⬆ Back to TopCan you write a random integers function to print integers with in a rangeYes, you can create a proper random function to return a random number between min and max (both included)function randomInteger(min, max) {  return Math.floor(Math.random() * (max - min + 1)) + min;}randomInteger(1, 100); // returns a random integer from 1 to 100randomInteger(1, 1000); // returns a random integer from 1 to 1000⬆ Back to TopWhat is tree shakingTree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup.⬆ Back to TopWhat is the need of tree shakingTree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.⬆ Back to TopIs it recommended to use evalNo, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.⬆ Back to TopWhat is a Regular ExpressionA regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now,/pattern/modifiers;For example, the regular expression or search pattern with case-insensitive username would be,/John/i;⬆ Back to TopWhat are the string methods available in Regular expressionRegular Expressions has two string methods: search() and replace().The search() method uses an expression to search for a match, and returns the position of the match.var msg = \""Hello John\"";var n = msg.search(/John/i); // 6The replace() method is used to return a modified string where the pattern is replaced.var msg = \""Hello John\"";var n = msg.replace(/John/i, \""Buttler\""); // Hello Buttler⬆ Back to TopWhat are modifiers in regular expressionModifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,ModifierDescriptioniPerform case-insensitive matchinggPerform a global match rather than stops at first matchmPerform multiline matchingLet's take an example of global modifier,var text = \""Learn JS one by one\"";var pattern = /one/g;var result = text.match(pattern); // one,one⬆ Back to TopWhat are regular expression patternsRegular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,Brackets: These are used to find a range of characters.For example, below are some use cases,[abc]: Used to find any of the characters between the brackets(a,b,c)[0-9]: Used to find any of the digits between the brackets(a|b): Used to find any of the alternatives separated with |Metacharacters: These are characters with a special meaningFor example, below are some use cases,\\d: Used to find a digit\\s: Used to find a whitespace character\\b: Used to find a match at the beginning or ending of a wordQuantifiers: These are useful to define quantitiesFor example, below are some use cases,n+: Used to find matches for any string that contains at least one nn*: Used to find matches for any string that contains zero or more occurrences of nn?: Used to find matches for any string that contains zero or one occurrences of n⬆ Back to TopWhat is a RegExp objectRegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object,var regexp = new RegExp(\""\\\\w+\"");console.log(regexp);// expected output: /\\w+/⬆ Back to TopHow do you search a string for a patternYou can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.var pattern = /you/;console.log(pattern.test(\""How are you?\"")); //true⬆ Back to TopWhat is the purpose of exec methodThe purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.var pattern = /you/;console.log(pattern.exec(\""How are you?\"")); //[\""you\"", index: 8, input: \""How are you?\"", groups: undefined]⬆ Back to TopHow do you change the style of a HTML elementYou can change inline style or classname of a HTML element using javascriptUsing style property: You can modify inline style using style propertydocument.getElementById(\""title\"").style.fontSize = \""30px\"";Using ClassName property: It is easy to modify element class using className propertydocument.getElementById(\""title\"").className = \""custom-title\"";⬆ Back to TopWhat would be the result of 1+2+'3'The output is going to be 33. Since 1 and 2 are numeric values, the result of the first two digits is going to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3 and string type value 3 is just going to be a concatenation value 33.⬆ Back to TopWhat is a debugger statementThe debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.For example, in the below function a debugger statement has been inserted. Soexecution is paused at the debugger statement just like a breakpoint in the script source.function getProfile() {  // code goes here  debugger;  // code goes here}⬆ Back to TopWhat is the purpose of breakpoints in debuggingYou can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.⬆ Back to TopCan I use reserved words as identifiersNo, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,var else = \""hello\""; // Uncaught SyntaxError: Unexpected token else⬆ Back to TopHow do you detect a mobile browserYou can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.window.mobilecheck = function () {  var mobileCheck = false;  (function (a) {    if (      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(        a      ) ||      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(        a.substr(0, 4)      )    )      mobileCheck = true;  })(navigator.userAgent || navigator.vendor || window.opera);  return mobileCheck;};⬆ Back to TopHow do you detect a mobile browser without regexpYou can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,function detectmob() {  if (    navigator.userAgent.match(/Android/i) ||    navigator.userAgent.match(/webOS/i) ||    navigator.userAgent.match(/iPhone/i) ||    navigator.userAgent.match(/iPad/i) ||    navigator.userAgent.match(/iPod/i) ||    navigator.userAgent.match(/BlackBerry/i) ||    navigator.userAgent.match(/Windows Phone/i)  ) {    return true;  } else {    return false;  }}⬆ Back to TopHow do you get the image width and height using JSYou can programmatically get the image and check the dimensions(width and height) using Javascript.var img = new Image();img.onload = function () {  console.log(this.width + \""x\"" + this.height);};img.src = \""http://www.google.com/intl/en_ALL/images/logo.gif\"";⬆ Back to TopHow do you make synchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScriptfunction httpGet(theUrl) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.open(\""GET\"", theUrl, false); // false for synchronous request  xmlHttpReq.send(null);  return xmlHttpReq.responseText;}⬆ Back to TopHow do you make asynchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.function httpGetAsync(theUrl, callback) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.onreadystatechange = function () {    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)      callback(xmlHttpReq.responseText);  };  xmlHttp.open(\""GET\"", theUrl, true); // true for asynchronous  xmlHttp.send(null);}⬆ Back to TopHow do you convert date to another timezone in javascriptYou can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below,console.log(event.toLocaleString(\""en-GB\"", { timeZone: \""UTC\"" })); //29/06/2019, 09:56:00⬆ Back to TopWhat are the properties used to get size of windowYou can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document,var width =  window.innerWidth ||  document.documentElement.clientWidth ||  document.body.clientWidth;var height =  window.innerHeight ||  document.documentElement.clientHeight ||  document.body.clientHeight;⬆ Back to TopWhat is a conditional operator in javascriptThe conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.var isAuthenticated = false;console.log(  isAuthenticated ? \""Hello, welcome\"" : \""Sorry, you are not authenticated\""); //Sorry, you are not authenticated⬆ Back to TopCan you apply chaining on conditional operatorYes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is going to be as below,function traceValue(someParam) {  return condition1    ? value1    : condition2    ? value2    : condition3    ? value3    : value4;}// The above conditional operator is equivalent to:function traceValue(someParam) {  if (condition1) {    return value1;  } else if (condition2) {    return value2;  } else if (condition3) {    return value3;  } else {    return value4;  }}⬆ Back to TopWhat are the ways to execute javascript after page loadYou can execute javascript after page load in many different ways,window.onload:window.onload = function ...document.onload:document.onload = function ...body onload:<body onload=\""script();\"">⬆ Back to TopWhat is the difference between proto and prototypeThe __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with new.new Employee().__proto__ === Employee.prototype;new Employee().prototype === undefined;There are few more differences,featurePrototypeprotoAccessAll the function constructors have prototype properties.All the objects have __proto__ propertyPurposeUsed to reduce memory wastage with a single copy of functionUsed in lookup chain to resolve methods, constructors etc.ECMAScriptIntroduced in ES6Introduced in ES5UsageFrequently usedRarely used⬆ Back to TopGive an example where do you really need semicolonIt is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws an error \"".. is not a function\"" at runtime due to missing semicolon.// define a functionvar fn = (function () {  //...})(  // semicolon missing at this line  // then execute some code inside a closure  function () {    //...  })();and it will be interpreted asvar fn = (function () {  //...})(function () {  //...})();In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a \""... is not a function\"" error at runtime.⬆ Back to TopWhat is a freeze methodThe freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing properties. i.e, It returns the passed object and does not create a frozen copy.const obj = {  prop: 100,};Object.freeze(obj);obj.prop = 200; // Throws an error in strict modeconsole.log(obj.prop); //100Remember freezing is only applied to the top-level properties in objects but not for nested objects.For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.const user = {  name: 'John',  employment: {    department: 'IT'  }};Object.freeze(user);user.employment.department = 'HR';Note: It causes a TypeError if the argument passed is not an object.⬆ Back to TopWhat is the purpose of freeze methodBelow are the main benefits of using freeze method,It is used for freezing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhy do I need to use freeze methodIn the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the final keyword which is used in various languages.⬆ Back to TopHow do you detect a browser language preferenceYou can use navigator object to detect a browser language preference as below,var language =  (navigator.languages && navigator.languages[0]) || // Chrome / Firefox  navigator.language || // All browsers  navigator.userLanguage; // IE <= 10console.log(language);⬆ Back to TopHow to convert string to title case with javascriptTitle case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,function toTitleCase(str) {  return str.replace(/\\w\\S*/g, function (txt) {    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();  });}toTitleCase(\""good morning john\""); // Good Morning John⬆ Back to TopHow do you detect javascript disabled in the pageYou can use the <noscript> tag to detect javascript disabled or not. The code block inside <noscript> gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.<script type=\""javascript\"">    // JS related code goes here</script><noscript>    <a href=\""next_page.html?noJS=true\"">JavaScript is disabled in the page. Please click Next Page</a></noscript>⬆ Back to TopWhat are various operators supported by javascriptAn operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,Arithmetic Operators: Includes + (Addition),– (Subtraction), * (Multiplication), / (Division), % (Modulus), + + (Increment) and – – (Decrement)Comparison Operators: Includes = =(Equal),!= (Not Equal), ===(Equal with type), > (Greater than),> = (Greater than or Equal to),< (Less than),<= (Less than or Equal to)Logical Operators: Includes &&(Logical AND),||(Logical OR),!(Logical NOT)Assignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), – = (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)Ternary Operators: It includes conditional(: ?) Operatortypeof Operator: It uses to find type of variable. The syntax looks like typeof variable⬆ Back to TopWhat is a rest parameterRest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,function f(a, b, ...theArgs) {  // ...}For example, let's take a sum example to calculate on dynamic number of parameters,function total(…args){let sum = 0;for(let i of args){sum+=i;}return sum;}console.log(fun(1,2)); //3console.log(fun(1,2,3)); //6console.log(fun(1,2,3,4)); //13console.log(fun(1,2,3,4,5)); //15Note: Rest parameter is added in ES2015 or ES6⬆ Back to TopWhat happens if you do not use rest parameter as a last argumentThe rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.function someFunc(a,…b,c){//You code goes herereturn;}⬆ Back to TopWhat are the bitwise operators available in javascriptBelow are the list of bitwise logical operators used in JavaScriptBitwise AND ( & )Bitwise OR ( | )Bitwise XOR ( ^ )Bitwise NOT ( ~ )Left Shift ( << )Sign Propagating Right Shift ( >> )Zero fill Right Shift ( >>> )⬆ Back to TopWhat is a spread operatorSpread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,function calculateSum(x, y, z) {  return x + y + z;}const numbers = [1, 2, 3];console.log(calculateSum(...numbers)); // 6⬆ Back to TopHow do you determine whether object is frozen or notObject.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,If it is not extensible.If all of its properties are non-configurable.If all its data properties are non-writable.The usage is going to be as follows,const object = {  property: \""Welcome JS world\"",};Object.freeze(object);console.log(Object.isFrozen(object));⬆ Back to TopHow do you determine two values same or not using objectThe Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,Object.is(\""hello\"", \""hello\""); // trueObject.is(window, window); // trueObject.is([], []); // falseTwo values are the same if one of the following holds:both undefinedboth nullboth true or both falseboth strings of the same length with the same characters in the same orderboth the same object (means both object have same reference)both numbers andboth +0both -0both NaNboth non-zero and both not NaN and both have the same value.⬆ Back to TopWhat is the purpose of using object is methodSome of the applications of Object's is method are follows,It is used for comparison of two strings.It is used for comparison of two numbers.It is used for comparing the polarity of two numbers.It is used for comparison of two objects.⬆ Back to TopHow do you copy properties from one object to otherYou can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the source objects. The syntax would be as below,Object.assign(target, ...sources);Let's take example with one source and one target object,const target = { a: 1, b: 2 };const source = { b: 3, c: 4 };const returnedTarget = Object.assign(target, source);console.log(target); // { a: 1, b: 3, c: 4 }console.log(returnedTarget); // { a: 1, b: 3, c: 4 }As observed in the above code, there is a common property(b) from source to target so it's value has been overwritten.⬆ Back to TopWhat are the applications of assign methodBelow are the some of main applications of Object.assign() method,It is used for cloning an object.It is used to merge objects with the same properties.⬆ Back to TopWhat is a proxy objectThe Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc. The syntax would be as follows,var p = new Proxy(target, handler);Let's take an example of proxy object,var handler = {  get: function (obj, prop) {    return prop in obj ? obj[prop] : 100;  },};var p = new Proxy({}, handler);p.a = 10;p.b = null;console.log(p.a, p.b); // 10, nullconsole.log(\""c\"" in p, p.c); // false, 100In the above code, it uses get handler which define the behavior of the proxy when an operation is performed on it⬆ Back to TopWhat is the purpose of seal methodThe Object.seal() method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. Let's see the below example to understand more about seal() methodconst object = {  property: \""Welcome JS world\"",};Object.seal(object);object.property = \""Welcome to object world\"";console.log(Object.isSealed(object)); // truedelete object.property; // You cannot delete when sealedconsole.log(object.property); //Welcome to object world⬆ Back to TopWhat are the applications of seal methodBelow are the main applications of Object.seal() method,It is used for sealing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhat are the differences between freeze and seal methodsIf an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.⬆ Back to TopHow do you determine if an object is sealed or notThe Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold trueIf it is not extensible.If all of its properties are non-configurable.If it is not removable (but not necessarily non-writable).Let's see it in the actionconst object = {  property: \""Hello, Good morning\"",};Object.seal(object); // Using seal() method to seal the objectconsole.log(Object.isSealed(object)); // checking whether the object is sealed or not⬆ Back to TopHow do you get enumerable key and value pairsThe Object.entries() method is used to return an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of object.entries() method in an example,const object = {  a: \""Good morning\"",  b: 100,};for (let [key, value] of Object.entries(object)) {  console.log(`${key}: ${value}`); // a: 'Good morning'  // b: 100}Note: The order is not guaranteed as object defined.⬆ Back to TopWhat is the main difference between Object.values and Object.entries methodThe Object.values() method's behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.const object = {  a: \""Good morning\"",  b: 100,};for (let value of Object.values(object)) {  console.log(`${value}`); // 'Good morning'  100;}⬆ Back to TopHow can you get the list of keys of any objectYou can use the Object.keys() method which is used to return an array of a given object's own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,const user = {  name: \""John\"",  gender: \""male\"",  age: 40,};console.log(Object.keys(user)); //['name', 'gender', 'age']⬆ Back to TopHow do you create an object with prototypeThe Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.const user = {  name: \""John\"",  printInfo: function () {    console.log(`My name is ${this.name}.`);  },};const admin = Object.create(user);admin.name = \""Nick\""; // Remember that \""name\"" is a property set on \""admin\"" but not on \""user\"" objectadmin.printInfo(); // My name is Nick⬆ Back to TopWhat is a WeakSetWeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,new WeakSet([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakSet();var user = {};ws.add(user);ws.has(user); // truews.delete(user); // removes user from the setws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakSet and SetThe main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it.Other differences are,Sets can store any value Whereas WeakSets can store only collections of objectsWeakSet does not have size property unlike SetWeakSet does not have methods such as clear, keys, values, entries, forEach.WeakSet is not iterable.⬆ Back to TopList down the collection of methods available on WeakSetBelow are the list of methods available on WeakSet,add(value): A new object is appended with the given value to the weaksetdelete(value): Deletes the value from the WeakSet collection.has(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.Let's see the functionality of all the above methods in an example,var weakSetObject = new WeakSet();var firstObject = {};var secondObject = {};// add(value)weakSetObject.add(firstObject);weakSetObject.add(secondObject);console.log(weakSetObject.has(firstObject)); //trueweakSetObject.delete(secondObject);⬆ Back to TopWhat is a WeakMapThe WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax is looking like as below,new WeakMap([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakMap();var user = {};ws.set(user);ws.has(user); // truews.delete(user); // removes user from the mapws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakMap and MapThe main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it.Other differences are,Maps can store any key type Whereas WeakMaps can store only collections of key objectsWeakMap does not have size property unlike MapWeakMap does not have methods such as clear, keys, values, entries, forEach.WeakMap is not iterable.⬆ Back to TopList down the collection of methods available on WeakMapBelow are the list of methods available on WeakMap,set(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.delete(key): Removes any value associated to the key.has(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.get(key): Returns the value associated to the key, or undefined if there is none.Let's see the functionality of all the above methods in an example,var weakMapObject = new WeakMap();var firstObject = {};var secondObject = {};// set(key, value)weakMapObject.set(firstObject, \""John\"");weakMapObject.set(secondObject, 100);console.log(weakMapObject.has(firstObject)); //trueconsole.log(weakMapObject.get(firstObject)); // JohnweakMapObject.delete(secondObject);⬆ Back to TopWhat is the purpose of unevalThe uneval() is an inbuilt function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let's see the below example to know more about it's functionality,var a = 1;uneval(a); // returns a String containing 1uneval(function user() {}); // returns \""(function user(){})\""⬆ Back to TopHow do you encode an URLThe encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ & = + $ #) characters.var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B⬆ Back to TopHow do you decode an URLThe decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8Btry {  console.log(decodeURI(encoded)); // \""https://mozilla.org/?x=шеллы\""} catch (e) {  // catches a malformed URI  console.error(e);}⬆ Back to TopHow do you print the contents of web pageThe window object provided a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an example,<input type=\""button\"" value=\""Print\"" onclick=\""window.print()\"" />Note: In most browsers, it will block while the print dialog is open.⬆ Back to TopWhat is the difference between uneval and evalThe uneval function returns the source of a given object; whereas the eval function does the opposite, by evaluating that source code in a different memory area. Let's see an example to clarify the difference,var msg = uneval(function greeting() {  return \""Hello, Good morning\"";});var greeting = eval(msg);greeting(); // returns \""Hello, Good morning\""⬆ Back to TopWhat is an anonymous functionAn anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,function (optionalParameters) {  //do something}const myFunction = function(){ //Anonymous function assigned to a variable  //do something};[1, 2, 3].map(function(element){ //Anonymous function used as a callback function  //do something});Let's see the above anonymous function in an example,var x = function (a, b) {  return a * b;};var z = x(5, 10);console.log(z); // 50⬆ Back to TopWhat is the precedence order between local and global variablesA local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.var msg = \""Good morning\"";function greeting() {  msg = \""Good Evening\"";  console.log(msg); // Good Evening}greeting();⬆ Back to TopWhat are javascript accessorsECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the get keyword whereas Setters uses the set keyword.var user = {  firstName: \""John\"",  lastName : \""Abraham\"",  language : \""en\"",  get lang() {    return this.language;  },  set lang(lang) {  this.language = lang;  }};console.log(user.lang); // getter access lang as enuser.lang = 'fr';console.log(user.lang); // setter used to set lang as fr⬆ Back to TopHow do you define property on Object constructorThe Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let's see an example to know how to define property,const newObject = {};Object.defineProperty(newObject, \""newProperty\"", {  value: 100,  writable: false,});console.log(newObject.newProperty); // 100newObject.newProperty = 200; // It throws an error in strict mode due to writable setting⬆ Back to TopWhat is the difference between get and definePropertyBoth have similar results until unless you use classes. If you use get the property will be defined on the prototype of the object whereas using Object.defineProperty() the property will be defined on the instance it is applied to.⬆ Back to TopWhat are the advantages of Getters and SettersBelow are the list of benefits of Getters and Setters,They provide simpler syntaxThey are used for defining computed properties, or accessors in JS.Useful to provide equivalence relation between properties and methodsThey can provide better data qualityUseful for doing things behind the scenes with the encapsulated logic.⬆ Back to TopCan I add getters and setters using defineProperty methodYes, You can use the Object.defineProperty() method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,var obj = { counter: 0 };// Define gettersObject.defineProperty(obj, \""increment\"", {  get: function () {    this.counter++;  },});Object.defineProperty(obj, \""decrement\"", {  get: function () {    this.counter--;  },});// Define settersObject.defineProperty(obj, \""add\"", {  set: function (value) {    this.counter += value;  },});Object.defineProperty(obj, \""subtract\"", {  set: function (value) {    this.counter -= value;  },});obj.add = 10;obj.subtract = 5;console.log(obj.increment); //6console.log(obj.decrement); //5⬆ Back to TopWhat is the purpose of switch-caseThe switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,switch (expression){    case value1:        statement1;        break;    case value2:        statement2;        break;    .    .    case valueN:        statementN;        break;    default:        statementDefault;}The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.⬆ Back to TopWhat are the conventions to be followed for the usage of switch caseBelow are the list of conventions should be taken care,The expression can be of type either number or string.Duplicate values are not allowed for the expression.The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.The break statement is used inside the switch to terminate a statement sequence.The break statement is optional. But if it is omitted, the execution will continue on into the next case.⬆ Back to TopWhat are primitive data typesA primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of primitive data types.stringnumberbooleannullundefinedbigintsymbol⬆ Back to TopWhat are the different ways to access object propertiesThere are 3 possible ways for accessing the property of an object.Dot notation: It uses dot for accessing the propertiesobjectName.property;Square brackets notation: It uses square brackets for property accessobjectName[\""property\""];Expression notation: It uses expression in the square bracketsobjectName[expression];⬆ Back to TopWhat are the function parameter rulesJavaScript functions follow below rules for parameters,The function definitions do not specify data types for parameters.Do not perform type checking on the passed arguments.Do not check the number of arguments received.i.e, The below function follows the above rules,function functionName(parameter1, parameter2, parameter3) {  console.log(parameter1); // 1}functionName(1);⬆ Back to TopWhat is an error objectAn error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,try {  greeting(\""Welcome\"");} catch (err) {  console.log(err.name + \""<br>\"" + err.message);}⬆ Back to TopWhen you get a syntax errorA SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax errortry {  eval(\""greeting('welcome)\""); // Missing ' will produce an error} catch (err) {  console.log(err.name);}⬆ Back to TopWhat are the different error names from error objectThere are 6 different types of error names returned from error object,Error NameDescriptionEvalErrorAn error has occurred in the eval() functionRangeErrorAn error has occurred with a number \""out of range\""ReferenceErrorAn error due to an illegal referenceSyntaxErrorAn error due to a syntax errorTypeErrorAn error due to a type errorURIErrorAn error due to encodeURI()⬆ Back to TopWhat are the various statements in error handlingBelow are the list of statements used in an error handling,try: This statement is used to test a block of code for errorscatch: This statement is used to handle the errorthrow: This statement is used to create custom errors.finally: This statement is used to execute code after try and catch regardless of the result.⬆ Back to TopWhat are the two types of loops in javascriptEntry Controlled loops: In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.Exit Controlled Loops: In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.⬆ Back to TopWhat is nodejsNode.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript engine and libuv library.⬆ Back to TopWhat is an Intl objectThe Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.⬆ Back to TopHow do you perform language specific date and time formattingYou can use the Intl.DateTimeFormat object which is a constructor for objects that enable language-sensitive date and time formatting. Let's see this behavior with an example,var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));console.log(new Intl.DateTimeFormat(\""en-GB\"").format(date)); // 07/08/2019console.log(new Intl.DateTimeFormat(\""en-AU\"").format(date)); // 07/08/2019⬆ Back to TopWhat is an IteratorAn iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a next() method which returns an object with two properties: value (the next value in the sequence) and done (which is true if the last value in the sequence has been consumed).⬆ Back to TopHow does synchronous iteration worksSynchronous iteration was introduced in ES6 and it works with below set of components,Iterable: It is an object which can be iterated over via a method whose key is Symbol.iterator.Iterator: It is an object returned by invoking [Symbol.iterator]() on an iterable. This iterator object wraps each iterated element in an object and returns it via next() method one by one.IteratorResult: It is an object returned by next() method. The object contains two properties; the value property contains an iterated element and the done property determines whether the element is the last element or not.Let's demonstrate synchronous iteration with an array as below,const iterable = [\""one\"", \""two\"", \""three\""];const iterator = iterable[Symbol.iterator]();console.log(iterator.next()); // { value: 'one', done: false }console.log(iterator.next()); // { value: 'two', done: false }console.log(iterator.next()); // { value: 'three', done: false }console.log(iterator.next()); // { value: 'undefined, done: true }⬆ Back to TopWhat is an event loopThe event loop is a process that continuously monitors both the call stack and the event queue and checks whether or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the event, and any additional events generated during the execution are added to the end of the event queue.Note: The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript is single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background.⬆ Back to TopWhat is call stackCall Stack is a data structure for javascript interpreters to keep track of function calls(creates execution context) in the program. It has two major actions,Whenever you call a function for its execution, you are pushing it to the stack.Whenever the execution is completed, the function is popped out of the stack.Let's take an example and it's state representation in a diagram formatfunction hungry() {  eatFruits();}function eatFruits() {  return \""I'm eating fruits\"";}// Invoke the `hungry` functionhungry();The above code processed in a call stack as below,Add the hungry() function to the call stack list and execute the code.Add the eatFruits() function to the call stack list and execute the code.Delete the eatFruits() function from our call stack list.Delete the hungry() function from the call stack list since there are no items anymore.⬆ Back to TopWhat is an event queueThe event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is also known as the Callback Queue or Macrotask Queue.Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of the promise is moved into the microtask queue).The event queue constantly checks whether or not the call stack is empty. Once the call stack is empty and there is a callback in the event queue, the event queue moves the callback into the call stack. If there is a callback in the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue.⬆ Back to TopWhat is a decoratorA decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define admin decorator for user class at design time,function admin(isAdmin) {   return function(target) {       target.isAdmin = isAdmin;   }}@admin(true)class User() {}console.log(User.isAdmin); //true @admin(false) class User() { } console.log(User.isAdmin); //false⬆ Back to TopWhat are the properties of Intl objectBelow are the list of properties available on Intl object,Collator: These are the objects that enable language-sensitive string comparison.DateTimeFormat: These are the objects that enable language-sensitive date and time formatting.ListFormat: These are the objects that enable language-sensitive list formatting.NumberFormat: Objects that enable language-sensitive number formatting.PluralRules: Objects that enable plural-sensitive formatting and language-specific rules for plurals.RelativeTimeFormat: Objects that enable language-sensitive relative time formatting.⬆ Back to TopWhat is an Unary operatorThe unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let's see this behavior in an action.var x = \""100\"";var y = +x;console.log(typeof x, typeof y); // string, numbervar a = \""Hello\"";var b = +a;console.log(typeof a, typeof b, b); // string, number, NaN⬆ Back to TopHow do you sort elements in an arrayThe sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage would be as below,var months = [\""Aug\"", \""Sep\"", \""Jan\"", \""June\""];months.sort();console.log(months); //  [\""Aug\"", \""Jan\"", \""June\"", \""Sep\""]⬆ Back to TopWhat is the purpose of compareFunction while sorting arraysThe compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. Let's take an example to see the usage of compareFunction,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);console.log(numbers); // [5, 4, 3, 2, 1]⬆ Back to TopHow do you reversing an arrayYou can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let's see the usage of reverse() method in an example,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);numbers.reverse();console.log(numbers); // [1, 2, 3, 4 ,5]⬆ Back to TopHow do you find min and max value in an arrayYou can use Math.min and Math.max methods on array variables to find the minimum and maximum elements within an array. Let's create two functions to find the min and max value with in an array,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  return Math.min.apply(null, arr);}function findMax(arr) {  return Math.max.apply(null, arr);}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopHow do you find min and max values without Math functionsYou can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let's create those functions to find min and max values,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  var length = arr.length;  var min = Infinity;  while (length--) {    if (arr[length] < min) {      min = arr[length];    }  }  return min;}function findMax(arr) {  var length = arr.length;  var max = -Infinity;  while (length--) {    if (arr[length] > max) {      max = arr[length];    }  }  return max;}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopWhat is an empty statement and purpose of itThe empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,// Initialize an array afor(let i=0; i < a.length; a[i++] = 0) ;⬆ Back to TopHow do you get metadata of a moduleYou can use the import.meta object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module's URL. In browsers, you might get different meta data than NodeJS.<script type=\""module\"" src=\""welcome-module.js\""></script>;console.log(import.meta); // { url: \""file:///home/user/welcome-module.js\"" }⬆ Back to TopWhat is a comma operatorThe comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,var x = 1;x = (x++, x);console.log(x); // 2⬆ Back to TopWhat is the advantage of a comma operatorIt is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a for loop. For example, the below for loop uses multiple expressions in a single location using comma operator,for (var a = 0, b =10; a <= 10; a++, b--)You can also use the comma operator in a return statement where it processes before returning.function myFunction() {  var a = 1;  return (a += 10), a; // 11}⬆ Back to TopWhat is typescriptTypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language. You can install it globally asnpm install -g typescriptLet's see a simple example of TypeScript usage,function greeting(name: string): string {  return \""Hello, \"" + name;}let user = \""Sudheer\"";console.log(greeting(user));The greeting method allows only string type as argument.⬆ Back to TopWhat are the differences between javascript and typescriptBelow are the list of differences between javascript and typescript,featuretypescriptjavascriptLanguage paradigmObject oriented programming languageScripting languageTyping supportSupports static typingIt has dynamic typingModulesSupportedNot supportedInterfaceIt has interfaces conceptDoesn't support interfacesOptional parametersFunctions support optional parametersNo support of optional parameters for functions⬆ Back to TopWhat are the advantages of typescript over javascriptBelow are some of the advantages of typescript over javascript,TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.⬆ Back to TopWhat is an object initializerAn object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.var initObject = { a: \""John\"", b: 50, c: {} };console.log(initObject.a); // John⬆ Back to TopWhat is a constructor methodThe constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,class Employee {  constructor() {    this.name = \""John\"";  }}var employeeObject = new Employee();console.log(employeeObject.name); // John⬆ Back to TopWhat happens if you write constructor more than once in a classThe \""constructor\"" in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a SyntaxError error. class Employee {   constructor() {     this.name = \""John\"";   }   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor     this.age = 30;   } } var employeeObject = new Employee(); console.log(employeeObject.name);⬆ Back to TopHow do you call the constructor of a parent classYou can use the super keyword to call the constructor of a parent class. Remember that super() must be called before using 'this' reference. Otherwise it will cause a reference error. Let's the usage of it,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do you get the prototype of an objectYou can use the Object.getPrototypeOf(obj) method to return the prototype of the specified object. i.e. The value of the internal prototype property. If there are no inherited properties then null value is returned.const newPrototype = {};const newObject = Object.create(newPrototype);console.log(Object.getPrototypeOf(newObject) === newPrototype); // true⬆ Back to TopWhat happens If I pass string type for getPrototype methodIn ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter will be coerced to an Object.// ES5Object.getPrototypeOf(\""James\""); // TypeError: \""James\"" is not an object// ES2015Object.getPrototypeOf(\""James\""); // String.prototype⬆ Back to TopHow do you set prototype of one object to anotherYou can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,Object.setPrototypeOf(Square.prototype, Rectangle.prototype);Object.setPrototypeOf({}, null);⬆ Back to TopHow do you check whether an object can be extendable or notThe Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.const newObject = {};console.log(Object.isExtensible(newObject)); //trueNote: By default, all the objects are extendable. i.e, The new properties can be added or modified.⬆ Back to TopHow do you prevent an object to extendThe Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property,const newObject = {};Object.preventExtensions(newObject); // NOT extendabletry {  Object.defineProperty(newObject, \""newProperty\"", {    // Adding new property    value: 100,  });} catch (e) {  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible}⬆ Back to TopWhat are the different ways to make an object non-extensibleYou can mark an object non-extensible in 3 ways,Object.preventExtensionsObject.sealObject.freezevar newObject = {};Object.preventExtensions(newObject); // Prevent objects are non-extensibleObject.isExtensible(newObject); // falsevar sealedObject = Object.seal({}); // Sealed objects are non-extensibleObject.isExtensible(sealedObject); // falsevar frozenObject = Object.freeze({}); // Frozen objects are non-extensibleObject.isExtensible(frozenObject); // false⬆ Back to TopHow do you define multiple properties on an objectThe Object.defineProperties() method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object,const newObject = {};Object.defineProperties(newObject, {  newProperty1: {    value: \""John\"",    writable: true,  },  newProperty2: {},});⬆ Back to TopWhat is MEAN in javascriptThe MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.⬆ Back to TopWhat Is Obfuscation in javascriptObfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it.Let's see the below function before Obfuscation,function greeting() {  console.log(\""Hello, welcome to JS world\"");}And after the code Obfuscation, it would be appeared as below,eval(  (function (p, a, c, k, e, d) {    e = function (c) {      return c;    };    if (!\""\"".replace(/^/, String)) {      while (c--) {        d[c] = k[c] || c;      }      k = [        function (e) {          return d[e];        },      ];      e = function () {        return \""\\\\w+\"";      };      c = 1;    }    while (c--) {      if (k[c]) {        p = p.replace(new RegExp(\""\\\\b\"" + e(c) + \""\\\\b\"", \""g\""), k[c]);      }    }    return p;  })(    \""2 1(){0.3('4, 7 6 5 8')}\"",    9,    9,    \""console|greeting|function|log|Hello|JS|to|welcome|world\"".split(\""|\""),    0,    {}  ));⬆ Back to TopWhy do you need ObfuscationBelow are the few reasons for Obfuscation,The Code size will be reduced. So data transfers between server and client will be fast.It hides the business logic from outside world and protects the code from othersReverse engineering is highly difficultThe download time will be reduced⬆ Back to TopWhat is MinificationMinification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation .⬆ Back to TopWhat are the advantages of minificationNormally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,Decreases loading times of a web pageSaves bandwidth usages⬆ Back to TopWhat are the differences between Obfuscation and EncryptionBelow are the main differences between Obfuscation and Encryption,FeatureObfuscationEncryptionDefinitionChanging the form of any data in any other formChanging the form of information to an unreadable format by using a keyA key to decodeIt can be decoded without any keyIt is requiredTarget data formatIt will be converted to a complex formConverted into an unreadable format⬆ Back to TopWhat are the common tools used for minificationThere are many online/offline tools to minify the javascript files,Google's Closure CompilerUglifyJS2jsminjavascript-minifier.com/prettydiff.com⬆ Back to TopHow do you perform form validation using javascriptJavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted.Lets' perform user login in an html form,<form name=\""myForm\"" onsubmit=\""return validateForm()\"" method=\""post\"">  User name: <input type=\""text\"" name=\""uname\"" />  <input type=\""submit\"" value=\""Submit\"" /></form>And the validation on user login is below,function validateForm() {  var x = document.forms[\""myForm\""][\""uname\""].value;  if (x == \""\"") {    alert(\""The username shouldn't be empty\"");    return false;  }}⬆ Back to TopHow do you perform form validation without javascriptYou can perform HTML form validation automatically without using javascript. The validation enabled by applying the required attribute to prevent form submission when the input is empty.<form method=\""post\"">  <input type=\""text\"" name=\""uname\"" required />  <input type=\""submit\"" value=\""Submit\"" /></form>Note: Automatic form validation does not work in Internet Explorer 9 or earlier.⬆ Back to TopWhat are the DOM methods available for constraint validationThe below DOM methods are available for constraint validation on an invalid input,checkValidity(): It returns true if an input element contains valid data.setCustomValidity(): It is used to set the validationMessage property of an input element.Let's take an user login form with DOM validationsfunction myFunction() {  var userName = document.getElementById(\""uname\"");  if (!userName.checkValidity()) {    document.getElementById(\""message\"").innerHTML =      userName.validationMessage;  } else {    document.getElementById(\""message\"").innerHTML =      \""Entered a valid username\"";  }}⬆ Back to TopWhat are the available constraint validation DOM propertiesBelow are the list of some of the constraint validation DOM properties available,validity: It provides a list of boolean properties related to the validity of an input element.validationMessage: It displays the message when the validity is false.willValidate: It indicates if an input element will be validated or not.⬆ Back to TopWhat are the list of validity propertiesThe validity property of an input element provides a set of properties related to the validity of data.customError: It returns true, if a custom validity message is set.patternMismatch: It returns true, if an element's value does not match its pattern attribute.rangeOverflow: It returns true, if an element's value is greater than its max attribute.rangeUnderflow: It returns true, if an element's value is less than its min attribute.stepMismatch: It returns true, if an element's value is invalid according to step attribute.tooLong: It returns true, if an element's value exceeds its maxLength attribute.typeMismatch: It returns true, if an element's value is invalid according to type attribute.valueMissing: It returns true, if an element with a required attribute has no value.valid: It returns true, if an element's value is valid.⬆ Back to TopGive an example usage of rangeOverflow propertyIf an element's value is greater than its max attribute then rangeOverflow property returns true. For example, the below form submission throws an error if the value is more than 100,<input id=\""age\"" type=\""number\"" max=\""100\"" /><button onclick=\""myOverflowFunction()\"">OK</button>function myOverflowFunction() {  if (document.getElementById(\""age\"").validity.rangeOverflow) {    alert(\""The mentioned age is not allowed\"");  }}⬆ Back to TopIs enums feature available in javascriptNo, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,var DaysEnum = Object.freeze({\""monday\"":1, \""tuesday\"":2, \""wednesday\"":3, ...})⬆ Back to TopWhat is an enumAn enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.enum Color { RED, GREEN, BLUE}⬆ Back to TopHow do you list all properties of an objectYou can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a given object. Let's the usage of it in an example,const newObject = {  a: 1,  b: 2,  c: 3,};console.log(Object.getOwnPropertyNames(newObject));[\""a\"", \""b\"", \""c\""];⬆ Back to TopHow do you get property descriptors of an objectYou can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below,const newObject = {  a: 1,  b: 2,  c: 3,};const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);console.log(descriptorsObject.a.writable); //trueconsole.log(descriptorsObject.a.configurable); //trueconsole.log(descriptorsObject.a.enumerable); //trueconsole.log(descriptorsObject.a.value); // 1⬆ Back to TopWhat are the attributes provided by a property descriptorA property descriptor is a record which has the following attributesvalue: The value associated with the propertywritable: Determines whether the value associated with the property can be changed or notconfigurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.set: A function which serves as a setter for the propertyget: A function which serves as a getter for the property⬆ Back to TopHow do you extend classesThe extends keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,class ChildClass extends ParentClass { ... }Let's take an example of Square subclass from Polygon parent class,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do I modify the url without reloading the pageThe window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,window.history.pushState(\""page2\"", \""Title\"", \""/page2.html\"");⬆ Back to TopHow do you check whether an array includes a particular value or notThe Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.var numericArray = [1, 2, 3, 4];console.log(numericArray.includes(3)); // truevar stringArray = [\""green\"", \""yellow\"", \""blue\""];console.log(stringArray.includes(\""blue\"")); //true⬆ Back to TopHow do you compare scalar arraysYou can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The combination of these expressions can give the expected result,const arrayFirst = [1, 2, 3, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.every((value, index) => value === arraySecond[index])); // trueIf you would like to compare arrays irrespective of order then you should sort them before,const arrayFirst = [2, 3, 1, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.sort().every((value, index) => value === arraySecond[index])); //true⬆ Back to TopHow to get the value from get parametersThe new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters. Remember that you may need to use polyfill or window.location to access the URL in older browsers(including IE).let urlString = \""http://www.some-domain.com/about.html?x=1&y=2&z=3\""; //window.location.hreflet url = new URL(urlString);let parameterZ = url.searchParams.get(\""z\"");console.log(parameterZ); // 3⬆ Back to TopHow do you print numbers with commas as thousand separatorsYou can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive representation such as thousand separator,currency etc of this number.function convertToThousandFormat(x) {  return x.toLocaleString(); // 12,345.679}console.log(convertToThousandFormat(12345.6789));⬆ Back to TopWhat is the difference between java and javascriptBoth are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,FeatureJavaJavaScriptTypedIt's a strongly typed languageIt's a dynamic typed languageParadigmObject oriented programmingPrototype based programmingScopingBlock scopedFunction-scopedConcurrencyThread basedevent basedMemoryUses more memoryUses less memory. Hence it will be used for web pages⬆ Back to TopDoes JavaScript supports namespaceJavaScript doesn’t support namespace by default. So if you create any element(function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace,function func1() {  console.log(\""This is a first definition\"");}function func1() {  console.log(\""This is a second definition\"");}func1(); // This is a second definitionIt always calls the second function definition. In this case, namespace will solve the name collision problem.⬆ Back to TopHow do you declare namespaceEven though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.Using Object Literal Notation: Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notationvar namespaceOne = {   function func1() {       console.log(\""This is a first definition\"");   }}var namespaceTwo = {     function func1() {         console.log(\""This is a second definition\"");     } }namespaceOne.func1(); // This is a first definitionnamespaceTwo.func1(); // This is a second definitionUsing IIFE (Immediately invoked function expression): The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.(function () {  function fun1() {    console.log(\""This is a first definition\"");  }  fun1();})();(function () {  function fun1() {    console.log(\""This is a second definition\"");  }  fun1();})();Using a block and a let/const declaration: In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.{  let myFunction = function fun1() {    console.log(\""This is a first definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.{  let myFunction = function fun1() {    console.log(\""This is a second definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.⬆ Back to TopHow do you invoke javascript code in an iframe from parent pageInitially iFrame needs to be accessed using either document.getElementBy or window.frames. After that contentWindow property of iFrame gives the access for targetFunctiondocument.getElementById(\""targetFrame\"").contentWindow.targetFunction();window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox⬆ Back to TopHow do get the timezone offset from dateYou can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTCvar offset = new Date().getTimezoneOffset();console.log(offset); // -480⬆ Back to TopHow do you load CSS and JS files dynamicallyYou can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below,function loadAssets(filename, filetype) {  if (filetype == \""css\"") {    // External CSS file    var fileReference = document.createElement(\""link\"");    fileReference.setAttribute(\""rel\"", \""stylesheet\"");    fileReference.setAttribute(\""type\"", \""text/css\"");    fileReference.setAttribute(\""href\"", filename);  } else if (filetype == \""js\"") {    // External JavaScript file    var fileReference = document.createElement(\""script\"");    fileReference.setAttribute(\""type\"", \""text/javascript\"");    fileReference.setAttribute(\""src\"", filename);  }  if (typeof fileReference != \""undefined\"")    document.getElementsByTagName(\""head\"")[0].appendChild(fileReference);}⬆ Back to TopWhat are the different methods to find HTML elements in DOMIf you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,document.getElementById(id): It finds an element by Iddocument.getElementsByTagName(name): It finds an element by tag namedocument.getElementsByClassName(name): It finds an element by class name⬆ Back to TopWhat is jQueryjQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,$(document).ready(function () {  // It selects the document and apply the function on page load  alert(\""Welcome to jQuery world\"");});Note: You can download it from jquery's official site or install it from CDNs, like google.⬆ Back to TopWhat is V8 JavaScript engineV8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors.Note: It can run standalone, or can be embedded into any C++ application.⬆ Back to TopWhy do we call javascript as dynamic languageJavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.let age = 50; // age is a number nowage = \""old\""; // age is a string nowage = true; // age is a boolean⬆ Back to TopWhat is a void operatorThe void operator evaluates the given expression and then returns undefined(i.e, without returning value). The syntax would be as below,void expression;void expression;Let's display a message without any redirection or reload<a href=\""javascript:void(alert('Welcome to JS world'))\"">  Click here to see a message</a>Note: This operator is often used to obtain the undefined primitive value, using \""void(0)\"".⬆ Back to TopHow to set the cursor to waitThe cursor can be set to wait in JavaScript by using the property \""cursor\"". Let's perform this behavior on page load using the below function.function myFunction() {  window.document.body.style.cursor = \""wait\"";}and this function invoked on page load<body onload=\""myFunction()\""></body>⬆ Back to TopHow do you create an infinite loopYou can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,for (;;) {}while (true) {}⬆ Back to TopWhy do you need to avoid with statementJavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times.a.b.c.greeting = \""welcome\"";a.b.c.age = 32;Using with it turns this into:with (a.b.c) {  greeting = \""welcome\"";  age = 32;}But this with statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.⬆ Back to TopWhat is the output of below for loopsfor (var i = 0; i < 4; i++) {  // global scope  setTimeout(() => console.log(i));}for (let i = 0; i < 4; i++) {  // block scope  setTimeout(() => console.log(i));}The output of the above for loops is 4 4 4 4 and 0 1 2 3Explanation: Due to the event queue/loop of javascript, the setTimeout callback function is called after the loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is 4 4 4 4.Whereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is 0 1 2 3.⬆ Back to TopList down some of the features of ES6Below are the list of some new features of ES6,Support for constants or immutable variablesBlock-scope support for variables, constants and functionsArrow functionsDefault parametersRest and Spread ParametersTemplate LiteralsMulti-line StringsDestructuring AssignmentEnhanced Object LiteralsPromisesClassesModules⬆ Back to TopWhat is ES6ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.⬆ Back to TopCan I redeclare let and const variablesNo, you cannot redeclare let and const variables. If you do, it throws below errorUncaught SyntaxError: Identifier 'someVariable' has already been declaredExplanation: The variable declaration with var keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables.var name = \""John\"";function myFunc() {  var name = \""Nick\"";  var name = \""Abraham\""; // Re-assigned in the same function block  alert(name); // Abraham}myFunc();alert(name); // JohnThe block-scoped multi-declaration throws syntax error,let name = \""John\"";function myFunc() {  let name = \""Nick\"";  let name = \""Abraham\""; // Uncaught SyntaxError: Identifier 'name' has already been declared  alert(name);}myFunc();alert(name);⬆ Back to TopIs const variable makes the value immutableNo, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later)const userList = [];userList.push(\""John\""); // Can mutate even though it can't re-assignconsole.log(userList); // ['John']⬆ Back to TopWhat are default parametersIn ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples,//ES5var calculateArea = function (height, width) {  height = height || 50;  width = width || 60;  return width * height;};console.log(calculateArea()); //300The default parameters makes the initialization more simpler,//ES6var calculateArea = function (height = 50, width = 60) {  return width * height;};console.log(calculateArea()); //300⬆ Back to TopWhat are template literalsTemplate literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes.In ES6, this feature enables using dynamic expressions as below,var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;In ES5, you need break string like below,var greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`Note: You can use multi-line strings and string interpolation features with template literals.⬆ Back to TopHow do you write multi-line strings in template literalsIn ES5, you would have to use newline escape characters('\') and concatenation symbols(+) in order to get multi-line strings.console.log(\""This is string sentence 1\\"" + \""This is string sentence 2\"");Whereas in ES6, You don't need to mention any newline sequence character,console.log(`This is string sentence'This is string sentence 2`);⬆ Back to TopWhat are nesting templatesThe nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,const iconStyles = `icon ${  isMobilePlatform()    ? \""\""    : `icon-${user.isAuthorized ? \""submit\"" : \""disabled\""}`}`;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.//Without nesting templates const iconStyles = `icon ${ isMobilePlatform() ? '' :   user.isAuthorized ? 'icon-submit' : 'icon-disabled'}`;⬆ Back to TopWhat are tagged templatesTagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization,var user1 = \""John\"";var skill1 = \""JavaScript\"";var experience1 = 15;var user2 = \""Kane\"";var skill2 = \""JavaScript\"";var experience2 = 5;function myInfoTag(strings, userExp, experienceExp, skillExp) {  var str0 = strings[0]; // \""Mr/Ms. \""  var str1 = strings[1]; // \"" is a/an \""  var str2 = strings[2]; // \""in\""  var expertiseStr;  if (experienceExp > 10) {    expertiseStr = \""expert developer\"";  } else if (skillExp > 5 && skillExp <= 10) {    expertiseStr = \""senior developer\"";  } else {    expertiseStr = \""junior developer\"";  }  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;}var output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;var output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;console.log(output1); // Mr/Ms. John is a/an expert developer in JavaScriptconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript⬆ Back to TopWhat are raw stringsES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,var calculationString = String.raw`The sum of numbers is \${  1 + 2 + 3 + 4}!`;console.log(calculationString); // The sum of numbers is 10If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple linesvar calculationString = `The sum of numbers is \${1 + 2 + 3 + 4}!`;console.log(calculationString);// The sum of numbers is// 10Also, the raw property is available on the first argument to the tag functionfunction tag(strings) {  console.log(strings.raw[0]);}⬆ Back to TopWhat is destructuring assignmentThe destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables.Let's get the month values from an array using destructuring assignmentvar [one, two, three] = [\""JAN\"", \""FEB\"", \""MARCH\""];console.log(one); // \""JAN\""console.log(two); // \""FEB\""console.log(three); // \""MARCH\""and you can get user properties of an object using destructuring assignment,var { name, age } = { name: \""John\"", age: 32 };console.log(name); // Johnconsole.log(age); // 32⬆ Back to TopWhat are default values in destructuring assignmentA variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases,Arrays destructuring:var x, y, z;[x = 2, y = 4, z = 6] = [10];console.log(x); // 10console.log(y); // 4console.log(z); // 6Objects destructuring:var { x = 2, y = 4, z = 6 } = { x: 10 };console.log(x); // 10console.log(y); // 4console.log(z); // 6⬆ Back to TopHow do you swap variables in destructuring assignmentIf you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment,var x = 10,  y = 20;[x, y] = [y, x];console.log(x); // 20console.log(y); // 10⬆ Back to TopWhat are enhanced object literalsObject literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.//ES6var x = 10,  y = 20;obj = { x, y };console.log(obj); // {x: 10, y:20}//ES5var x = 10,  y = 20;obj = { x: x, y: y };console.log(obj); // {x: 10, y:20}⬆ Back to TopWhat are dynamic importsThe dynamic imports using import() function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in stage4 proposal. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience.The syntax of dynamic imports would be as below,import(\""./Module\"").then((Module) => Module.method());⬆ Back to TopWhat are the use cases for dynamic importsBelow are some of the use cases of using dynamic imports over static imports,Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browserif (isLegacyBrowser()) {    import(···)    .then(···);}Compute the module specifier at runtime. For example, you can use it for internationalization.import(`messages_${getLocale()}.js`).then(···);Import a module from within a regular script instead a module.⬆ Back to TopWhat are typed arraysTyped arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed array types,Int8Array: An array of 8-bit signed integersInt16Array: An array of 16-bit signed integersInt32Array: An array of 32-bit signed integersUint8Array: An array of 8-bit unsigned integersUint16Array: An array of 16-bit unsigned integersUint32Array: An array of 32-bit unsigned integersFloat32Array: An array of 32-bit floating point numbersFloat64Array: An array of 64-bit floating point numbersFor example, you can create an array of 8-bit signed integers as belowconst a = new Int8Array();// You can pre-allocate n bytesconst bytes = 1024;const a = new Int8Array(bytes);⬆ Back to TopWhat are the advantages of module loadersThe module loaders provides the below features,Dynamic loadingState isolationGlobal namespace isolationCompilation hooksNested virtualization⬆ Back to TopWhat is collationCollation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features,Comparison:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(l10nDE.compare(\""ä\"", \""z\"") === -1); // trueconsole.log(l10nSV.compare(\""ä\"", \""z\"") === +1); // trueSorting:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(list.sort(l10nDE.compare)); // [ \""a\"", \""ä\"", \""z\"" ]console.log(list.sort(l10nSV.compare)); // [ \""a\"", \""z\"", \""ä\"" ]⬆ Back to TopWhat is for...of statementThe for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,let arrayIterable = [10, 20, 30, 40, 50];for (let value of arrayIterable) {  value++;  console.log(value); // 11 21 31 41 51}⬆ Back to TopWhat is the output of below spread operator array[...\""John Resig\""];The output of the array is ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']Explanation: The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.⬆ Back to TopIs PostMessage secureYes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.⬆ Back to TopWhat are the problems with postmessage target origin as wildcardThe second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.targetWindow.postMessage(message, \""*\"");⬆ Back to TopHow do you avoid receiving postMessages from attackersSince the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver's end using the “message.origin” attribute. For examples, let's check the sender's origin http://www.some-sender.com on receiver side www.some-receiver.com,//Listener on http://www.some-receiver.com/window.addEventListener(\""message\"", function(message){    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){         console.log('You received the data from valid sender', message.data);   }});⬆ Back to TopCan I avoid using postMessages completelyYou cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.⬆ Back to TopIs postMessages synchronousThe postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.⬆ Back to TopWhat paradigm is JavascriptJavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.⬆ Back to TopWhat is the difference between internal and external javascriptInternal JavaScript: It is the source code within the script tag.External JavaScript: The source code is stored in an external file(stored with .js extension) and referred with in the tag.⬆ Back to TopIs JavaScript faster than server side scriptYes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.⬆ Back to TopHow do you get the status of a checkboxYou can apply the checked property on the selected checkbox in the DOM. If the value is true it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:<input type=\""checkbox\"" id=\""checkboxname\"" value=\""Agree\"" /> Agree theconditions<br />console.log(document.getElementById(‘checkboxname’).checked); // true or false⬆ Back to TopWhat is the purpose of double tilde operatorThe double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor().⬆ Back to TopHow do you convert character to ASCII codeYou can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string,\""ABC\"".charCodeAt(0); // returns 65Whereas String.fromCharCode() method converts numbers to equal ASCII characters.String.fromCharCode(65, 66, 67); // returns 'ABC'⬆ Back to TopWhat is ArrayBufferAn ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,let buffer = new ArrayBuffer(16); // create a buffer of length 16alert(buffer.byteLength); // 16To manipulate an ArrayBuffer, we need to use a “view” object.//Create a DataView referring to the bufferlet view = new DataView(buffer);⬆ Back to TopWhat is the output of below string expressionconsole.log(\""Welcome to JS world\""[0]);The output of the above expression is \""W\"".Explanation: The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character \""W\"" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.⬆ Back to TopWhat is the purpose of Error objectThe Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,new Error([message[, fileName[, lineNumber]]])You can throw user defined exceptions or errors using Error object in try...catch block as below,try {  if (withdraw > balance)    throw new Error(\""Oops! You don't have enough balance\"");} catch (e) {  console.log(e.name + \"": \"" + e.message);}⬆ Back to TopWhat is the purpose of EvalError objectThe EvalError object indicates an error regarding the global eval() function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,new EvalError([message[, fileName[, lineNumber]]])You can throw EvalError with in try...catch block as below,try {  throw new EvalError('Eval function error', 'someFile.js', 100);} catch (e) {  console.log(e.message, e.name, e.fileName);              // \""Eval function error\"", \""EvalError\"", \""someFile.js\""⬆ Back to TopWhat are the list of cases error thrown from non-strict mode to strict modeWhen you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the scriptWhen you use Octal syntaxvar n = 022;Using with statementWhen you use delete operator on a variable nameUsing eval or arguments as variable or function argument nameWhen you use newly reserved keywordsWhen you declare a function in a blockif (someCondition) {  function f() {}}Hence, the errors from above cases are helpful to avoid errors in development/production environments.⬆ Back to TopDo all objects have prototypesNo. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.⬆ Back to TopWhat is the difference between a parameter and an argumentParameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let's explain this with a simple functionfunction myFunction(parameter1, parameter2, parameter3) {  console.log(arguments[0]); // \""argument1\""  console.log(arguments[1]); // \""argument2\""  console.log(arguments[2]); // \""argument3\""}myFunction(\""argument1\"", \""argument2\"", \""argument3\"");⬆ Back to TopWhat is the purpose of some method in arraysThe some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var odd = (element) => element % 2 !== 0;console.log(array.some(odd)); // true (the odd element exists)⬆ Back to TopHow do you combine two or more arraysThe concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,array1.concat(array2, array3, ..., arrayX)Let's take an example of array's concatenation with veggies and fruits arrays,var veggies = [\""Tomato\"", \""Carrot\"", \""Cabbage\""];var fruits = [\""Apple\"", \""Orange\"", \""Pears\""];var veggiesAndFruits = veggies.concat(fruits);console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears⬆ Back to TopWhat is the difference between Shallow and Deep copyThere are two ways to copy an object,Shallow Copy:Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};to create a duplicatevar empDetailsShallowCopy = empDetails; //Shallow copying!if we change some property value in the duplicate one like this:empDetailsShallowCopy.name = \""Johnson\"";The above statement will also change the name of empDetails, since we have a shallow copy. That means we're losing the original data as well.Deep copy:A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};Create a deep copy by using the properties from the original object into new variablevar empDetailsDeepCopy = {  name: empDetails.name,  age: empDetails.age,  expertise: empDetails.expertise,};Now if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails⬆ Back to TopHow do you create specific number of copies of a stringThe repeat() method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification.Let's take an example of Hello string to repeat it 4 times,\""Hello\"".repeat(4); // 'HelloHelloHelloHello'How do you return all matching strings against a regular expressionThe matchAll() method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,let regexp = /Hello(\\d?))/g;let greeting = \""Hello1Hello2Hello3\"";let greetingList = [...greeting.matchAll(regexp)];console.log(greetingList[0]); //Hello1console.log(greetingList[1]); //Hello2console.log(greetingList[2]); //Hello3⬆ Back to TopHow do you trim a string at the beginning or endingThe trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use trimStart/trimLeft and trimEnd/trimRight methods. Let's see an example of these methods on a greeting message,var greeting = \""   Hello, Goodmorning!   \"";console.log(greeting); // \""   Hello, Goodmorning!   \""console.log(greeting.trimStart()); // \""Hello, Goodmorning!   \""console.log(greeting.trimLeft()); // \""Hello, Goodmorning!   \""console.log(greeting.trimEnd()); // \""   Hello, Goodmorning!\""console.log(greeting.trimRight()); // \""   Hello, Goodmorning!\""⬆ Back to TopWhat is the output of below console statement with unary operatorLet's take console statement with unary operator as given below,console.log(+\""Hello\"");The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.⬆ Back to TopDoes javascript uses mixinsMixin is a generic object-oriented programming term - is a class containing methods that can be used by other classes without a need to inherit from it. In JavaScript we can only inherit from a single object. ie. There can be only one [[prototype]] for an object.But sometimes we require to extend more than one, to overcome this we can use Mixin which helps to copy methods to the prototype of another class.Say for instance, we've two classes User and CleanRoom. Suppose we need to add CleanRoom functionality to User, so that user can clean the room at demand. Here's where concept called mixins comes into picture.// mixinlet cleanRoomMixin = {  cleanRoom() {    alert(`Hello ${this.name}, your room is clean now`);  },  sayBye() {    alert(`Bye ${this.name}`);  },};// usage:class User {  constructor(name) {    this.name = name;  }}// copy the methodsObject.assign(User.prototype, cleanRoomMixin);// now User can clean the roomnew User(\""Dude\"").cleanRoom(); // Hello Dude, your room is clean now!⬆ Back to TopWhat is a thunk functionA thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example,const add = (x, y) => x + y;const thunk = () => add(2, 3);thunk(); // 5⬆ Back to TopWhat are asynchronous thunksThe asynchronous thunks are useful to make network requests. Let's see an example of network requests,function fetchData(fn) {  fetch(\""https://jsonplaceholder.typicode.com/todos/1\"")    .then((response) => response.json())    .then((json) => fn(json));}const asyncThunk = function () {  return fetchData(function getData(data) {    console.log(data);  });};asyncThunk();The getData function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.⬆ Back to TopWhat is the output of below function callsCode snippet:const circle = {  radius: 20,  diameter() {    return this.radius * 2;  },  perimeter: () => 2 * Math.PI * this.radius,};console.log(circle.diameter());console.log(circle.perimeter());Output:The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The this keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.⬆ Back to TopHow to remove all line breaks from a stringThe easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.function remove_linebreaks( var message ) {    return message.replace( /[\\r\]+/gm, \""\"" );}In the above expression, g and m are for global and multiline flags.⬆ Back to TopWhat is the difference between reflow and repaintA repaint occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A reflow involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.⬆ Back to TopWhat happens with negating an arrayNegating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return false.console.log(![]); // false⬆ Back to TopWhat happens if we add two arraysIf you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,console.log([\""a\""] + [\""b\""]); // \""ab\""console.log([] + []); // \""\""console.log(![] + []); // \""false\"", because ![] returns false.⬆ Back to TopWhat is the output of prepend additive operator on falsy valuesIf you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \""\""), the falsy value converts to a number value zero. Let's display them on browser console as below,console.log(+null); // 0console.log(+undefined); // NaNconsole.log(+false); // 0console.log(+NaN); // NaNconsole.log(+\""\""); // 0⬆ Back to TopHow do you create self string using special charactersThe self string can be formed with the combination of []()!+ characters. You need to remember the below conventions to achieve this pattern.Since Arrays are truthful values, negating the arrays will produce false: ![] === falseAs per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \""\""Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1By applying the above rules, we can derive below conditions(![] + [] === \""false\"" + !+[]) === 1;Now the character pattern would be created as below,      s               e               l               f ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^ (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0] ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^(![] + [])[+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]] +(![] + [])[+[]]^^^^^^^^^^^^^^^^^^^^^^^^^^^^^(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]⬆ Back to TopHow do you remove falsy values from an arrayYou can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and \""\"") from the array.const myArray = [false, null, 1, 5, undefined];myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);⬆ Back to TopHow do you get unique values of an arrayYou can get unique values of an array with the combination of Set and rest expression/spread(...) syntax.console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]⬆ Back to TopWhat is destructuring aliasesSometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.const obj = { x: 1 };// Grabs obj.x as as { otherName }const { x: otherName } = obj;⬆ Back to TopHow do you map the array values without using map methodYou can map the array values without using the map method by just using the from method of Array. Let's map city names from Countries array,const countries = [  { name: \""India\"", capital: \""Delhi\"" },  { name: \""US\"", capital: \""Washington\"" },  { name: \""Russia\"", capital: \""Moscow\"" },  { name: \""Singapore\"", capital: \""Singapore\"" },  { name: \""China\"", capital: \""Beijing\"" },  { name: \""France\"", capital: \""Paris\"" },];const cityNames = Array.from(countries, ({ capital }) => capital);console.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']⬆ Back to TopHow do you empty an arrayYou can empty an array quickly by setting the array length to zero.let cities = [\""Singapore\"", \""Delhi\"", \""London\""];cities.length = 0; // cities becomes []⬆ Back to TopHow do you rounding numbers to certain decimalsYou can round numbers to a certain number of decimals using toFixed method from native javascript.let pie = 3.141592653;pie = pie.toFixed(3); // 3.142⬆ Back to TopWhat is the easiest way to convert an array to an objectYou can convert an array to an object with the same data using spread(...) operator.var fruits = [\""banana\"", \""apple\"", \""orange\"", \""watermelon\""];var fruitsObject = { ...fruits };console.log(fruitsObject); // {0: \""banana\"", 1: \""apple\"", 2: \""orange\"", 3: \""watermelon\""}⬆ Back to TopHow do you create an array with some dataYou can create an array with some data or an array with the same values using fill method.var newArray = new Array(5).fill(\""0\"");console.log(newArray); // [\""0\"", \""0\"", \""0\"", \""0\"", \""0\""]⬆ Back to TopWhat are the placeholders from console objectBelow are the list of placeholders available from console object,%o — It takes an object,%s — It takes a string,%d — It is used for a decimal or integerThese placeholders can be represented in the console.log as belowconst user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.log(  \""Hello %s, your details %o are available in the object form\"",  \""John\"",  user); // Hello John, your details {name: \""John\"", id: 1, city: \""Delhi\""} are available in object⬆ Back to TopIs it possible to add CSS to console messagesYes, you can apply CSS styles to console messages similar to html text on the web page.console.log(  \""%c The text has blue color, with large font and red background\"",  \""color: blue; font-size: x-large; background: red\"");The text will be displayed as below,Note: All CSS styles can be applied to console messages.⬆ Back to TopWhat is the purpose of dir method of console objectThe console.dir() is used to display an interactive list of the properties of the specified JavaScript object as JSON.const user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.dir(user);The user object displayed in JSON representation⬆ Back to TopIs it possible to debug HTML elements in consoleYes, it is possible to get and debug HTML elements in the console just like inspecting elements.const element = document.getElementsByTagName(\""body\"")[0];console.log(element);It prints the HTML element in the console,⬆ Back to TopHow do you display data in a tabular format using console objectThe console.table() is used to display data in the console in a tabular format to visualize complex arrays or objects.const users = [  { name: \""John\"", id: 1, city: \""Delhi\"" },  { name: \""Max\"", id: 2, city: \""London\"" },  { name: \""Rod\"", id: 3, city: \""Paris\"" },];console.table(users);The data visualized in a table format,Not: Remember that console.table() is not supported in IE.⬆ Back to TopHow do you verify that an argument is a Number or notThe combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.function isNumber(n) {  return !isNaN(parseFloat(n)) && isFinite(n);}⬆ Back to TopHow do you create copy to clipboard buttonYou need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.document.querySelector(\""#copy-button\"").onclick = function () {  // Select the content  document.querySelector(\""#copy-input\"").select();  // Copy to the clipboard  document.execCommand(\""copy\"");};⬆ Back to TopWhat is the shortcut to get timestampYou can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.console.log(+new Date());console.log(Date.now());⬆ Back to TopHow do you flattening multi dimensional arraysFlattening bi-dimensional arrays is trivial with Spread operator.const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]But you can make it work with multi-dimensional arrays by recursive calls,function flattenMultiArray(arr) {  const flattened = [].concat(...arr);  return flattened.some((item) => Array.isArray(item))    ? flattenMultiArray(flattened)    : flattened;}const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]Also you can use the flat method of Array.const arr = [1, [2,3], 4, 5, [6,7]];const fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]// And for multiDemensional arraysconst multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]const towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]const fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]⬆ Back to TopWhat is the easiest multi condition checkingYou can use indexOf to compare input with multiple values instead of checking each value as one condition.// Verbose approachif (  input === \""first\"" ||  input === 1 ||  input === \""second\"" ||  input === 2) {  someFunction();}// Shortcutif ([\""first\"", 1, \""second\"", 2].indexOf(input) !== -1) {  someFunction();}⬆ Back to TopHow do you capture browser back buttonThe window.onbeforeunload method is used to capture browser back button events. This is helpful to warn users about losing the current data.window.onbeforeunload = function () {  alert(\""You work will be lost\"");};⬆ Back to TopHow do you disable right click in the web pageThe right click on the page can be disabled by returning false from the oncontextmenu attribute on the body element.<body oncontextmenu=\""return false;\""></body>⬆ Back to TopWhat are wrapper objectsPrimitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.let name = \""john\"";console.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.⬆ Back to TopWhat is AJAXAJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.⬆ Back to TopWhat are the different ways to deal with Asynchronous CodeBelow are the list of different ways to deal with Asynchronous code.CallbacksPromisesAsync/awaitThird-party libraries such as async.js,bluebird etc⬆ Back to TopHow to cancel a fetch requestUntil a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls.The basic flow of cancelling a fetch request would be as below,Create an AbortController instanceGet the signal property of an instance and pass the signal as a fetch option for signalCall the AbortController's abort property to cancel all fetches that use that signalFor example, let's pass the same signal to multiple fetch calls will cancel all requests with that signal,const controller = new AbortController();const { signal } = controller;fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 1 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 2 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });// Wait 2 seconds to abort both requestssetTimeout(() => controller.abort(), 2000);⬆ Back to TopWhat is web speech APIWeb speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API has been introduced by W3C Community in the year 2012. It has two main parts,SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface.The below example shows on how to use this API to get text from speech,window.SpeechRecognition =  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FFconst recognition = new window.SpeechRecognition();recognition.onresult = (event) => {  // SpeechRecognitionEvent type  const speechToText = event.results[0][0].transcript;  console.log(speechToText);};recognition.start();In this API, browser is going to ask you for permission to use your microphoneSpeechSynthesis (Text-to-Speech): It provides the ability to recognize voice context from an audio input and respond. This is accessed by the SpeechSynthesis interface.For example, the below code is used to get voice/speech from text,if (\""speechSynthesis\"" in window) {  var speech = new SpeechSynthesisUtterance(\""Hello World!\"");  speech.lang = \""en-US\"";  window.speechSynthesis.speak(speech);}The above examples can be tested on chrome(33+) browser's developer console.Note: This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification)⬆ Back to TopWhat is minimum timeout throttlingBoth browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously.Browsers: They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals.Note: The older browsers have a minimum delay of 10ms.Nodejs: They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1.The best example to explain this timeout throttling behavior is the order of below code snippet.function runMeFirst() {  console.log(\""My script is initialized\"");}setTimeout(runMeFirst, 0);console.log(\""Script loaded\"");and the output would be inScript loadedMy script is initializedIf you don't use setTimeout, the order of logs will be sequential.function runMeFirst() {  console.log(\""My script is initialized\"");}runMeFirst();console.log(\""Script loaded\"");and the output is,My script is initializedScript loaded⬆ Back to TopHow do you implement zero timeout in modern browsersYou can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.⬆ Back to TopWhat are tasks in event loopA task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue.Below are the list of use cases to add tasks to the task queue,When a new javascript program is executed directly from console or running by the <script> element, the task will be added to the task queue.When an event fires, the event callback added to task queueWhen a setTimeout or setInterval is reached, the corresponding callback added to task queue⬆ Back to TopWhat is microtaskMicrotask is the javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the microtask queue is empty.The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etcNote: All of these microtasks are processed in the same turn of the event loop.⬆ Back to TopWhat are different event loopsIn JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:1. The Browser Event Loop2. The Node.js Event Loop- Browser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.- The Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions. **[⬆ Back to Top](#table-of-contents)**What is the purpose of queueMicrotaskThe queueMicrotask function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of queueMicrotask is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.Example:console.log('Start'); //1queueMicrotask(() => {  console.log('Inside microtask'); // 3});console.log('End'); //2By using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular setTimeout or setInterval callbacks.⬆ Back to TopHow do you use javascript libraries in typescript fileIt is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution is declare keyword along with a variable declaration. For example, let's imagine you have a library called customLibrary that doesn’t have a TypeScript declaration and have a namespace called customLibrary in the global namespace. You can use this library in typescript code as below,declare var customLibrary;In the runtime, typescript will provide the type to the customLibrary variable as any type. The another alternative without using declare keyword is belowvar customLibrary: any;⬆ Back to TopWhat are the differences between promises and observablesSome of the major difference in a tabular formPromisesObservablesEmits only a single value at a timeEmits multiple values over a period of time(stream of values ranging from 0 to multiple)Eager in nature; they are going to be called immediatelyLazy in nature; they require subscription to be invokedPromise is always asynchronous even though it resolved immediatelyObservable can be either synchronous or asynchronousDoesn't provide any operatorsProvides operators such as map, forEach, filter, reduce, retry, and retryWhen etcCannot be canceledCanceled by using unsubscribe() method⬆ Back to TopWhat is heapHeap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime.Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.⬆ Back to TopWhat is an event tableEvent Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table.It doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.⬆ Back to TopWhat is a microTask queueMicrotask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue.The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.⬆ Back to TopWhat is the difference between shim and polyfillA shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9).Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively.In a simple sentence, A polyfill is a shim for a browser API.⬆ Back to TopHow do you detect primitive or non primitive value typeIn JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,var myPrimitive = 30;var myNonPrimitive = {};function isPrimitive(val) {  return Object(val) !== val;}isPrimitive(myPrimitive);isPrimitive(myNonPrimitive);If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.⬆ Back to TopWhat is babelBabel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,Transform syntaxPolyfill features that are missing in your target environment (using @babel/polyfill)Source code transformations (or codemods)⬆ Back to TopIs Node.js completely single threadedNode is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.⬆ Back to TopWhat are the common use cases of observablesSome of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc⬆ Back to TopWhat is RxJSRxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.⬆ Back to TopWhat is the difference between Function constructor and function declarationThe functions which are created with Function constructor do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.Let's see this difference with an example,Function Constructor:var a = 100;function createFunction() {  var a = 200;  return new Function(\""return a;\"");}console.log(createFunction()()); // 100Function declaration:var a = 100;function createFunction() {  var a = 200;  return function func() {    return a;  };}console.log(createFunction()()); // 200⬆ Back to TopWhat is a Short circuit conditionShort circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,if (authenticate) {  loginToPorta();}Since the javascript logical operators evaluated from left to right, the above expression can be simplified using && logical operatorauthenticate && loginToPorta();⬆ Back to TopWhat is the easiest way to resize an arrayThe length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2,var array = [1, 2, 3, 4, 5];console.log(array.length); // 5array.length = 2;console.log(array.length); // 2console.log(array); // [1,2]and the array can be emptied toovar array = [1, 2, 3, 4, 5];array.length = 0;console.log(array.length); // 0console.log(array); // []⬆ Back to TopWhat is an observableAn Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling subscribe() method.Let's look at a simple example of an Observableimport { Observable } from \""rxjs\"";const observable = new Observable((observer) => {  setTimeout(() => {    observer.next(\""Message from a Observable!\"");  }, 3000);});observable.subscribe((value) => console.log(value));Note: Observables are not part of the JavaScript language yet but they are being proposed to be added to the language⬆ Back to TopWhat is the difference between function and class declarationsThe main difference between function declarations and class declarations is hoisting. The function declarations are hoisted but not class declarations.Classes:const user = new User(); // ReferenceErrorclass User {}Constructor Function:const user = new User(); // No errorfunction User() {}⬆ Back to TopWhat is an async functionAn async function is a function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more await expressions.Let's take a below async function example,async function logger() {  let data = await fetch(\""http://someapi.com/users\""); // pause until fetch returns  console.log(data);}logger();It is basically syntax sugar over ES2015 promises and generators.⬆ Back to TopHow do you prevent promises swallowing errorsWhile using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.Let's say you expect to print an error to the console for all the below cases,Promise.resolve(\""promised value\"").then(function () {  throw new Error(\""error\"");});Promise.reject(\""error value\"").catch(function () {  throw new Error(\""error\"");});new Promise(function (resolve, reject) {  throw new Error(\""error\"");});But there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways,Add catch block at the end of each chain: You can add catch block to the end of each of your promise chainsPromise.resolve(\""promised value\"")  .then(function () {    throw new Error(\""error\"");  })  .catch(function (error) {    console.error(error.stack);  });But it is quite difficult to type for each promise chain and verbose too.Add done method: You can replace first solution's then and catch blocks with done methodPromise.resolve(\""promised value\"").done(function () {  throw new Error(\""error\"");});Let's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write done block as below,getDataFromHttp()  .then(function (result) {    return processDataAsync(result);  })  .done(function (processed) {    displayData(processed);  });In future, if the processing library API changed to synchronous then you can remove done block as below,getDataFromHttp().then(function (result) {  return displayData(processDataAsync(result));});and then you forgot to add done block to then block leads to silent errors.Extend ES6 Promises by Bluebird:Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejectionsPromise.onPossiblyUnhandledRejection(function (error) {  throw error;});and discard a rejection, just handle it with an empty catchPromise.reject(\""error value\"").catch(function () {});⬆ Back to TopWhat is denoDeno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.⬆ Back to TopHow do you make an object iterable in javascriptBy default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator property on it.Let's demonstrate this with an example,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]() {    const values = Object.keys(this);    let i = 0;    return {      next: () => {        return {          value: this[values[i++]],          done: i > values.length,        };      },    };  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // → {value: 1, done: false}console.log(iterator.next()); // → {value: 2, done: false}console.log(iterator.next()); // → {value: 3, done: false}console.log(iterator.next()); // → {value: undefined, done: true}The above process can be simplified using a generator function,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]: function* () {    for (let key in this) {      yield this[key];    }  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // {value: 1, done: false}console.log(iterator.next()); // {value: 2, done: false}console.log(iterator.next()); // {value: 3, done: false}console.log(iterator.next()); // {value: undefined, done: true}⬆ Back to TopWhat is a Proper Tail CallFirst, we should know about tail call before talking about \""Proper Tail Call\"". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto n * factorial(n - 1)function factorial(n) {  if (n === 0) {    return 1;  }  return n * factorial(n - 1);}console.log(factorial(5)); //120But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.function factorial(n, acc = 1) {  if (n === 0) {    return acc;  }  return factorial(n - 1, n * acc);}console.log(factorial(5)); //120The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.⬆ Back to TopHow do you check an object is a promise or notIf you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a promisefunction isPromise(object) {  if (Promise && Promise.resolve) {    return Promise.resolve(object) == object;  } else {    throw \""Promise not supported in your environment\"";  }}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // trueAnother way is to check for .then() handler typefunction isPromise(value) {  return Boolean(value && typeof value.then === \""function\"");}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // true⬆ Back to TopHow to detect if a function is called as constructorYou can use new.target pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.For function calls, new.target is undefined.function Myfunc() {   if (new.target) {      console.log('called with new');   } else {      console.log('not called with new');   }}new Myfunc(); // called with newMyfunc(); // not called with newMyfunc.call({}); // not called with new⬆ Back to TopWhat are the differences between arguments object and rest parameterThere are three main differences between arguments object and rest parametersThe arguments object is an array-like but not an array. Whereas the rest parameters are array instances.The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.The rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function⬆ Back to TopWhat are the differences between spread operator and rest parameterRest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.⬆ Back to TopWhat are the different kinds of generatorsThere are five kinds of generators,Generator function declaration:function* myGenFunc() {  yield 1;  yield 2;  yield 3;}const genObj = myGenFunc();Generator function expressions:const myGenFunc = function* () {  yield 1;  yield 2;  yield 3;};const genObj = myGenFunc();Generator method definitions in object literals:const myObj = {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  },};const genObj = myObj.myGeneratorMethod();Generator method definitions in class:class MyClass {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  }}const myObject = new MyClass();const genObj = myObject.myGeneratorMethod();Generator as a computed property:const SomeObj = {  *[Symbol.iterator]() {    yield 1;    yield 2;    yield 3;  },};console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]⬆ Back to TopWhat are the built-in iterablesBelow are the list of built-in iterables in javascript,Arrays and TypedArraysStrings: Iterate over each character or Unicode code-pointsMaps: iterate over its key-value pairsSets: iterates over their elementsarguments: An array-like special variable in functionsDOM collection such as NodeList⬆ Back to TopWhat are the differences between for...of and for...in statementsBoth for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:for..in iterates over all enumerable property keys of an objectfor..of iterates over the values of an iterable object.Let's explain this difference with an example,let arr = [\""a\"", \""b\"", \""c\""];arr.newProp = \""newVlue\"";// key are the property keysfor (let key in arr) {  console.log(key); // 0, 1, 2 & newValue}// value are the property valuesfor (let value of arr) {  console.log(value); // a, b, c}Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.⬆ Back to TopHow do you define instance and non-instance propertiesThe Instance properties must be defined inside of class methods. For example, name and age properties defined inside constructor as below,class Person {  constructor(name, age) {    this.name = name;    this.age = age;  }}But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign the age value for Person class as below,Person.staticAge = 30;Person.prototype.prototypeAge = 40;⬆ Back to TopWhat is the difference between isNaN and Number.isNaN?isNaN: The global function isNaN converts the argument to a Number and returns true if the resulting value is NaN.Number.isNaN: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.Let's see the difference with an example,isNaN(‘hello’);   // trueNumber.isNaN('hello'); // false⬆ Back to TopHow to invoke an IIFE without any extra brackets?Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.(function (dt) {  console.log(dt.toLocaleTimeString());})(new Date());Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using void operator for IIFE as below,void function (dt) {  console.log(dt.toLocaleTimeString());}(new Date());⬆ Back to TopIs that possible to use expressions in switch cases?You might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let's see the weather condition based on temparature as an example,const weather = (function getWeather(temp) {  switch (true) {    case temp < 0:      return \""freezing\"";    case temp < 10:      return \""cold\"";    case temp < 24:      return \""cool\"";    default:      return \""unknown\"";  }})(10);⬆ Back to TopWhat is the easiest way to ignore promise errors?The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.await promise.catch((e) => void e);⬆ Back to TopHow do style the console output using CSS?You can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let's print the red the color text using console.log and CSS specifier as below,console.log(\""%cThis is a red text\"", \""color:red\"");It is also possible to add more styles for the content. For example, the font-size can be modified for the above textconsole.log(  \""%cThis is a red text with bigger font\"",  \""color:red; font-size:20px\"");⬆ Back to TopWhat is nullish coalescing operator (??)?It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.console.log(null ?? true); // trueconsole.log(false ?? true); // falseconsole.log(undefined ?? true); // true⬆ Back to TopHow do you group and nest console output?The console.group() can be used to group related log messages to be able to easily read the logs and use console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in hierarchical manner.For example, if you’re logging a user’s details:console.group(\""User Details\"");console.log(\""name: Sudheer Jonna\"");console.log(\""job: Software Developer\"");// Nested Groupconsole.group(\""Address\"");console.log(\""Street: Commonwealth\"");console.log(\""City: Los Angeles\"");console.log(\""State: California\"");// Close nested groupconsole.groupEnd();// Close outer groupconsole.groupEnd()You can also use console.groupCollapsed() instead of console.group() if you want the groups to be collapsed by default.⬆ Back to TopWhat is the difference between dense and sparse arrays?An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array. Whereas if at least one item is missing at any index, the array is called as sparse.Let's see the below two kind of arrays,const avengers = [\""Ironman\"", \""Hulk\"", \""CaptainAmerica\""];console.log(avengers[0]); // 'Ironman'console.log(avengers[1]); // 'Hulk'console.log(avengers[2]); // 'CaptainAmerica'console.log(avengers.length); // 3const justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague[0]); // 'Superman'console.log(justiceLeague[1]); // 'Aquaman'console.log(justiceLeague[2]); // undefinedconsole.log(justiceLeague[3]); // 'Batman'console.log(justiceLeague.length); // 4⬆ Back to TopWhat are the different ways to create sparse arrays?There are 4 different ways to create sparse arrays in JavaScriptArray literal: Omit a value when using the array literalconst justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague); // ['Superman', 'Aquaman', empty ,'Batman']Array() constructor: Invoking Array(length) or new Array(length)const array = Array(3);console.log(array); // [empty, empty ,empty]Delete operator: Using delete array[index] operator on the arrayconst justiceLeague = [\""Superman\"", \""Aquaman\"", \""Batman\""];delete justiceLeague[1];console.log(justiceLeague); // ['Superman', empty, ,'Batman']Increase length property: Increasing length property of an arrayconst justiceLeague = ['Superman', 'Aquaman', 'Batman'];justiceLeague.length = 5;console.log(justiceLeague); // ['Superman', 'Aquaman', 'Batman', empty, empty]⬆ Back to TopWhat is the difference between setTimeout, setImmediate and process.nextTick?Set Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.Set Immediate: The setImmediate function is used to execute a function right after the current event loop finishes.Process NextTick: If process.nextTick() is called in a given phase, all the callbacks passed to process.nextTick() will be resolved before the event loop continues. This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.⬆ Back to TopHow do you reverse an array without modifying original array?The reverse() method reverses the order of the elements in an array but it mutates the original array. Let's take a simple example to demonistrate this case,const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reverse();console.log(newArray); // [ 5, 4, 3, 2, 1]console.log(originalArray); // [ 5, 4, 3, 2, 1]There are few solutions that won't mutate the original array. Let's take a look.Using slice and reverse methods:In this case, just invoke the slice() method on the array to create a shallow copy followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.slice().reverse(); //Slice an array gives a new copyconsole.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using spread and reverse methods:In this case, let's use the spread syntax (...) to create a copy of the array followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = [...originalArray].reverse();console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduce and spread methods:Here execute a reducer function on an array elements and append the accumulated array on right side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduce((accumulator, value) => {  return [value, ...accumulator];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and spread methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append the accumulated array on left side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  return [...accumulator, value];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and push methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the iterated value to the accumulatorconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  accumulator.push(value);  return accumulator;}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]⬆ Back to TopHow do you create custom HTML element?The creation of custom HTML elements involves two main steps,Define your custom HTML element: First you need to define some custom class by extending HTMLElement class.After that define your component properties (styles,text etc) using connectedCallback method.Note: The browser exposes a function called customElements.define inorder to reuse the element.class CustomElement extends HTMLElement {  connectedCallback() {    this.innerHTML = \""This is a custom element\"";  }}customElements.define(\""custom-element\"", CustomElement);Use custome element just like other HTML element: Declare your custom element as a HTML tag.   <body>        <custom-element>   </body>⬆ Back to TopWhat is global execution context?The global execution context is the default or first execution context that is created by the JavaScript engine before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside a function or object will be executed inside this global execution context. Since JS engine is single threaded there will be only one global environment and there will be only one global execution context.For example, the below code other than code inside any function or object is executed inside the global execution context.var x = 10;function A() {  console.log(\""Start function A\"");  function B() {    console.log(\""In function B\"");  }  B();}A();console.log(\""GlobalContext\"");⬆ Back to TopWhat is function execution context?Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within that function.⬆ Back to TopWhat is debouncing?Debouncing is a programming pattern that allows delaying execution of some piece of code until a specified time to avoid unnecessary CPU cycles, API calls and improve performance. The debounce function make sure that your code is only triggered once per user input. The common usecases are Search box suggestions, text-field auto-saves, and eliminating double-button clicks.Let's say you want to show suggestions for a search query, but only after a visitor has finished typing it. So here you write a debounce function where the user keeps writing the characters with in 500ms then previous timer cleared out using clearTimeout and reschedule API call/DB query for a new time—300 ms in the future.function debounce(func, timeout = 500) {  let timer;  return (...args) => {    clearTimeout(timer);    timer = setTimeout(() => {      func.apply(this, args);    }, timeout);  };}function fetchResults() {  console.log(\""Fetching input suggestions\"");}const processChange = debounce(() => fetchResults());The debounce() function can be used on input, button and window eventsInput:<input type=\""text\"" onkeyup=\""processChange()\"" />Button:<button onclick=\""processChange()\"">Click me</button>Windows event:window.addEventListener(\""scroll\"", processChange);⬆ Back to TopWhat is throttling?Throttling is a technique used to limit the execution of an event handler function, even when this event triggers continuously due to user actions. The common use cases are browser resizing, window scrolling etc.The below example creates a throttle function to reduce the number of events for each pixel change and trigger scroll event for each 100ms except for the first event.const throttle = (func, limit) => {  let inThrottle;  return (...args) => {    if (!inThrottle) {      func.apply(this, args);      inThrottle = true;      setTimeout(() => (inThrottle = false), limit);    }  };};window.addEventListener(\""scroll\"", () => {  throttle(handleScrollAnimation, 100);});⬆ Back to TopWhat is optional chaining?According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist. const adventurer = {   name: 'Alice',   cat: {     name: 'Dinah'   } }; const dogName = adventurer.dog?.name; console.log(dogName); // expected output: undefined console.log(adventurer.someNonExistentMethod?.()); // expected output: undefined⬆ Back to TopWhat is an environment record?According to ECMAScript specification 262 (9.1):Environment Record is a specification type used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.⬆ Back to TopHow to verify if a variable is an array?It is possible to check if a variable is an array instance using 3 different ways,Array.isArray() method:The Array.isArray(value) utility function is used to determine whether value is an array or not. This function returns a true boolean value if the variable is an array and a false value if it is not.const numbers = [1, 2, 3];const user = { name: 'John' };Array.isArray(numbers);  // trueArray.isArray(user); //falseinstanceof operator:The instanceof operator is used to check the type of an array at run time. It returns true if the type of a variable is an Array other false for other type.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers instanceof Array);  // trueconsole.log(user instanceof Array);  // falseChecking constructor type:The constructor property of the variable is used to determine whether the variable Array type or not.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers.constructor === Array);  // trueconsole.log(user.constructor === Array);  // false⬆ Back to TopWhat is pass by value and pass by reference?Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.let a = 5;let b = a;b++;console.log(a, b); //5, 6In the above code snippet, the value of a is assigned to b and the variable b has been incremented. Since there is a new space created for variable b, any update on this variable doesn't impact the variable a.Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.let user1 = {   name: 'John',   age: 27};let user2 = user1;user2.age = 30;console.log(user1.age, user2.age); // 30, 30In the above code snippet, updating the age property of one object will impact the other property due to the same reference.⬆ Back to TopWhat are the differences between primitives and non-primitives?JavaScript language has both primitives and non-primitives but there are few differences between them as below,PrimitivesNon-primitivesThese types are predefinedCreated by developerThese are immutableMutableCompare by valueCompare by referenceStored in StackStored in heapContain certain valueCan contain NULL too⬆ Back to TopHow do you create your own bind method using either call or apply method?The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions. This custom function should return a function similar to original bind method and the implementation of inner function needs to use apply method call.The function which is going to bind using custom myOwnBind method act as the attached function(boundTargetFunction) and argument as the object for apply method call. Function.prototype.myOwnBind = function(whoIsCallingMe) {   if (typeof this !== \""function\"") {     throw new Error(this + \""cannot be bound as it's not callable\"");   }   const boundTargetFunction = this;   return function() {     boundTargetFunction.apply(whoIsCallingMe, arguments);   } }⬆ Back to TopWhat are the differences between pure and impure functions?Some of the major differences between pure and impure function are as below,Pure functionImpure functionIt has no side effectsIt causes side effectsIt is always return the same resultIt returns different result on each callEasy to read and debugDifficult to read and debug because they are affected by extenal code⬆ Back to TopWhat is referential transparency?An expression in javascript that can be replaced by its value without affecting the behaviour of the program is called referential transparency. Pure functions are referentially transparent.const add = (x,y) => x + y;const multiplyBy2 = (x) => x * 2;//Now add (2, 3) can be replaced by 5.multiplyBy2(add(2, 3)); ⬆ Back to TopWhat are the possible side-effects in javascript?A side effect is the modification of state through the invocation of a function or expression. These side effects makes our function impure by default. Below are some side effects which makes function impure,Making an HTTP request. Asynchronous functions such as fetch and promise are impure.DOM manipulationsMutating the input dataPrinting to a screen or console: For example, console.log() and alert()Fetching the current timeMath.random() calls: Modifies the internal state of Math object⬆ Back to TopWhat are compose and pipe functions?The \""compose\"" and \""pipe\"" are two techniques commonly used in functional programming to simplify complex operations and make code more readable. They are not native to JavaScript and higher-order functions. the compose() applies right to left any number of functions to the output of the previous function.⬆ Back to TopWhat is module pattern?Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Python, etc) to provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e., a closure that protect variables and methods.The module pattern looks like below, (function() { // Private variables or functions goes here. return {     // Return public variables or functions here. } })();Let's see an example of a module pattern for an employee with private and public access,const createEmployee = (function () {   // Private   const name = \""John\"";   const department = \""Sales\"";   const getEmployeeName = () => name;   const getDepartmentName = () => department;   // Public   return {     name,     department,     getName: () => getEmployeeName(),     getDepartment: () => getDepartmentName(),   }; })(); console.log(createEmployee.name); console.log(createEmployee.department); console.log(createEmployee.getName()); console.log(createEmployee.getDepartment());Note: It mimic the concepts of classes with private variables and methods.⬆ Back to TopWhat is Function Composition?It is an approach where the result of one function is passed on to the next function, which is passed to another until the final function is executed for the final result. //example const double = x => x * 2 const square = x => x * x var output1 = double(2); var output2 = square(output1); console.log(output2); var output_final = square(double(2)); console.log(output_final);⬆ Back to TopHow to use await outside of async function prior to ES2022?Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.await Promise.resolve(console.log('Hello await')); // SyntaxError: await is only valid in async functionBut you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the feature. (async function() {   await Promise.resolve(console.log('Hello await')); // Hello await }());In ES2022, you can write top-level await without writing any hacks.await Promise.resolve(console.log('Hello await')); //Hello await⬆ Back to TopCoding Exercise1. What is the output of below codevar car = new Vehicle(\""Honda\"", \""white\"", \""2010\"", \""UK\"");console.log(car);function Vehicle(model, color, year, country) {  this.model = model;  this.color = color;  this.year = year;  this.country = country;}1: Undefined2: ReferenceError3: null4: {model: \""Honda\"", color: \""white\"", year: \""2010\"", country: \""UK\""}AnswerAnswer: 4The function declarations are hoisted similar to any variables. So the placement for Vehicle function declaration doesn't make any difference.⬆ Back to Top2. What is the output of below codefunction foo() {  let x = (y = 0);  x++;  y++;  return x;}console.log(foo(), typeof x, typeof y);1: 1, undefined and undefined2: ReferenceError: X is not defined3: 1, undefined and number4: 1, number and numberAnswerAnswer: 3Of course the return value of foo() is 1 due to the increment operator. But the statement let x = y = 0 declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,let x;window.y = 0;x = window.y;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable y is available outside the function, the value is 0 and type is number.⬆ Back to Top3. What is the output of below codefunction main() {  console.log(\""A\"");  setTimeout(function print() {    console.log(\""B\"");  }, 0);  console.log(\""C\"");}main();1: A, B and C2: B, A and C3: A and C4: A, C and BAnswerAnswer: 4The statements order is based on the event loop mechanism. The order of statements follows the below order,At first, the main function is pushed to the stack.Then the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and popping out immediately.But setTimeout statement moved to Browser API to apply the delay for callback.In the meantime, C's console.log added to stack, executed and popped out.The callback of setTimeout moved from Browser API to message queue.The main function popped out from stack because there are no statements to executeThe callback moved from message queue to the stack since the stack is empty.The console.log for B is added to the stack and display on the console.⬆ Back to Top4. What is the output of below equality checkconsole.log(0.1 + 0.2 === 0.3);1: false2: trueAnswerAnswer: 1This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results.You can find more details about the explanation here 0.30000000000000004.com/⬆ Back to Top5. What is the output of below codevar y = 1;if (function f() {}) {  y += typeof f;}console.log(y);1: 1function2: 1object3: ReferenceError4: 1undefinedAnswerAnswer: 4The main points in the above code snippets are,You can see function expression instead function declaration inside if statement. So it always returns true.Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.In other words, it is same asvar y = 1;if (\""foo\"") {  y += typeof f;}console.log(y);Note: It returns 1object for MS Edge browser⬆ Back to Top6. What is the output of below codefunction foo() {  return;  {    message: \""Hello World\"";  }}console.log(foo());1: Hello World2: Object {message: \""Hello World\""}3: Undefined4: SyntaxErrorAnswerAnswer: 3This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.function foo() {  return {    message: \""Hello World\"",  };}console.log(foo()); // {message: \""Hello World\""}⬆ Back to Top7. What is the output of below codevar myChars = [\""a\"", \""b\"", \""c\"", \""d\""];delete myChars[0];console.log(myChars);console.log(myChars[0]);console.log(myChars.length);1: [empty, 'b', 'c', 'd'], empty, 32: [null, 'b', 'c', 'd'], empty, 33: [empty, 'b', 'c', 'd'], undefined, 44: [null, 'b', 'c', 'd'], undefined, 4AnswerAnswer: 3The delete operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed.If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array. The newer versions of Chrome use empty instead of undefined to make the difference a bit clearer.⬆ Back to Top8. What is the output of below code in latest Chromevar array1 = new Array(3);console.log(array1);var array2 = [];array2[2] = 100;console.log(array2);var array3 = [, , ,];console.log(array3);1: [undefined × 3], [undefined × 2, 100], [undefined × 3]2: [empty × 3], [empty × 2, 100], [empty × 3]3: [null × 3], [null × 2, 100], [null × 3]4: [], [100], []AnswerAnswer: 2The latest chrome versions display sparse array(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation.Note: The latest version of FF displays n empty slots notation.⬆ Back to Top9. What is the output of below codeconst obj = {  prop1: function () {    return 0;  },  prop2() {    return 1;  },  [\""prop\"" + 3]() {    return 2;  },};console.log(obj.prop1());console.log(obj.prop2());console.log(obj.prop3());1: 0, 1, 22: 0, { return 1 }, 23: 0, { return 1 }, { return 2 }4: 0, 1, undefinedAnswerAnswer: 1ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.⬆ Back to Top10. What is the output of below codeconsole.log(1 < 2 < 3);console.log(3 > 2 > 1);1: true, true2: true, false3: SyntaxError, SyntaxError,4: false, falseAnswerAnswer: 2The important point is that if the statement contains the same operators(e.g, < or >) then it can be evaluated from left to right.The first statement follows the below order,console.log(1 < 2 < 3);console.log(true < 3);console.log(1 < 3); // True converted as 1 during comparisonTrueWhereas the second statement follows the below order,console.log(3 > 2 > 1);console.log(true > 1);console.log(1 > 1); // False converted as 0 during comparisonFalse⬆ Back to Top11. What is the output of below code in non-strict modefunction printNumbers(first, second, first) {  console.log(first, second, first);}printNumbers(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 2In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters.The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.Note: In strict mode, duplicate parameters will throw a Syntax Error.⬆ Back to Top12. What is the output of below codeconst printNumbersArrow = (first, second, first) => {  console.log(first, second, first);};printNumbersArrow(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 3Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see SyntaxError in the console.⬆ Back to Top13. What is the output of below codeconst arrowFunc = () => arguments.length;console.log(arrowFunc(1, 2, 3));1: ReferenceError: arguments is not defined2: 33: undefined4: nullAnswerAnswer: 1Arrow functions do not have an arguments, super, this, or new.target bindings. So any reference to arguments variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.Where as the normal function provides the number of arguments passed to the functionconst func = function () {  return arguments.length;};console.log(func(1, 2, 3));But If you still want to use an arrow function then rest operator on arguments provides the expected argumentsconst arrowFunc = (...args) => args.length;console.log(arrowFunc(1, 2, 3));⬆ Back to Top14. What is the output of below codeconsole.log(String.prototype.trimLeft.name === \""trimLeft\"");console.log(String.prototype.trimLeft.name === \""trimStart\"");1: True, False2: False, TrueAnswerAnswer: 2In order to be consistent with functions like String.prototype.padStart, the standard method name for trimming the whitespaces is considered as trimStart. Due to web web compatibility reasons, the old method name 'trimLeft' still acts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'⬆ Back to Top15. What is the output of below codeconsole.log(Math.max());1: undefined2: Infinity3: 04: -InfinityAnswerAnswer: 4-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned.Note: Zero number of arguments is a valid case.⬆ Back to Top16. What is the output of below codeconsole.log(10 == [10]);console.log(10 == [[[[[[[10]]]]]]]);1: True, True2: True, False3: False, False4: False, TrueAnswerAnswer: 1As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below10 === Number([10].valueOf().toString()); // 10So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.⬆ Back to Top17. What is the output of below codeconsole.log(10 + \""10\"");console.log(10 - \""10\"");1: 20, 02: 1010, 03: 1010, 10-104: NaN, NaNAnswerAnswer: 2The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.⬆ Back to Top18. What is the output of below codeconsole.log([0] == false);if ([0]) {  console.log(\""I'm True\"");} else {  console.log(\""I'm False\"");}1: True, I'm True2: True, I'm False3: False, I'm True4: False, I'm FalseAnswerAnswer: 1In comparison operators, the expression [0] converted to Number([0].valueOf().toString()) which is resolved to false. Whereas [0] just becomes a truthy value without any conversion because there is no comparison operator.19. What is the output of below codeconsole.log([1, 2] + [3, 4]);1: [1,2,3,4]2: [1,2][3,4]3: SyntaxError4: 1,23,4AnswerAnswer: 4The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.⬆ Back to Top20. What is the output of below codeconst numbers = new Set([1, 1, 2, 3, 4]);console.log(numbers);const browser = new Set(\""Firefox\"");console.log(browser);1: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}2: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""}3: [1, 2, 3, 4], [\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""]4: {1, 1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}AnswerAnswer: 1Since Set object is a collection of unique values, it won't allow duplicate values in the collection. At the same time, it is case sensitive data structure.⬆ Back to Top21. What is the output of below codeconsole.log(NaN === NaN);1: True2: FalseAnswerAnswer: 2JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.⬆ Back to Top22. What is the output of below codelet numbers = [1, 2, 3, 4, NaN];console.log(numbers.indexOf(NaN));1: 42: NaN3: SyntaxError4: -1AnswerAnswer: 4The indexOf uses strict equality operator(===) internally and NaN === NaN evaluates to false. Since indexOf won't be able to find NaN inside an array, it returns -1 always.But you can use Array.prototype.findIndex method to find out the index of NaN in an array or You can use Array.prototype.includes to check if NaN is present in an array or not.let numbers = [1, 2, 3, 4, NaN];console.log(numbers.findIndex(Number.isNaN)); // 4console.log(numbers.includes(NaN)); // true⬆ Back to Top23. What is the output of below codelet [a, ...b,] = [1, 2, 3, 4, 5];console.log(a, b);1: 1, [2, 3, 4, 5]2: 1, {2, 3, 4, 5}3: SyntaxError4: 1, [2, 3, 4]AnswerAnswer: 3When using rest parameters, trailing commas are not allowed and will throw a SyntaxError.If you remove the trailing comma then it displays 1st answerlet [a, ...b] = [1, 2, 3, 4, 5];console.log(a, b); // 1, [2, 3, 4, 5]⬆ Back to Top25. What is the output of below codeasync function func() {  return 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<rejected>: 10}AnswerAnswer: 1Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10);}⬆ Back to Top26. What is the output of below codeasync function func() {  await 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<resolved>: undefined}AnswerAnswer: 4The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a .then callback. In this case, there is no return expression at the end of the function. Hence, the default return value of undefined is returned as the resolution of the promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10).then(() => undefined);}⬆ Back to Top27. What is the output of below codefunction delay() {  return new Promise(resolve => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function processArray(array) {  array.forEach(item => {    await delayedLog(item);  })}processArray([1, 2, 3, 4]);1: SyntaxError2: 1, 2, 3, 43: 4, 4, 4, 44: 4, 3, 2, 1AnswerAnswer: 1Even though “processArray” is an async function, the anonymous function that we use for forEach is synchronous. If you use await inside a synchronous function then it throws a syntax error.⬆ Back to Top28. What is the output of below codefunction delay() {  return new Promise((resolve) => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function process(array) {  array.forEach(async (item) => {    await delayedLog(item);  });  console.log(\""Process completed!\"");}process([1, 2, 3, 5]);1: 1 2 3 5 and Process completed!2: 5 5 5 5 and Process completed!3: Process completed! and 5 5 5 54: Process completed! and 1 2 3 5AnswerAnswer: 4The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.But you control the array sequence using for..of loop,async function processArray(array) {  for (const item of array) {    await delayedLog(item);  }  console.log(\""Process completed!\"");}⬆ Back to Top29. What is the output of below codevar set = new Set();set.add(\""+0\"").add(\""-0\"").add(NaN).add(undefined).add(NaN);console.log(set);1: Set(4) {\""+0\"", \""-0\"", NaN, undefined}2: Set(3) {\""+0\"", NaN, undefined}3: Set(5) {\""+0\"", \""-0\"", NaN, undefined, NaN}4: Set(4) {\""+0\"", NaN, undefined, NaN}AnswerAnswer: 1Set has few exceptions from equality check,All NaN values are equalBoth +0 and -0 considered as different values⬆ Back to Top30. What is the output of below codeconst sym1 = Symbol(\""one\"");const sym2 = Symbol(\""one\"");const sym3 = Symbol.for(\""two\"");const sym4 = Symbol.for(\""two\"");console.log(sym1 === sym2, sym3 === sym4);1: true, true2: true, false3: false, true4: false, falseAnswerAnswer: 3Symbol follows below conventions,Every symbol value returned from Symbol() is unique irrespective of the optional string.Symbol.for() function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.Note: The symbol description is just useful for debugging purposes.⬆ Back to Top31. What is the output of below codeconst sym1 = new Symbol(\""one\"");console.log(sym1);1: SyntaxError2: one3: Symbol('one')4: SymbolAnswerAnswer: 1Symbol is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError⬆ Back to Top32. What is the output of below codelet myNumber = 100;let myString = \""100\"";if (!typeof myNumber === \""string\"") {  console.log(\""It is not a string!\"");} else {  console.log(\""It is a string!\"");}if (!typeof myString === \""number\"") {  console.log(\""It is not a number!\"");} else {  console.log(\""It is a number!\"");}1: SyntaxError2: It is not a string!, It is not a number!3: It is not a string!, It is a number!4: It is a string!, It is a number!AnswerAnswer: 4The return value of typeof myNumber or typeof myString is always a truthy value (either \""number\"" or \""string\""). The ! operator operates on either typeof myNumber or typeof myString, converting them to boolean values. Since the value of both !typeof myNumber and !typeof myString is false, the if condition fails, and control goes to else block.To make the ! operator operate on the equality expression, one needs to add parentheses:if (!(typeof myNumber === \""string\""))Or simply use the inequality operator:if (typeof myNumber !== \""string\"")⬆ Back to Top33. What is the output of below codeconsole.log(  JSON.stringify({ myArray: [\""one\"", undefined, function () {}, Symbol(\""\"")] }));console.log(  JSON.stringify({ [Symbol.for(\""one\"")]: \""one\"" }, [Symbol.for(\""one\"")]));1: {\""myArray\"":['one', undefined, {}, Symbol]}, {}2: {\""myArray\"":['one', null,null,null]}, {}3: {\""myArray\"":['one', null,null,null]}, \""{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\""4: {\""myArray\"":['one', undefined, function(){}, Symbol('')]}, {}AnswerAnswer: 2The symbols has below constraints,The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).⬆ Back to Top34. What is the output of below codeclass A {  constructor() {    console.log(new.target.name);  }}class B extends A {  constructor() {    super();  }}new A();new B();1: A, A2: A, BAnswerAnswer: 2Using constructors, new.target refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.⬆ Back to Top35. What is the output of below codeconst [x, ...y, z] = [1, 2, 3, 4];console.log(x, y, z);1: 1, [2, 3], 42: 1, [2, 3, 4], undefined3: 1, [2], 34: SyntaxErrorAnswerAnswer: 4It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.⬆ Back to Top36. What is the output of below codeconst { a: x = 10, b: y = 20 } = { a: 30 };console.log(x);console.log(y);1: 30, 202: 10, 203: 10, undefined4: 30, undefinedAnswerAnswer: 1The object property follows below rules,The object properties can be retrieved and assigned to a variable with a different nameThe property assigned a default value when the retrieved value is undefined⬆ Back to Top37. What is the output of below codefunction area({ length = 10, width = 20 }) {  console.log(length * width);}area();1: 2002: Error3: undefined4: 0AnswerAnswer: 2If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error Error: Cannot read property 'length' of undefined as mentioned above.You can avoid the error with either of the below changes,Pass at least an empty object:function area({ length = 10, width = 20 }) {  console.log(length * width);}area({});Assign default empty object:function area({ length = 10, width = 20 } = {}) {  console.log(length * width);}area();⬆ Back to Top38. What is the output of below codeconst props = [  { id: 1, name: \""John\"" },  { id: 2, name: \""Jack\"" },  { id: 3, name: \""Tom\"" },];const [, , { name }] = props;console.log(name);1: Tom2: Error3: undefined4: JohnAnswerAnswer: 1It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.⬆ Back to Top39. What is the output of below codefunction checkType(num = 1) {  console.log(typeof num);}checkType();checkType(undefined);checkType(\""\"");checkType(null);1: number, undefined, string, object2: undefined, undefined, string, object3: number, number, string, object4: number, number, number, numberAnswerAnswer: 3If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a parameter.Hence, the result of function calls categorized as below,The first two function calls logs number type since the type of default value is numberThe type of '' and null values are string and object type respectively.⬆ Back to Top40. What is the output of below codefunction add(item, items = []) {  items.push(item);  return items;}console.log(add(\""Orange\""));console.log(add(\""Apple\""));1: ['Orange'], ['Orange', 'Apple']2: ['Orange'], ['Apple']AnswerAnswer: 2Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.⬆ Back to Top41. What is the output of below codefunction greet(greeting, name, message = greeting + \"" \"" + name) {  console.log([greeting, name, message]);}greet(\""Hello\"", \""John\"");greet(\""Hello\"", \""John\"", \""Good morning!\"");1: SyntaxError2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']AnswerAnswer: 2Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.⬆ Back to Top42. What is the output of below codefunction outer(f = inner()) {  function inner() {    return \""Inner\"";  }}outer();1: ReferenceError2: InnerAnswerAnswer: 1The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, inner is not defined).⬆ Back to Top43. What is the output of below codefunction myFun(x, y, ...manyMoreArgs) {  console.log(manyMoreArgs);}myFun(1, 2, 3, 4, 5);myFun(1, 2);1: [3, 4, 5], undefined2: SyntaxError3: [3, 4, 5], []4: [3, 4, 5], [undefined]AnswerAnswer: 3The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.⬆ Back to Top44. What is the output of below codeconst obj = { key: \""value\"" };const array = [...obj];console.log(array);1: ['key', 'value']2: TypeError3: []4: ['key']AnswerAnswer: 2Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as map(), reduce(), and assign(). If you still try to do it, it still throws TypeError: obj is not iterable.⬆ Back to Top45. What is the output of below codefunction* myGenFunc() {  yield 1;  yield 2;  yield 3;}var myGenObj = new myGenFunc();console.log(myGenObj.next().value);1: 12: undefined3: SyntaxError4: TypeErrorAnswerAnswer: 4Generators are not constructible type. But if you still proceed to do, there will be an error saying \""TypeError: myGenFunc is not a constructor\""⬆ Back to Top46. What is the output of below codefunction* yieldAndReturn() {  yield 1;  return 2;  yield 3;}var myGenObj = yieldAndReturn();console.log(myGenObj.next());console.log(myGenObj.next());console.log(myGenObj.next());1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }AnswerAnswer: 1A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: {value: undefined, done: true}.⬆ Back to Top47. What is the output of below codeconst myGenerator = (function* () {  yield 1;  yield 2;  yield 3;})();for (const value of myGenerator) {  console.log(value);  break;}for (const value of myGenerator) {  console.log(value);}1: 1,2,3 and 1,2,32: 1,2,3 and 4,5,63: 1 and 14: 1AnswerAnswer: 4The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break & return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn't print any value.⬆ Back to Top48. What is the output of below codeconst num = 0o38;console.log(num);1: SyntaxError2: 38AnswerAnswer: 1If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.⬆ Back to Top49. What is the output of below codeconst squareObj = new Square(10);console.log(squareObj.area);class Square {  constructor(length) {    this.length = length;  }  get area() {    return this.length * this.length;  }  set area(value) {    this.area = value;  }}1: 1002: ReferenceErrorAnswerAnswer: 2Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError \""Uncaught ReferenceError: Square is not defined\"".Note: Class expressions also applies to the same hoisting restrictions of class declarations.⬆ Back to Top50. What is the output of below codefunction Person() {}Person.prototype.walk = function () {  return this;};Person.run = function () {  return this;};let user = new Person();let walk = user.walk;console.log(walk());let run = Person.run;console.log(run());1: undefined, undefined2: Person, Person3: SyntaxError4: Window, WindowAnswerAnswer: 4When a regular or prototype method is called without a value for this, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial this value is undefined so both methods return window objects.⬆ Back to Top51. What is the output of below codeclass Vehicle {  constructor(name) {    this.name = name;  }  start() {    console.log(`${this.name} vehicle started`);  }}class Car extends Vehicle {  start() {    console.log(`${this.name} car started`);    super.start();  }}const car = new Car(\""BMW\"");console.log(car.start());1: SyntaxError2: BMW vehicle started, BMW car started3: BMW car started, BMW vehicle started4: BMW car started, BMW car startedAnswerAnswer: 3The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to be a first statement. i.e, The statements will be executed in the same order of code.⬆ Back to Top52. What is the output of below codeconst USER = { age: 30 };USER.age = 25;console.log(USER.age);1: 302: 253: Uncaught TypeError4: SyntaxErrorAnswerAnswer: 2Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.⬆ Back to Top53. What is the output of below codeconsole.log(\""🙂\"" === \""🙂\"");1: false2: trueAnswerAnswer: 2Emojis are unicodes and the unicode for smile symbol is \""U+1F642\"". The unicode comparision of same emojies is equivalent to string comparison. Hence, the output is always true.⬆ Back to Top54. What is the output of below code?console.log(typeof typeof typeof true);1: string2: boolean3: NaN4: numberAnswerAnswer: 1The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.⬆ Back to Top55. What is the output of below code?let zero = new Number(0);if (zero) {  console.log(\""If\"");} else {  console.log(\""Else\"");}1: If2: Else3: NaN4: SyntaxErrorAnswerAnswer: 1The type of operator on new Number always returns object. i.e, typeof new Number(0) --> object.Objects are always truthy in if blockHence the above code block always goes to if section.⬆ Back to Top55. What is the output of below code in non strict mode?let msg = \""Good morning!!\"";msg.name = \""John\"";console.log(msg.name);1: \""\""2: Error3: John4: UndefinedAnswerAnswer: 4It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.⬆ Back to Top56. What is the output of below code?let count = 10;(function innerFunc() {  if (count === 10) {    let count = 11;    console.log(count);  }  console.log(count);})();1: 11, 102: 11, 113: 10, 114: 10, 10AnswerAnswer: 111 and 10 is logged to the console.The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has another local variable count which overwrites the ourter count variable. So the first console.log displays value 11.Whereas the second console.log logs 10 by capturing the count variable from outerscope.⬆ Back to Top57. What is the output of below code ?1: console.log(true && 'hi');2: console.log(true && 'hi' && 1);3: console.log(true && '' && 0);Answer1: hi2: 13: ''Reason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.Note: Below these values are consider as falsy value1: 02: ''3: null4: undefined5: NAN⬆ Back to Top58. What is the output of below code ?let arr = [1, 2, 3];let str = \""1,2,3\"";console.log(arr == str);1: false2: Error3: trueAnswerAnswer: 3Arrays have their own implementation of toString method that returns a comma-separated list of elements. So the above code snippet returns true. In order to avoid conversion of array type, we should use === for comparison.⬆ Back to Top59. What is the output of below code?getMessage();var getMessage = () => {  console.log(\""Good morning\"");};1: Good morning2: getMessage is not a function3: getMessage is not defined4: UndefinedAnswerAnswer: 2Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above function will considered as a varible due to it's variable declaration or assignment. So the variables will have undefined value in memory phase and throws an error 'getMessage is not a function' at the code execution phase.⬆ Back to Top60. What is the output of below code?let quickPromise = Promise.resolve();quickPromise.then(() => console.log(\""promise finished\""));console.log(\""program finished\""); 1: program finished2: Cannot predict the order3: program finished, promise finished4: promise finished, program finishedAnswerAnswer: 3Even though a promise is resolved immediately, it won't be executed immediately because its .then/catch/finally handlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current program, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before the log of promise handler.Note: We call the above queue as \""MicroTask Queue\""⬆ Back to Top61. What is the output of below code?console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))console.log('Third line')1: First line, then print a, b, c in a new line, and finally print Third line as next line2: First line, then print a, b, c in a first line, and  print Third line as next line3:  Missing semi-colon error4:  Cannot read properties of undefinedAnswerAnswer: 4When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon based on a set of rules called Automatic Semicolon Insertion which determines whether line break as end of statement or not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines considered as a single statement as below.console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))Hence, there will be cannot read properties of undefined error while applying the array square bracket on log function.⬆ Back to Top62. Write a function that returns a random HEX colorSolution 1 (Iterative generation)const HEX_ALPHABET = [\""0\"", \""1\"", \""2\"", \""3\"", \""4\"", \""5\"", \""6\"", \""7\"", \""8\"", \""9\"", \""a\"", \""b\"", \""c\"", \""d\"", \""e\"", \""f\""];const HEX_PREFIX = \""#\"";const HEX_LENGTH = 6;function generateRandomHex() {\tlet randomHex = \""\"";\tfor(let i = 0; i < HEX_LENGTH; i++) {\t\tconst randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);\t\trandomHex += HEX_ALPHABET[randomIndex];\t}\treturn HEX_PREFIX + randomHex;}Solution 2 (One-liner)const HEX_PREFIX = \""#\"";const HEX_RADIX = 16;const HEX_LENGTH = 6;function generateRandomHex() {\treturn HEX_PREFIX + Math.floor(Math.random() * 0xffffff).toString(HEX_RADIX).padStart(HEX_LENGTH, \""0\"");} ⬆ Back to Top63. What is the output of below code?var of = ['of'];for(var of of of) {  console.log(of);}1:  of2:  SyntaxError: Unexpected token of3:  SyntaxError: Identifier 'of' has already been declared4:  ReferenceError: of is not definedAnswerAnswer: 1In JavaScript, of is not considered as a reserved keyword. So the variable declaration with of is accepted and prints the array value of using for..of loop.But if you use reserved keyword such as in then there will be a syntax error saying SyntaxError: Unexpected token in,var in = ['in'];for(var in in in) {  console.log(in[in]);}⬆ Back to Top64. What is the output of below code?const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort();console.log(numbers);1:  [11, 18, 23, 25, 31, 33, 200]2:  [11, 18, 200, 23, 25, 31, 33]3:  [11, 25, 31, 23, 33, 18, 200]4:  Cannot sort numbersAnswerAnswer: 2By default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings compared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort numerically just supply a comparator function which handles numeric sorts.const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort((a, b) => a - b);console.log(numbers);Note: Sort() method changes the original array.⬆ Back to Top65. What is the output order of below code?setTimeout(() => {console.log('1')}, 0);Promise.resolve('hello').then(() => console.log('2'));console.log('3');1:  1, 2, 32:  1, 3, 23:  3, 1, 24:  3, 2, 1AnswerAnswer: 4When the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later and third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the console. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in the execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and executed. Hence, you will see number 2 printed first followed by 1.⬆ Back to Top66. What is the output of below code?console.log(name);console.log(message());var name = 'John';(function message() {   console.log('Hello John: Welcome');});1:  John, Hello John: Welcome2:  undefined, Hello John, Welcome3:  Reference error: name is not defined, Reference error: message is not defined4:  undefined, Reference error: message is not definedAnswerAnswer: 4IIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence, there will be a reference error for message call.The behavior would be the same with below function expression of message1,console.log(name);console.log(message());var name = 'John';var message = function () {   console.log('Hello John: Welcome');});⬆ Back to Top67. What is the output of below code?message()function message() {  console.log(\""Hello\"");}function message() {  console.log(\""Bye\"");}1:  Reference error: message is not defined2:  Hello3:  Bye4:  Compile time errorAnswerAnswer: 3As part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite or replaces with redefined function content.⬆ Back to Top68. What is the output of below code?var currentCity = \""NewYork\"";var changeCurrentCity = function() {  console.log('Current City:', currentCity);  var currentCity = \""Singapore\"";  console.log('Current City:', currentCity);}changeCurrentCity();1:  NewYork, Singapore2:  NewYork, NewYork3:  undefined, Singapore4:  Singapore, SingaporeAnswerAnswer: 3Due to hositing feature, the variables declared with var will have undefined value in the creation phase so the outer variable currentCity will get same undefined value. But after few lines of code JavaScript engine found a new function call(changeCurrentCity()) to update the current city with var re-declaration. Since each function call will create a new execution context, the same variable will have undefined value before the declaration and new value(Singapore) after the declarion. Hence, the value undefined print first followed by new value Singapore in the execution phase.⬆ Back to Top69. What is the output of below code in an order?function second() {\tvar message;  console.log(message);}function first() {\tvar message=\""first\"";  second();  console.log(message);}var message = \""default\"";first();console.log(message);1:  undefined, first, default2:  default, default, default3:  first, first, default4:  undefined, undefined, undefinedAnswerAnswer: 1Each context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So you can see the message variable value from second, first functions in an order followed by global context message variable value at the end.⬆ Back to Top70. What is the output of below code?var expressionOne = function functionOne() {  console.log(\""functionOne\"");}functionOne();1:  functionOne is not defined2:  functionOne3:  console.log(\""functionOne\"")4:  undefinedAnswerAnswer: 1The function call functionOne is not going to be part of scope chain and it has it's own execution context with the enclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while invoking the function as functionOne is not defined.⬆ Back to Top71. What is the output of below code?const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    eatFruit()  }}user.eat();1:  {name: \""John\"", eat: f}, {name: \""John\"", eat: f}2:  Window {...}, Window {...}3:  {name: \""John\"", eat: f}, undefined4:  {name: \""John\"", eat: f}, Window {...}AnswerAnswer: 4this keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where this has been written but how it has been invoked really matter. In the above code snippet, the user object invokes eat function so this keyword refers to user object but eatFruit has been invoked by eat function and this will have default Window object.The above pit fall fixed by three ways,In ES6, the arrow function will make this keyword as lexically scoped. Since the surrounding object of this object is user object, the eatFruit function will contain user object for this object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = () => {      console.log(this);    }    eatFruit()  }}user.eat();The next two solutions have been used before ES6 introduced.It is possible create a reference of this into a separate variable and use that new variable inplace of this keyword inside eatFruit function. This is a common practice in jQuery and AngularJS before ES6 introduced.const user = {  name: 'John',  eat() {    console.log(this);    var self = this;    var eatFruit = () => {      console.log(self);    }    eatFruit()  }}user.eat();The eatFruit function can bind explicitly with this keyword where it refers Window object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    return eatFruit.bind(this)  }}user.eat()();⬆ Back to Top72. What is the output of below code?let message = 'Hello World!';message[0] = 'J';console.log(message)let name = 'John';name = name + ' Smith';console.log(name);1:  Jello World!, John Smith2:  Jello World!, John3:  Hello World!, John Smith4:  Hello World!, JohnAnswerAnswer: 3In JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when you try to update the string's first character, there is no change in the string value and prints the same initial value Hello World!. Whereas in the later example, the concatenated value is re-assigned to the same variable which will result into creation of new memory block with the reference pointing to John Smith value and the old memory block value(John) will be garbage collected.⬆ Back to Top73. What is the output of below code?let user1 = {       name : 'Jacob',      age : 28    };    let user2 = {          name : 'Jacob',      age : 28    };    console.log(user1 === user2);1:  True2:  False3:  Compile time errorAnswerAnswer: 2In JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to compare two objects with same content, it is going to compare memory address or reference of those variables. These variables always create separate memory blocks hence the comparison is always going to return false value.⬆ Back to Top74. What is the output of below code?function greeting() {  setTimeout(function() {    console.log(message);  }, 5000);  const message = \""Hello, Good morning\"";}greeting();1:  Undefined2:  Reference error:3:  Hello, Good morning4:  nullAnswerAnswer: 3The variable message is still treated as closure(since it has been used in inner function) eventhough it has been declared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable declaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be displayed.⬆ Back to Top75. What is the output of below code?const a = new Number(10);const b = 10;console.log(a === b);1:  False2:  TrueAnswerAnswer: 1Eventhough both variables a and b refer a number value, the first declaration is based on constructor function and the type of the variable is going to be object type. Whereas the second declaration is primitive assignment with a number and the type is number type. Hence, the equality operator === will output false value.⬆ Back to Top76. What is the type of below function?function add(a, b) {  console.log(\""The input arguments are: \"", a, b);  return a + b;}1:  Pure function2:  Impure functionAnswerAnswer: 2Eventhough the above function returns the same result for the same arguments(input) that are passed in the function, the console.log() statement causes a function to have side effects because it affects the state of an external code. i.e, the console object's state and depends on it to perform the job. Hence, the above function considered as impure function.⬆ Back to Top77. What is the output of below code?const promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));const promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));Promise.all([promiseOne, promiseTwo]).then(data => console.log(data));1:  [{status: \""fullfilled\"", value: undefined}, {status: \""rejected\"", reason: undefined}]2:  [{status: \""fullfilled\"", value: undefined}, Uncaught(in promise)]3:  Uncaught (in promise)4:  [Uncaught(in promise), Uncaught(in promise)]AnswerAnswer: 3The above promises settled at the same time but one of them resolved and other one rejected. When you use .all method on these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you use .allSettled method then result of both the promises will be returned irrespective of resolved or rejected promise status without throwing any error.Promise.allSettled([promiseOne, promiseTwo]).then(data => console.log(data)); ⬆ Back to Top78. What is the output of below code?try {  setTimeout(() => {    console.log('try block');    throw new Error(`An exception is thrown`)  }, 1000);} catch(err) {  console.log('Error: ', err);}1:  try block, Error: An exception is thrown2:  Error: An exception is thrown3:  try block, Uncaught Error: Exception is thrown4:  Uncaught Error: Exception is thrownAnswerAnswer: 3If you put setTimeout and setInterval methods inside the try clause and an exception is thrown, the catch clause will not catch any of them. This is because the try...catch statement works synchronously, and the function in the above code is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching the error. To resolve this issue, you have to put the try...catch block inside the function as below,setTimeout(() => {   try {      console.log('try block');      throw new Error(`An exception is thrown`)   } catch(err) {      console.log('Error: ', err);   }    }, 1000);You can use .catch() function in promises to avoid these issues with asynchronous code. ⬆ Back to Top79. What is the output of below code?let a = 10;if(true){  let a = 20;  console.log(a, \""inside\"");}console.log(a, \""outside\"");1:  20, \""inside\"" and 20, \""outside\""2:  20, \""inside\"" and 10, \""outside\""3:  10, \""inside\"" and 10, \""outside\""4:  10, \""inside\"" and 20, \""outside\""AnswerAnswer: 2The variable \""a\"" declared inside \""if\"" has block scope and does not affect the value of the outer \""a\"" variable. ⬆ Back to Top80. What is the output of below code?let arr = [1,2,3,4,5,-6,7];arr.length = 0;console.log(arr);1:  02:  Undefined3:  null4:  [ ]AnswerAnswer: 4The length of the array 'arr' has been set to 0, so the array becomes empty. ⬆ Back to TopDisclaimerThe questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don't know the answer to all of them ⁠— that is ok!Good luck with your interview 😊"
80,hakanyalcinkaya/kodluyoruz-frontend-101-egitimi,https://github.com/hakanyalcinkaya/kodluyoruz-frontend-101-egitimi/blob/main/README.md,JavaScript,"Kodluyoruz - FrontEnd 101 EğitimiHakan YalçınkayaLinkedIn - YouTube - MediumNot: Contributors(Katkıda Bulunanlar) Kısmında İsminizin Görünmesi için Birçok Konuda Bu Repo'ya Katkıda Bulunabilirsiniz. Örneğin Her Bölüm ile İlgili Hazırladığım README Sayfalarına Besleyici Linkler veya Hazırladığım Kod Örneklerine Benzer Değişik Örnekler Hazırlayabilirsiniz 🤗Hazırladığım Diğer Eğitimler:Sıfırdan Projelerle Front-End ve React EğitimiUdemy: Sıfırdan Projelerle JavaScript ve React EğitimiUdemy: Uçtan Uca Projelerle Sıfırdan Full Stack Python ve Django ÖğrenUdemy: İki Eğitmen ile Sıfırdan Pyhon ÖğrenUdemy: Emmet ile HTML ve CSS'te Hızlı Kodlama Teknikleri ÖğreninUdemy: Markdown Öğren: Basit ama Çok Güçlü Yazı BiçimiÖnemli Notlar:Yanlış Yerde Açılan Git Versiyon Kontrol Sistemine Dikkat Etmeniz Gerekiyor. Lütfen < git init > Kullanmadan Önce Bu Videoyu İzleyinEğitimin Genel Hedefi:Yazılım Dünyasına yeni adım atan kişiler için temel konuların incelenmesiroadmap.sh ile hedeflerini kontrol etmelerini sağlamakJavaScript’e geçmeden önce HTML, CSS ve Bootstrap gibi temel yapıları kullanabilmelerini sağlamakText Editör hakimiyetlerini kazandırmakJavaScript temellerini aktarıp herhangi bir Front-End kütüphanesi kullanmadan başlangıç düzeyindeki projeleri hayata geçirebilmelerini sağlamakEğitim Kategorileri:Eğitime BaşlarkenYol HaritasıKurulum ve Genel AyarlarVisual Studio Code KullanımıHTML TemelleriCSS TemelleriBootstrap TemelleriGIT ve GitHubJavascriptKullanılan VS Code Eklentileri:Bracket Pair Colorizer 2Live ServerMarkdown PreviewSık Kullanılan Markdown İşaretlemeleriTutorialDokümanGitHub Markdown Emoji Lists# Başlık 1## Başlık 2.. *italic* **bold*****boldItalic***- Liste Elemanı- Liste Elemanı- Liste ElemanıLink:[Yazi](url)[Kodluyoruz](https://www.kodluyoruz.org/)Image/Gorsel:![Aciklama Bilgisi](url)![Lorem Picsum](https://picsum.photos/200/300)"
81,progedu/adding-up,https://github.com/hakanyalcinkaya/kodluyoruz-frontend-101-egitimi/blob/main/README.md,JavaScript,"Kodluyoruz - FrontEnd 101 EğitimiHakan YalçınkayaLinkedIn - YouTube - MediumNot: Contributors(Katkıda Bulunanlar) Kısmında İsminizin Görünmesi için Birçok Konuda Bu Repo'ya Katkıda Bulunabilirsiniz. Örneğin Her Bölüm ile İlgili Hazırladığım README Sayfalarına Besleyici Linkler veya Hazırladığım Kod Örneklerine Benzer Değişik Örnekler Hazırlayabilirsiniz 🤗Hazırladığım Diğer Eğitimler:Sıfırdan Projelerle Front-End ve React EğitimiUdemy: Sıfırdan Projelerle JavaScript ve React EğitimiUdemy: Uçtan Uca Projelerle Sıfırdan Full Stack Python ve Django ÖğrenUdemy: İki Eğitmen ile Sıfırdan Pyhon ÖğrenUdemy: Emmet ile HTML ve CSS'te Hızlı Kodlama Teknikleri ÖğreninUdemy: Markdown Öğren: Basit ama Çok Güçlü Yazı BiçimiÖnemli Notlar:Yanlış Yerde Açılan Git Versiyon Kontrol Sistemine Dikkat Etmeniz Gerekiyor. Lütfen < git init > Kullanmadan Önce Bu Videoyu İzleyinEğitimin Genel Hedefi:Yazılım Dünyasına yeni adım atan kişiler için temel konuların incelenmesiroadmap.sh ile hedeflerini kontrol etmelerini sağlamakJavaScript’e geçmeden önce HTML, CSS ve Bootstrap gibi temel yapıları kullanabilmelerini sağlamakText Editör hakimiyetlerini kazandırmakJavaScript temellerini aktarıp herhangi bir Front-End kütüphanesi kullanmadan başlangıç düzeyindeki projeleri hayata geçirebilmelerini sağlamakEğitim Kategorileri:Eğitime BaşlarkenYol HaritasıKurulum ve Genel AyarlarVisual Studio Code KullanımıHTML TemelleriCSS TemelleriBootstrap TemelleriGIT ve GitHubJavascriptKullanılan VS Code Eklentileri:Bracket Pair Colorizer 2Live ServerMarkdown PreviewSık Kullanılan Markdown İşaretlemeleriTutorialDokümanGitHub Markdown Emoji Lists# Başlık 1## Başlık 2.. *italic* **bold*****boldItalic***- Liste Elemanı- Liste Elemanı- Liste ElemanıLink:[Yazi](url)[Kodluyoruz](https://www.kodluyoruz.org/)Image/Gorsel:![Aciklama Bilgisi](url)![Lorem Picsum](https://picsum.photos/200/300)"
82,hasura-imad/imad-2016-app,https://github.com/hakanyalcinkaya/kodluyoruz-frontend-101-egitimi/blob/main/README.md,JavaScript,"Kodluyoruz - FrontEnd 101 EğitimiHakan YalçınkayaLinkedIn - YouTube - MediumNot: Contributors(Katkıda Bulunanlar) Kısmında İsminizin Görünmesi için Birçok Konuda Bu Repo'ya Katkıda Bulunabilirsiniz. Örneğin Her Bölüm ile İlgili Hazırladığım README Sayfalarına Besleyici Linkler veya Hazırladığım Kod Örneklerine Benzer Değişik Örnekler Hazırlayabilirsiniz 🤗Hazırladığım Diğer Eğitimler:Sıfırdan Projelerle Front-End ve React EğitimiUdemy: Sıfırdan Projelerle JavaScript ve React EğitimiUdemy: Uçtan Uca Projelerle Sıfırdan Full Stack Python ve Django ÖğrenUdemy: İki Eğitmen ile Sıfırdan Pyhon ÖğrenUdemy: Emmet ile HTML ve CSS'te Hızlı Kodlama Teknikleri ÖğreninUdemy: Markdown Öğren: Basit ama Çok Güçlü Yazı BiçimiÖnemli Notlar:Yanlış Yerde Açılan Git Versiyon Kontrol Sistemine Dikkat Etmeniz Gerekiyor. Lütfen < git init > Kullanmadan Önce Bu Videoyu İzleyinEğitimin Genel Hedefi:Yazılım Dünyasına yeni adım atan kişiler için temel konuların incelenmesiroadmap.sh ile hedeflerini kontrol etmelerini sağlamakJavaScript’e geçmeden önce HTML, CSS ve Bootstrap gibi temel yapıları kullanabilmelerini sağlamakText Editör hakimiyetlerini kazandırmakJavaScript temellerini aktarıp herhangi bir Front-End kütüphanesi kullanmadan başlangıç düzeyindeki projeleri hayata geçirebilmelerini sağlamakEğitim Kategorileri:Eğitime BaşlarkenYol HaritasıKurulum ve Genel AyarlarVisual Studio Code KullanımıHTML TemelleriCSS TemelleriBootstrap TemelleriGIT ve GitHubJavascriptKullanılan VS Code Eklentileri:Bracket Pair Colorizer 2Live ServerMarkdown PreviewSık Kullanılan Markdown İşaretlemeleriTutorialDokümanGitHub Markdown Emoji Lists# Başlık 1## Başlık 2.. *italic* **bold*****boldItalic***- Liste Elemanı- Liste Elemanı- Liste ElemanıLink:[Yazi](url)[Kodluyoruz](https://www.kodluyoruz.org/)Image/Gorsel:![Aciklama Bilgisi](url)![Lorem Picsum](https://picsum.photos/200/300)"
83,learn-co-curriculum/react-hooks-import-export-lab,https://github.com/learn-co-curriculum/react-hooks-import-export-lab/blob/master/README.md,JavaScript,"Organizing Code with Import/Export LabLearning GoalsUse the default and named import/export syntax to access variables acrossmultiple filesInstructionsIn this lab, we'll work on organizing our code into separate files with theimport/export syntax. We'll continue working on the portfolio example from theprevious lab, this time working on separating out our code into differentmodules using the import/export syntax.Begin with npm install. Then, run npm start to run your code in the browser.Follow the error messages to fix the broken imports!Your goal is to fix the errors, and get our app to match this example:When you're done, run npm test to check if all tests pass.DeliverablesComponentsThere are four components in this application, all located in the componentsfolder. Use the default export syntax to export the <About>, <Home>, and<NavBar> components, and import them all in the <App> component.DataIn the src/data/user.js file, there are three variables that have informationabout the owner of the portfolio site. Export all three variables using thenamed export syntax.After you've exported them, import them in the following files:Import the username and city variables in the src/components/Home.jsfileImport the image variable in the src/components/About.js fileWhen importing, make sure to use the relative path from the file you'recurrently in, to the file you're trying to import from. For example, if you arein the src/components/About.js file and want to import from thesrc/data/user.js file, the relative path is ../data/user (go up onedirectory, into the data folder, and into the user file).ResourcesMDN Import DocumentationMDN Export Documentation"
84,lighthouse-labs/tweeter,https://github.com/lighthouse-labs/tweeter/blob/master/README.md,JavaScript,"Tweeter ProjectTweeter is a simple, single-page Twitter clone.This repository is the starter code for the project: Students will fork and clone this repository, then build upon it to practice their HTML, CSS, JS, jQuery and AJAX front-end skills, and their Node, Express back-end skills.Getting StartedCreate a new repository using this repository as a template.Clone your repository onto your local device.Install dependencies using the npm install command.Start the web server using the npm run local command. The app will be served at http://localhost:8080/.Go to http://localhost:8080/ in your browser.DependenciesExpressNode 5.10.x or above"
85,GitbookIO/gitbook,https://github.com/GitbookIO/gitbook/blob/master/README.md,JavaScript,"⚠️ Deprecation warning:As the efforts of the GitBook team are focused on the GitBook.com platform, the CLI is no longer under active development.All content supported by the CLI are mostly supported by our GitBook.com / GitHub integration.Content hosted on the legacy.gitbook.com will continue working until further notice. For differences with the new version, > check out our documentation.Join our GitHub community to stay up to date with the latest news at GitBook.GitBookGitBook is a command line tool (and Node.js library) for building beautiful books using GitHub/Git and Markdown (or AsciiDoc). Here is an example: Learn Javascript.You can publish and host books easily online using gitbook.com. A desktop editor is also available.Stay updated by following @GitBookIO on Twitter or GitBook on Facebook.Complete documentation is available at toolchain.gitbook.com.Getting startedGitBook can be used either on your computer for building local books or on legacy.gitbook.com for hosting them. To get started, check out the installation instructions in the documentation.Usage examplesGitBook can be used to create book, public documentation, enterprise manual, thesis, research papers, etc.You can find a list of real-world examples in the documentation.Help and SupportWe're always happy to help out with your books or any other questions you might have. You can ask a question on the following contact form at gitbook.com/contact or signal an issue on GitHub.FeaturesWrite using Markdown or AsciiDocOutput as a website or ebook (pdf, epub, mobi)Multi-LanguagesLexicon / GlossaryCoverVariables and TemplatingContent ReferencesPluginsBeautiful default themePublish your bookThe platform legacy.gitbook.com is like an \""Heroku for books\"": you can create a book on it (public, or private) and update it using git push.LicensingGitBook is licensed under the Apache License, Version 2.0. See LICENSE for the full license text."
86,HabitRPG/habitica,https://github.com/HabitRPG/habitica/blob/develop/README.md,JavaScript,"Habitica   Habitica is an open source habit building program which treats your life like a Role Playing Game. Level up as you succeed, lose HP as you fail, earn money to buy weapons and armor.We need more programmers! Your assistance will be greatly appreciated. The wiki pages below and the additional pages they link to will tell you how to get started on contributing code and where you can go to seek further help or ask questions:Guidance for Blacksmiths - an introduction to the technologies used and how the software is organized.Setting up Habitica Locally - how to set up a local install of Habitica for development and testing on various platforms.Habitica's code is licensed as described at https://github.com/HabitRPG/habitica/blob/develop/LICENSEFound a bug? Please report it to admin email rather than creating an issue (an admin will advise you if a new issue is necessary; usually it is not).Have any questions about Habitica or its community? See the links in the habitica.com website's Help menu or drop in to Guilds > Tavern Chat to ask questions or chat socially!"
87,learn-co-curriculum/react-hooks-lists-and-keys-lab,https://github.com/learn-co-curriculum/react-hooks-lists-and-keys-lab/blob/master/README.md,JavaScript,"Lists and Keys LabLearning GoalsTransform a list of values into a list of componentsUse the key prop correctly with the list of componentsIntroductionWe'll keep building our portfolio site and add the ability to display a list ofprojects based on an array of project data.Here is an image of what we want once we are finished:...and here is a tree view of our component parent-child structure:└── App    ├── NavBar    ├── Home    ├── About    |   └── Links    └── ProjectList        |   ProjectItem        |   ProjectItem        └── ProjectItemDeliverablesIt's recommended that you run npm start and work on this in the browserbefore running tests — try to get your app to match the demo! Once you'vebuilt out the components below, run npm test to see if your code passes thetests.NavBarIn the NavBar component, there is an array with three strings representingeach link on the page. For each of those strings, create an <a> tag that lookslike this:<a href=\""#home\"">home</a>Make sure each <a> element also gets a unique key prop.ProjectListIn the ProjectList component, a prop of projects is being passed down fromthe App component with an array of objects. For each object in the array,render one ProjectItem component with the correct props. Use the id of theproject for the key prop.ProjectItemThe ProjectItem component should get a prop of technologies passed down fromProjectList. For each element in this array of technologies, create a <span>tag that displays the name of the technology.ResourcesLists and Keys"
88,bloominstituteoftechnology/node-auth1-project,https://github.com/bloominstituteoftechnology/node-auth1-project/blob/main/README.md,JavaScript,"Introduction to Authentication Module ProjectIntroductionUse Node.js, Express and Knex to build an API that provides register, login and logout functionality.InstructionsTask 1: Project Setup and SubmissionYour assignment page on Canvas should contain instructions for submitting this project. If you are still unsure, reach out to School Staff.Task 2: Minimum Viable Product2A - Database Access FunctionsWrite the following user access functions inside api/users/users-model.js: find findBy findById add2B - Middleware FunctionsWrite the following auth middlewares inside api/auth/auth-middleware.js: restricted checkUsernameFree checkPasswordLength checkUsernameExists2C - EndpointsAuthentication will be tracked using sessions and cookies. See api/server.js for more instructions.Write the following endpoints. The first one belongs inside api/users/users-router.js and the rest inside api/auth/auth-router.js: [GET] /api/users [POST] /api/auth/register [POST] /api/auth/login [GET] /api/auth/logoutUsers SchemaThe database auth.db3 includes a single users table:fielddata typemetadatauser_idunsigned integerprimary key, auto-increments, generated by dbusernamestringrequired, uniquepasswordstringrequiredNotesRun tests locally executing npm test.The project comes with migrate, rollback and seed scripts in case you need to reset the database.You are welcome to create additional files but do not move or rename existing files or folders.Do not alter your package.json file except to install extra libraries or add extra scripts. Do not update existing libraries.In your solution, it is essential that you follow best practices and produce clean and professional results.Schedule time to review, refine, and assess your work.Perform basic professional polishing including spell-checking and grammar-checking on your work.Task 3: Stretch GoalsBuild a React application that implements components to register, login and view a list of users. Gotta keep sharpening your React skills."
89,learn-co-students/js-beatles-loops-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-beatles-loops-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Beatles LoopsObjectivesBuild a for loopBuild a while loopBuild a do-while loopInstructionsMake sure you run the tests with learn.Create a function theBeatlesPlay, which accepts two parameters--an array ofmusicians and an array of instruments.Create a variable with an empty array.Use a for loop, which iterates over the array of musicians. Be carefulabout what value you set your counter variable to store. (Hint: Thinkabout what the first index of an array is).The first time through the loop, it should create a string using the firstindex of the musicians array and the first index of the instrumentsarray: \""John Lennon plays guitar\"".Add this string to the empty array you created. The loop should make thesame sentence for every member of the musicians array.The function should return the array of new strings containing whatinstruments each musician plays.Create a function johnLennonFacts.This function will accept one argument, an array of facts about JohnLennon (note that it might not be exactly the following facts):const facts = [  \""He was the last Beatle to learn to drive\"",  \""He was never a vegetarian\"",  \""He was a choir boy and boy scout\"",  \""He hated the sound of his own voice\""];Use a while loop to loop over the facts array and add \""!!!\"" to the end ofevery fact.Return an array of strings with exclamation points.Create a function iLoveTheBeatles which accepts a number as a parameter.The function should create a variable that stores an empty array.Implement a do-while loop inside the function that adds \""I love the Beatles!\"" to the empty array.The loop should then increment the number passed in as a parameter. Thecondition of the loop should check to see that the parameter number isless than 15. It should contain a number of strings that represents thedifference between the input number and 15.Return the array with the strings \""I love the Beatles!\""."
