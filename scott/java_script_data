,repo_name,url,language,readme_content
0,twbs/bootstrap,https://github.com/twbs/bootstrap/blob/main/README.md,JavaScript,"        Bootstrap  Sleek, intuitive, and powerful front-end framework for faster and easier web development.    Explore Bootstrap docs »      Report bug  ·  Request feature  ·  Themes  ·  BlogBootstrap 5Our default branch is for development of our Bootstrap 5 release. Head to the v4-dev branch to view the readme, documentation, and source code for Bootstrap 4.Table of contentsQuick startStatusWhat's includedBugs and feature requestsDocumentationContributingCommunityVersioningCreatorsThanksCopyright and licenseQuick startSeveral quick start options are available:Download the latest releaseClone the repo: git clone https://github.com/twbs/bootstrap.gitInstall with npm: npm install bootstrap@v5.3.1Install with yarn: yarn add bootstrap@v5.3.1Install with Composer: composer require twbs/bootstrap:5.3.1Install with NuGet: CSS: Install-Package bootstrap Sass: Install-Package bootstrap.sassRead the Getting started page for information on the framework contents, templates, examples, and more.StatusWhat's includedWithin the download you'll find the following directories and files, logically grouping common assets and providing both compiled and minified variations.  Download contentsbootstrap/├── css/│   ├── bootstrap-grid.css│   ├── bootstrap-grid.css.map│   ├── bootstrap-grid.min.css│   ├── bootstrap-grid.min.css.map│   ├── bootstrap-grid.rtl.css│   ├── bootstrap-grid.rtl.css.map│   ├── bootstrap-grid.rtl.min.css│   ├── bootstrap-grid.rtl.min.css.map│   ├── bootstrap-reboot.css│   ├── bootstrap-reboot.css.map│   ├── bootstrap-reboot.min.css│   ├── bootstrap-reboot.min.css.map│   ├── bootstrap-reboot.rtl.css│   ├── bootstrap-reboot.rtl.css.map│   ├── bootstrap-reboot.rtl.min.css│   ├── bootstrap-reboot.rtl.min.css.map│   ├── bootstrap-utilities.css│   ├── bootstrap-utilities.css.map│   ├── bootstrap-utilities.min.css│   ├── bootstrap-utilities.min.css.map│   ├── bootstrap-utilities.rtl.css│   ├── bootstrap-utilities.rtl.css.map│   ├── bootstrap-utilities.rtl.min.css│   ├── bootstrap-utilities.rtl.min.css.map│   ├── bootstrap.css│   ├── bootstrap.css.map│   ├── bootstrap.min.css│   ├── bootstrap.min.css.map│   ├── bootstrap.rtl.css│   ├── bootstrap.rtl.css.map│   ├── bootstrap.rtl.min.css│   └── bootstrap.rtl.min.css.map└── js/    ├── bootstrap.bundle.js    ├── bootstrap.bundle.js.map    ├── bootstrap.bundle.min.js    ├── bootstrap.bundle.min.js.map    ├── bootstrap.esm.js    ├── bootstrap.esm.js.map    ├── bootstrap.esm.min.js    ├── bootstrap.esm.min.js.map    ├── bootstrap.js    ├── bootstrap.js.map    ├── bootstrap.min.js    └── bootstrap.min.js.mapWe provide compiled CSS and JS (bootstrap.*), as well as compiled and minified CSS and JS (bootstrap.min.*). Source maps (bootstrap.*.map) are available for use with certain browsers' developer tools. Bundled JS files (bootstrap.bundle.js and minified bootstrap.bundle.min.js) include Popper.Bugs and feature requestsHave a bug or a feature request? Please first read the issue guidelines and search for existing and closed issues. If your problem or idea is not addressed yet, please open a new issue.DocumentationBootstrap's documentation, included in this repo in the root directory, is built with Hugo and publicly hosted on GitHub Pages at https://getbootstrap.com/. The docs may also be run locally.Documentation search is powered by Algolia's DocSearch.Running documentation locallyRun npm install to install the Node.js dependencies, including Hugo (the site builder).Run npm run test (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.From the root /bootstrap directory, run npm run docs-serve in the command line.Open http://localhost:9001/ in your browser, and voilà.Learn more about using Hugo by reading its documentation.Documentation for previous releasesYou can find all our previous releases docs on https://getbootstrap.com/docs/versions/.Previous releases and their documentation are also available for download.ContributingPlease read through our contributing guidelines. Included are directions for opening issues, coding standards, and notes on development.Moreover, if your pull request contains JavaScript patches or features, you must include relevant unit tests. All HTML and CSS should conform to the Code Guide, maintained by Mark Otto.Editor preferences are available in the editor config for easy use in common text editors. Read more and download plugins at https://editorconfig.org/.CommunityGet updates on Bootstrap's development and chat with the project maintainers and community members.Follow @getbootstrap on Twitter.Read and subscribe to The Official Bootstrap Blog.Ask and explore our GitHub Discussions.Chat with fellow Bootstrappers in IRC. On the irc.libera.chat server, in the #bootstrap channel.Implementation help may be found at Stack Overflow (tagged bootstrap-5).Developers should use the keyword bootstrap on packages which modify or add to the functionality of Bootstrap when distributing through npm or similar delivery mechanisms for maximum discoverability.VersioningFor transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under the Semantic Versioning guidelines. Sometimes we screw up, but we adhere to those rules whenever possible.See the Releases section of our GitHub project for changelogs for each release version of Bootstrap. Release announcement posts on the official Bootstrap blog contain summaries of the most noteworthy changes made in each release.CreatorsMark Ottohttps://twitter.com/mdohttps://github.com/mdoJacob Thorntonhttps://twitter.com/fathttps://github.com/fatThanks  Thanks to BrowserStack for providing the infrastructure that allows us to test in real browsers!  Thanks to Netlify for providing us with Deploy Previews!SponsorsSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. [Become a sponsor]BackersThank you to all our backers! 🙏 [Become a backer]Copyright and licenseCode and documentation copyright 2011–2023 the Bootstrap Authors. Code released under the MIT License. Docs released under Creative Commons."
1,facebook/create-react-app,https://github.com/facebook/create-react-app/blob/main/README.md,JavaScript,"Create React App  Create React apps with no build configuration.Creating an App – How to create a new app.User Guide – How to develop apps bootstrapped with Create React App.Create React App works on macOS, Windows, and Linux.If something doesn’t work, please file an issue.If you have questions or need help, please ask in GitHub Discussions.Quick Overviewnpx create-react-app my-appcd my-appnpm startIf you've previously installed create-react-app globally via npm install -g create-react-app, we recommend you uninstall the package using npm uninstall -g create-react-app or yarn global remove create-react-app to ensure that npx always uses the latest version.(npx comes with npm 5.2+ and higher, see instructions for older npm versions)Then open http://localhost:3000/ to see your app.When you’re ready to deploy to production, create a minified bundle with npm run build.Get Started ImmediatelyYou don’t need to install or configure tools like webpack or Babel.They are preconfigured and hidden so that you can focus on the code.Create a project, and you’re good to go.Creating an AppYou’ll need to have Node 14.0.0 or later version on your local development machine (but it’s not required on the server). We recommend using the latest LTS version. You can use nvm (macOS/Linux) or nvm-windows to switch Node versions between different projects.To create a new app, you may choose one of the following methods:npxnpx create-react-app my-app(npx is a package runner tool that comes with npm 5.2+ and higher, see instructions for older npm versions)npmnpm init react-app my-appnpm init <initializer> is available in npm 6+Yarnyarn create react-app my-appyarn create <starter-kit-package> is available in Yarn 0.25+It will create a directory called my-app inside the current folder.Inside that directory, it will generate the initial project structure and install the transitive dependencies:my-app├── README.md├── node_modules├── package.json├── .gitignore├── public│   ├── favicon.ico│   ├── index.html│   └── manifest.json└── src    ├── App.css    ├── App.js    ├── App.test.js    ├── index.css    ├── index.js    ├── logo.svg    └── serviceWorker.js    └── setupTests.jsNo configuration or complicated folder structures, only the files you need to build your app.Once the installation is done, you can open your project folder:cd my-appInside the newly created project, you can run some built-in commands:npm start or yarn startRuns the app in development mode.Open http://localhost:3000 to view it in the browser.The page will automatically reload if you make changes to the code.You will see the build errors and lint warnings in the console.npm test or yarn testRuns the test watcher in an interactive mode.By default, runs tests related to files changed since the last commit.Read more about testing.npm run build or yarn buildBuilds the app for production to the build folder.It correctly bundles React in production mode and optimizes the build for the best performance.The build is minified and the filenames include the hashes.Your app is ready to be deployed.User GuideYou can find detailed instructions on using Create React App and many tips in its documentation.How to Update to New Versions?Please refer to the User Guide for this and other information.PhilosophyOne Dependency: There is only one build dependency. It uses webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.No Configuration Required: You don't need to configure anything. A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.No Lock-In: You can “eject” to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.What’s Included?Your environment will have everything you need to build a modern single-page React app:React, JSX, ES6, TypeScript and Flow syntax support.Language extras beyond ES6 like the object spread operator.Autoprefixed CSS, so you don’t need -webkit- or other prefixes.A fast interactive unit test runner with built-in support for coverage reporting.A live development server that warns about common mistakes.A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria. (Note: Using the service worker is opt-in as of react-scripts@2.0.0 and higher)Hassle-free updates for the above tools with a single dependency.Check out this guide for an overview of how these tools fit together.The tradeoff is that these tools are preconfigured to work in a specific way. If your project needs more customization, you can \""eject\"" and customize it, but then you will need to maintain this configuration.Popular AlternativesCreate React App is a great fit for:Learning React in a comfortable and feature-rich development environment.Starting new single-page React applications.Creating examples with React for your libraries and components.Here are a few common cases where you might want to try something else:If you want to try React without hundreds of transitive build tool dependencies, consider using a single HTML file or an online sandbox instead.If you need to integrate React code with a server-side template framework like Rails, Django or Symfony, or if you’re not building a single-page app, consider using nwb, or Neutrino which are more flexible. For Rails specifically, you can use Rails Webpacker. For Symfony, try Symfony's webpack Encore.If you need to publish a React component, nwb can also do this, as well as Neutrino's react-components preset.If you want to do server rendering with React and Node.js, check out Next.js or Razzle. Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.If your website is mostly static (for example, a portfolio or a blog), consider using Gatsby or Next.js. Unlike Create React App, Gatsby pre-renders the website into HTML at build time. Next.js supports both server rendering and pre-rendering.Finally, if you need more customization, check out Neutrino and its React preset.All of the above tools can work with little to no configuration.If you prefer configuring the build yourself, follow this guide.React NativeLooking for something similar, but for React Native?Check out Expo CLI.ContributingWe'd love to have your helping hand on create-react-app! See CONTRIBUTING.md for more information on what we're looking for and how to get started.Supporting Create React AppCreate React App is a community maintained project and all contributors are volunteers. If you'd like to support the future development of Create React App then please consider donating to our Open Collective.CreditsThis project exists thanks to all the people who contribute.Thanks to Netlify for hosting our documentation.AcknowledgementsWe are grateful to the authors of existing related projects for their ideas and collaboration:@eanplatter@insin@mxstbrLicenseCreate React App is open source software licensed as MIT. The Create React App logo is licensed under a Creative Commons Attribution 4.0 International license."
2,airbnb/javascript,https://github.com/airbnb/javascript/blob/master/README.md,JavaScript,"Airbnb JavaScript Style Guide() {A mostly reasonable approach to JavaScriptNote: this guide assumes you are using Babel, and requires that you use babel-preset-airbnb or the equivalent. It also assumes you are installing shims/polyfills in your app, with airbnb-browser-shims or the equivalent.This guide is available in other languages too. See TranslationOther Style GuidesES5 (Deprecated)ReactCSS-in-JavaScriptCSS & SassRubyTable of ContentsTypesReferencesObjectsArraysDestructuringStringsFunctionsArrow FunctionsClasses & ConstructorsModulesIterators and GeneratorsPropertiesVariablesHoistingComparison Operators & EqualityBlocksControl StatementsCommentsWhitespaceCommasSemicolonsType Casting & CoercionNaming ConventionsAccessorsEventsjQueryECMAScript 5 CompatibilityECMAScript 6+ (ES 2015+) StylesStandard LibraryTestingPerformanceResourcesIn the WildTranslationThe JavaScript Style Guide GuideChat With Us About JavaScriptContributorsLicenseAmendmentsTypes1.1 Primitives: When you access a primitive type you work directly on its value.stringnumberbooleannullundefinedsymbolbigintconst foo = 1;let bar = foo;bar = 9;console.log(foo, bar); // => 1, 9Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively.1.2 Complex: When you access a complex type you work on a reference to its value.objectarrayfunctionconst foo = [1, 2];const bar = foo;bar[0] = 9;console.log(foo[0], bar[0]); // => 9, 9⬆ back to topReferences2.1 Use const for all of your references; avoid using var. eslint: prefer-const, no-const-assignWhy? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.// badvar a = 1;var b = 2;// goodconst a = 1;const b = 2;2.2 If you must reassign references, use let instead of var. eslint: no-varWhy? let is block-scoped rather than function-scoped like var.// badvar count = 1;if (true) {  count += 1;}// good, use the let.let count = 1;if (true) {  count += 1;}2.3 Note that both let and const are block-scoped, whereas var is function-scoped.// const and let only exist in the blocks they are defined in.{  let a = 1;  const b = 1;  var c = 1;}console.log(a); // ReferenceErrorconsole.log(b); // ReferenceErrorconsole.log(c); // Prints 1In the above code, you can see that referencing a and b will produce a ReferenceError, while c contains the number. This is because a and b are block scoped, while c is scoped to the containing function.⬆ back to topObjects3.1 Use the literal syntax for object creation. eslint: no-new-object// badconst item = new Object();// goodconst item = {};3.2 Use computed property names when creating objects with dynamic property names.Why? They allow you to define all the properties of an object in one place.function getKey(k) {  return `a key named ${k}`;}// badconst obj = {  id: 5,  name: 'San Francisco',};obj[getKey('enabled')] = true;// goodconst obj = {  id: 5,  name: 'San Francisco',  [getKey('enabled')]: true,};3.3 Use object method shorthand. eslint: object-shorthand// badconst atom = {  value: 1,  addValue: function (value) {    return atom.value + value;  },};// goodconst atom = {  value: 1,  addValue(value) {    return atom.value + value;  },};3.4 Use property value shorthand. eslint: object-shorthandWhy? It is shorter and descriptive.const lukeSkywalker = 'Luke Skywalker';// badconst obj = {  lukeSkywalker: lukeSkywalker,};// goodconst obj = {  lukeSkywalker,};3.5 Group your shorthand properties at the beginning of your object declaration.Why? It’s easier to tell which properties are using the shorthand.const anakinSkywalker = 'Anakin Skywalker';const lukeSkywalker = 'Luke Skywalker';// badconst obj = {  episodeOne: 1,  twoJediWalkIntoACantina: 2,  lukeSkywalker,  episodeThree: 3,  mayTheFourth: 4,  anakinSkywalker,};// goodconst obj = {  lukeSkywalker,  anakinSkywalker,  episodeOne: 1,  twoJediWalkIntoACantina: 2,  episodeThree: 3,  mayTheFourth: 4,};3.6 Only quote properties that are invalid identifiers. eslint: quote-propsWhy? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.// badconst bad = {  'foo': 3,  'bar': 4,  'data-blah': 5,};// goodconst good = {  foo: 3,  bar: 4,  'data-blah': 5,};3.7 Do not call Object.prototype methods directly, such as hasOwnProperty, propertyIsEnumerable, and isPrototypeOf. eslint: no-prototype-builtinsWhy? These methods may be shadowed by properties on the object in question - consider { hasOwnProperty: false } - or, the object may be a null object (Object.create(null)). In modern browsers that support ES2022, or with a polyfill such as https://npmjs.com/object.hasown, Object.hasOwn can also be used as an alternative to Object.prototype.hasOwnProperty.call.// badconsole.log(object.hasOwnProperty(key));// goodconsole.log(Object.prototype.hasOwnProperty.call(object, key));// betterconst has = Object.prototype.hasOwnProperty; // cache the lookup once, in module scope.console.log(has.call(object, key));// bestconsole.log(Object.hasOwn(object, key)); // only supported in browsers that support ES2022/* or */import has from 'has'; // https://www.npmjs.com/package/hasconsole.log(has(object, key));/* or */console.log(Object.hasOwn(object, key)); // https://www.npmjs.com/package/object.hasown3.8 Prefer the object spread syntax over Object.assign to shallow-copy objects. Use the object rest parameter syntax to get a new object with certain properties omitted. eslint: prefer-object-spread// very badconst original = { a: 1, b: 2 };const copy = Object.assign(original, { c: 3 }); // this mutates `original` ಠ_ಠdelete copy.a; // so does this// badconst original = { a: 1, b: 2 };const copy = Object.assign({}, original, { c: 3 }); // copy => { a: 1, b: 2, c: 3 }// goodconst original = { a: 1, b: 2 };const copy = { ...original, c: 3 }; // copy => { a: 1, b: 2, c: 3 }const { a, ...noA } = copy; // noA => { b: 2, c: 3 }⬆ back to topArrays4.1 Use the literal syntax for array creation. eslint: no-array-constructor// badconst items = new Array();// goodconst items = [];4.2 Use Array#push instead of direct assignment to add items to an array.const someStack = [];// badsomeStack[someStack.length] = 'abracadabra';// goodsomeStack.push('abracadabra');4.3 Use array spreads ... to copy arrays.// badconst len = items.length;const itemsCopy = [];let i;for (i = 0; i < len; i += 1) {  itemsCopy[i] = items[i];}// goodconst itemsCopy = [...items];4.4 To convert an iterable object to an array, use spreads ... instead of Array.fromconst foo = document.querySelectorAll('.foo');// goodconst nodes = Array.from(foo);// bestconst nodes = [...foo];4.5 Use Array.from for converting an array-like object to an array.const arrLike = { 0: 'foo', 1: 'bar', 2: 'baz', length: 3 };// badconst arr = Array.prototype.slice.call(arrLike);// goodconst arr = Array.from(arrLike);4.6 Use Array.from instead of spread ... for mapping over iterables, because it avoids creating an intermediate array.// badconst baz = [...foo].map(bar);// goodconst baz = Array.from(foo, bar);4.7 Use return statements in array method callbacks. It’s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following 8.2. eslint: array-callback-return// good[1, 2, 3].map((x) => {  const y = x + 1;  return x * y;});// good[1, 2, 3].map((x) => x + 1);// bad - no returned value means `acc` becomes undefined after the first iteration[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {  const flatten = acc.concat(item);});// good[[0, 1], [2, 3], [4, 5]].reduce((acc, item, index) => {  const flatten = acc.concat(item);  return flatten;});// badinbox.filter((msg) => {  const { subject, author } = msg;  if (subject === 'Mockingbird') {    return author === 'Harper Lee';  } else {    return false;  }});// goodinbox.filter((msg) => {  const { subject, author } = msg;  if (subject === 'Mockingbird') {    return author === 'Harper Lee';  }  return false;});4.8 Use line breaks after opening array brackets and before closing array brackets, if an array has multiple lines// badconst arr = [  [0, 1], [2, 3], [4, 5],];const objectInArray = [{  id: 1,}, {  id: 2,}];const numberInArray = [  1, 2,];// goodconst arr = [[0, 1], [2, 3], [4, 5]];const objectInArray = [  {    id: 1,  },  {    id: 2,  },];const numberInArray = [  1,  2,];⬆ back to topDestructuring5.1 Use object destructuring when accessing and using multiple properties of an object. eslint: prefer-destructuringWhy? Destructuring saves you from creating temporary references for those properties, and from repetitive access of the object. Repeating object access creates more repetitive code, requires more reading, and creates more opportunities for mistakes. Destructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.// badfunction getFullName(user) {  const firstName = user.firstName;  const lastName = user.lastName;  return `${firstName} ${lastName}`;}// goodfunction getFullName(user) {  const { firstName, lastName } = user;  return `${firstName} ${lastName}`;}// bestfunction getFullName({ firstName, lastName }) {  return `${firstName} ${lastName}`;}5.2 Use array destructuring. eslint: prefer-destructuringconst arr = [1, 2, 3, 4];// badconst first = arr[0];const second = arr[1];// goodconst [first, second] = arr;5.3 Use object destructuring for multiple return values, not array destructuring.Why? You can add new properties over time or change the order of things without breaking call sites.// badfunction processInput(input) {  // then a miracle occurs  return [left, right, top, bottom];}// the caller needs to think about the order of return dataconst [left, __, top] = processInput(input);// goodfunction processInput(input) {  // then a miracle occurs  return { left, right, top, bottom };}// the caller selects only the data they needconst { left, top } = processInput(input);⬆ back to topStrings6.1 Use single quotes '' for strings. eslint: quotes// badconst name = \""Capt. Janeway\"";// bad - template literals should contain interpolation or newlinesconst name = `Capt. Janeway`;// goodconst name = 'Capt. Janeway';6.2 Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.Why? Broken strings are painful to work with and make code less searchable.// badconst errorMessage = 'This is a super long error that was thrown because \\of Batman. When you stop to think about how Batman had anything to do \\with this, you would get nowhere \\fast.';// badconst errorMessage = 'This is a super long error that was thrown because ' +  'of Batman. When you stop to think about how Batman had anything to do ' +  'with this, you would get nowhere fast.';// goodconst errorMessage = 'This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.';6.3 When programmatically building up strings, use template strings instead of concatenation. eslint: prefer-template template-curly-spacingWhy? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.// badfunction sayHi(name) {  return 'How are you, ' + name + '?';}// badfunction sayHi(name) {  return ['How are you, ', name, '?'].join();}// badfunction sayHi(name) {  return `How are you, ${ name }?`;}// goodfunction sayHi(name) {  return `How are you, ${name}?`;}6.4 Never use eval() on a string; it opens too many vulnerabilities. eslint: no-eval6.5 Do not unnecessarily escape characters in strings. eslint: no-useless-escapeWhy? Backslashes harm readability, thus they should only be present when necessary.// badconst foo = '\\'this\\' \\i\\s \\\""quoted\\\""';// goodconst foo = '\\'this\\' is \""quoted\""';const foo = `my name is '${name}'`;⬆ back to topFunctions7.1 Use named function expressions instead of function declarations. eslint: func-style, func-namesWhy? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. (Discussion)// badfunction foo() {  // ...}// badconst foo = function () {  // ...};// good// lexical name distinguished from the variable-referenced invocation(s)const short = function longUniqueMoreDescriptiveLexicalFoo() {  // ...};7.2 Wrap immediately invoked function expressions in parentheses. eslint: wrap-iifeWhy? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.// immediately-invoked function expression (IIFE)(function () {  console.log('Welcome to the Internet. Please follow me.');}());7.3 Never declare a function in a non-function block (if, while, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: no-loop-func7.4 Note: ECMA-262 defines a block as a list of statements. A function declaration is not a statement.// badif (currentUser) {  function test() {    console.log('Nope.');  }}// goodlet test;if (currentUser) {  test = () => {    console.log('Yup.');  };}7.5 Never name a parameter arguments. This will take precedence over the arguments object that is given to every function scope.// badfunction foo(name, options, arguments) {  // ...}// goodfunction foo(name, options, args) {  // ...}7.6 Never use arguments, opt to use rest syntax ... instead. eslint: prefer-rest-paramsWhy? ... is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like arguments.// badfunction concatenateAll() {  const args = Array.prototype.slice.call(arguments);  return args.join('');}// goodfunction concatenateAll(...args) {  return args.join('');}7.7 Use default parameter syntax rather than mutating function arguments.// really badfunction handleThings(opts) {  // No! We shouldn’t mutate function arguments.  // Double bad: if opts is falsy it'll be set to an object which may  // be what you want but it can introduce subtle bugs.  opts = opts || {};  // ...}// still badfunction handleThings(opts) {  if (opts === void 0) {    opts = {};  }  // ...}// goodfunction handleThings(opts = {}) {  // ...}7.8 Avoid side effects with default parameters.Why? They are confusing to reason about.let b = 1;// badfunction count(a = b++) {  console.log(a);}count();  // 1count();  // 2count(3); // 3count();  // 37.9 Always put default parameters last. eslint: default-param-last// badfunction handleThings(opts = {}, name) {  // ...}// goodfunction handleThings(name, opts = {}) {  // ...}7.10 Never use the Function constructor to create a new function. eslint: no-new-funcWhy? Creating a function in this way evaluates a string similarly to eval(), which opens vulnerabilities.// badconst add = new Function('a', 'b', 'return a + b');// still badconst subtract = Function('a', 'b', 'return a - b');7.11 Spacing in a function signature. eslint: space-before-function-paren space-before-blocksWhy? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.// badconst f = function(){};const g = function (){};const h = function() {};// goodconst x = function () {};const y = function a() {};7.12 Never mutate parameters. eslint: no-param-reassignWhy? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.// badfunction f1(obj) {  obj.key = 1;}// goodfunction f2(obj) {  const key = Object.prototype.hasOwnProperty.call(obj, 'key') ? obj.key : 1;}7.13 Never reassign parameters. eslint: no-param-reassignWhy? Reassigning parameters can lead to unexpected behavior, especially when accessing the arguments object. It can also cause optimization issues, especially in V8.// badfunction f1(a) {  a = 1;  // ...}function f2(a) {  if (!a) { a = 1; }  // ...}// goodfunction f3(a) {  const b = a || 1;  // ...}function f4(a = 1) {  // ...}7.14 Prefer the use of the spread syntax ... to call variadic functions. eslint: prefer-spreadWhy? It’s cleaner, you don’t need to supply a context, and you can not easily compose new with apply.// badconst x = [1, 2, 3, 4, 5];console.log.apply(console, x);// goodconst x = [1, 2, 3, 4, 5];console.log(...x);// badnew (Function.prototype.bind.apply(Date, [null, 2016, 8, 5]));// goodnew Date(...[2016, 8, 5]);7.15 Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: function-paren-newline// badfunction foo(bar,             baz,             quux) {  // ...}// goodfunction foo(  bar,  baz,  quux,) {  // ...}// badconsole.log(foo,  bar,  baz);// goodconsole.log(  foo,  bar,  baz,);⬆ back to topArrow Functions8.1 When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: prefer-arrow-callback, arrow-spacingWhy? It creates a version of the function that executes in the context of this, which is usually what you want, and is a more concise syntax.Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.// bad[1, 2, 3].map(function (x) {  const y = x + 1;  return x * y;});// good[1, 2, 3].map((x) => {  const y = x + 1;  return x * y;});8.2 If the function body consists of a single statement returning an expression without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a return statement. eslint: arrow-parens, arrow-body-styleWhy? Syntactic sugar. It reads well when multiple functions are chained together.// bad[1, 2, 3].map((number) => {  const nextNumber = number + 1;  `A string containing the ${nextNumber}.`;});// good[1, 2, 3].map((number) => `A string containing the ${number + 1}.`);// good[1, 2, 3].map((number) => {  const nextNumber = number + 1;  return `A string containing the ${nextNumber}.`;});// good[1, 2, 3].map((number, index) => ({  [index]: number,}));// No implicit return with side effectsfunction foo(callback) {  const val = callback();  if (val === true) {    // Do something if callback returns true  }}let bool = false;// badfoo(() => bool = true);// goodfoo(() => {  bool = true;});8.3 In case the expression spans over multiple lines, wrap it in parentheses for better readability.Why? It shows clearly where the function starts and ends.// bad['get', 'post', 'put'].map((httpMethod) => Object.prototype.hasOwnProperty.call(    httpMagicObjectWithAVeryLongName,    httpMethod,  ));// good['get', 'post', 'put'].map((httpMethod) => (  Object.prototype.hasOwnProperty.call(    httpMagicObjectWithAVeryLongName,    httpMethod,  )));8.4 Always include parentheses around arguments for clarity and consistency. eslint: arrow-parensWhy? Minimizes diff churn when adding or removing arguments.// bad[1, 2, 3].map(x => x * x);// good[1, 2, 3].map((x) => x * x);// bad[1, 2, 3].map(number => (  `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`));// good[1, 2, 3].map((number) => (  `A long string with the ${number}. It’s so long that we don’t want it to take up space on the .map line!`));// bad[1, 2, 3].map(x => {  const y = x + 1;  return x * y;});// good[1, 2, 3].map((x) => {  const y = x + 1;  return x * y;});8.5 Avoid confusing arrow function syntax (=>) with comparison operators (<=, >=). eslint: no-confusing-arrow// badconst itemHeight = (item) => item.height <= 256 ? item.largeSize : item.smallSize;// badconst itemHeight = (item) => item.height >= 256 ? item.largeSize : item.smallSize;// goodconst itemHeight = (item) => (item.height <= 256 ? item.largeSize : item.smallSize);// goodconst itemHeight = (item) => {  const { height, largeSize, smallSize } = item;  return height <= 256 ? largeSize : smallSize;};8.6 Enforce the location of arrow function bodies with implicit returns. eslint: implicit-arrow-linebreak// bad(foo) =>  bar;(foo) =>  (bar);// good(foo) => bar;(foo) => (bar);(foo) => (   bar)⬆ back to topClasses & Constructors9.1 Always use class. Avoid manipulating prototype directly.Why? class syntax is more concise and easier to reason about.// badfunction Queue(contents = []) {  this.queue = [...contents];}Queue.prototype.pop = function () {  const value = this.queue[0];  this.queue.splice(0, 1);  return value;};// goodclass Queue {  constructor(contents = []) {    this.queue = [...contents];  }  pop() {    const value = this.queue[0];    this.queue.splice(0, 1);    return value;  }}9.2 Use extends for inheritance.Why? It is a built-in way to inherit prototype functionality without breaking instanceof.// badconst inherits = require('inherits');function PeekableQueue(contents) {  Queue.apply(this, contents);}inherits(PeekableQueue, Queue);PeekableQueue.prototype.peek = function () {  return this.queue[0];};// goodclass PeekableQueue extends Queue {  peek() {    return this.queue[0];  }}9.3 Methods can return this to help with method chaining.// badJedi.prototype.jump = function () {  this.jumping = true;  return true;};Jedi.prototype.setHeight = function (height) {  this.height = height;};const luke = new Jedi();luke.jump(); // => trueluke.setHeight(20); // => undefined// goodclass Jedi {  jump() {    this.jumping = true;    return this;  }  setHeight(height) {    this.height = height;    return this;  }}const luke = new Jedi();luke.jump()  .setHeight(20);9.4 It’s okay to write a custom toString() method, just make sure it works successfully and causes no side effects.class Jedi {  constructor(options = {}) {    this.name = options.name || 'no name';  }  getName() {    return this.name;  }  toString() {    return `Jedi - ${this.getName()}`;  }}9.5 Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: no-useless-constructor// badclass Jedi {  constructor() {}  getName() {    return this.name;  }}// badclass Rey extends Jedi {  constructor(...args) {    super(...args);  }}// goodclass Rey extends Jedi {  constructor(...args) {    super(...args);    this.name = 'Rey';  }}9.6 Avoid duplicate class members. eslint: no-dupe-class-membersWhy? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.// badclass Foo {  bar() { return 1; }  bar() { return 2; }}// goodclass Foo {  bar() { return 1; }}// goodclass Foo {  bar() { return 2; }}9.7 Class methods should use this or be made into a static method unless an external library or framework requires using specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: class-methods-use-this// badclass Foo {  bar() {    console.log('bar');  }}// good - this is usedclass Foo {  bar() {    console.log(this.bar);  }}// good - constructor is exemptclass Foo {  constructor() {    // ...  }}// good - static methods aren't expected to use thisclass Foo {  static bar() {    console.log('bar');  }}⬆ back to topModules10.1 Always use modules (import/export) over a non-standard module system. You can always transpile to your preferred module system.Why? Modules are the future, let’s start using the future now.// badconst AirbnbStyleGuide = require('./AirbnbStyleGuide');module.exports = AirbnbStyleGuide.es6;// okimport AirbnbStyleGuide from './AirbnbStyleGuide';export default AirbnbStyleGuide.es6;// bestimport { es6 } from './AirbnbStyleGuide';export default es6;10.2 Do not use wildcard imports.Why? This makes sure you have a single default export.// badimport * as AirbnbStyleGuide from './AirbnbStyleGuide';// goodimport AirbnbStyleGuide from './AirbnbStyleGuide';10.3 And do not export directly from an import.Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.// bad// filename es6.jsexport { es6 as default } from './AirbnbStyleGuide';// good// filename es6.jsimport { es6 } from './AirbnbStyleGuide';export default es6;10.4 Only import from a path in one place.eslint: no-duplicate-importsWhy? Having multiple lines that import from the same path can make code harder to maintain.// badimport foo from 'foo';// … some other imports … //import { named1, named2 } from 'foo';// goodimport foo, { named1, named2 } from 'foo';// goodimport foo, {  named1,  named2,} from 'foo';10.5 Do not export mutable bindings.eslint: import/no-mutable-exportsWhy? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.// badlet foo = 3;export { foo };// goodconst foo = 3;export { foo };10.6 In modules with a single export, prefer default export over named export.eslint: import/prefer-default-exportWhy? To encourage more files that only ever export one thing, which is better for readability and maintainability.// badexport function foo() {}// goodexport default function foo() {}10.7 Put all imports above non-import statements.eslint: import/firstWhy? Since imports are hoisted, keeping them all at the top prevents surprising behavior.// badimport foo from 'foo';foo.init();import bar from 'bar';// goodimport foo from 'foo';import bar from 'bar';foo.init();10.8 Multiline imports should be indented just like multiline array and object literals.eslint: object-curly-newlineWhy? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.// badimport {longNameA, longNameB, longNameC, longNameD, longNameE} from 'path';// goodimport {  longNameA,  longNameB,  longNameC,  longNameD,  longNameE,} from 'path';10.9 Disallow Webpack loader syntax in module import statements.eslint: import/no-webpack-loader-syntaxWhy? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in webpack.config.js.// badimport fooSass from 'css!sass!foo.scss';import barCss from 'style!css!bar.css';// goodimport fooSass from 'foo.scss';import barCss from 'bar.css';10.10 Do not include JavaScript filename extensionseslint: import/extensionsWhy? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you're importing in every consumer.// badimport foo from './foo.js';import bar from './bar.jsx';import baz from './baz/index.jsx';// goodimport foo from './foo';import bar from './bar';import baz from './baz';⬆ back to topIterators and Generators11.1 Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like for-in or for-of. eslint: no-iterator no-restricted-syntaxWhy? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.Use map() / every() / filter() / find() / findIndex() / reduce() / some() / ... to iterate over arrays, and Object.keys() / Object.values() / Object.entries() to produce arrays so you can iterate over objects.const numbers = [1, 2, 3, 4, 5];// badlet sum = 0;for (let num of numbers) {  sum += num;}sum === 15;// goodlet sum = 0;numbers.forEach((num) => {  sum += num;});sum === 15;// best (use the functional force)const sum = numbers.reduce((total, num) => total + num, 0);sum === 15;// badconst increasedByOne = [];for (let i = 0; i < numbers.length; i++) {  increasedByOne.push(numbers[i] + 1);}// goodconst increasedByOne = [];numbers.forEach((num) => {  increasedByOne.push(num + 1);});// best (keeping it functional)const increasedByOne = numbers.map((num) => num + 1);11.2 Don’t use generators for now.Why? They don’t transpile well to ES5.11.3 If you must use generators, or if you disregard our advice, make sure their function signature is spaced properly. eslint: generator-star-spacingWhy? function and * are part of the same conceptual keyword - * is not a modifier for function, function* is a unique construct, different from function.// badfunction * foo() {  // ...}// badconst bar = function * () {  // ...};// badconst baz = function *() {  // ...};// badconst quux = function*() {  // ...};// badfunction*foo() {  // ...}// badfunction *foo() {  // ...}// very badfunction*foo() {  // ...}// very badconst wat = function*() {  // ...};// goodfunction* foo() {  // ...}// goodconst foo = function* () {  // ...};⬆ back to topProperties12.1 Use dot notation when accessing properties. eslint: dot-notationconst luke = {  jedi: true,  age: 28,};// badconst isJedi = luke['jedi'];// goodconst isJedi = luke.jedi;12.2 Use bracket notation [] when accessing properties with a variable.const luke = {  jedi: true,  age: 28,};function getProp(prop) {  return luke[prop];}const isJedi = getProp('jedi');12.3 Use exponentiation operator ** when calculating exponentiations. eslint: prefer-exponentiation-operator.// badconst binary = Math.pow(2, 10);// goodconst binary = 2 ** 10;⬆ back to topVariables13.1 Always use const or let to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: no-undef prefer-const// badsuperPower = new SuperPower();// goodconst superPower = new SuperPower();13.2 Use one const or let declaration per variable or assignment. eslint: one-varWhy? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a ; for a , or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.// badconst items = getItems(),    goSportsTeam = true,    dragonball = 'z';// bad// (compare to above, and try to spot the mistake)const items = getItems(),    goSportsTeam = true;    dragonball = 'z';// goodconst items = getItems();const goSportsTeam = true;const dragonball = 'z';13.3 Group all your consts and then group all your lets.Why? This is helpful when later on you might need to assign a variable depending on one of the previously assigned variables.// badlet i, len, dragonball,    items = getItems(),    goSportsTeam = true;// badlet i;const items = getItems();let dragonball;const goSportsTeam = true;let len;// goodconst goSportsTeam = true;const items = getItems();let dragonball;let i;let length;13.4 Assign variables where you need them, but place them in a reasonable place.Why? let and const are block scoped and not function scoped.// bad - unnecessary function callfunction checkName(hasName) {  const name = getName();  if (hasName === 'test') {    return false;  }  if (name === 'test') {    this.setName('');    return false;  }  return name;}// goodfunction checkName(hasName) {  if (hasName === 'test') {    return false;  }  const name = getName();  if (name === 'test') {    this.setName('');    return false;  }  return name;}13.5 Don’t chain variable assignments. eslint: no-multi-assignWhy? Chaining variable assignments creates implicit global variables.// bad(function example() {  // JavaScript interprets this as  // let a = ( b = ( c = 1 ) );  // The let keyword only applies to variable a; variables b and c become  // global variables.  let a = b = c = 1;}());console.log(a); // throws ReferenceErrorconsole.log(b); // 1console.log(c); // 1// good(function example() {  let a = 1;  let b = a;  let c = a;}());console.log(a); // throws ReferenceErrorconsole.log(b); // throws ReferenceErrorconsole.log(c); // throws ReferenceError// the same applies for `const`13.6 Avoid using unary increments and decrements (++, --). eslint no-plusplusWhy? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like num += 1 instead of num++ or num ++. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.// badconst array = [1, 2, 3];let num = 1;num++;--num;let sum = 0;let truthyCount = 0;for (let i = 0; i < array.length; i++) {  let value = array[i];  sum += value;  if (value) {    truthyCount++;  }}// goodconst array = [1, 2, 3];let num = 1;num += 1;num -= 1;const sum = array.reduce((a, b) => a + b, 0);const truthyCount = array.filter(Boolean).length;13.7 Avoid linebreaks before or after = in an assignment. If your assignment violates max-len, surround the value in parens. eslint operator-linebreak.Why? Linebreaks surrounding = can obfuscate the value of an assignment.// badconst foo =  superLongLongLongLongLongLongLongLongFunctionName();// badconst foo  = 'superLongLongLongLongLongLongLongLongString';// goodconst foo = (  superLongLongLongLongLongLongLongLongFunctionName());// goodconst foo = 'superLongLongLongLongLongLongLongLongString';13.8 Disallow unused variables. eslint: no-unused-varsWhy? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.// badconst some_unused_var = 42;// Write-only variables are not considered as used.let y = 10;y = 5;// A read for a modification of itself is not considered as used.let z = 0;z = z + 1;// Unused function arguments.function getX(x, y) {    return x;}// goodfunction getXPlusY(x, y) {  return x + y;}const x = 1;const y = a + 2;alert(getXPlusY(x, y));// 'type' is ignored even if unused because it has a rest property sibling.// This is a form of extracting an object that omits the specified keys.const { type, ...coords } = data;// 'coords' is now the 'data' object without its 'type' property.⬆ back to topHoisting14.1 var declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. const and let declarations are blessed with a new concept called Temporal Dead Zones (TDZ). It’s important to know why typeof is no longer safe.// we know this wouldn’t work (assuming there// is no notDefined global variable)function example() {  console.log(notDefined); // => throws a ReferenceError}// creating a variable declaration after you// reference the variable will work due to// variable hoisting. Note: the assignment// value of `true` is not hoisted.function example() {  console.log(declaredButNotAssigned); // => undefined  var declaredButNotAssigned = true;}// the interpreter is hoisting the variable// declaration to the top of the scope,// which means our example could be rewritten as:function example() {  let declaredButNotAssigned;  console.log(declaredButNotAssigned); // => undefined  declaredButNotAssigned = true;}// using const and letfunction example() {  console.log(declaredButNotAssigned); // => throws a ReferenceError  console.log(typeof declaredButNotAssigned); // => throws a ReferenceError  const declaredButNotAssigned = true;}14.2 Anonymous function expressions hoist their variable name, but not the function assignment.function example() {  console.log(anonymous); // => undefined  anonymous(); // => TypeError anonymous is not a function  var anonymous = function () {    console.log('anonymous function expression');  };}14.3 Named function expressions hoist the variable name, not the function name or the function body.function example() {  console.log(named); // => undefined  named(); // => TypeError named is not a function  superPower(); // => ReferenceError superPower is not defined  var named = function superPower() {    console.log('Flying');  };}// the same is true when the function name// is the same as the variable name.function example() {  console.log(named); // => undefined  named(); // => TypeError named is not a function  var named = function named() {    console.log('named');  };}14.4 Function declarations hoist their name and the function body.function example() {  superPower(); // => Flying  function superPower() {    console.log('Flying');  }}14.5 Variables, classes, and functions should be defined before they can be used. eslint: no-use-before-defineWhy? When variables, classes, or functions are declared after being used, it can harm readability since a reader won't know what a thing that's referenced is. It's much clearer for a reader to first encounter the source of a thing (whether imported from another module, or defined in the file) before encountering a use of the thing.// bad// Variable a is being used before it is being defined.console.log(a); // this will be undefined, since while the declaration is hoisted, the initialization is notvar a = 10;// Function fun is being called before being defined.fun();function fun() {}// Class A is being used before being defined.new A(); // ReferenceError: Cannot access 'A' before initializationclass A {}// `let` and `const` are hoisted, but they don't have a default initialization.// The variables 'a' and 'b' are in a Temporal Dead Zone where JavaScript// knows they exist (declaration is hoisted) but they are not accessible// (as they are not yet initialized).console.log(a); // ReferenceError: Cannot access 'a' before initializationconsole.log(b); // ReferenceError: Cannot access 'b' before initializationlet a = 10;const b = 5;// goodvar a = 10;console.log(a); // 10function fun() {}fun();class A {}new A();let a = 10;const b = 5;console.log(a); // 10console.log(b); // 5For more information refer to JavaScript Scoping & Hoisting by Ben Cherry.⬆ back to topComparison Operators & Equality15.1 Use === and !== over == and !=. eslint: eqeqeq15.2 Conditional statements such as the if statement evaluate their expression using coercion with the ToBoolean abstract method and always follow these simple rules:Objects evaluate to trueUndefined evaluates to falseNull evaluates to falseBooleans evaluate to the value of the booleanNumbers evaluate to false if +0, -0, or NaN, otherwise trueStrings evaluate to false if an empty string '', otherwise trueif ([0] && []) {  // true  // an array (even an empty one) is an object, objects will evaluate to true}15.3 Use shortcuts for booleans, but explicit comparisons for strings and numbers.// badif (isValid === true) {  // ...}// goodif (isValid) {  // ...}// badif (name) {  // ...}// goodif (name !== '') {  // ...}// badif (collection.length) {  // ...}// goodif (collection.length > 0) {  // ...}15.4 For more information see Truth, Equality, and JavaScript by Angus Croll.15.5 Use braces to create blocks in case and default clauses that contain lexical declarations (e.g. let, const, function, and class). eslint: no-case-declarationsWhy? Lexical declarations are visible in the entire switch block but only get initialized when assigned, which only happens when its case is reached. This causes problems when multiple case clauses attempt to define the same thing.// badswitch (foo) {  case 1:    let x = 1;    break;  case 2:    const y = 2;    break;  case 3:    function f() {      // ...    }    break;  default:    class C {}}// goodswitch (foo) {  case 1: {    let x = 1;    break;  }  case 2: {    const y = 2;    break;  }  case 3: {    function f() {      // ...    }    break;  }  case 4:    bar();    break;  default: {    class C {}  }}15.6 Ternaries should not be nested and generally be single line expressions. eslint: no-nested-ternary// badconst foo = maybe1 > maybe2  ? \""bar\""  : value1 > value2 ? \""baz\"" : null;// split into 2 separated ternary expressionsconst maybeNull = value1 > value2 ? 'baz' : null;// betterconst foo = maybe1 > maybe2  ? 'bar'  : maybeNull;// bestconst foo = maybe1 > maybe2 ? 'bar' : maybeNull;15.7 Avoid unneeded ternary statements. eslint: no-unneeded-ternary// badconst foo = a ? a : b;const bar = c ? true : false;const baz = c ? false : true;const quux = a != null ? a : b;// goodconst foo = a || b;const bar = !!c;const baz = !c;const quux = a ?? b;15.8 When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: +, -, and ** since their precedence is broadly understood. We recommend enclosing / and * in parentheses because their precedence can be ambiguous when they are mixed.eslint: no-mixed-operatorsWhy? This improves readability and clarifies the developer’s intention.// badconst foo = a && b < 0 || c > 0 || d + 1 === 0;// badconst bar = a ** b - 5 % d;// bad// one may be confused into thinking (a || b) && cif (a || b && c) {  return d;}// badconst bar = a + b / c * d;// goodconst foo = (a && b < 0) || c > 0 || (d + 1 === 0);// goodconst bar = a ** b - (5 % d);// goodif (a || (b && c)) {  return d;}// goodconst bar = a + (b / c) * d;15.9 The nullish coalescing operator (??) is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined. Otherwise, it returns the left-hand side operand.Why? It provides precision by distinguishing null/undefined from other falsy values, enhancing code clarity and predictability.// badconst value = 0 ?? 'default';// returns 0, not 'default'// badconst value = '' ?? 'default';// returns '', not 'default'// goodconst value = null ?? 'default';// returns 'default'// goodconst user = {  name: 'John',  age: null};const age = user.age ?? 18;// returns 18⬆ back to topBlocks16.1 Use braces with all multiline blocks. eslint: nonblock-statement-body-position// badif (test)  return false;// goodif (test) return false;// goodif (test) {  return false;}// badfunction foo() { return false; }// goodfunction bar() {  return false;}16.2 If you’re using multiline blocks with if and else, put else on the same line as your if block’s closing brace. eslint: brace-style// badif (test) {  thing1();  thing2();}else {  thing3();}// goodif (test) {  thing1();  thing2();} else {  thing3();}16.3 If an if block always executes a return statement, the subsequent else block is unnecessary. A return in an else if block following an if block that contains a return can be separated into multiple if blocks. eslint: no-else-return// badfunction foo() {  if (x) {    return x;  } else {    return y;  }}// badfunction cats() {  if (x) {    return x;  } else if (y) {    return y;  }}// badfunction dogs() {  if (x) {    return x;  } else {    if (y) {      return y;    }  }}// goodfunction foo() {  if (x) {    return x;  }  return y;}// goodfunction cats() {  if (x) {    return x;  }  if (y) {    return y;  }}// goodfunction dogs(x) {  if (x) {    if (z) {      return y;    }  } else {    return z;  }}⬆ back to topControl Statements17.1 In case your control statement (if, while etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.// badif ((foo === 123 || bar === 'abc') && doesItLookGoodWhenItBecomesThatLong() && isThisReallyHappening()) {  thing1();}// badif (foo === 123 &&  bar === 'abc') {  thing1();}// badif (foo === 123  && bar === 'abc') {  thing1();}// badif (  foo === 123 &&  bar === 'abc') {  thing1();}// goodif (  foo === 123  && bar === 'abc') {  thing1();}// goodif (  (foo === 123 || bar === 'abc')  && doesItLookGoodWhenItBecomesThatLong()  && isThisReallyHappening()) {  thing1();}// goodif (foo === 123 && bar === 'abc') {  thing1();}17.2 Don't use selection operators in place of control statements.// bad!isRunning && startRunning();// goodif (!isRunning) {  startRunning();}⬆ back to topComments18.1 Use /** ... */ for multiline comments.// bad// make() returns a new element// based on the passed in tag name//// @param {String} tag// @return {Element} elementfunction make(tag) {  // ...  return element;}// good/** * make() returns a new element * based on the passed-in tag name */function make(tag) {  // ...  return element;}18.2 Use // for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.// badconst active = true;  // is current tab// good// is current tabconst active = true;// badfunction getType() {  console.log('fetching type...');  // set the default type to 'no type'  const type = this.type || 'no type';  return type;}// goodfunction getType() {  console.log('fetching type...');  // set the default type to 'no type'  const type = this.type || 'no type';  return type;}// also goodfunction getType() {  // set the default type to 'no type'  const type = this.type || 'no type';  return type;}18.3 Start all comments with a space to make it easier to read. eslint: spaced-comment// bad//is current tabconst active = true;// good// is current tabconst active = true;// bad/** *make() returns a new element *based on the passed-in tag name */function make(tag) {  // ...  return element;}// good/** * make() returns a new element * based on the passed-in tag name */function make(tag) {  // ...  return element;}18.4 Prefixing your comments with FIXME or TODO helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are FIXME: -- need to figure this out or TODO: -- need to implement.18.5 Use // FIXME: to annotate problems.class Calculator extends Abacus {  constructor() {    super();    // FIXME: shouldn’t use a global here    total = 0;  }}18.6 Use // TODO: to annotate solutions to problems.class Calculator extends Abacus {  constructor() {    super();    // TODO: total should be configurable by an options param    this.total = 0;  }}⬆ back to topWhitespace19.1 Use soft tabs (space character) set to 2 spaces. eslint: indent// badfunction foo() {∙∙∙∙let name;}// badfunction bar() {∙let name;}// goodfunction baz() {∙∙let name;}19.2 Place 1 space before the leading brace. eslint: space-before-blocks// badfunction test(){  console.log('test');}// goodfunction test() {  console.log('test');}// baddog.set('attr',{  age: '1 year',  breed: 'Bernese Mountain Dog',});// gooddog.set('attr', {  age: '1 year',  breed: 'Bernese Mountain Dog',});19.3 Place 1 space before the opening parenthesis in control statements (if, while etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: keyword-spacing// badif(isJedi) {  fight ();}// goodif (isJedi) {  fight();}// badfunction fight () {  console.log ('Swooosh!');}// goodfunction fight() {  console.log('Swooosh!');}19.4 Set off operators with spaces. eslint: space-infix-ops// badconst x=y+5;// goodconst x = y + 5;19.5 End files with a single newline character. eslint: eol-last// badimport { es6 } from './AirbnbStyleGuide';  // ...export default es6;// badimport { es6 } from './AirbnbStyleGuide';  // ...export default es6;↵↵// goodimport { es6 } from './AirbnbStyleGuide';  // ...export default es6;↵19.6 Use indentation when making long method chains (more than 2 method chains). Use a leading dot, whichemphasizes that the line is a method call, not a new statement. eslint: newline-per-chained-call no-whitespace-before-property// bad$('#items').find('.selected').highlight().end().find('.open').updateCount();// bad$('#items').  find('.selected').    highlight().    end().  find('.open').    updateCount();// good$('#items')  .find('.selected')    .highlight()    .end()  .find('.open')    .updateCount();// badconst leds = stage.selectAll('.led').data(data).enter().append('svg:svg').classed('led', true)    .attr('width', (radius + margin) * 2).append('svg:g')    .attr('transform', `translate(${radius + margin}, ${radius + margin})`)    .call(tron.led);// goodconst leds = stage.selectAll('.led')    .data(data)  .enter().append('svg:svg')    .classed('led', true)    .attr('width', (radius + margin) * 2)  .append('svg:g')    .attr('transform', `translate(${radius + margin}, ${radius + margin})`)    .call(tron.led);// goodconst leds = stage.selectAll('.led').data(data);const svg = leds.enter().append('svg:svg');svg.classed('led', true).attr('width', (radius + margin) * 2);const g = svg.append('svg:g');g.attr('transform', `translate(${radius + margin}, ${radius + margin})`).call(tron.led);19.7 Leave a blank line after blocks and before the next statement.// badif (foo) {  return bar;}return baz;// goodif (foo) {  return bar;}return baz;// badconst obj = {  foo() {  },  bar() {  },};return obj;// goodconst obj = {  foo() {  },  bar() {  },};return obj;// badconst arr = [  function foo() {  },  function bar() {  },];return arr;// goodconst arr = [  function foo() {  },  function bar() {  },];return arr;19.8 Do not pad your blocks with blank lines. eslint: padded-blocks// badfunction bar() {  console.log(foo);}// badif (baz) {  console.log(quux);} else {  console.log(foo);}// badclass Foo {  constructor(bar) {    this.bar = bar;  }}// goodfunction bar() {  console.log(foo);}// goodif (baz) {  console.log(quux);} else {  console.log(foo);}19.9 Do not use multiple blank lines to pad your code. eslint: no-multiple-empty-lines// badclass Person {  constructor(fullName, email, birthday) {    this.fullName = fullName;    this.email = email;    this.setAge(birthday);  }  setAge(birthday) {    const today = new Date();    const age = this.getAge(today, birthday);    this.age = age;  }  getAge(today, birthday) {    // ..  }}// goodclass Person {  constructor(fullName, email, birthday) {    this.fullName = fullName;    this.email = email;    this.setAge(birthday);  }  setAge(birthday) {    const today = new Date();    const age = getAge(today, birthday);    this.age = age;  }  getAge(today, birthday) {    // ..  }}19.10 Do not add spaces inside parentheses. eslint: space-in-parens// badfunction bar( foo ) {  return foo;}// goodfunction bar(foo) {  return foo;}// badif ( foo ) {  console.log(foo);}// goodif (foo) {  console.log(foo);}19.11 Do not add spaces inside brackets. eslint: array-bracket-spacing// badconst foo = [ 1, 2, 3 ];console.log(foo[ 0 ]);// goodconst foo = [1, 2, 3];console.log(foo[0]);19.12 Add spaces inside curly braces. eslint: object-curly-spacing// badconst foo = {clark: 'kent'};// goodconst foo = { clark: 'kent' };19.13 Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per above, long strings are exempt from this rule, and should not be broken up. eslint: max-lenWhy? This ensures readability and maintainability.// badconst foo = jsonData && jsonData.foo && jsonData.foo.bar && jsonData.foo.bar.baz && jsonData.foo.bar.baz.quux && jsonData.foo.bar.baz.quux.xyzzy;// bad$.ajax({ method: 'POST', url: 'https://airbnb.com/', data: { name: 'John' } }).done(() => console.log('Congratulations!')).fail(() => console.log('You have failed this city.'));// goodconst foo = jsonData  && jsonData.foo  && jsonData.foo.bar  && jsonData.foo.bar.baz  && jsonData.foo.bar.baz.quux  && jsonData.foo.bar.baz.quux.xyzzy;// betterconst foo = jsonData  ?.foo  ?.bar  ?.baz  ?.quux  ?.xyzzy;// good$.ajax({  method: 'POST',  url: 'https://airbnb.com/',  data: { name: 'John' },})  .done(() => console.log('Congratulations!'))  .fail(() => console.log('You have failed this city.'));19.14 Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: block-spacing// badfunction foo() {return true;}if (foo) { bar = 0;}// goodfunction foo() { return true; }if (foo) { bar = 0; }19.15 Avoid spaces before commas and require a space after commas. eslint: comma-spacing// badconst foo = 1,bar = 2;const arr = [1 , 2];// goodconst foo = 1, bar = 2;const arr = [1, 2];19.16 Enforce spacing inside of computed property brackets. eslint: computed-property-spacing// badobj[foo ]obj[ 'foo']const x = {[ b ]: a}obj[foo[ bar ]]// goodobj[foo]obj['foo']const x = { [b]: a }obj[foo[bar]]19.17 Avoid spaces between functions and their invocations. eslint: func-call-spacing// badfunc ();func();// goodfunc();19.18 Enforce spacing between keys and values in object literal properties. eslint: key-spacing// badconst obj = { foo : 42 };const obj2 = { foo:42 };// goodconst obj = { foo: 42 };19.19 Avoid trailing spaces at the end of lines. eslint: no-trailing-spaces19.20 Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: no-multiple-empty-lines// bad - multiple empty linesconst x = 1;const y = 2;// bad - 2+ newlines at end of fileconst x = 1;const y = 2;// bad - 1+ newline(s) at beginning of fileconst x = 1;const y = 2;// goodconst x = 1;const y = 2;⬆ back to topCommas20.1 Leading commas: Nope. eslint: comma-style// badconst story = [    once  , upon  , aTime];// goodconst story = [  once,  upon,  aTime,];// badconst hero = {    firstName: 'Ada'  , lastName: 'Lovelace'  , birthYear: 1815  , superPower: 'computers'};// goodconst hero = {  firstName: 'Ada',  lastName: 'Lovelace',  birthYear: 1815,  superPower: 'computers',};20.2 Additional trailing comma: Yup. eslint: comma-dangleWhy? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the trailing comma problem in legacy browsers.// bad - git diff without trailing commaconst hero = {     firstName: 'Florence',-    lastName: 'Nightingale'+    lastName: 'Nightingale',+    inventorOf: ['coxcomb chart', 'modern nursing']};// good - git diff with trailing commaconst hero = {     firstName: 'Florence',     lastName: 'Nightingale',+    inventorOf: ['coxcomb chart', 'modern nursing'],};// badconst hero = {  firstName: 'Dana',  lastName: 'Scully'};const heroes = [  'Batman',  'Superman'];// goodconst hero = {  firstName: 'Dana',  lastName: 'Scully',};const heroes = [  'Batman',  'Superman',];// badfunction createHero(  firstName,  lastName,  inventorOf) {  // does nothing}// goodfunction createHero(  firstName,  lastName,  inventorOf,) {  // does nothing}// good (note that a comma must not appear after a \""rest\"" element)function createHero(  firstName,  lastName,  inventorOf,  ...heroArgs) {  // does nothing}// badcreateHero(  firstName,  lastName,  inventorOf);// goodcreateHero(  firstName,  lastName,  inventorOf,);// good (note that a comma must not appear after a \""rest\"" element)createHero(  firstName,  lastName,  inventorOf,  ...heroArgs);⬆ back to topSemicolons21.1 Yup. eslint: semiWhy? When JavaScript encounters a line break without a semicolon, it uses a set of rules called Automatic Semicolon Insertion to determine whether it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.// bad - raises exceptionconst luke = {}const leia = {}[luke, leia].forEach((jedi) => jedi.father = 'vader')// bad - raises exceptionconst reaction = \""No! That’s impossible!\""(async function meanwhileOnTheFalcon() {  // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`  // ...}())// bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!function foo() {  return    'search your feelings, you know it to be foo'}// goodconst luke = {};const leia = {};[luke, leia].forEach((jedi) => {  jedi.father = 'vader';});// goodconst reaction = 'No! That’s impossible!';(async function meanwhileOnTheFalcon() {  // handle `leia`, `lando`, `chewie`, `r2`, `c3p0`  // ...}());// goodfunction foo() {  return 'search your feelings, you know it to be foo';}Read more.⬆ back to topType Casting & Coercion22.1 Perform type coercion at the beginning of the statement.22.2 Strings: eslint: no-new-wrappers// => this.reviewScore = 9;// badconst totalScore = new String(this.reviewScore); // typeof totalScore is \""object\"" not \""string\""// badconst totalScore = this.reviewScore + ''; // invokes this.reviewScore.valueOf()// badconst totalScore = this.reviewScore.toString(); // isn’t guaranteed to return a string// goodconst totalScore = String(this.reviewScore);22.3 Numbers: Use Number for type casting and parseInt always with a radix for parsing strings. eslint: radix no-new-wrappersWhy? The parseInt function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is undefined or 0, it is assumed to be 10 except when the number begins with the character pairs 0x or 0X, in which case a radix of 16 is assumed. This differs from ECMAScript 3, which merely discouraged (but allowed) octal interpretation. Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, always specify a radix.const inputValue = '4';// badconst val = new Number(inputValue);// badconst val = +inputValue;// badconst val = inputValue >> 0;// badconst val = parseInt(inputValue);// goodconst val = Number(inputValue);// goodconst val = parseInt(inputValue, 10);22.4 If for whatever reason you are doing something wild and parseInt is your bottleneck and need to use Bitshift for performance reasons, leave a comment explaining why and what you’re doing.// good/** * parseInt was the reason my code was slow. * Bitshifting the String to coerce it to a * Number made it a lot faster. */const val = inputValue >> 0;22.5 Note: Be careful when using bitshift operations. Numbers are represented as 64-bit values, but bitshift operations always return a 32-bit integer (source). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. Discussion. Largest signed 32-bit Int is 2,147,483,647:2147483647 >> 0; // => 21474836472147483648 >> 0; // => -21474836482147483649 >> 0; // => -214748364722.6 Booleans: eslint: no-new-wrappersconst age = 0;// badconst hasAge = new Boolean(age);// goodconst hasAge = Boolean(age);// bestconst hasAge = !!age;⬆ back to topNaming Conventions23.1 Avoid single letter names. Be descriptive with your naming. eslint: id-length// badfunction q() {  // ...}// goodfunction query() {  // ...}23.2 Use camelCase when naming objects, functions, and instances. eslint: camelcase// badconst OBJEcttsssss = {};const this_is_my_object = {};function c() {}// goodconst thisIsMyObject = {};function thisIsMyFunction() {}23.3 Use PascalCase only when naming constructors or classes. eslint: new-cap// badfunction user(options) {  this.name = options.name;}const bad = new user({  name: 'nope',});// goodclass User {  constructor(options) {    this.name = options.name;  }}const good = new User({  name: 'yup',});23.4 Do not use trailing or leading underscores. eslint: no-underscore-dangleWhy? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.// badthis.__firstName__ = 'Panda';this.firstName_ = 'Panda';this._firstName = 'Panda';// goodthis.firstName = 'Panda';// good, in environments where WeakMaps are available// see https://kangax.github.io/compat-table/es6/#test-WeakMapconst firstNames = new WeakMap();firstNames.set(this, 'Panda');23.5 Don’t save references to this. Use arrow functions or Function#bind.// badfunction foo() {  const self = this;  return function () {    console.log(self);  };}// badfunction foo() {  const that = this;  return function () {    console.log(that);  };}// goodfunction foo() {  return () => {    console.log(this);  };}23.6 A base filename should exactly match the name of its default export.// file 1 contentsclass CheckBox {  // ...}export default CheckBox;// file 2 contentsexport default function fortyTwo() { return 42; }// file 3 contentsexport default function insideDirectory() {}// in some other file// badimport CheckBox from './checkBox'; // PascalCase import/export, camelCase filenameimport FortyTwo from './FortyTwo'; // PascalCase import/filename, camelCase exportimport InsideDirectory from './InsideDirectory'; // PascalCase import/filename, camelCase export// badimport CheckBox from './check_box'; // PascalCase import/export, snake_case filenameimport forty_two from './forty_two'; // snake_case import/filename, camelCase exportimport inside_directory from './inside_directory'; // snake_case import, camelCase exportimport index from './inside_directory/index'; // requiring the index file explicitlyimport insideDirectory from './insideDirectory/index'; // requiring the index file explicitly// goodimport CheckBox from './CheckBox'; // PascalCase export/import/filenameimport fortyTwo from './fortyTwo'; // camelCase export/import/filenameimport insideDirectory from './insideDirectory'; // camelCase export/import/directory name/implicit \""index\""// ^ supports both insideDirectory.js and insideDirectory/index.js23.7 Use camelCase when you export-default a function. Your filename should be identical to your function’s name.function makeStyleGuide() {  // ...}export default makeStyleGuide;23.8 Use PascalCase when you export a constructor / class / singleton / function library / bare object.const AirbnbStyleGuide = {  es6: {  },};export default AirbnbStyleGuide;23.9 Acronyms and initialisms should always be all uppercased, or all lowercased.Why? Names are for readability, not to appease a computer algorithm.// badimport SmsContainer from './containers/SmsContainer';// badconst HttpRequests = [  // ...];// goodimport SMSContainer from './containers/SMSContainer';// goodconst HTTPRequests = [  // ...];// also goodconst httpRequests = [  // ...];// bestimport TextMessageContainer from './containers/TextMessageContainer';// bestconst requests = [  // ...];23.10 You may optionally uppercase a constant only if it (1) is exported, (2) is a const (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.What about all const variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.What about exported objects? - Uppercase at the top level of export (e.g. EXPORTED_OBJECT.key) and maintain that all nested properties do not change.// badconst PRIVATE_VARIABLE = 'should not be unnecessarily uppercased within a file';// badexport const THING_TO_BE_CHANGED = 'should obviously not be uppercased';// badexport let REASSIGNABLE_VARIABLE = 'do not use let with uppercase variables';// ---// allowed but does not supply semantic valueexport const apiKey = 'SOMEKEY';// better in most casesexport const API_KEY = 'SOMEKEY';// ---// bad - unnecessarily uppercases key while adding no semantic valueexport const MAPPING = {  KEY: 'value'};// goodexport const MAPPING = {  key: 'value',};⬆ back to topAccessors24.1 Accessor functions for properties are not required.24.2 Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use getVal() and setVal('hello').// badclass Dragon {  get age() {    // ...  }  set age(value) {    // ...  }}// goodclass Dragon {  getAge() {    // ...  }  setAge(value) {    // ...  }}24.3 If the property/method is a boolean, use isVal() or hasVal().// badif (!dragon.age()) {  return false;}// goodif (!dragon.hasAge()) {  return false;}24.4 It’s okay to create get() and set() functions, but be consistent.class Jedi {  constructor(options = {}) {    const lightsaber = options.lightsaber || 'blue';    this.set('lightsaber', lightsaber);  }  set(key, val) {    this[key] = val;  }  get(key) {    return this[key];  }}⬆ back to topEvents25.1 When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a \""hash\"") instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:// bad$(this).trigger('listingUpdated', listing.id);// ...$(this).on('listingUpdated', (e, listingID) => {  // do something with listingID});prefer:// good$(this).trigger('listingUpdated', { listingID: listing.id });// ...$(this).on('listingUpdated', (e, data) => {  // do something with data.listingID});⬆ back to topjQuery26.1 Prefix jQuery object variables with a $.// badconst sidebar = $('.sidebar');// goodconst $sidebar = $('.sidebar');// goodconst $sidebarBtn = $('.sidebar-btn');26.2 Cache jQuery lookups.// badfunction setSidebar() {  $('.sidebar').hide();  // ...  $('.sidebar').css({    'background-color': 'pink',  });}// goodfunction setSidebar() {  const $sidebar = $('.sidebar');  $sidebar.hide();  // ...  $sidebar.css({    'background-color': 'pink',  });}26.3 For DOM queries use Cascading $('.sidebar ul') or parent > child $('.sidebar > ul'). jsPerf26.4 Use find with scoped jQuery object queries.// bad$('ul', '.sidebar').hide();// bad$('.sidebar').find('ul').hide();// good$('.sidebar ul').hide();// good$('.sidebar > ul').hide();// good$sidebar.find('ul').hide();⬆ back to topECMAScript 5 Compatibility27.1 Refer to Kangax’s ES5 compatibility table.⬆ back to topECMAScript 6+ (ES 2015+) Styles28.1 This is a collection of links to the various ES6+ features.Arrow FunctionsClassesObject ShorthandObject ConciseObject Computed PropertiesTemplate StringsDestructuringDefault ParametersRestArray SpreadsLet and ConstExponentiation OperatorIterators and GeneratorsModules28.2 Do not use TC39 proposals that have not reached stage 3.Why? They are not finalized, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.⬆ back to topStandard LibraryThe Standard Librarycontains utilities that are functionally broken but remain for legacy reasons.29.1 Use Number.isNaN instead of global isNaN.eslint: no-restricted-globalsWhy? The global isNaN coerces non-numbers to numbers, returning true for anything that coerces to NaN.If this behavior is desired, make it explicit.// badisNaN('1.2'); // falseisNaN('1.2.3'); // true// goodNumber.isNaN('1.2.3'); // falseNumber.isNaN(Number('1.2.3')); // true29.2 Use Number.isFinite instead of global isFinite.eslint: no-restricted-globalsWhy? The global isFinite coerces non-numbers to numbers, returning true for anything that coerces to a finite number.If this behavior is desired, make it explicit.// badisFinite('2e3'); // true// goodNumber.isFinite('2e3'); // falseNumber.isFinite(parseInt('2e3', 10)); // true⬆ back to topTesting30.1 Yup.function foo() {  return true;}30.2 No, but seriously:Whichever testing framework you use, you should be writing tests!Strive to write many small pure functions, and minimize where mutations occur.Be cautious about stubs and mocks - they can make your tests more brittle.We primarily use mocha and jest at Airbnb. tape is also used occasionally for small, separate modules.100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.Whenever you fix a bug, write a regression test. A bug fixed without a regression test is almost certainly going to break again in the future.⬆ back to topPerformanceOn Layout & Web PerformanceString vs Array ConcatTry/Catch Cost In a LoopBang FunctionjQuery Find vs Context, SelectorinnerHTML vs textContent for script textLong String ConcatenationAre JavaScript functions like map(), reduce(), and filter() optimized for traversing arrays?Loading...⬆ back to topResourcesLearning ES6+Latest ECMA specExploringJSES6 Compatibility TableComprehensive Overview of ES6 FeaturesJavaScript RoadmapRead ThisStandard ECMA-262ToolsCode Style LintersESlint - Airbnb Style .eslintrcJSHint - Airbnb Style .jshintrcNeutrino Preset - @neutrinojs/airbnbOther Style GuidesGoogle JavaScript Style GuideGoogle JavaScript Style Guide (Old)jQuery Core Style GuidelinesPrinciples of Writing Consistent, Idiomatic JavaScriptStandardJSOther StylesNaming this in nested functions - Christian JohansenConditional Callbacks - Ross AllenPopular JavaScript Coding Conventions on GitHub - JeongHoon ByunMultiple var statements in JavaScript, not superfluous - Ben AlmanFurther ReadingUnderstanding JavaScript Closures - Angus CrollBasic JavaScript for the impatient programmer - Dr. Axel RauschmayerYou Might Not Need jQuery - Zack Bloom & Adam SchwartzES6 Features - Luke HobanFrontend Guidelines - Benjamin De CockBooksJavaScript: The Good Parts - Douglas CrockfordJavaScript Patterns - Stoyan StefanovPro JavaScript Design Patterns - Ross Harmes and Dustin DiazHigh Performance Web Sites: Essential Knowledge for Front-End Engineers - Steve SoudersMaintainable JavaScript - Nicholas C. ZakasJavaScript Web Applications - Alex MacCawPro JavaScript Techniques - John ResigSmashing Node.js: JavaScript Everywhere - Guillermo RauchSecrets of the JavaScript Ninja - John Resig and Bear BibeaultHuman JavaScript - Henrik JoretegSuperhero.js - Kim Joar Bekkelund, Mads Mobæk, & Olav BjorkoyJSBooks - Julien BouquillonThird Party JavaScript - Ben Vinegar and Anton KovalyovEffective JavaScript: 68 Specific Ways to Harness the Power of JavaScript - David HermanEloquent JavaScript - Marijn HaverbekeYou Don’t Know JS: ES6 & Beyond - Kyle SimpsonBlogsJavaScript WeeklyJavaScript, JavaScript...Bocoup WeblogAdequately GoodNCZOnlinePerfection KillsBen AlmanDmitry BaranovskiynettutsPodcastsJavaScript AirJavaScript Jabber⬆ back to topIn the WildThis is a list of organizations that are using this style guide. Send us a pull request and we'll add you to the list.123erfasst: 123erfasst/javascript4Catalyzer: 4Catalyzer/javascriptAan Zee: AanZee/javascriptAirbnb: airbnb/javascriptAloPeyk: AloPeykAltSchool: AltSchool/javascriptApartmint: apartmint/javascriptAscribe: ascribe/javascriptAvant: avantcredit/javascriptAxept: axept/javascriptBillabong: billabong/javascriptBisk: biskBonhomme: bonhommeparis/javascriptBrainshark: brainshark/javascriptCaseNine: CaseNine/javascriptCerner: CernerChartboost: ChartBoost/javascript-style-guideCoeur d'Alene Tribe: www.cdatribe-nsn.govComparaOnline: comparaonline/javascriptCompass Learning: compasslearning/javascript-style-guideDailyMotion: dailymotion/javascriptDoSomething: DoSomething/eslint-configDigitpaint digitpaint/javascriptDrupal: www.drupal.orgEcosia: ecosia/javascriptEvernote: evernote/javascript-style-guideEvolution Gaming: evolution-gaming/javascriptEvozonJs: evozonjs/javascriptExactTarget: ExactTarget/javascriptFlexberry: Flexberry/javascript-style-guideGawker Media: gawkermediaGeneral Electric: GeneralElectric/javascriptGeneration Tux: GenerationTux/javascriptGoodData: gooddata/gdc-js-styleGreenChef: greenchef/javascriptGrooveshark: grooveshark/javascriptGrupo-Abraxas: Grupo-Abraxas/javascriptHappeo: happeo/javascriptHoney: honeyscience/javascriptHow About We: howaboutwe/javascriptHubSpot: HubSpot/javascriptHyper: hyperoslo/javascript-playbookInterCity Group: intercitygroup/javascript-style-guideJam3: Jam3/Javascript-Code-ConventionsJSSolutions: JSSolutions/javascriptKaplan Komputing: kaplankomputing/javascriptKickorStick: kickorstickKinetica Solutions: kinetica/javascriptLEINWAND: LEINWAND/javascriptLonely Planet: lonelyplanet/javascriptM2GEN: M2GEN/javascriptMighty Spring: mightyspring/javascriptMinnPost: MinnPost/javascriptMitocGroup: MitocGroup/javascriptMuber: muberNational Geographic Society: natgeosocietyNullDev: NullDevCo/JavaScript-StyleguideNulogy: nulogy/javascriptOrange Hill Development: orangehill/javascriptOrion Health: orionhealth/javascriptPeerby: Peerby/javascriptPier 1: Pier1/javascriptQotto: Qotto/javascript-style-guideReact: reactjs.org/docs/how-to-contribute.html#style-guideREI: reidev/js-style-guideRipple: ripple/javascript-style-guideSainsbury’s Supermarkets: jsainsburyplcShutterfly: shutterfly/javascriptSourcetoad: sourcetoad/javascriptSpringload: springloadStratoDem Analytics: stratodem/javascriptSteelKiwi Development: steelkiwi/javascriptStudentSphere: studentsphere/javascriptSwoopApp: swoopapp/javascriptSysGarage: sysgarage/javascript-style-guideSyzygy Warsaw: syzygypl/javascriptTarget: target/javascriptTerra: terraTheLadders: TheLadders/javascriptThe Nerdery: thenerdery/javascript-standardsTomify: tompratsTraitify: traitify/eslint-config-traitifyT4R Technology: T4R-Technology/javascriptUrbanSim: urbansimVoxFeed: VoxFeed/javascript-style-guideWeBox Studio: weboxstudio/javascriptWeggo: Weggo/javascriptZillow: zillow/javascriptZocDoc: ZocDoc/javascript⬆ back to topTranslationThis style guide is also available in other languages: Brazilian Portuguese: armoucar/javascript-style-guide Bulgarian: borislavvv/javascript Catalan: fpmweb/javascript-style-guide Chinese (Simplified): lin-123/javascript Chinese (Traditional): jigsawye/javascript French: nmussy/javascript-style-guide German: timofurrer/javascript-style-guide Italian: sinkswim/javascript-style-guide Japanese: mitsuruog/javascript-style-guide Korean: ParkSB/javascript-style-guide Russian: leonidlebedev/javascript-airbnb Spanish: paolocarrasco/javascript-style-guide Thai: lvarayut/javascript-style-guide Turkish: eraycetinay/javascript Ukrainian: ivanzusko/javascript Vietnam: dangkyokhoang/javascript-style-guideThe JavaScript Style Guide GuideReferenceChat With Us About JavaScriptFind us on gitter.ContributorsView ContributorsLicense(The MIT License)Copyright (c) 2012 AirbnbPermission is hereby granted, free of charge, to any person obtaininga copy of this software and associated documentation files (the'Software'), to deal in the Software without restriction, includingwithout limitation the rights to use, copy, modify, merge, publish,distribute, sublicense, and/or sell copies of the Software, and topermit persons to whom the Software is furnished to do so, subject tothe following conditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OFMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANYCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THESOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.⬆ back to topAmendmentsWe encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.};"
3,atralice/Curso.Prep.Henry,https://github.com/atralice/Curso.Prep.Henry/blob/master/README.md,JavaScript,"IntroducciónModulo 0 - Prep00 - Primeros Pasos01 - Git02 - I - Introducción a Javascript: Variables, tipos de datos y funciones03 - II- Flujos de control, operadores de comparación, bucles for04 - III - continuación de bucles for y Arrays05 - IV - Objetos06 - V - Clases y prototype07 - VI - Callbacks08 - HTML09 - CSSHenry Challenge => Inscribite acá para rendirConceptos:Expressions vs StatementsClases de Repaso (Henry Heroes)Estudiantes mas avanzados de la carrera resuelven los ejercicios en vivo en formato webinar.Acá podes ver el calendario de las clases y las grabaciones.HomeworksIMPORTANTE: Para ejecutar los tests de cada homework tenes que pararte en la carpeta donde clonaste tu repo (es decir la carpeta donde está este README.md) y ejecutar el siguiente comando:npm installEsto instalará todas las dependencias necesarias (lo tenés que hacer una sóla vez), una vez terminado y cada vez que quieras ver cuantos tests pasaste ejecutá:npm test {nombre del homework}.test.jsPor ejemplo, para ejecutar los tests del homework 02, ejecutar: npm test JSII.test.jsel del homework 01: npm test JSI.test.jsy así.No todos los homeworks tiene tests, está detallado en la descripción de cada uno.La CarreraSi querés saber más sobre la carrera, mirá este video:<iframe src=\""https://player.vimeo.com/video/426051769\"" width=\""640\"" height=\""360\"" frameborder=\""0\"" allow=\""autoplay; fullscreen\"" allowfullscreen></iframe>"
4,odoo/odoo,https://github.com/odoo/odoo/blob/16.0/README.md,JavaScript,"OdooOdoo is a suite of web based open source business apps.The main Odoo Apps include an Open Source CRM,Website Builder,eCommerce,Warehouse Management,Project Management,Billing & Accounting,Point of Sale,Human Resources,Marketing,Manufacturing,...Odoo Apps can be used as stand-alone applications, but they also integrate seamlessly so you geta full-featured Open Source ERP when you install several Apps.Getting started with OdooFor a standard installation please follow the Setup instructionsfrom the documentation.To learn the software, we recommend the Odoo eLearning, or Scale-up, the business game. Developers can start with the developer tutorials"
5,hakimel/reveal.js,https://github.com/hakimel/reveal.js/blob/master/README.md,JavaScript,"            reveal.js is an open source HTML presentation framework. It enables anyone with a web browser to create beautiful presentations for free. Check out the live demo at revealjs.com.The framework comes with a powerful feature set including nested slides, Markdown support, Auto-Animate, PDF export, speaker notes, LaTeX typesetting, syntax highlighted code and an extensive API.Want to create reveal.js presentation in a graphical editor? Try https://slides.com. It's made by the same people behind reveal.js.SponsorsHakim's open source work is supported by GitHub sponsors. Special thanks to:                                              Your app, enterprise-ready.                  Start selling to enterprise customers with just a few lines of code. Add Single Sign-On (and more) in minutes instead of months.                    Getting started🚀 Install reveal.js👀 View the demo presentation📖 Read the documentation🖌 Try the visual editor for reveal.js at Slides.com🎬 Watch the reveal.js video course (paid)  MIT licensed | Copyright © 2011-2023 Hakim El Hattab, https://hakim.se"
6,jonasschmedtmann/complete-javascript-course,https://github.com/jonasschmedtmann/complete-javascript-course/blob/master/README.md,JavaScript,"Course Material and FAQ for my Complete JavaScript CourseThis branch of the repo contains starter files and final code for all sections and projects of the course, exactly as shown in the videos.Use starter code to start each section, and final code to compare it with your own code whenever something doesn't work!There is also a the updates-and-fixes branch which is kept up-to-date with latest package updates and important bugfixes 🐛🚨 Please read the following Frequently Asked Questions (FAQ) carefully before starting the course 🚨FAQQ1: How do I download the files?A: If you're new to GitHub and just want to download the entire code, hit the green button saying \""Code\"", and then choose the \""Download ZIP\"" option. If you can't see the button (on mobile), use this link instead.Q2: I'm stuck! Where do I get help?A: Have you actually tried to fix the problem on your own? Have you compared your code to the final code? If you failed fixing your problem, please post a detailed description of the problem to the Q&A area of that video over at Udemy, along with a codepen containing your code. You will get help there. Please don't send me a personal message or email to fix coding problems.Q3: What VSCode theme are you using?A: I use Monokai Pro for all my coding and course production. It's a paid theme (I', not affiliated with them), but you can actually use the free demo version forever 😅Q4: Can I see a final version of the course projects?A: Sure! Here you go:Pig Game (DOM Manipulation)Bankist (Arrays, Numbers, Dates, Timers. Fake \""log in\"" with user js and PIN 1111)Bankist Site (Advanced DOM and Events)Mapty (OOP, Geolocation, Project planning)forkify (Final advanced project)Q5: Videos don't load, can you fix it?A: Unfortunately, there is nothing I can do about it. The course is hosted on Udemy, and sometimes they have technical issues like this. Please just come back a bit later or contact their support team.Q6: Videos are blurred / have low quality, can you fix it?A: Please open video settings and change the quality from 'Auto' to another value, for example 720p. If that doesn't help, please contact the Udemy support team.Q7: Are the videos downloadable?A: Videos used to be downloadable, but unfortunately, Udemy has disabled video downloads on all my courses in order to fight piracy. There is nothing I can do about this.Q8: I want to put these projects in my portfolio. Is that allowed?A: Absolutely! Just make sure you actually built them yourself by following the course, and that you understand what you did. What is not allowed is that you create your own course/videos/articles based on this course's content!Q9: You mentioned your resources page. Where can I find it?A: It's on my website at http://codingheroes.io/resources. You can subscribe for updates 😉Q10: I love your courses and want to get updates on new courses. How?A: First, you can subscribe to my email list at my website. Plus, I make important announcements on twitter @jonasschmedtman, so you should definitely follow me there 🔥Q11: How do I get my certificate of completion?A: A certificate of completion is provided by Udemy after you complete 100% of the course. After completing the course, just click on the \""Your progress\"" indicator in the top right-hand corner of the course page. If you want to change your name on the certificate, please contact the Udemy support team.Q12: Can you add subtitles in my language?A: No. I provide professional English captions, but Udemy is responsible for subtitles in all other languages (automatic translations). So please contact the Udemy support team to request your own language.Q13: Do you accept pull requests?A: No, for the simple reason that I want this repository to contain the exact same code that is shown in the videos. However, please feel free to add an issue if you found one.Q14: I'm looking for the old course version (v1) files. Where can I find them?A: They are in this same repo, but in the v1 branch. So just go to v1, and download the code from there."
7,actionsdemos/calculator,https://github.com/actionsdemos/calculator/blob/master/README.md,JavaScript,"Calculator.js: a node.js Demonstration ProjectAn example node.js project, including tests with mocha, that behaves likea pocket calculator.The project contains a simple node.js application that exposes REST APIsto perform arithmetic on integers, and provides a test suite with mochaand chai.  The mocha-junit-reporters package is included to provide XMLoutput that can be presented in a continuous integration tool likeAzure DevOps.To build, simply:Runs npm install to install dependencies.Runs npm test to run Mocha and execute the unit tests."
8,FortAwesome/Font-Awesome,https://github.com/FortAwesome/Font-Awesome/blob/6.x/README.md,JavaScript,"Version 6Font Awesome is the Internet's icon library and toolkit, used by millions ofdesigners, developers, and content creators.DocumentationLearn how to get started with Font Awesome and then dive deeper into other and advanced topics:Docs for version 6Where did Font Awesome 5, 4 (or 3) go?Now that Font Awesome 6 has been released we are marking version 5 as Long TermSupport (LTS). Version 5 will get critical bug fixes only. Version 3 and 4 arenow end-of-life and we don't plan on releasing any further versions of the 4.xor 3.x.You can see a complete list of versions on our Versionspage.Change logThe change log for releases is now available directly on our site.Looking for older versions of Font Awesome? Check the releases.UpgradingFrom time-to-time we'll have special upgrading instructions from one version to the next.Web upgrading guideDesktop upgrading guideCode of conductWe will behave ourselves if you behave yourselves. For more details see ourCODE_OF_CONDUCT.md.ContributingPlease read through our contributing guidelines.  Includedare directions for opening issues.VersioningFont Awesome will be maintained under the Semantic Versioning guidelines as much as possible. Releases will be numberedwith the following format:<major>.<minor>.<patch>For more information on SemVer, please visit https://semver.org.The major version \""6\"" is part of an umbrella release.  It includes many different types of files and technologies. Thereforewe deviate from normal SemVer in the following ways:Any release may update the design, look-and-feel, or branding of an existingiconWe will never intentionally release a patch version update that breaksbackward compatibilityA minor release may include backward-incompatible changes but we willwrite clear upgrading instructions in UPGRADING.mdA minor or patch release will never remove iconsBug fixes will be addressed as patch releases unless they include backwardincompatibility then they will be minor releasesLicenseFont Awesome Free is free, open source, and GPL friendly. You can use it forcommercial projects, open source projects, or really almost whatever you want.Icons — CC BY 4.0 LicenseIn the Font Awesome Free download, the CC BY 4.0 license applies to all icons packaged as .svg and .js files types.Fonts — SIL OFL 1.1 LicenseIn the Font Awesome Free download, the SIL OLF license applies to all icons packaged as web and desktop font files.Code — MIT LicenseIn the Font Awesome Free download, the MIT license applies to all non-font and non-icon files.Attribution is required by MIT, SIL OLF, and CC BY licenses. Downloaded FontAwesome Free files already contain embedded comments with sufficientattribution, so you shouldn't need to do anything additional when using thesefiles normally.We've kept attribution comments terse, so we ask that you do not actively workto remove them from files, especially code. They're a great way for folks tolearn about Font Awesome.Teamhttps://github.com/orgs/FortAwesome/people"
9,h5bp/html5-boilerplate,https://github.com/h5bp/html5-boilerplate/blob/main/README.md,JavaScript,"HTML5 BoilerplateHTML5 Boilerplate is a professional front-end template for buildingfast, robust, and adaptable web apps or sites.This project is the product of over 10 years of iterative development andcommunity knowledge. It does not impose a specific developmentphilosophy or framework, so you're free to architect your code in theway that you want.HomepageSource CodeTwitter(@h5pb)About This RepositoryThis repository is where HTML5-Boilerplate is authored. Some of the tools,files and processes that you see here are solely for the production ofHTML5 Boilerplate and are not part of HTML5 Boilerplate. For one example, thegulpfile.mjsscript is used to build the project. It's not part of the project itself.The project we publish is represented by the contents of the /dist/folder. Everything else in this repository is used to author the project.Think of it this way, in the same way that you don't clone vuejs/coreto create a Vue.js app, you don't need to clone this repository to start a newsite or app based on HTML5 Boilerplate.So, if you're looking for a quick start template to build a web site orapplication, look at the options in theQuick Start section of this document.If you want to help us improve HTML5 Boilerplate then you can start with the documentation here, which includes steps to clone this repo in order to get it set up for development.Quick StartChoose one of the following options:Using the create-html5-boilerplatescript, instantly fetch the latest npm published package (or any versionavailable on npm) with npx, npm init or yarn create without having toinstall any dependencies. Running the following npx command installs thelatest version into a folder called new-sitenpx create-html5-boilerplate new-sitecd new-sitenpm installnpm run startUsing our new Template Repositorycreate a new GitHub repository based on the latest code from the main branch of HTML5Boilerplate.Install with npm: npm install html5-boilerplateor yarn: yarn add html5-boilerplate. The resultingnode_modules/html5-boilerplate/dist folder represents the latest version ofthe project for end users. Depending on what you want to use and how you wantto use it, you may have to copy and paste the contents of that folder intoyour project directory.Download the latest stable release fromhere. This zip file is asnapshot of the dist folder. On Windows, Mac and from the file manager onLinux unzipping this folder will output to a folder named something likehtml5-boilerplate_v8.0.0. From the command-line, you will need to create afolder and unzip the contents into that folder.mkdir html5-boilerplateunzip html5-boilerplate*.zip -d html5-boilerplateFeaturesA finely-tuned starter template: Reap the benefits of 10 years of analysis,research and experimentation by over 200 contributors.Designed with progressive enhancement in mind.Includes:Normalize.cssfor CSS normalizations and common bug fixes.A custom build of Modernizr for featuredetection.Apache Server Configsthat improve the web site's performance and security.Placeholder Open Graph elements and attributes.An example package.json file with WebPack commandsbuilt in to jumpstart application development.Placeholder CSS Media Queries.Useful CSS helper classes.Default print styles, performance optimized.Protection against any stray console statements causing JavaScripterrors in older browsers.\""Delete-key friendly.\"" Easy to strip out parts you don't need.Extensive documentation.Browser SupportHTML5-Boilerplate supports the latest, stable releases of all major browsers.You can find our range of supported browsers in our package.json At present we alter the browserlist default by dropping IE 11.  \""browserslist\"": [    \""> 0.5%\"",    \""last 2 versions\"",    \""Firefox ESR\"",    \""not dead\"",    \""not IE 11\""  ],That configuration translates to this full list of browsers.DocumentationTake a look at the documentation table of contents. Thisdocumentation is bundled with the project which makes it available for offlinereading and provides a useful starting point for any documentation you want towrite about your project.ContributingHundreds of developers have helped to make the HTML5 Boilerplate. Anyone iswelcome to contribute. However, if you decide to getinvolved, please take a moment to review the guidelines:Bug reportsFeature requestsPull requestsLicenseThe code is available under the MIT license."
10,PanJiaChen/vue-admin-template,https://github.com/PanJiaChen/vue-admin-template/blob/master/README-zh.md,JavaScript,"vue-admin-template这是一个极简的 vue admin 管理后台。它只包含了 Element UI & axios & iconfont & permission control & lint，这些搭建后台必要的东西。线上地址国内访问目前版本为 v4.0+ 基于 vue-cli 进行构建，若你想使用旧版本，可以切换分支到tag/3.11.0，它不依赖 vue-cli。  SPONSORED BY            Extra如果你想要根据用户角色来动态生成侧边栏和 router，你可以使用该分支permission-control相关项目vue-element-adminelectron-vue-adminvue-typescript-admin-templateawesome-project写了一个系列的教程配套文章，如何从零构建后一个完整的后台项目:手摸手，带你用 vue 撸后台 系列一(基础篇)手摸手，带你用 vue 撸后台 系列二(登录权限篇)手摸手，带你用 vue 撸后台 系列三 (实战篇)手摸手，带你用 vue 撸后台 系列四(vueAdmin 一个极简的后台基础模板,专门针对本项目的文章,算作是一篇文档)手摸手，带你封装一个 vue componentBuild Setup# 克隆项目git clone https://github.com/PanJiaChen/vue-admin-template.git# 进入项目目录cd vue-admin-template# 安装依赖npm install# 建议不要直接使用 cnpm 安装以来，会有各种诡异的 bug。可以通过如下操作解决 npm 下载速度慢的问题npm install --registry=https://registry.npm.taobao.org# 启动服务npm run dev浏览器访问 http://localhost:9528发布# 构建测试环境npm run build:stage# 构建生产环境npm run build:prod其它# 预览发布环境效果npm run preview# 预览发布环境效果 + 静态资源分析npm run preview -- --report# 代码格式检查npm run lint# 代码格式检查并自动修复npm run lint -- --fix更多信息请参考 使用文档购买贴纸你也可以通过 购买官方授权的贴纸 的方式来支持 vue-element-admin - 每售出一张贴纸，我们将获得 2 元的捐赠。DemoBrowsers supportModern browsers and Internet Explorer 10+.IE / EdgeFirefoxChromeSafariIE10, IE11, Edgelast 2 versionslast 2 versionslast 2 versionsLicenseMIT license.Copyright (c) 2017-present PanJiaChen"
11,Superalgos/Superalgos,https://github.com/Superalgos/Superalgos/blob/master/README.md,JavaScript,"🔸 Superalgos 1.3.0🔸 Table of ContentsMain TopicsIntroductionBefore You BeginGetting StartedInstallation OptionsInstallation for Developers and ContributorsPre-RequisitesSuperalgos Platform Client InstallationUsageUninstallGet In TouchOther ResourcesContributingLicenseAppendixWorkspace Refactoring for Version 1Pre-Requisites NotesTroubleshooting Dependencies InstallationWSL2 VSCode IDE Environment SetupRunning Superalgos on a Headless Linux Server as a Daemon🔸 IntroductionSuperalgos is not just another open-source project. We are an open and welcoming community nurtured and incentivized with the project's native Superalgos (SA) Token, building an open trading intelligence network. You will notice the difference as soon as you join the Telegram Community Group or the new Discord Server!Superalgos is a vast project. The focus of this README file is the Superalgos Platform. Please, visit the platform's page on the website for an overview of features and functionality.🔸 Before You BeginWorth noting before you start:Online Demo | To get a feel of what Superalgos is about without installing anything, take the (limited) online demo for a spin!System requirementsFAQS:Before you beginTrust and safetyTrading with SuperalgosOpen-source strategiesDocumentation | The platform features interactive and searchable documentation counting over 1500 pages. At this point, the Docs are solely available within the app.🔸 Getting StartedSuperalgos is an ever-growing ecosystem of tools and applications. This guide will walk you through the main ways to install the Superalgos Platform — the flagship application of the ecosystem.Once you install and launch the app, a series of interactive tutorials take you by the hand and walk you all around the system while you learn the basic skills required to use the interface, mine data, backtest strategies, and even run a live trading session. It is highly recommended to do all tutorials, as they are carefully crafted to make your onboarding as easy as possible.✅ NOTE: Tutorials are the absolute best way to tackle the learning curve. You should do all tutorials before you start exploring other avenues on your own.The tutorial uses Binance or Binance US as the exchange of choice. If you don't have an account with Binance or Binance US, you will still be able to follow 100% of the tutorial. When you get to the live trading section, keep going even if you don't intend to run the session. You may learn how to work with other exchanges later on. If both Binance and Binance US are blocked in your region, you will need to set up a different exchange from the get-go.🔸 Installation OptionsThere are a variety of methods to install the Superalgos Platform ranging from docker installations and packaged application installations to fine-grained technical installations ideal for developers and contributors.We will briefly describe the options available. Click the link to go to the specific README file with further instructions for the installation method of your choice.Packaged and portable apps | This option is optimized for non-technical users and is by far the easiest way to get started with Superalgos. These are not suitable for development or for contributing.Docker deployments | Docker installations are another avenue that allows for a clean installation. While a little bit more technical than the packaged applications, Docker offers the ability to install the platform in a clean and isolated environment. The standard Docker installation is not optimized for development or contributions, but some workarounds are offered.Developers and Contributors | This is the default installation for developers that wish to dive into the codebase and contribute to making Superalgos better. It is also the recommended installation for non-developers who wish to contribute improvements to the Docs, translations, design work, and so on. Instructions are available further down this same file.Raspberry Pi | Raspberry Pi installations are a great economical option for running a trading system. You will need to be comfortable with either options 2 or 3 above to proceed here.✅ ABOUT REMOTE INSTALLATIONS AND MINIMALIST HARDWARE: Remote installations and minimalist hardware — both virtual and physical — are better suited for production deployments, where the use of the GUI is minimal. We highly recommend learning Superalgos in a local installation, on a full-size PC. Mastering the system takes time, and the use of the GUI to go through in-app tutorials is crucial during the learning process. Your experience will be orders of magnitude better if you follow this advice: leave remote installations and minimalist hardware for when you are ready to start trading live.✅ EXPERIENCING ISSUES INSTALLING SUPERALGOS? If you're having trouble installing or running the app for the first time, do not open an issue. Instead, join the Support Telegram Group and follow the instructions on the pinned message to ask for help. You may also join the new Discord Server, but bear in mind that the response time tends to be longer. Online support is provided by volunteers — please provide clear information and sufficient context about the issue you are facing, and be mindful of people's time.If you wish to try the packaged and portable apps or the docker deployments, there is nothing of critical importance left for you on this README file. That said, the Get In Touch, Other Resources, Contributing, and License sections are certainly of interest.If you opt for the installation for developers and contributors, please keep on reading. Otherwise, click one of the other options above.🔸 Installation for Developers and ContributorsThis is the purest, albeit more technical, way of installing Superalgos. It has no limitations to contributing, which is highly appreciated and rewarded with SA tokens, and gives you the most freedom for custom configurations.All procedures (other than pre-requisites) are the same for Windows, Linux, or Mac OS. Raspberry Pi terminal commands have been included for ease of use. Some edge cases are covered separately, further down this README.Pre-Requisites1️⃣ Install Node.JS, Git, and ChromeYou will need the latest versions of Node JS and Git installed. You will also need a web browser to access the interface. Google Chrome is recommended because it is the most tested browser being used by the development team and power users.Follow the installation wizards to install the latest NodeJS and Git. Make sure to follow all the default and recommended settings while installing Git. If desired also install Chrome.Node.js download pageGit download pageGoogle Chrome download page✅ NOTE: If you wish to test the (partial and incomplete) TensorFlow integration, you will also need Python 3.Additional notes about installing pre-requisites on specific environments and edge cases can be found in the Pre-Requisites Notes section in the Appendix.2️⃣ Get Your Github.com Personal Access TokenYou will need to get an access token from Github.com so that you may authenticate with the service from within the app and the terminal/command line.If you don't have a Github.com account, please open one! Once you are logged in, go to the New Github Personal Access Token Page and create a new token.Make sure you give it the repo and workflow scopes. Check the clip below for clarity:Once you get the token, copy it and save it somewhere in your local machine. You will need to retrieve it later on.Superalgos Platform Client InstallationNow that you have all the pre-requisites and optional environment configurations set up, we can get to the core installation of Superalgos!There are four steps required to install Superalgos:Fork the Superalgos RepositoryClone Your ForkInstall Node DependenciesInstall Community PluginsUpdate Forked Repositories from The Superalgos Upstream RepositoriesLet's get on with it!1️⃣ Fork the Superalgos RepositoryScroll the page to the top. Find and click the Fork button to create your fork/copy of this repository.✅ NOTE: On the page that opens when you click the fork button, Github gives you the option to fork only the master branch by default. You must remove the selection so that you fork all branches instead. Play the following video for clarity.To fork Superalgos you need a Github account. If you don't have one, go ahead and create it.✅ NOTE: A Fork is required so that the setup scripts may build the app from multiple repositories, and also for your contributions to the project. The reason why Superalgos is free and open-source is that the project has set up a collective business in which all users may participate. The way to participate is to contribute to make Superalgos better. The project's native SA token is distributed among contributors.2️⃣ Clone Your ForkOnce the fork is created, you will land on the page of your fork. Copy the complete URL from your browser's address bar.✅ NOTE: Notice it is your fork you will be cloning, not the upstream repository.In your computer/laptop/server, open a command prompt or terminal. Make sure you are in a directory where you have write permissions.✅ NOTE: On most systems, the terminal will open in your user's home directory. It's better to install Superalgos at the root folder of any of your drives, or at least in a path that is not too long. Some systems may experience issues with long paths.Clone the git repository using the command:git clone <URL of your Superalgos fork>For example, if your Github username is John, the command will look like this:git clone https://github.com/John/SuperalgosThis creates the Superalgos folder in the current directory, which contains the whole installation.3️⃣ Install Node DependenciesAfter the Superalgos directory has been installed, you need to set up the necessary node dependencies. In the same command prompt or terminal you just used, type the following:cd SuperalgosThat should take you inside the Superalgos folder created by the git clone command earlier. The node setup command installs the dependencies (notice there are a few options you may use).node setupAvailable Options:node setup <options>OptionDescriptionshortcutsUse this option to create desktop shortcuts. Otherwise, you will launch the app from the command line/terminal.tensorflowUse this option to include the TensorFlow dependencies, only if you intend to test the (partial and incomplete) TensorFlow integration.If you experience any issues installing dependencies, check the Troubleshooting Dependencies Installation section in the Appendix below.4️⃣ Install Community PluginsBefore using the software, you will need to install the plugins built by the community. To do so, just run this command from the Superalgos main folder:node setupPlugins <Your-Github-Username> <Your-Github-Personal-Access-Token>For example:node setupPlugins John ghz_2pBD4Sas0iYtwQGPjTq1Xlm3Ot4KpH3RLcr5✅ NOTE: This is the token you created on earlier steps!`This script is going to fork all Community Plugins repositories into your own Github account, and then it will clone each of these repositories into your local Superalgos/Plugins folder. The process is designed in a way that if someday a new type of plugin is added, you just need to run this command again and it will fork the new repo and clone it. This script will also find any missing forks needed and clone them too. You are safe running this script whenever you think is good.✅ NOTE: If you ever have issues with your Plugins repos, you can delete individual folders inside Superalgos/Plugins and run this script to fix the problems for you. Also, if you have any issues with any of your plugin forks at your Github account, you can delete the offending fork and run this script again to fix the problem.Congratulations! Your setup is complete. Now you may finally run the app for the first time. Please, follow the usage instructions below!5️⃣ Update Forked Repositories from The Superalgos Upstream RepositoriesPrerequisites:\""node setup\"" and \""node setupPlugins\"" commands must be executed beforehand.node updateGithubRepos🔸 UsagePartner ExchangesThe Superalgos Platform is exchange-agnostic, but the project offers partner exchanges custom support and a curated onboarding experience for their customers. In turn, partner exchanges offer preferential trading fees and, in some cases, other benefits to Superalgos users.Find more information on how to get the benefits, join the corresponding Telegram group.Partner ExchangeBenefitsTelegram GroupAscendEXVIP 2 (7.5 bip Maker, 8.5 bip Taker)https://t.me/superalgosascendexPartner exchanges have custom workspaces for the onboarding of their users.Run the Client and GUIUsing the shortcuts✅ NOTE: This method launches the platform with the fallback workspace only. If you wish to launch with a partner exchange workspace, use the Command Line method instead.If you ran node setup shortcuts while installing dependencies, then you should have a desktop icon that you can double click to launch the Superalgos application. A terminal window will show the server is running, and a browser window will open with the GUI.Using the Command LineTo launch the platform with one of the Partner Exchanges custom workspaces, go to the Superalgos directory and run the command as per the following table. You will learn about other options further down this page.Partner ExchangeLaunch CommandAscendEXnode platform Foundations 01-Onboarding-AscendEX✅ NOTE ABOUT ASCENDEX: An issue with AscendEX API may prevent the Welcome to Superalgos tutorial to run as expected. We suggest you use the fallback/default workspace in the meantime. The issue was reported to the exchange and is currently being investigated.To run Superalgos with the default/fallback workspace, go to the Superalgos directory/folder and run this command:node platformOptions usage:node platform <options> <project> <workspace>OptionDescriptionminMemoRun with minimal memory footprint. This is critical for running on platforms with 8GB of RAM or less, like a Raspberry Pi.noBrowserDo not open the GUI in a browser. This is useful on headless servers where a UI is not available.To load a specific workspace on launch, add any option you may require, then the project, then the workspace. For example, to load the Blank-Template workspace of the Foundations project with no options:node platform Foundations Blank-TemplateThe Client will run on your terminal and the GUI will launch on your default browser. If Chrome/Safari is not your default browser, copy the URL, close the browser, open Chrome/Safari, and paste the URL. Be patient... it takes a few seconds to fully load the GUI.Usage NotesWe are testing the UI on Google Chrome and Safari on macOS only. It may work on other browsers as well — or not. If you are running on a different browser and ever need support, make sure you mention that fact upfront, or even better, try on Chrome/Safari first.✅ TIP: If your computer has 8 GB of RAM or less, use node platform minMemo to run the system with minimal RAM requirements.🔸 UninstallSuperalgos writes nothing outside of the Superalgos folder other than shortcut files. To quickly remove the shortcut files, open a terminal or command prompt, navigate to your main Superalgos directory, and type the following command:node uninstallThen simply delete the Superalgos folder to completely remove the application.🔸 Get In TouchWe just opened a brand new Discord server for Support and the Community.We also meet on several Telegram groups, where it all started!⚠️ BEWARE OF IMPERSONATORS — SCAMMERS ARE LURKING! Superalgos Admins, the Founding Team, and Community Mods will never contact you directly unless you contact them first. We will never ask you for API keys, coins, or cash. We will never ask you to trust us in any way. Our Community Safety Policy explains why. In short, we want to make it clear that if someone contacts you directly claiming to work with or for the project, it is a scam. Please report scammers in the Community group so that they may be banned and to increase awareness of the problem, but also block them and report them to Telegram if the option is available.Via Telegram: online support through our Superalgos Support Group.In-App Integrated Documentation: Superalgos features interactive documentation built into the system.Video Tutorials: subscribe to the Superalgos YouTube Channel.In-App Tutorials: there are many interactive tutorials you may do and learn from.🔸 Other ResourcesWeb SiteFor an overview of what Superalgos can do for you, check the Superalgos Website.List of community resources featuring written, audiovisual, and interactive content.TelegramFor official news, join the Superalgos Announcements Channel.Meet other users in the Superalgos Telegram Community Group.Meet developers in the Superalgos Telegram Developer's Group.Users meet in other topic-specific Telegram Groups. There's a complete list of groups on the website.Blog: find official announcements and various articles on the Superalgos Blog.Twitter: to stay in the loop, follow Superalgos on Twitter. Help us spread the word!Facebook: follow Superalgos on Facebook.🔸 ContributingSuperalgos is a Community Project built by users for users. Learn how you may contribute.🔸 LicenseSuperalgos is open-source software released under Apache License 2.0.APPENDIX🔸 Workspace Refactoring for Version 1Version 1.2.0 carries with it a reorganization of the codebase where several projects were extracted from Foundations: Data-Mining, Algorithmic Trading, Machine Learning, and Community Plugins.This means that these projects can now have a project leader and a team working on them.To get your custom workspace upgraded to be compatible with beta 13 you will need to make a few changes:Project nodes need to be present in the workspace for things to work. The presence of the node of a project, somehow, enables that project features at a workspace. Go to the workspace node and click add missing projects.At the Plugins hierarchy, new guys appear, each one with their own type of plugin. Meaning that every workspace needs to be manually fixed because, currently, all plugins are loaded from the Foundations node there. The fix is easy though, it takes 2 - 3 min to delete the child nodes from the Foundation node, and add the same plugins from the project they belong to now.🔸 Pre-Requisites NotesWindows Pre-RequisitesWhen following the windows installer for Git, it is very important to make sure that you follow all the recommended and default settings. One of the most important one of these can be found in the screenshot below:Optional Windows Pre-RequisitesFor windows users interested in testing the (partial and incomplete) TensorFlow integration, you need to install Python.install Python 3.9.Github Desktop is a helpful tool to manage Git conflicts and issues. You can install it using the following link.GitHub Desktop download page. Click the \""Download for Windows\"" button and follow the wizard to install after the download completes.Mac OS Pre-Requisites Homebrew InstallationRather than manually installing NodeJS, Git, and Python, Homebrew can be used to install the pre-requisites with minimal effort on Mac OS.  After you clone the repository, change the directory to the Superalgos base and install the requirements using Homebrew.There are two ways to use Homebrew.  The first is to type:brew install git node npm python@3.9The second is to use the Brewfile included in the code repository. After downloading, run this command in the same directory where the Brewfile resides:brew bundle✅ NOTE: You can use Safari or Google Chrome as your default browser. If you run into a bug in Safari, you will be asked to reproduce it in Chrome as the development team uses Chrome.Linux (e.g. Ubuntu, or Raspberry Pi running Raspberry Pi OS/Raspbian) Pre-RequisitesFollow the Node.js package manager install instructions for your distribution to ensure you are getting the latest version of Node.js. Many distributions only maintain an older version in their default repositories.✅ NOTE: Python 3 is only required for testing the (partial and incomplete) TensorFlow integration.curl -sL https://deb.nodesource.com/setup_17.x | sudo -E bash - && sudo apt-get \\install -y \\nodejs npm git python3You may verify the installed versions with this command string:node \\-v && npm \\-v && git --versionIf you are running headless (i.e. as a server without a monitor attached) then you do not need to install a web browser and you can follow the tutorial for information on connecting remotely to the server.Alternatively, you can use https://github.com/nymea/berrylan to set up a tool for using Bluetooth to quickly assign WPA2 access on a WLAN on a Raspbian based Distro. Nymea also has tools for automation of IoT products to allow setting up SuperAlgos as a timed function without needing to learn how to code.✅ IMPORTANT:If you are having node version errors there is a chance you may need to read the information in the Debian Pre-Requisites section and use NVM to handle node versions. This is due to some distributions having out-of-date repositories in the package manager lists.Debian or Debian WSL/WSL2 Pre-Requisites(NVM & NPM Fix)Debian distributions have been found to have some additional issues with installing the right version of NodeJS needed to run Superalgos. What follows are the steps to fix this issue.For this to work you will need to [use NVM to install and control node] (https://github.com/nvm-sh/nvm)You will need to remove any versions of Node already installed on Debian due to the repositories currently being out of date.This is necessary before proceeding.sudo apt remove nodejs -ysudo apt \\update && apt upgrade \\-y sudo apt \\install npm -ysudo apt \\autoremove -y && \\sudo apt autoclean -ysudo curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh | bashWithout running the next 3 commands, you will need to logout off your shell/WSL2 user account before you are to use NVMexport NVM_DIR=\""$HOME/.nvm\""[ -s \""$NVM_DIR/nvm.sh\"" ] && \\. \""$NVM_DIR/nvm.sh\""[ -s \""$NVM_DIR/bash_completion\"" ] && \\. \""$NVM_DIR/bash_completion\""Make sure things are up to date and packages not needed are removedsudo apt update &&\\sudo apt upgrade && \\apt autoremove -ycd Superalgosinto the directory of SuperAlgosand run the install commands as follows:nvm run node <command string/var>✅ NOTE: This is for node.js/node only, npm should work fine with Debian.🔸 Troubleshooting Dependencies InstallationEdge Cases✅ NOTE FOR WINDOWS USERS INSTALLING TENSORFLOW DEPENDENCIES: You may get an error at the end of the setup process. If you do, please follow the instructions following the error message.✅ NOTE FOR USERS INSTALLING MULTIPLE INSTANCES OF SUPERALGOS ON THE SAME MACHINE: To avoid name conflicts between shortcuts, make sure to rename each Superalgos directory before running node setup shortcuts.✅ NOTE FOR USERS INSTALLING ON LINUX: If after running node setup you are prompted to address issues by running 'npm audit fix' ignore this step.✅ NOTE FOR USERS INSTALLING ON COMPUTERS WITH 1GB OF RAM Superalgos has just about outgrown computers with only 1GB of RAM. For Instance a Raspberry Pi 3 does run the Getting Started Tutorials, but over time (Into 2023) this may significantly slow and could even stop. If still wish to use a computer with only 1GB of RAM (you have been warned), you will need to use version 16.x of Node.js as version 18.x needs well over 1 GB of RAM during setup.General TroubleshootingIf you are having difficulty running the node setup command here are a few common issues that may be getting in the way.Check the version of node and npm you have installed. Make sure that you are running an updated version of node greater than version 16.6 and npm greater than version 5. You can check which version you have by typing node -v and npm -v into a command prompt or terminal. If your version numbers are below these, you can update your installation by following the instructions outlined in the \""Node JS Installation\"" step above.If you are installing Superalgos in an administratively protected directory you will need to do one of the following:For Windows start your command prompt as an administrator.For Linux and Mac Systems make sure to add the sudo command to node setup.  This will look like sudo node setup.For Windows it is important that you have C:\\Windows\\System32 added to your global PATH.  For instructions on how to do this google \""add to the path on Windows 10.\""If you are getting a lot of 'unexpected' errors during node setup, try resetting npm using the command npm ci before running node setup again.Enabling Desktop Shortcut in UbuntuThe majority of shortcuts that are installed will work out of the box. Desktop shortcuts on Ubuntu, however, require a few additional steps to set up. First, desktop icons need to be enabled within the Tweaks app.Check if Tweaks is installed.If not go to Ubuntu Software.Install Tweaks.Open Tweaks.Under extensions turn on Desktop Icons✅ TIP: If you do not see the desktop shortcut appear right away you may need to restart your computer.Finally, you will need to enable the desktop shortcut. Right-click Superalgos.desktop and select Allow Launching.Now both launcher and desktop shortcuts will launch Superalgos like any other program on your computer.🔸 WSL2 VSCode IDE Environment SetupVSCode is a popular IDE. This short section covers some helpful tips for setting up the IDE's development environment.There are a few things that need to be configured to obtain full functionality from VSCode. These configurations will make it possible to run notebooks for ML/AI algos and turn VSCode and Windows into a development bench for working with Superalgos.On windows:First, you need to install WSL and WSL2 https://docs.microsoft.com/en-us/windows/wsl/install then reboot if prompted.You may want to review the Docker WSL2 Backend information for VSCode as well before proceeding. https://aka.ms/vscode-remote/containers/docker-wsl2Install Debian or Ubuntu from the Windows Store, Setup the VM as instructed.On windows and Debian:To make managing these WSL instances a lot easier, we will now move to installing VSCode + Tools to allow for Dockerizing and rapidly deploying as well as editing and managing test/usage cases of Superalgos edit and forks you create and contribute.Install VSCode https://code.visualstudio.com/docs/?dv=win64userInstall the remote container and remote docker plugins/extensions for Visual Studio Code https://code.visualstudio.com/docs/remote/containers#_installationYou may want to spend time reading the specifics of this documentation on their website.When prompted install shell shortcuts for right-click options, this way you can open Superalgos easy inside of VSCode.✅ IMPORTANT:As mentioned above, you need to remove node.js/node from your system and install NVM if you are using Debian.Please refer to the information above for properly setting up node.js and npm on Debian systems with complications regarding versions of node.Once the install finishes you can now use VSCode as an interactive IDE/Shell to access SuperAlgos, run Dockers for working with Superalgos, and more.🔸 Running Superalgos on a Headless Linux Server as a DaemonIf you're running Superalgos on a headless Linux server like a Raspberry Pi, you might want to run it as a daemon so it isn't attached to your current login session. The easiest, most standard way to go about this is probably using systemd. Most Linux distributions use it as the default init system/service manager.Create a superalgos.service file looking like this (change <user> to your user name and /path/to/Superalgos to your Superalgos folder, for instance /home/John/Superalgos):[Unit]Description=Superalgos Platform Client[Service]Type=simpleUser=<user>WorkingDirectory=/path/to/SuperalgosExecStart=/usr/bin/node platform minMemo noBrowser[Install]WantedBy=multi-user.targetThere is no need to run Superalgos as root so we're running it as a user. The minMemo option assumes you're running on a small machine like a Raspberry Pi, while noBrowser makes sense for running daemonized. Now, you'll need to move the file to /etc/systemd/system/ for it to be recognized. You'll need then to enable and start the service.sudo mv superalgos.service /etc/systemd/systemsudo systemctl daemon-reloadsudo systemctl enable superalgossudo systemctl start superalgosTo check the service statussudo systemctl status superalgosTo stop the service:sudo systemctl stop superalgossudo systemctl disable superalgosTo see the output of Superalgos, use:journalctl -u superalgosor to follow the output with -f:journalctl -u superalgos -f"
12,learn-co-curriculum/phase-0-intro-to-js-2-array-lab,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-array-lab/blob/master/README.md,JavaScript,"Arrays LabLearning GoalsPractice writing arraysPractice using destructive methods to manipulate arraysPractice using nondestructive methods to manipulate arraysIntroductionWe've learned about how arrays work and about the array methods built in toJavaScript that we can use to manipulate them. Now it's time to practice whatwe've learned.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.InstructionsOpen up the test folder and take a look at indexTest.js. Note that some ofthe names of the functions you will be writing begin with destructively andsome don't. This is a clue as to which Array method you will need to use foreach function.Note also that the first test asks for an array called cats, set to aninitial value of [\""Milo\"", \""Otis\"", \""Garfield\""]. In your functions, you will beaccessing and manipulating this array.Near the top of indexTest.js you will see the following:beforeEach(function () {  cats.length = 0;  cats.push(\""Milo\"", \""Otis\"", \""Garfield\"");});What this code does is reset the array to its original contents before eachtest is run. The reason we need to do this is because some of your functionswill be destructive — they will change the original cats array. Thisis a problem because it means the input to the remaining functions will bedependent on the outcome of other functions. It also means that the expectedreturn value of a function might change if the tests are run in a differentorder. This makes it more difficult both to write tests in the first place andto figure out how to get the tests to pass. Resetting the array returns us to ablank slate between tests.This is also a good illustration of why it's generally good practice to avoidmutating a program's state whenever possible. If we use only nondestructivemethods, we have complete control over what's going into and coming out of thefunction. This makes our programs more robust, easier to maintain, and lessprone to bugs.Remember the workflow:Install the dependencies using npm install.Run the tests using npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 2 and 3 often until a test passes.Repeat as needed for the remaining tests.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade."
13,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
14,impress/impress.js,https://github.com/impress/impress.js/blob/master/README.md,JavaScript,"impress.jsIt's a presentation framework based on the power of CSS3 transforms andtransitions in modern browsers and inspired by the idea behind prezi.com.WARNINGimpress.js may not help you if you have nothing interesting to say ;)HOW TO USE ITGetting Started GuideCheck out our new Getting Started guide if you want a quick introduction to the project!Direct download link to only impress.jsYou can include this link directly inside of your HTML file in its header. If you want to learn how to do this, you can find a how-to in the Getting Started guide.V2.0.0: https://cdn.jsdelivr.net/gh/impress/impress.js@2.0.0/js/impress.jsV1.1.0: https://cdn.jsdelivr.net/gh/impress/impress.js@1.1.0/js/impress.jsSource: https://cdn.jsdelivr.net/gh/impress/impress.js/js/impress.jsGetting Started GuideCheck out our new Getting Started guide if you want a quick introduction to the project!Checking out and initializing the git repositorygit clone --recursive https://github.com/impress/impress.js.gitcd impress.jsNote: For a minimal checkout, omit the --recursive option. This will leave out extra plugins.Stable releasesNew features and fixes are continuously merged into the master branch, which is what the above command will check out. For the latest stable release, see the Github Releases page.DocumentationReference documentation of core impress.js features and API you can find it in DOCUMENTATION.md.The HTML source code of the official impress.js demo serves as a good example usage and contains comments explaining various features of impress.js. For more information about styling you can look into CSS code which shows how classes provided by impress.js can be used. Last but not least JavaScript code of impress.js has some useful comments if you are interested in how everything works. Feel free to explore!Official demoimpress.js demo by @bartazExamples and demosThe Classic Slides demo is targeted towards beginners, or can be used as a template for presentations that look like the traditional PowerPoint slide deck. Over time, it also grew into the example presentation that uses most of the features and addons available.More examples and demos can be found on Examples and demos wiki page.Feel free to add your own example presentations (or websites) there.Other tutorials and learning resourcesIf you want to learn even more there is a list of tutorials and other learning resourceson the wiki, too.There is also a book available about Building impressive presentations with impress.js by Rakhitha Nimesh Ratnayake.You may want to check out the sibling project Impressionist: a 3D GUI editor that can help you in creating impress.js presentations.Mailing listYou're welcome to ask impress.js related questions on the impressionist-presentations mailing list.REPOSITORY STRUCTUREindex.html: This is the official impress.js demo, showcasing all of the features of the original impress.js, as well as some new plugins as we add them.As already mentioned, this file is well commented and acts as the official tutorial.examples/: Contains several demos showcasing additional features available.Classic Slides is a simple demo that you can use as template if you want to create very simple, rectangular, PowerPoint-like presentations.src/: The main file is src/impress.js. Additional functionality is implemented as plugins in src/plugins/.See src/plugins/README.md for information about the plugin API and how to write plugins.test/: Contains QUnit and Syn libraries that we use for writing tests, as well as some test coverage for core functionality. (Yes, more tests are much welcome.) Tests for plugins are in the directory of each plugin.js/: Contains js/impress.js, which contains a concatenation of the core src/impress.js and all the plugins. Traditionally this is the file that you'll link to in a browser. In fact both the demo and test files do exactly that.css/: Contains a CSS file used by the demo. This file is not required for using impress.js in your own presentations. Impress.js creates the CSS it needs dynamically.extras/ contains plugins that for various reasons aren't enabled by default. You have to explicitly add them with their own script element to use them.build.js: Simple build file that creates js/impress.js. It also creates a minified version impress.min.js, but that one is not included in the github repository.package.json: An NPM package specification. This was mainly added so you can easily install buildify and run node build.js. Other than the build process, which is really just doing roughly cat src/impress.js src/plugins/*/*.js > js/impress.js, and testing, impress.js itself doesn't depend on Node or any NPM modules.WANT TO CONTRIBUTE?For developers, once you've made changes to the code, you should run these commands for testing:npm installnpm run allNote that running firefox qunit_test_runner.html is usually more informative than running karma with npm run test. They both run the same tests.More info about the src/ directory can be found in src/plugins/README.md.Requirements>= node 7.6npmABOUT THE NAMEimpress.js name is courtesy of @skuzniak.It's an (un)fortunate coincidence that a Open/LibreOffice presentation tool is called Impress ;)Reference APISee the Reference APIBROWSER SUPPORTThe design goal for impress.js has been to showcase awesome CSS3 features as found in modern browser versions. We also use some new DOM functionality, and specifically do not use jQuery or any other JavaScript libraries, nor our own functions, to support older browsers. In general, recent versions of Firefox and Chrome are known to work well. Reportedly IE now works too.The typical use case for impress.js is to create presentations that you present from your own laptop, with a browser version you know works well. Some people also use impress.js successfully to embed animations or presentations in a web page, however, be aware that in this some of your visitors may not see the presentation correctly, or at all.In particular, impress.js makes use of the following JS and CSS features:DataSet APIClassList APICSS 3D TransformsCSS TransitionsCOPYRIGHT AND LICENSECopyright 2011-2012 Bartek Szopka (@bartaz), 2016-2023 Henrik Ingo (@henrikingo) and 70+ other contributorsReleased under the MIT License"
15,RedHatTraining/DO101-apps,https://github.com/RedHatTraining/DO101-apps/blob/main/README.md,JavaScript,DO101-appsApps for the DO101 course.
16,vuejs/vue-cli,https://github.com/vuejs/vue-cli/blob/dev/README.md,JavaScript,"Vue CLI   ⚠️ StatusVue CLI is now in maintenance mode. For new projects, please use create-vue to scaffold Vite-based projects. create-vue supports both Vue 2 and Vue 3.Also refer to the Vue 3 Tooling Guide for the latest recommendations.For information on migrating from Vue CLI to Vite:Vue CLI -> Vite Migration Guide from VueSchool.ioTools / Plugins that help with auto migrationDocumentationDocs are available at https://cli.vuejs.org/ - we are still working on refining it and contributions are welcome!ContributingPlease see contributing guide.LicenseMIT"
17,learn-co-curriculum/phase-0-pac-3-function-parameters-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-function-parameters-lab/blob/master/README.md,JavaScript,"JavaScript Function Parameters LabLearning GoalsDefine a function that uses a parameterDefine a function that uses two parametersDefine a function with a parameter that has a default valueIntroductionIn this lab, we'll practice using parameters in our functions. We'll also learnhow to create a default value for a parameter.If you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone from thatcopy. Once you've cloned it down, navigate into its directory in the terminal,then run code . to open the files in Visual Studio Code. (If you are using adifferent text editor, the command will be different.)You will be writing your code in the index.js file and running the tests byrunning npm test in the terminal. Remember to run npm install first toinstall the lab's dependencies.Define a Function That Uses a ParameterInstructions: Define a function called introduction that defines aparameter, name, and returns the phrase: \""Hi, my name is ${name}.\""Define a Function That Uses Two ParametersSetting up your function to use two parameters is straightforward: simplyinclude both parameters in the parentheses in the function declaration line,separated by a comma:function logTwoValues(value1, value2) {  console.log(`The two values are ${value1} and ${value2}.`);}As you might expect, if we instead wanted to log three values — or tenvalues — we can just continue listing the parameters in the parentheses,with commas between each.Instructions: To pass the second test, you'll need to define a functioncalled introductionWithLanguage that defines two parameters, name andlanguage, and returns the phrase: \""Hi, my name is [name] and I am learning toprogram in [language].\""Define a Function That Uses an Optional ParameterIn a previous lesson, we created a function that logs a personalized greeting:function sayHelloTo(firstName) {  console.log(`Hello, ${firstName}!`);}What if we wanted to make this function work whether or not a first name ispassed in as an argument? We can do this by setting a default value for thefirstName parameter:function sayHelloTo(firstName = \""User\"") {  console.log(`Hello, ${firstName}!`);}Note that we have used the assignment operator (=) here to assign a defaultvalue. The way this works is, if the function is called with an argument, theargument's value will supersede the default value. If it's called without anargument, the function will use the default value, logging \""Hello, User!\""Instructions: Copy the function you created for the second test and name itintroductionWithLanguageOptional. It should have two parameters, name andlanguage, and the second parameter should have a default value of\""JavaScript\"".After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Complete Your First Software EngineeringAssignment lesson to review the process."
18,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
19,learn-co-students/js-if-else-files-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
20,GoogleChrome/lighthouse,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
21,azl397985856/leetcode,https://github.com/azl397985856/leetcode/blob/master/README.en.md,JavaScript,"LeetCode     since 2019-09-03 19:40简体中文 | EnglishThis essay records the course of and my emotion to this project from initialization to 10,000 stars. Milestone for 10,000+ starsIf you are interested in this project, do not mean your star. This project will be supported for a long enough time by the community. Thanks for every audience and contributor.IntroductionLeetCode Solutions: A Journey of Problem Solving.This repository is divided into five parts for now:The first part is the solutions to some classic problems on LeetCode, including the idea thinkings, key points and code implementations.The second part is a summary of data structures and algorithms.The third part is Anki flashcards that organizes the LeetCode problems in a certain way to make it easier to remember.The fourth part is daily challenges which were held at group chat. We usually solve one problem altogether to get more feedback. Moreover, the problems can be drafted to add to the problem solving module.The fifth part is a future planning on content that will be introduced into the above parts.Only when having mastered the basic data structures and algorithms can you solve complex problems easily.About meI, a programmer, am all passionate about technology.Used to write .net and Java, I am a frontend engineer and focused on the engineering, optimization and standardization for frontend.If you want to do some contributions or collaborations, just feel free to contact me via [azl397985856@gmail.com].Usage InstructionsFor the parts that were added recently, there will be a behind.For the parts that were updated recently, there will be a 🖊 behind.Here will be the place to update Anki Flashcards in the future as well.Here is a mind mapping graph showing the summary of categorizations of problems that are questioned frequently in interviews. We could analyze according to the information in the graph.(Picture credited by LeetCode-cn.)The algorithms mainly include:Basic skills: Divide-and-Conquer; Binary; GreedySorting algorithms: Quicksort; Merge Sort; Counting SortSearching algorithms: Backtracking; Recursion; Depth-First-Search (DFS); Breath-First-Search (BFS); Binary Search Tree; etc.Graph theory: Shortest Path Problem; Minimal Spanning TreeDynamic Programming: Knapsack Problem; Longest Common Subsequence (LCS) ProblemThe data structures mainly include:Array and linked list: Singly/Doubly-Linked ListStack and queueHash tableHeap: Min-Max HeapTree and Graph: Lowest Common Ancestor (LCA); Disjoint-SetString: Prefix Tree (Trie); Suffix TreePreviews (Translation in Progress)0547.friend-circles :backtrack problems:0454.4-sum-ii :PortalsSolutions to LeetCode Classic ProblemsHere only lists some representative problems but not all.EasyEasy CollectionMedium (Translation in Progress)0002. Add Two Numbers0078.subsets0079.word-search0086.partition-list0090.subsets-ii0474.ones-and-zeros0547.friend-circles0560.subarray-sum-equals-k1011.capacity-to-ship-packages-within-d-days1371.find-the-longest-substring-containing-vowels-in-even-countsHard (Translation in Progress)0025.reverse-nodes-in-k-group0042.trapping-rain-water🆕1168.optimize-water-distribution-in-a-villageSummary of Data Structures and AlgorithmBasic data structure (overview)I have almost finished brushing all the linked topics of Lixu, and I found these things. 。 。I have almost finished brushing all the tree questions of Lixu, and I found these things. 。 。堆专题（上） (WIP)I have almost finished brushing all the piles of questions, and I found these things. 。 。 (Second bullet)I have almost finished brushing all the two-point questions of Lixiu, and I found these things. 。 。 (Part 1)I have almost finished brushing all the two-point questions of Lixiu, and I found these things. 。 。 (Part 2)Dynamic ProgrammingSearch ProblemsBinary Tree TraversalBacktrackingRun code and Huffman codeBloom filter🖊Trie🖊滑动窗口（思路 + 模板） (WIP)Bit OperationKojima Question🖊GCD ProblemsUnion Find (Disjoint Set) ProblemBalanced Binary TreeReservoir SamplingMonotonic stackAnki FlashcardsAnki falshcards would be mainly two parts: the mappings from key points to problems; the mappings from problems to idea thinks, key points and code implementations.All flashcards are put in anki-card.Please check here for more about the usage of Anki.Latest updated flashcards (only lists the front page):What is the key point of the binary search algorithm? Related problems?How to simplify the operations using the features of stacks? Related problems?The thinkings and related problems of double-pointers problems?The thinkings and related problems of sliding window problems?The thinkings and related problems of backtracking?The thinkings and related problems of number theory?The thinkings and related problems of bit operations?WIP: the translation of the flashcards are on the way.problems added：#2 #3 #11Community Chat GroupsWe're still on the early stage, so feedback from community is very welcome. For sake of reducing the costs of communication, I created some chat groups.Telegramhttp://t.me/leetcode_intlQQ (For China Region)WeChat (For China Region)(Add this bot and reply \""leetcode\"" to join the group.)ContributionIf you have any ideas, Issues or chat in groups.If you want to commit to the repository, Pull Request is welcome. Here is the CONTRIBUTION GUIDEIf you want to edit images resources in this project, here lists the files that can be edited on draw.io.Thank youA big Thank you to every contributor of this project.LicenseApache-2.0"
22,Asabeneh/30-Days-Of-JavaScript,https://github.com/azl397985856/leetcode/blob/master/README.en.md,JavaScript,"LeetCode     since 2019-09-03 19:40简体中文 | EnglishThis essay records the course of and my emotion to this project from initialization to 10,000 stars. Milestone for 10,000+ starsIf you are interested in this project, do not mean your star. This project will be supported for a long enough time by the community. Thanks for every audience and contributor.IntroductionLeetCode Solutions: A Journey of Problem Solving.This repository is divided into five parts for now:The first part is the solutions to some classic problems on LeetCode, including the idea thinkings, key points and code implementations.The second part is a summary of data structures and algorithms.The third part is Anki flashcards that organizes the LeetCode problems in a certain way to make it easier to remember.The fourth part is daily challenges which were held at group chat. We usually solve one problem altogether to get more feedback. Moreover, the problems can be drafted to add to the problem solving module.The fifth part is a future planning on content that will be introduced into the above parts.Only when having mastered the basic data structures and algorithms can you solve complex problems easily.About meI, a programmer, am all passionate about technology.Used to write .net and Java, I am a frontend engineer and focused on the engineering, optimization and standardization for frontend.If you want to do some contributions or collaborations, just feel free to contact me via [azl397985856@gmail.com].Usage InstructionsFor the parts that were added recently, there will be a behind.For the parts that were updated recently, there will be a 🖊 behind.Here will be the place to update Anki Flashcards in the future as well.Here is a mind mapping graph showing the summary of categorizations of problems that are questioned frequently in interviews. We could analyze according to the information in the graph.(Picture credited by LeetCode-cn.)The algorithms mainly include:Basic skills: Divide-and-Conquer; Binary; GreedySorting algorithms: Quicksort; Merge Sort; Counting SortSearching algorithms: Backtracking; Recursion; Depth-First-Search (DFS); Breath-First-Search (BFS); Binary Search Tree; etc.Graph theory: Shortest Path Problem; Minimal Spanning TreeDynamic Programming: Knapsack Problem; Longest Common Subsequence (LCS) ProblemThe data structures mainly include:Array and linked list: Singly/Doubly-Linked ListStack and queueHash tableHeap: Min-Max HeapTree and Graph: Lowest Common Ancestor (LCA); Disjoint-SetString: Prefix Tree (Trie); Suffix TreePreviews (Translation in Progress)0547.friend-circles :backtrack problems:0454.4-sum-ii :PortalsSolutions to LeetCode Classic ProblemsHere only lists some representative problems but not all.EasyEasy CollectionMedium (Translation in Progress)0002. Add Two Numbers0078.subsets0079.word-search0086.partition-list0090.subsets-ii0474.ones-and-zeros0547.friend-circles0560.subarray-sum-equals-k1011.capacity-to-ship-packages-within-d-days1371.find-the-longest-substring-containing-vowels-in-even-countsHard (Translation in Progress)0025.reverse-nodes-in-k-group0042.trapping-rain-water🆕1168.optimize-water-distribution-in-a-villageSummary of Data Structures and AlgorithmBasic data structure (overview)I have almost finished brushing all the linked topics of Lixu, and I found these things. 。 。I have almost finished brushing all the tree questions of Lixu, and I found these things. 。 。堆专题（上） (WIP)I have almost finished brushing all the piles of questions, and I found these things. 。 。 (Second bullet)I have almost finished brushing all the two-point questions of Lixiu, and I found these things. 。 。 (Part 1)I have almost finished brushing all the two-point questions of Lixiu, and I found these things. 。 。 (Part 2)Dynamic ProgrammingSearch ProblemsBinary Tree TraversalBacktrackingRun code and Huffman codeBloom filter🖊Trie🖊滑动窗口（思路 + 模板） (WIP)Bit OperationKojima Question🖊GCD ProblemsUnion Find (Disjoint Set) ProblemBalanced Binary TreeReservoir SamplingMonotonic stackAnki FlashcardsAnki falshcards would be mainly two parts: the mappings from key points to problems; the mappings from problems to idea thinks, key points and code implementations.All flashcards are put in anki-card.Please check here for more about the usage of Anki.Latest updated flashcards (only lists the front page):What is the key point of the binary search algorithm? Related problems?How to simplify the operations using the features of stacks? Related problems?The thinkings and related problems of double-pointers problems?The thinkings and related problems of sliding window problems?The thinkings and related problems of backtracking?The thinkings and related problems of number theory?The thinkings and related problems of bit operations?WIP: the translation of the flashcards are on the way.problems added：#2 #3 #11Community Chat GroupsWe're still on the early stage, so feedback from community is very welcome. For sake of reducing the costs of communication, I created some chat groups.Telegramhttp://t.me/leetcode_intlQQ (For China Region)WeChat (For China Region)(Add this bot and reply \""leetcode\"" to join the group.)ContributionIf you have any ideas, Issues or chat in groups.If you want to commit to the repository, Pull Request is welcome. Here is the CONTRIBUTION GUIDEIf you want to edit images resources in this project, here lists the files that can be edited on draw.io.Thank youA big Thank you to every contributor of this project.LicenseApache-2.0"
23,AlreadyBored/basic-js,https://github.com/AlreadyBored/basic-js/blob/master/README.md,JavaScript,"BasicJS⚠️ DO NOT SUBMIT PULL REQUESTS TO THIS REPO ⚠️PrerequisitesInstall Node.jsFork this repository: https://github.com/AlreadyBored/basic-jsClone your newly created repo: https://github.com/<%your_github_username%>/basic-js/Go to folder basic-jsTo install all dependencies use npm installRun npm run test in command line.You will see the number of pending, passing and failing tests. 100% of passing tests is equal to max score for the taskTroubleshootingIf you catch error like this you can try to make npm install -g node-gypSubmit to rs appOpen rs app and loginGo to submit task pageSelect your task (BasicJS)Press the submit button and enjoyNotesWe recommend you to use Node.js of version 16.x.x LTS. If you use any of features, that does not supported by Node.js v16, there may be problems with task submit.Please, be sure that each of your tests is limited to 30 sec.General task descriptionYour task is to write several functions that are the solution to the subtasks. Subtasks descriptions, as well as instructions on how to run tests and submit solutions are below.Count cats!Your task is to count the cats hidden in the backyard (presented by two-dimensional Array). Cats hide well, but their ears (\""^^\"") are clearly visible. Your task is to implement the countCats(backyard) function that will count cats. Good luck!Number of cats found should be number. If no cats found, function should return 0.For example:countCats([ [0, 1, '^^'], [0, '^^', 2], ['^^', 1, 2] ]) => 3Write your code in src/count-cats.js.Carbon datingTo determine the age of archaeological finds, radioisotope dating is widely used. One of its types is radiocarbon dating.The approximate age of the sample is calculated by measuring the ratio of the modern activity of the C14 isotope to the activity of the same isotope in the sample.Read about method  About calculations  You can use the formula from the article at the link above. 0.693 is an approximation of the natural logarithm of two.Your task is to implement the function dateSample(sampleActivity) that calculates sample approximate age (in years). Please use given MODERN_ACTIVITY and HALF_LIFE_PERIOD.Function parameter sampleActivity is a string. Calculated sample age must be number.Age must be integer. Age must be rounded up (ceiling). In case of wrong input parameter type or inadequate activity value or absence of argument function must return false.For example:dateSample('1') => 22387 (or 22392 depending on formula used)dateSample('WOOT!') => falseWrite your code in src/carbon-dating.js.Dream teamImagine you and your friends decide to create a dream team. This team should have a cool secret name that contains encrypted information about it. For example, these may be the first letters of the names of its members in upper case sorted alphabetically.Your task is to implement the createDreamTeam(members) function that returns name of a newly made team (string) based on the names of its members (Array). Good luck!Names of the members should be strings. Values with other type should be ignored. In case of wrong members type function must return false.NB! Team member name may contain whitespaces.For example:createDreamTeam(['Matt', 'Ann', 'Dmitry', 'Max']) => 'ADMM'createDreamTeam(['Olivia', 1111, 'Lily', 'Oscar', true, null]) => 'LOO'Write your code in src/dream-team.js.What season?Your task is to implement the function getSeason(date) that accepts Date object and returns the time of the year that matches it.Time of the year must be string.Seasons in EnglishThe names of the seasons in English are: spring, summer, autumn (fall), winter.If the date argument was not passed, the function must return the string 'Unable to determine the time of year!'. If the date argument is invalid, the function must throw an Error with message Invalid date!.Shh! An enemy scout has lurked among the arguments that come into this function.He is guided by the famous proverb: “If it looks like a duck, swims like a duck and quacks like a duck, then it probably is a duck (who cares what it really is)”. He is expertly disguised as a real date, but a clever javascript developer can catch him and throw an Error with message Invalid date! just in time!For example:const springDate = new Date(2020, 02, 31)getSeason(springDate) => 'spring'Write your code in src/what-season.js.Tower of HanoiTower of Hanoi is famous mathematical puzzle of the 18th century.It consists of three rods and a number of disks of different sizes, which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:Only one disk can be moved at a time.Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack or on an empty rod.No larger disk may be placed on top of a smaller disk.Your task is much easier than coming up with an algorithm that solves this puzzle :)Implement the function calculateHanoi that accepts diskNumber and turnsSpeed parameters. diskNumber is a number of disks and turnsSpeed is the speed of moving discs (in turns per hour).Both parameters are numbers.calculateHanoi function returns an object with 2 properties:turns (minimum number of turns to solve the puzzle)seconds (minimum number of seconds to solve the puzzle at a given turnsSpeed, seconds must be an integer, obtained  from rounded down (floor) calculation result)You don't need to validate parameters.For example:calculateHanoi(9, 4308) => { turns: 511, seconds: 427 }Write your code in src/hanoi-tower.js.Transform arrayYour task is to implement the function transform(arr) that takes an array and returns transformed array, based on the control sequences that arr contains.Control sequences are defined string elements of the mentioned array:--discard-next excludes the next element of the array from the transformed array.--discard-prev excludes the previous element of the array from the transformed array.--double-next duplicates the next element of the array in the transformed array.--double-prev duplicates the previous element of the array in the transformed array.For example:transform([1, 2, 3, '--double-next', 4, 5]) => [1, 2, 3, 4, 4, 5]transform([1, 2, 3, '--discard-prev', 4, 5]) => [1, 2, 4, 5]The function must not affect inital array. Control sequences are applied from left to right to initial array elements. Control sequences do not fall into the transformed array. Control sequences in initial array don't occur in a row. If there is no element next to the control sequence to which it can be applied in the initial array, or this element was previously deleted, it does nothing. The function should throw an Error with message 'arr' parameter must be an instance of the Array! if the arr is not an Array.Write your code in src/transform-array.js.Chain makerLet's practice in chaining!Your task is to create the object chainMaker that creates chains. The finished chain is a string and looks like this: '( value1 )~~( value2 )~~( value3 )'.The chainMaker has several methods for creating chains and modifying them:getLength returns the current chain length as a number;addLink(value) adds a link containing a string representation of the value to the chain;removeLink(position) removes a chain link in the specified position;reverseChain reverses the chain;finishChain ends the chain and returns it.addLink, reverseChain and removeLink methods are chainable, while the another ones are not. If addLink is called with no arguments, it adds an empty link ('(  )') to the chain. If removeLink accepts invalid position (e.g. not a number, or a fractional number, or corresponding to a nonexistent link), it must throw an Error with message You can't remove incorrect link!. After calling the finishChain method, the existing chain must be deleted, as if an Error was thrown.For example:chainMaker.addLink(1).addLink(2).addLink(3).finishChain() => '( 1 )~~( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).removeLink(1).addLink(3).finishChain() => '( 2 )~~( 3 )'chainMaker.addLink(1).addLink(2).reverseChain().addLink(3).finishChain() => '( 2 )~~( 1 )~~( 3 )'Write your code in src/simple-chain.js.Recursive depth calculatorYour task is to implement the class DepthCalculator with method calculateDepth that takes an array and returns its depth.calculateDepth method must pass the given array recursively. Depth of a flat array is 1. Method must correctly work with arrays that contain no elements or contain empty arrays.For example:const depthCalc = new DepthCalculator();depthCalc.calculateDepth([1, 2, 3, 4, 5]) => 1depthCalc.calculateDepth([1, 2, 3, [4, 5]]) => 2depthCalc.calculateDepth([[[]]]) => 3Write your code in src/recursive-depth.js.Extended repeaterYour task is to implement the function repeater(str, options).This function returns a repeating string based on the given parameters:str is a string to repeat;options is an object of options, that contains properties:repeatTimes sets the number of repetitions of the str;separator is a string separating repetitions of the str;addition is an additional string that will be added to each repetition of the str;additionRepeatTimes sets the number of repetitions of the addition;additionSeparator is a string separating repetitions of the addition.The str and addition parameters are strings by default. In case when type of these parameters is different, they must be converted to a string.separator and additionSeparator parameters are strings.repeatTimes and additionRepeatTimes are integer numbers (in the absence of any of them, the corresponding string is not repeated).The only indispensable parameter is str, any others may be not defined. separator default value is '+'. additionSeparator default value is '|'.For example: repeater('STRING', { repeatTimes: 3, separator: '**', addition: 'PLUS', additionRepeatTimes: 3, additionSeparator: '00' }) => 'STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS**STRINGPLUS00PLUS00PLUS'Write your code in src/extended-repeater.js.Vigenere cipherCryptography is awesome! Let's try to organize production of encryption machines. Our machines will use one of the encryption methods that are easy to understand, but also not amenable to simple cryptanalysis - the Vigenere cipher.Our machine will have 2 modifications: direct and reverse (the type of machine is determined at the moment of creation). The direct machine simply encodes and decodes the string that was transmitted to it, and the reverse machine returns an inverted string after encoding and decoding.Your task is to implement the class VigenereCipheringMachine. constructor of this class accepts true (or nothing) to create direct machine and false to create reverse machine.Each instance of VigenereCipheringMachine must have 2 methods: encrypt and decrypt.encrypt method accepts 2 parameters: message (string to encode) and key (string-keyword).decrypt method accepts 2 parameters: encryptedMessage (string to decode) and key (string-keyword).These parameters for both methods are mandatory. If at least one of them has not been given, an Error with message Incorrect arguments! must be thrown. The text returned by these methods must be uppercase. Machines encrypt and decrypt only latin alphabet (all other symbols remain unchanged).You don't need to validate value sent to constructor and to encrypt and decrypt methods (except throwing an Error on absence of argument for these methods).For example:const directMachine = new VigenereCipheringMachine();const reverseMachine = new VigenereCipheringMachine(false);directMachine.encrypt('attack at dawn!', 'alphonse') => 'AEIHQX SX DLLU!'directMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => 'ATTACK AT DAWN!'reverseMachine.encrypt('attack at dawn!', 'alphonse') => '!ULLD XS XQHIEA'reverseMachine.decrypt('AEIHQX SX DLLU!', 'alphonse') => '!NWAD TA KCATTA'Write your code in src/vigenere-cipher.js.(ST) Common character countYour task is to implement function that accepts two strings (s1 and s2) and returns number of common characters between them.For example:getCommonCharacterCount('aabcc', 'adcaa') => 3Write your code in src/common-character-count.js.(ST) Delete digitYour task is to implement function that accepts integer number (n) and returns maximal number you can obtain by deleting exactly one digit of the given number.For example:deleteDigit(152) => 52Write your code in src/delete-digit.js.(ST) DNS statYour task is to implement function that accepts an array of domains (domains) and returns the object with the appearances of the DNS.For example:getDNSStats(['code.yandex.ru', 'music.yandex.ru', 'yandex.ru']) => {'.ru': 3, '.ru.yandex': 3, '.ru.yandex.code': 1,'.ru.yandex.music': 1}Write your code in src/dns-stats.js.(ST) Encode lineYour task is to implement function that accepts string (str) and returns its encoded version.For example:encodeLine('aabbbc') => '2a3bc'Write your code in src/encode-line.js.(ST) File namesThere's a list of file, since two files cannot have equal names, the one which comes later will have a suffix (k), where k is the smallest integer such that the found name is not used yet.Your task is to implement function that accepts array of names (names) and returns an array of names that will be given to the files.For example:renameFiles([\""file\"", \""file\"", \""image\"", \""file(1)\"", \""file\""]) => [\""file\"", \""file(1)\"", \""image\"", \""file(1)(1)\"", \""file(2)\""]Write your code in src/file-names.js.(ST) Get email domainYour task is to implement function that accepts email address (email) and returns it's domain.For example:getEmailDomain('prettyandsimple@example.com') => 'example.com'Write your code in src/get-email-domain.js.(ST) Is MAC-48 Address?The MAC-48 address is six groups of two hexadecimal digits (0 to 9 or A to F) separated by hyphens.Your task is to implement function that accepts string (inputString) and returns true if string is valid MAC-48 address.For example:isMAC48Address('00-1B-63-84-45-E6') => trueWrite your code in src/mac-adress.js.(ST) Matrix elements sumGiven matrix, a rectangular matrix of integers, just add up all the values that don't appear below a \""0\"".For example:const matrix = [ [0, 1, 1, 2], [0, 5, 0, 0], [2, 0, 3, 3]];getMatrixElementsSum(matrix) => 9Write your code in src/matrix-elements-sum.js.(ST) MinesweeperIn the popular Minesweeper game you have a board with some mines and cells that have a number in it that indicates the total number of mines in the neighboring cells. Starting off with some arrangement of mines we want to create a Minesweeper game setup.For example:const matrix = [ [true, false, false], [false, true, false], [false, false, false]];minesweeper(matrix) => [ [1, 2, 1], [2, 1, 1], [1, 1, 1]];Write your code in src/mine-sweeper.js.(ST) Sort by heightGiven an array with heights, sort them except if the value is -1.Your task is to implement function that accepts array (arr) and returns it sortedFor example:sortByHeight([-1, 150, 190, 170, -1, -1, 160, 180]) => [-1, 150, 160, 170, -1, -1, 180, 190]Write your code in src/sort-by-height.js.(ST) Sum digitsYour task is to implement function that accepts a number (n) and returns the sum of its digits until we get to a one digit number.For example:For 100, the result should be 1 (1 + 0 + 0 = 1)getSumOfDigits(100) => 1For 91, the result should be 1 (9 + 1 = 10, 1 + 0 = 1)getSumOfDigits(91) => 1Write your code in src/sum-digits.js.© AlreadyBored& tasks:Common character countDelete digitDNS statEncode lineFile namesGet email domainIs MAC-48 Adress?Matrix elements sumMinesweeperSort by heightSum digitsare integrated from Short track 2021 repo& Thanks mikhama for assistance!"
24,Shastel/reverse-int,https://github.com/Shastel/reverse-int/blob/master/README.md,JavaScript,"Reverse IntTaskGiven: number, your task is to implement function that reverse digits of this number.For example:reverse(123); // 321reverse(233); // 332reverse(535); // 535reverse(95034); // 43059Write your code in `src/index.js.All test cases are designed as “error-free”, so don't worry about handling any errors.Prepare and testInstall Node.jsFork this repository: reverse-intClone your newly created repo: https://github.com/<%your_github_username%>/reverse-int/Go to folder reverse-intTo install all dependencies use npm installRun npm test in the command lineYou will see the number of passing and failing tests you 100% of passing tests is equal to 100p in scoreSubmit to rs appOpen rs app and loginOpen RS APP and click Auto TestSelect your task (reverse-int)Press the submit button and enjoyNotesWe recommend you to use nodejs of version 14 or lower. If you using are any of the features which are not supported by v12, the score won't be submitted.Each of your test case is limited to 30 sec."
25,twilio-labs/open-pixel-art,https://github.com/twilio-labs/open-pixel-art/blob/master/README.md,JavaScript,"Open Pixel Art by Twilio   This is an art project created with the intention to teach you how to create a pull request.Visit open-pixel-art.com to see the full artwork!Anyone who wishes to learn how to create a pull request for a project on GitHub can use this project to contribute a pixel to the canvas. You will only be able to ever create one pixel but you can pick whatever color you prefer as long as it is a valid HEX code. For example: #F22F46 the brand color of TwilioIf you are new to open-source, GitHub or git in general, fear not, we created a tutorial in TwilioQuest for you. It will teach you step by step on how you can get started and will guide you on your quest of creating your pull request.🕹 Download TwilioQuestThe entire project is automated and is largely maintained by a set of bots that will verify any pixel contributions. However, if you'd like to know more about the project or submit other contributions to the project that are not a pixel, feel free to create a GitHub issue inside the Open Pixel Art project.ContributingIn order to contribute a pixel to the canvas, you'll have to create a pull request to the Open Pixel Art project on GitHub.If you are already familiar with git and how to create a pull request on GitHub, you can go ahead and check out the contributing guide.We understand that contributing to open-source can be intimidating and as a result we created a mission in our interactive coding game TwilioQuest that will walk you step by step through creating a pull request for this project and help you embark on your new quest into open-source!Download TwilioQuestCheck out the Contribution Guides:EnglishEspañolDeutschBrazilian PortugueseChinese MandarinDutchCode of ConductWe want to make sure that this project is as welcoming to people as possible. By interacting with the project in any shape or form you are agreeing to the project's Code of Conduct:EnglishEspañolDeutschBrazilian PortugueseIf you feel like another individual has violated the code of conduct, please raise a complaint to open-source@twilio.com.ContributorsThanks goes to these wonderful people (emoji key):      Dominik Kundel💻 🤔    Amy Kapernick💻    Kevin Whinnery💻    Ricky Robinett💻    André Felipe Scalco💻    Teddy Gustiaux💻    Aidan Smith💻        Scott O'Malley💻    Todd Moy💻    Samuel Durkin💻    ChatterboxCoder💻    Simey de Klerk💻    Tilde Ann Thurium👀    Daniel Peukert📖        izontm📖    Carly Robison📖  This project follows the all-contributors specification. Contributions of any kind welcome!Technology Thank YouThis project is powered by various open-source projects. Among others:Eleventy for the static site generationDanger for the automated code reviewMergify for automated PR mergingAll Contributors Bot to recognize the contributions of everyoneJest for Unit TestingNES.css for the CSS stylingWelcome Bot to welcome new contributorsLicenseMIT"
26,memochou1993/gpt-ai-assistant,https://github.com/memochou1993/gpt-ai-assistant/blob/main/README.md,JavaScript,"GPT AI Assistant GPT AI Assistant is an application that is implemented using the OpenAI API and LINE Messaging API. Through the installation process, you can start chatting with your own AI assistant using the LINE mobile app.News2023-05-03: The 4.6 version now support gpt-4 OpenAI model. 🔥2023-03-05: The 4.1 version now support the audio message of LINE and  whisper-1 OpenAI model. 🔥2023-03-02: The 4.0 version now support gpt-3.5-turbo OpenAI model. 🔥DemoDocumentations中文EnglishCreditsjayer95 - Debugging and testingkkdai - Idea of sum commandDayu0815 - Idea of search commandmics8128 - Implementing new featuresAll other contributorsContactIf there is any question, please contact me at memochou1993@gmail.com. Thank you.ChangelogDetailed changes for each release are documented in the release notes.LicenseMIT"
27,sahat/hackathon-starter,https://github.com/sahat/hackathon-starter/blob/master/README.md,JavaScript,"Hackathon StarterLive Demo: LinkJump to What's new?A boilerplate for Node.js web applications.If you have attended any hackathons in the past, then you know how much time it takes to get a project started: decide on what to build, pick a programming language, pick a web framework, pick a CSS framework. A while later, you might have an initial project up on GitHub, and only then can other team members start contributing. Or how about doing something as simple as Sign in with Facebook authentication? You can spend hours on it if you are not familiar with how OAuth 2.0 works.When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases of hackathon web apps, without being too specific. In the worst case, you can use this as a learning guide for your projects, if for example you are only interested in Sign in with Google authentication and nothing else.Testimonials“Nice! That README alone is already gold!”— Adrian Le Bas“Awesome. Simply awesome.”— Steven Rueter“I'm using it for a year now and many projects, it's an awesome boilerplate and the project is well maintained!”— Kevin Granger“Small world with Sahat's project. We were using his hackathon starter for our hackathon this past weekend and got some prizes. Really handy repo!”— Interview candidate for one of the companies I used to work with.Modern ThemeFlatly Bootstrap ThemeAPI ExamplesTable of ContentsFeaturesPrerequisitesGetting StartedObtaining API KeysProject StructureList of PackagesUseful Tools and ResourcesRecommended Design ResourcesRecommended Node.js LibrariesRecommended Client-side LibrariesPro TipsFAQHow It WorksCheatsheetsES6JavaScript DateMongoose CheatsheetDeploymentDockerProductionChangelogContributingLicenseFeaturesLoginLocal Authentication using Email and PasswordOAuth 2.0 Authentication: Sign in with Google, Facebook, Twitter, LinkedIn, Twitch, Github, SnapchatUser Profile and Account ManagementGravatarProfile DetailsChange PasswordForgot PasswordReset PasswordVerify EmailLink multiple OAuth strategies to one accountDelete AccountContact Form (powered by SMTP via Sendgrid, Mailgun, AWS SES, etc.)File uploadAPI ExamplesFacebook, Foursquare, Tumblr, Pinterest, Github, Steam, Quickbooks, Paypal, Stripe, Twilio (text messaging), Lob (USPS Mail), HERE Maps, Google Maps, Google Drive, Google Sheets, Alpha Vantage (stocks and finance info) with ChartJS, Last.fm, New York Times, Web Scraping,Flash notificationsreCaPTCHA and rate limit protectionCSRF protectionMVC Project StructureNode.js clusters supportHTTPS Proxy support (via ngrok, Cloudflare, etc.)Sass stylesheets (auto-compiled via middleware)Bootstrap 5\""Go to production\"" checklistPrerequisitesMongoDB (local install OR hosted)Local Install: MongoDBHosted: No need to install, see the MongoDB Atlas sectionNode.js 18+Command Line Tools Mac OS X: Xcode (or OS X 10.9+: xcode-select --install) Windows: Visual Studio Code + Windows Subsystem for Linux - Ubuntu OR Visual Studio Ubuntu /  Linux Mint: sudo apt-get install build-essential Fedora: sudo dnf groupinstall \""Development Tools\"" OpenSUSE: sudo zypper install --type pattern devel_basisNote: If you are new to Node or Express, you may find Node.js & Express From Scratch series helpful for learning the basics of Node and Express. Alternatively, here is another great tutorial for complete beginners - Getting Started With Node.js, Express, MongoDB.Getting StartedStep 1: The easiest way to get started is to clone the repository:# Get the latest snapshotgit clone https://github.com/sahat/hackathon-starter.git myproject# Change directorycd myproject# Install NPM dependenciesnpm install# Then simply start your appnode app.jsNote: I highly recommend installing Nodemon. It watches for any changes in your  node.js app and automatically restarts the server. Once installed, instead of node app.js use nodemon app.js. It willsave you a lot of time in the long run, because you won't need to manually restart the server each time you make a small change in code. To install, run sudo npm install -g nodemon.Step 2: Obtain API Keys and change configs if neededAfter completing step 1 and locally installing MongoDB, you should be able to access the application through a web browser and use local user accounts. However, certain functions like API integrations may not function correctly until you obtain specific keys from service providers. The keys provided in the project serve as placeholders, and you can retain them for features you are not currently utilizing. To incorporate the acquired keys into the application, you have two options:Set environment variables in your console session: Alternatively, you can set the keys as environment variables directly through the command prompt. For instance, in bash, you can use the export command like this: export FACEBOOK_SECRET=xxxxxx. This method is considered a better practice as it reduces the risk of accidentally including your secrets in a code repository.Replace the keys in the .env.example file: Open the .env.example file and update the placeholder keys with the newly acquired ones. This method has the risk of accidental checking-in of your secrets to code repos.What to get and configure:SMTPFor user workflows for reset password and verify emailFor contact form processingreCAPTCHAFor contact form submissionOAuth for social logins (Sign in with / Login with)Depending on your application need, obtain keys from Google, Facebook, Twitter, LinkedIn, Twitch, GitHub, Snapchat.  You don't have to obtain valid keys for any provider that you don't need. Just remove the buttons and links in the login and account pug views before your demo.API keys for service providers in the API Examples if you are planning to use them.MongoDB AtlasIf you are using MongoDB Atlas instead of a local db, set the MONGODB_URI to your db URI (including your db user/password).Email addressSet SITE_CONTACT_EMAIL as your incoming email address for messages sent to you thru the contact form.Set TRANSACTION_EMAIL as the \""From\"" address for emails sent to users thru the lost password or email verification emails to users.  You may set this to the same address as SITE_CONTACT_EMAIL.ngrok and HTTPSIf you want to use some API that needs HTTPS to work (for example Pinterest or Facebook),you will need to download ngrok. Start ngrok, set your BASE_URL to the forwarding address  (i.e  https://3ccb-1234-abcd.ngrok-free.app ), and use the forwarding address to access your application.  If you are using a proxy like ngrok, you may get a CSRF mismatch error if you try to access the app at http://localhost:8080 instead of the https://...ngrok-free.app address.After installing or downloading the standalone ngrok client you can start ngrok to intercept the data exchanged on port 8080 with ./ngrok http 8080 in Linux or ngrok http 8080 in Windows.Step 3: Develop your application and customize the experienceCheck out How It WorksStep 4: Optional - deploy to productionSee:Deploymentprod-checklist.mdObtaining API KeysYou will need to obtain appropriate credentials (Client ID, Client Secret, API Key, or Username & Password) for API and service provides which you need.  See Step 2 in the Getting started section for more info.SMTPObtain SMTP credentials from a provider for transactional emails.  Set the SMTP_USER, SMTP_PASSWORD, and SMTP_HOST environment variables accordingly.  When picking the smtp host, keep in mind that the app is configured to use secure SMTP transmissions over port 465 out of the box.  You have the flexibility to select any provider that suits your needs or take advantage of one of the following providers, each offering a free tier for your convenience.ProviderFree TierWebsiteSendGrid100 emails/day for freehttps://sendgrid.comSMTP2Go1000 emails/month for freehttps://www.smtp2go.comBrevo300 emails/day for freehttps://www.brevo.comVisit Google reCAPTCHA Admin ConsoleEnter your application's name as the LabelChoose reCAPTCHA v2, \""I'm not a robot\"" CheckboxEnter localhost as the domain.  You can have other domains added in addition to localhostAccept the terms and submit the formCopy the Site Key and the Secret key into .env.  These keys will be accessible under Settings, reCAPTCHA keys drop down if you need them again laterVisit Google Cloud ConsoleClick on the Create Project buttonEnter Project Name, then click on Create buttonThen click on APIs & auth in the sidebar and select API tabClick on Google+ API under Social APIs, then click Enable APIClick on Google Drive API under G Suite, then click Enable APIClick on Google Sheets API under G Suite, then click Enable APINext, under APIs & auth in the sidebar click on Credentials tabClick on Create new Client ID buttonSelect Web Application and click on Configure Consent ScreenFill out the required fields then click on SaveIn the Create Client ID modal dialog:Application Type: Web ApplicationAuthorized Javascript origins: set to your BASE_URL value (i.e. http://localhost:8080, etc)Authorized redirect URI: set to your BASE_URL value followed by /auth/google/callback (i.e. http://localhost:8080/auth/google/callback )Click on Create Client ID buttonCopy and paste Client ID and Client secret keys into .envVisit Snap Kit Developer PortalClick on the + button to create an appEnter a name for your appEnable the scopes that you will want to use in your appClick on the Continue buttonFind the Kits section and make sure that Login Kit is enabledFind the Redirect URLs section, click the + Add button, and enter your BASE_URL value followed by /auth/snapchat/callback (i.e. http://localhost:8080/auth/snapchat/callback )Find the Development Environment section. Click the Generate button next to the Confidential OAuth2 Client heading within it.Copy and paste the generated Private Key and OAuth2 Client ID keys into .envNote: OAuth2 Client ID is SNAPCHAT_ID, Private Key is SNAPCHAT_SECRET in .envTo prepare the app for submission, fill out the rest of the required fields: Category, Description, Privacy Policy Url, and App IconVisit Facebook DevelopersClick My Apps, then select *Add a New App from the dropdown menuEnter a new name for your appClick on the Create App ID buttonFind the Facebook Login Product and click on Facebook LoginInstead of going through their Quickstart, click on Settings for your app in the top left cornerCopy and paste App ID and App Secret keys into .envNote: App ID is FACEBOOK_ID, App Secret is FACEBOOK_SECRET in .envEnter localhost under App DomainsChoose a Category that best describes your appClick on + Add Platform and select WebsiteEnter your BASE_URL value (i.e. http://localhost:8080, etc) under Site URLClick on the Settings tab in the left nav under Facebook LoginEnter your BASE_URL value followed by /auth/facebook/callback (i.e. http://localhost:8080/auth/facebook/callback ) under Valid OAuth redirect URIsNote: After a successful sign-in with Facebook, a user will be redirected back to the home page with appended hash #_=_ in the URL. It is not a bug. See this Stack Overflow discussion for ways to handle it.Go to Account SettingsSelect Developer settings from the sidebarThen click on OAuth Apps and then on Register new applicationEnter Application Name and Homepage URL. Enter your BASE_URL value (i.e. http://localhost:8080, etc) as the homepage URL.For Authorization Callback URL: your BASE_URL value followed by /auth/github/callback (i.e. http://localhost:8080/auth/github/callback )Click Register applicationNow copy and paste Client ID and Client Secret keys into .env fileSign in at https://apps.twitter.comClick Create a new applicationEnter your application name, website and description. Set the website as your BASE_URL value (i.e. http://localhost:8080, etc).For Callback URL: your BASE_URL value followed by /auth/twitter/callback (i.e. http://localhost:8080/auth/twitter/callback )Go to Settings tabUnder Application Type select Read and Write accessCheck the box Allow this application to be used to Sign in with TwitterClick Update this Twitter's applications settingsCopy and paste Consumer Key and Consumer Secret keys into .env fileSign in at LinkedIn Developer NetworkFrom the account name dropdown menu select API KeysIt may ask you to sign in once againClick + Add New Application buttonFill out all the required fieldsOAuth 2.0 Redirect URLs: your BASE_URL value followed by /auth/linkedin/callback (i.e. http://localhost:8080/auth/linkedin/callback )JavaScript API Domains: your BASE_URL value (i.e. http://localhost:8080, etc).For Default Application Permissions make sure at least the following is checked:r_basicprofileFinish by clicking Add Application buttonCopy and paste API Key and Secret Key keys into .env fileAPI Key is your clientIDSecret Key is your clientSecretSign up or log into your dashboardClick on your profile and click on Account SettingsThen click on API KeysCopy the Secret Key. and add this into .env fileVisit PayPal DeveloperLog in to your PayPal accountClick Applications > Create App in the navigation barEnter Application Name, then click Create appCopy and paste Client ID and Secret keys into .env fileApp ID is client_id, App Secret is client_secretChange host to api.paypal.com if you want to test against production and use the live credentialsGo to Foursquare for DevelopersClick on My Apps in the top menuClick the Create A New App buttonEnter App Name, Welcome page url,For Redirect URI: your BASE_URL value followed by /auth/foursquare/callback (i.e. http://localhost:8080/auth/foursquare/callback )Click Save ChangesCopy and paste Client ID and Client Secret keys into .env fileGo to http://www.tumblr.com/oauth/appsOnce signed in, click +Register applicationFill in all the detailsFor Default Callback URL: your BASE_URL value followed by /auth/tumblr/callback (i.e. http://localhost:8080/auth/tumblr/callback )Click ✔RegisterCopy and paste OAuth consumer key and OAuth consumer secret keys into .env fileGo to http://steamcommunity.com/dev/apikeySign in with your existing Steam accountEnter your Domain Name based on your BASE_URL, then and click RegisterCopy and paste Key into .env fileVisit the Twitch developer dashboardIf prompted, authorize the dashboard to access your twitch accountIn the Console, click on Register Your ApplicationEnter the name of your applicationUse OAuth Redirect URLs enter your BASE_URL value followed by /auth/twitch/callback (i.e. http://localhost:8080/auth/twitch/callback )Set Category to Website Integration and press the Create buttonAfter the application has been created, click on the Manage buttonCopy and paste Client ID into .envIf there is no Client Secret displayed, click on the New Secret button and then copy and paste the Client secret into .envGo to https://developer.here.comSign up and create a Freemium projectCreate JAVASCRIPT/REST credentials. Copy and paste the APP_ID and APP into .env file.Note that these credentials are available on the client-side, and you need to create a domain whitelist for your app credentials when you are publicly launching the app.Go to https://www.twilio.com/try-twilioSign up for an account.Once logged into the dashboard, expand the link 'show api credentials'Copy your Account Sid and Auth TokenGo to https://developer.intuit.com/app/developer/qbo/docs/get-startedUse the Sign Up option in the upper right corner of the screen (navbar) to get a free developer account and a sandbox company.Create a new app by going to your Dashboard using the My Apps option in the top nav bar or by going to https://developer.intuit.com/app/developer/myappsIn your App, under Development, Keys & OAuth (right nav), find the Client ID and Client Secret for your .env fileProject StructureNameDescriptionconfig/passport.jsPassport Local and OAuth strategies, plus login middleware.controllers/api.jsController for /api route and all api examples.controllers/contact.jsController for contact form.controllers/home.jsController for home page (index).controllers/user.jsController for user account management.models/User.jsMongoose schema and model for User.public/Static assets (fonts, css, js, img).public/js/application.jsSpecify client-side JavaScript dependencies.public/js/app.jsPlace your client-side JavaScript here.public/css/main.scssMain stylesheet for your app.views/account/Templates for login, password reset, signup, profile.views/api/Templates for API Examples.views/partials/flash.pugError, info and success flash notifications.views/partials/header.pugNavbar partial template.views/partials/footer.pugFooter partial template.views/layout.pugBase template.views/home.pugHome page template..dockerignoreFolder and files ignored by docker usage..env.exampleYour API keys, tokens, passwords and database URI..eslintrcRules for eslint linter..gitignoreFolder and files ignored by git.app.jsThe main application file.docker-compose.ymlDocker compose configuration file.DockerfileDocker configuration file.package.jsonNPM dependencies.package-lock.jsonContains exact versions of NPM dependencies in package.json.Note: There is no preference for how you name or structure your views.You could place all your templates in a top-level views directory withouthaving a nested folder structure if that makes things easier for you.Just don't forget to update extends ../layout  and correspondingres.render() paths in controllers.List of PackagesPackageDescription@fortawesome/fontawesome-freeSymbol and Icon library.@googleapis/driveGoogle Drive API integration library.@googleapis/sheetsGoogle Sheets API integration library.@ladjs/bootstrap-socialSocial buttons library.@lob/lob-typescript-sdkLob (USPS mailing / physical mailing service) library.@node-rs/bcryptLibrary for hashing and salting user passwords.@octokit/restGitHub API library.@passport-js/passport-twitterTwitter login support (OAuth 2).@popperjs/coreFrontend js library for poppers and tooltips.axiosHTTP client.body-parserNode.js body parsing middleware.bootstrapCSS Framework.chaiBDD/TDD assertion library.cheerioScrape web pages using jQuery-style syntax.compressionNode.js compression middleware.connect-mongoMongoDB session store for Express.dotenvLoads environment variables from .env file.errorhandlerDevelopment-only error handler middleware.eslintLinter JavaScript.eslint-config-airbnb-baseConfiguration eslint by airbnb.eslint-plugin-chai-friendlyMakes eslint friendly towards Chai.js 'expect' and 'should' statements.eslint-plugin-importESLint plugin with rules that help validate proper imports.expressNode.js web framework.express-flashProvides flash messages for Express.express-rate-limitRate limiting middleware for abuse protection.express-sessionSimple session middleware for Express.huskyGit hook manager to automate tasks with git.jqueryFront-end JS library to interact with HTML elements.lastfmLast.fm API library.lint-stageUtility to lint files staged by git.lobLob API library.lodashA utility library for working with arrays, numbers, objects, strings.luscaCSRF middleware.mailcheckerVerifies that an email address is valid and not a disposable address.mochaTest framework.momentParse, validate, compute dates and times.mongodbMemoryServerMongoDB in memory (for running tests without a running db).mongooseMongoDB ODM.morganHTTP request logger middleware for node.js.multerNode.js middleware for handling multipart/form-data.nodemailerNode.js library for sending emails.nycCoverage test.passportSimple and elegant authentication library for node.js.passport-facebookSign-in with Facebook plugin.passport-github2Sign-in with GitHub plugin.passport-google-oauthSign-in with Google plugin.passport-linkedin-oauth2Sign-in with LinkedIn plugin.passport-localSign-in with Username and Password plugin.passport-oauthAllows you to set up your own OAuth 1.0a and OAuth 2.0 strategies.passport-oauth2-refreshA library to refresh OAuth 2.0 access tokens using refresh tokens.passport-snapchatSign-in with Snapchat plugin.passport-steam-openidOpenID 2.0 Steam plugin.patch-packageFix broken node modules ahead of fixes by maintainers.paypal-rest-sdkPayPal APIs library.pugTemplate engine for Express.sassSass compiler to generate CSS with superpowerssinonTest spies, stubs and mocks for JavaScript.stripeOffical Stripe API library.supertestHTTP assertion library.twilioTwilio API library.twitch-passportSign-in with Twitch plugin.validatorA library of string validators and sanitizers.Useful Tools and ResourcesJavaScripting - The Database of JavaScript LibrariesHTML to Pug converter - HTML to PUG is a free online converter helping you to convert HTML files to pug syntax in real-time.JavascriptOO - A directory of JavaScript libraries with examples, CDN links, statistics, and videos.Favicon Generator - Generate favicons for PC, Android, iOS, Windows 8.Recommended Design ResourcesCode Guide - Standards for developing flexible, durable, and sustainable HTML and CSS.Bootsnipp - Code snippets for Bootstrap.Bootstrap Zero - Free Bootstrap templates themes.Google Bootstrap - Google-styled theme for Bootstrap.Font Awesome Icons - It's already part of the Hackathon Starter, so use this page as a reference.Colors - A nicer color palette for the web.Creative Button Styles - awesome button styles.Creative Link Effects - Beautiful link effects in CSS.Medium Scroll Effect - Fade in/out header background image as you scroll.GeoPattern - SVG background pattern generator.Trianglify - SVG low-poly background pattern generator.Recommended Node.js LibrariesNodemon - Automatically restart Node.js server on code changes.geoip-lite - Geolocation coordinates from IP address.Filesize.js - Pretty file sizes, e.g. filesize(265318); // \""265.32 kB\"".Numeral.js - Library for formatting and manipulating numbers.sharp - Node.js module for resizing JPEG, PNG, WebP and TIFF images.Recommended Client-side LibrariesFramework7 - Full Featured HTML Framework For Building iOS7 Apps.InstantClick - Makes your pages load instantly by pre-loading them on mouse hover.NProgress.js - Slim progress bars like on YouTube and Medium.Hover - Awesome CSS3 animations on mouse hover.Magnific Popup - Responsive jQuery Lightbox Plugin.Offline.js - Detect when user's internet connection goes offline.Alertify.js - Sweet looking alerts and browser dialogs.selectize.js - Styleable select elements and input tags.drop.js -  Powerful Javascript and CSS library for creating dropdowns and other floating displays.scrollReveal.js - Declarative on-scroll reveal animations.Pro TipsNeed to find a specific object inside an Array? Use _.find function from Lodash. For example, this is how you would retrieve a Twitter token from database: var token = _.find(req.user.tokens, { kind: 'twitter' });, where 1st parameter is an array, and a 2nd parameter is an object to search for.FAQWhy do I get 403 Error: Forbidden when submitting a form?You need to add the following hidden input element to your form. This has been added in the pull request #40 as part of the CSRF protection.input(type='hidden', name='_csrf', value=_csrf)Note: It is now possible to whitelist certain URLs. In other words, you can specify a list of routes that should bypass the CSRF verification check.Note 2: To whitelist dynamic URLs use regular expression tests inside the CSRF middleware to see if req.originalUrl matches your desired pattern.I am getting MongoDB Connection Error, how do I fix it?That's a custom error message defined in app.js to indicate that there was a problem connecting to MongoDB:mongoose.connection.on('error', (err) => {  console.error(err);  console.log('%s MongoDB connection error. Please make sure MongoDB is running.', chalk.red('✗'));  process.exit();});You need to have a MongoDB server running before launching app.js. You can download MongoDB here, or install it via a package manager.Windows users, read Install MongoDB on Windows.Tip: If you are always connected to the internet, you could just use MongoDB Atlas instead of downloading and installing MongoDB locally. You will only need to update database credentials in .env file.I get an error when I deploy my app, why?Chances are you haven't changed the Database URI in .env. If MONGODB is set to localhost, it will only work on your machine as long as MongoDB is running. When you deploy to Render, OpenShift, or some other provider, you will not have MongoDB running on localhost. You need to create an account with MongoDB Atlas, then create a free tier database.See Deployment for more information on how to set up an account and a new database step-by-step with MongoDB Atlas.Why do you have all routes defined in app.js?For the sake of simplicity. While there might be a better approach, such as passing app context to each controller as outlined in this blog, I find such a style to be confusing for beginners. It took me a long time to grasp the concept of exports and module.exports, let alone having a global app reference in other files. Tha to me is backward thinking.The app.js is the \""heart of the app\"", it should be the one referencing models, routes, controllers, etc.When working solo on small projects, I prefer to have everything inside app.js as is the case with this REST API server.How It Works (mini guides)This section is intended for giving you a detailed explanation of how a particular functionality works. Maybe you are just curious about how it works, or perhaps you are lost and confused while reading the code, I hope it provides some guidance to you.Custom HTML and CSS Design 101HTML5 UP has many beautiful templates that you can download for free.When you download the ZIP file, it will come with index.html, images, CSS and js folders. So, how do you integrate it with Hackathon Starter? Hackathon Starter uses the Bootstrap CSS framework, but these templates do not.Trying to use both CSS files at the same time will likely result in undesired effects.Note: Using the custom templates approach, you should understand that you cannot reuse any of the views I have created: layout, the home page, API browser, login, signup, account management, contact. Those views were built using Bootstrap grid and styles. You will have to manually update the grid using a different syntax provided in the template. Having said that, you can mix and match if you want to do so: Use Bootstrap for the main app interface, and a custom template for a landing page.Let's start from the beginning. For this example I will use Escape Velocity template:Note: For the sake of simplicity I will only consider index.html, and skip left-sidebar.html,no-sidebar.html, right-sidebar.html.Move all JavaScript files from html5up-escape-velocity/js to public/js. Then move all CSS files from html5up-escape-velocity/css to public/css. And finally, move all images from html5up-escape-velocity/images to public/images. You could move it to the existing img folder, but that would require manually changing every img reference. Grab the contents of index.html and paste it into HTML To Pug.Note: Do not forget to update all the CSS and JS paths accordingly.Create a new file escape-velocity.pug and paste the Pug markup in views folder.Whenever you see the code res.render('account/login') - that means it will search for views/account/login.pug file.Let's see how it looks. Create a new controller escapeVelocity inside controllers/home.js:exports.escapeVelocity = (req, res) => {  res.render('escape-velocity', {    title: 'Landing Page'  });};And then create a route in app.js. I placed it right after the index controller:app.get('/escape-velocity', homeController.escapeVelocity);Restart the server (if you are not using nodemon); then you should see the new template at http://localhost:8080/escape-velocityI will stop right here, but if you would like to use this template as more than just a single page, take a look at how these Pug templates work: layout.pug - base template, index.pug - home page, partials/header.pug - Bootstrap navbar, partials/footer.pug - sticky footer. You will have to manually break it apart into smaller pieces. Figure out which part of the template you want to keep the same on all pages - that's your new layout.pug.Then, each page that changes, be it index.pug, about.pug, contact.pugwill be embedded in your new layout.pug via block content. Use existing templates as a reference.This is a rather lengthy process, and templates you get from elsewhere might have yet another grid system. That's why I chose Bootstrap for the Hackathon Starter.Many people are already familiar with Bootstrap, plus it's easy to get started with it if you have never used Bootstrap.You can also buy many beautifully designed Bootstrap themes at Themeforest, and use them as a drop-in replacement for Hackathon Starter. However, if you would like to go with a completely custom HTML/CSS design, this should help you to get started!How do flash messages work in this project?Flash messages allow you to display a message at the end of the request and access it on the next request and only the next request. For instance, on a failed login attempt, you would display an alert with some error message, but as soon as you refresh that page or visit a different page and come back to the login page, that error message will be gone. It is only displayed once.This project uses express-flash module for flash messages. And that module is built on top of connect-flash, which is what I used in this project initially. With express-flash you don't have to explicitly send a flash message to every view inside res.render().All flash messages are available in your views via messages object by default, thanks to express-flash.Flash messages have a two-step process. You use req.flash('errors', { msg: 'Error messages goes here' }to create a flash message in your controllers, and then display them in your views:if messages.errors  .alert.alert-danger.fade.in    for error in messages.errors      div= error.msgIn the first step, 'errors' is the name of a flash message, which should match the name of the property on messages object in your views. You place alert messages inside if message.errors because you don't want to show them flash messages are present.The reason why you pass an error like { msg: 'Error message goes here' } instead of just a string - 'Error message goes here', is for the sake of consistency.To clarify that, express-validator module which is used for validating and sanitizing user's input, returns all errors as an array of objects, where each object has a msg property with a message why an error has occurred. Here is a more general example of what express-validator returns when there are errors present:[  { param: \""name\"", msg: \""Name is required\"", value: \""<received input>\"" },  { param: \""email\"", msg: \""A valid email is required\"", value: \""<received input>\"" }]To keep consistent with that style, you should pass all flash messages as { msg: 'My flash message' } instead of a string. Otherwise, you will see an alert box without an error message. That is because in partials/flash.pug template it will try to output error.msg (i.e. \""My flash message\"".msg), in other words, it will try to call a msg method on a String object, which will return undefined. Everything I just mentioned about errors, also applies to \""info\"" and \""success\"" flash messages, and you could even create a new one yourself, such as:Data Usage Controller (Example)req.flash('warning', { msg: 'You have exceeded 90% of your data usage' });User Account Page (Example)if messages.warning  .alert.alert-warning.fade.in    for warning in messages.warning      div= warning.msgpartials/flash.pug is a partial template that contains how flash messages are formatted. Previously, flash messages were scattered throughout each view that used flash messages (contact, login, signup, profile), but now, thankfully it uses a DRY approach.The flash messages partial template is included in the layout.pug, along with footer and navigation.body    include partials/header    .container      include partials/flash      block content    include partials/footerIf you have any further questions about flash messages, please feel free to open an issue, and I will update this mini-guide accordingly, or send a pull request if you would like to include something that I missed.How do I create a new page?A more correct way to say this would be \""How do I create a new route?\"" The main file app.js contains all the routes.Each route has a callback function associated with it. Sometimes you will see three or more arguments for a route. In a case like that, the first argument is still a URL string, while middle arguments are what's called middleware. Think of middleware as a door. If this door prevents you from continuing forward, you won't get to your callback function. One such example is a route that requires authentication.app.get('/account', passportConfig.isAuthenticated, userController.getAccount);It always goes from left to right. A user visits /account page. Then isAuthenticated middleware checks if you are authenticated:exports.isAuthenticated = (req, res, next) => {  if (req.isAuthenticated()) {    return next();  }  res.redirect('/login');};If you are authenticated, you let this visitor pass through your \""door\"" by calling return next();. It then proceeds to thenext middleware until it reaches the last argument, which is a callback function that typically renders a template on GET requests or redirects on POST requests. In this case, if you are authenticated, you will be redirected to the Account Management page; otherwise, you will be redirected to the Login page.exports.getAccount = (req, res) => {  res.render('account/profile', {    title: 'Account Management'  });};Express.js has app.get, app.post, app.put, app.delete, but for the most part, you will only use the first two HTTP verbs, unless you are building a RESTful API.If you just want to display a page, then use GET, if you are submitting a form, sending a file then use POST.Here is a typical workflow for adding new routes to your application. Let's say we are building a page that lists all books from the database.Step 1. Start by defining a route.app.get('/books', bookController.getBooks);Note: As of Express 4.x you can define your routes like so:app.route('/books')  .get(bookController.getBooks)  .post(bookController.createBooks)  .put(bookController.updateBooks)  .delete(bookController.deleteBooks)And here is how a route would look if it required an authentication and an authorization middleware:app.route('/api/twitter')  .all(passportConfig.isAuthenticated)  .all(passportConfig.isAuthorized)  .get(apiController.getTwitter)  .post(apiController.postTwitter)Use whichever style makes sense to you. Either one is acceptable. I think that chaining HTTP verbs on app.route is a very clean and elegant approach, but on the other hand, I can no longer see all my routes at a glance when you have one route per line.Step 2. Create a new schema and a model Book.js inside the models directory.const mongoose = require('mongoose');const bookSchema = new mongoose.Schema({  name: String});const Book = mongoose.model('Book', bookSchema);module.exports = Book;Step 3. Create a new controller file called book.js inside the controllers directory./** * GET /books * List all books. */const Book = require('../models/Book.js');exports.getBooks = (req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });};Step 4. Import that controller in app.js.const bookController = require('./controllers/book');Step 5. Create books.pug template.extends layoutblock content  .page-header    h3 All Books  ul    for book in books      li= book.nameThat's it! I will say that you could have combined Step 1, 2, 3 as following:app.get('/books',(req, res) => {  Book.find((err, docs) => {    res.render('books', { books: docs });  });});Sure, it's simpler, but as soon as you pass 1000 lines of code in app.js it becomes a little challenging to navigate the file.I mean, the whole point of this boilerplate project was to separate concerns, so you could work with your teammates without running into MERGE CONFLICTS. Imagine you have four developers working on a single app.js, I promise you it won't be fun resolving merge conflicts all the time.If you are the only developer, then it's okay. But as I said, once it gets up to a certain LoC size, it becomes difficult to maintain everything in a single file.That's all there is to it. Express.js is super simple to use.Most of the time you will be dealing with other APIs to do the real work:Mongoose for querying database, socket.io for sending and receiving messages over WebSockets, sending emails via Nodemailer, form validation using validator.js library, parsing websites using Cheerio, etc.How do I use Socket.io with Hackathon Starter?Dan Stroot submitted an excellent pull request that adds a real-time dashboard with socket.io.And as  much as I'd like to add it to the project, I think it violates one of the main principles of the Hackathon Starter:When I started this project, my primary focus was on simplicity and ease of use.I also tried to make it as generic and reusable as possible to cover most use cases ofhackathon web apps, without being too specific.When I need to use socket.io, I really need it, but most of the time - I don't. But more importantly, WebSockets support is still experimental on most hosting providers.Due to past provider issues with WebSockets, I have not include socket.io as part of the Hackathon Starter. For now...If you need to use socket.io in your app, please continue reading.First, you need to install socket.io:npm install socket.ioReplace const app = express(); with the following code:const app = express();const server = require('http').Server(app);const io = require('socket.io')(server);I like to have the following code organization in app.js (from top to bottom): module dependencies,import controllers, import configs, connect to database, express configuration, routes,start the server, socket.io stuff. That way I always know where to look for things.Add the following code at the end of app.js:io.on('connection', (socket) => {  socket.emit('greet', { hello: 'Hey there browser!' });  socket.on('respond', (data) => {    console.log(data);  });  socket.on('disconnect', () => {    console.log('Socket disconnected');  });});One last thing left to change:app.listen(app.get('port'), () => {toserver.listen(app.get('port'), () => {At this point, we are done with the back-end.You now have a choice - to include your JavaScript code in Pug templates or have all your client-side JavaScript in a separate file - in app.js. I admit, when I first started with Node.js and JavaScript in general, I placed all JavaScript code inside templates because I have access to template variables passed in from Express right then and there. It's the easiest thing you can do, but also the least efficient and harder to maintain. Since then I almost never include inline JavaScript inside templates anymore.But it's also understandable if you want to take the easier road. Most of the time you don't even care about performance during hackathons, you just want to \""get shit done\"" before the time runs out. Well, either way, use whichever approach makes more sense to you. At the end of the day, it's what you build that matters, not how you build it.If you want to stick all your JavaScript inside templates, then in layout.pug - your main template file, add this to head block.script(src='/socket.io/socket.io.js')script.    let socket = io.connect(window.location.href);    socket.on('greet', function (data) {      console.log(data);      socket.emit('respond', { message: 'Hey there, server!' });    });Note: Notice the path of the socket.io.js, you don't actually have to have socket.io.js file anywhere in your project; it will be generated automatically at runtime.If you want to have JavaScript code separate from templates, move that inline script code into app.js, inside the $(document).ready() function:$(document).ready(function() {  // Place JavaScript code here...  let socket = io.connect(window.location.href);  socket.on('greet', function (data) {    console.log(data);    socket.emit('respond', { message: 'Hey there, server!' });  });});And we are done!Cheatsheets ES6 CheatsheetDeclarationsDeclares a read-only named constant.const name = 'yourName';Declares a block scope local variable.let index = 0;Template StringsUsing the `${}` syntax, strings can embed expressions.const name = 'Oggy';const age = 3;console.log(`My cat is named ${name} and is ${age} years old.`);ModulesTo import functions, objects, or primitives exported from an external module. These are the most common types of importing.const name = require('module-name');const { foo, bar } = require('module-name');To export functions, objects, or primitives from a given file or module.module.exports = { myFunction };module.exports.name = 'yourName';module.exports = myFunctionOrClass;Spread OperatorThe spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.myFunction(...iterableObject);<ChildComponent {...this.props} />PromisesA Promise is used in asynchronous computations to represent an operation that hasn't completed yet but is expected in the future.var p = new Promise(function(resolve, reject) { });The catch() method returns a Promise and deals with rejected cases only.p.catch(function(reason) { /* handle rejection */ });The then() method returns a Promise. It takes two arguments: callback for the success & failure cases.p.then(function(value) { /* handle fulfillment */ }, function(reason) { /* handle rejection */ });The Promise.all(iterable) method returns a promise that resolves when all of the promises in the iterable argument have resolved or rejects with the reason of the first passed promise that rejects.Promise.all([p1, p2, p3]).then(function(values) { console.log(values) });Arrow FunctionsArrow function expression. Shorter syntax & lexically binds the this value. Arrow functions are anonymous.singleParam => { statements }() => { statements }(param1, param2) => expressionconst arr = [1, 2, 3, 4, 5];const squares = arr.map(x => x * x);ClassesThe class declaration creates a new class using prototype-based inheritance.class Person {  constructor(name, age, gender) {    this.name   = name;    this.age    = age;    this.gender = gender;  }  incrementAge() {    this.age++;  }}🎁 Credits: DuckDuckGo and @DrkSephy.🔝 back to top JavaScript Date CheatsheetUnix Timestamp (seconds)Math.floor(Date.now() / 1000);moment().unix();Add 30 minutes to a Date objectvar now = new Date();now.setMinutes(now.getMinutes() + 30);moment().add(30, 'minutes');Date Formatting// DD-MM-YYYYvar now = new Date();var DD = now.getDate();var MM = now.getMonth() + 1;var YYYY = now.getFullYear();if (DD < 10) {  DD = '0' + DD;}if (MM < 10) {  MM = '0' + MM;}console.log(MM + '-' + DD + '-' + YYYY); // 03-30-2016console.log(moment(new Date(), 'MM-DD-YYYY'));// hh:mm (12 hour time with am/pm)var now = new Date();var hours = now.getHours();var minutes = now.getMinutes();var amPm = hours >= 12 ? 'pm' : 'am';hours = hours % 12;hours = hours ? hours : 12;minutes = minutes < 10 ? '0' + minutes : minutes;console.log(hours + ':' + minutes + ' ' + amPm); // 1:43 amconsole.log(moment(new Date(), 'hh:mm A'));Next week Date objectvar today = new Date();var nextWeek = new Date(today.getTime() + 7 * 24 * 60 * 60 * 1000);moment().add(7, 'days');Yesterday Date objectvar today = new Date();var yesterday = date.setDate(date.getDate() - 1);moment().add(-1, 'days');🔝 back to topMongoose CheatsheetFind all users:User.find((err, users) => {  console.log(users);});Find a user by email:let userEmail = 'example@gmail.com';User.findOne({ email: userEmail }, (err, user) => {  console.log(user);});Find 5 most recent user accounts:User  .find()  .sort({ _id: -1 })  .limit(5)  .exec((err, users) => {    console.log(users);  });Get the total count of a field from all documents:Let's suppose that each user has a votes field and you would like to count the total number of votes in your database across all users. One very inefficient way would be to loop through each document and manually accumulate the count. Or you could use MongoDB Aggregation Framework instead:User.aggregate({ $group: { _id: null, total: { $sum: '$votes' } } }, (err, votesCount)  => {  console.log(votesCount.total);});🔝 back to topDockerYou will need docker and docker-compose installed to build the application.Docker installationCommon problems setting up dockerAfter installing docker, start the application with the following commands :# To build the project for the first time or when you add dependenciesdocker-compose build web# To start the application (or to restart after making changes to the source code)docker-compose up webTo view the app, find your docker IP address + port 8080 ( this will typically be http://localhost:8080/ ).  To use a port other than 8080, you would need to modify the port in app.js, Dockerfile, and docker-compose.yml.DeploymentOnce you are ready to deploy your app, you will need to create an account with a cloud platform to host it. These are not the only choices, but they are my top picks.  Additionally, you can create an account with MongoDB Atlas and then pick one of the providers below. Again, there are plenty of other choices, and you are not limited to just the ones listed below.Deployment to RenderRender provides free nodejs hosting for repos on Github and Gitlab.Sign up for a free Individual account at https://render.comLink your Github accountCreate a Web ServiceAdd your repo and add your environment variables under the Advanced settings.Note 1: The automated deployments may not work, and you may need to manually trigger deployments after your commits.Hosted MongoDB AtlasGo to https://www.mongodb.com/cloud/atlasClick the green Get started free buttonFill in your information then hit Get started freeYou will be redirected to Create New Cluster page.Select a Cloud Provider and Region (such as AWS and a free tier region)Select cluster Tier to Free forever Shared ClusterGive Cluster a name (default: Cluster0)Click on green ⚡Create Cluster buttonNow, to access your database you need to create a DB user. To create a new MongoDB user, from the Clusters view, select the Security tabUnder the MongoDB Users tab, click on +Add New UserFill in a username and password and give it either Atlas Admin User PrivilegeNext, you will need to create an IP address whitelist and obtain the connection URI.  In the Clusters view, under the cluster details (i.e. SANDBOX - Cluster0), click on the CONNECT button.Under section (1) Check the IP Whitelist, click on ALLOW ACCESS FROM ANYWHERE. The form will add a field with 0.0.0.0/0.  Click SAVE to save the 0.0.0.0/0 whitelist.Under section (2) Choose a connection method, click on Connect Your ApplicationIn the new screen, select Node.js as Driver and version 3.6 or later.Finally, copy the URI connection string and replace the URI in MONGODB_URI of .env.example with this URI string.  Make sure to replace the  with the db User password that you created under the Security tab.Note that after some of the steps in the Atlas UI, you may see a banner stating We are deploying your changes.  You will need to wait for the deployment to finish before using the DB in your application.OpenShift**NOTE** *These instructions might be out of date due to changes in OpenShift. Render is currently a good free alternative.  If you know the new process, please feel free to help us update this page*First, install this Ruby gem: sudo gem install rhc 💎Run rhc login and enter your OpenShift credentialsFrom your app directory run rhc app create MyApp nodejs-0.10Note: MyApp is the name of your app (no spaces)Once that is done, you will be provided with URL, SSH and Git Remote linksVisit provided URL, and you should see the Welcome to your Node.js application on OpenShift pageCopy and paste Git Remote into git remote add openshift YOUR_GIT_REMOTEBefore you push your app, you need to do a few modifications to your codeAdd these two lines to app.js, just place them anywhere before app.listen():var IP_ADDRESS = process.env.OPENSHIFT_NODEJS_IP || '127.0.0.1';var PORT = process.env.OPENSHIFT_NODEJS_PORT || 8080;Then change app.listen() to:app.listen(PORT, IP_ADDRESS,() => {  console.log(`Express server listening on port ${PORT} in ${app.settings.env} mode`);});Add this to package.json, after name and version. This is necessary because, by default, OpenShift looks for server.js file. And by specifying supervisor app.js it will automatically restart the server when node.js process crashes.\""main\"": \""app.js\"",\""scripts\"": {  \""start\"": \""supervisor app.js\""},Finally, you can now push your code to OpenShift by running git push -f openshift masterNote: The first time you run this command, you have to pass -f (force) flag because OpenShift creates a dummy server with the welcome page when you create a new Node.js app. Passing -f flag will override everything with your Hackathon Starter project repository. Do not run git pull as it will create unnecessary merge conflicts.And you are done!Azure**NOTE** *Beyond the initial 12 month trial of Azure, the platform does not seem to offer a free tier for hosting NodeJS apps.  If you are looking for a free tier service to host your app, Render might be a better choice at this point*Login to Windows Azure Management PortalClick the + NEW button on the bottom left of the portalClick COMPUTE, then WEB APP, then QUICK CREATEEnter a name for URL and select the datacenter REGION for your web siteClick on CREATE WEB APP buttonOnce the web site status changes to Running, click on the name of the web site to access the DashboardAt the bottom right of the Quickstart page, select Set up a deployment from source controlSelect Local Git repository from the list, and then click the arrowTo enable Git publishing, Azure will ask you to create a user name and passwordOnce the Git repository is ready, you will be presented with a GIT URLInside your Hackathon Starter directory, run git remote add azure [Azure Git URL]To push your changes run git push azure masterNote: You will be prompted for the password you created earlierOn Deployments tab of your Windows Azure Web App, you will see the deployment historyIBM Bluemix Cloud PlatformNOTE At this point it appears that Bluemix's free tier to host NodeJS apps is limited to 30 days.  If you are looking for a free tier service to host your app, Render might be a better choice at this pointCreate a Bluemix AccountSign up for Bluemix, or use an existing account.Download and install the Cloud Foundry CLI to push your applications to Bluemix.Create a manifest.yml file in the root of your application.applications:- name:      <your-app-name>  host:      <your-app-host>  memory:    128M  services:  - myMongo-db-nameThe host you use will determinate your application URL initially, e.g. <host>.mybluemix.net.The service name 'myMongo-db-name' is a declaration of your MongoDB service.  If you are using other services like Watson for example, then you would declare them the same way.Connect and login to Bluemix via the Cloud-foundry CLI$ cf login -a https://api.ng.bluemix.netCreate a MongoDB service$ cf create-service mongodb 100 [your-service-name]Note: this is a free and experiment verion of MongoDB instance.Use the MongoDB by Compose instance for production applications:$ cf create-service compose-for-mongodb Standard [your-service-name]'Push the application$ cf push$ cf env <your-app-name >(To view the *environment variables* created for your application)Done, now go to the staging domain (<host>.mybluemix.net) and see your app running.More Bluemix samplesSimple ToDo app in a programming language of your choiceIBM WatsonBe sure to check out the full list of Watson services to forwarder enhance your application functionality with a little effort. Watson services are easy to get going; it is simply a RESTful API call. Here is an example of a Watson Toner Analyzer to understand the emotional context of a piece of text that you send to Watson.Watson catalog of servicesVirtual Assistant -    Deliver consistent and intelligent customer care across all channels and touchpoints with conversational AI.Natural Language Understanding - Analyze text to extract meta-data from content such as concepts, entities, keywords and more.Discovery - Accelerate business decisions and processes with an AI-powered intelligent document understanding and content analysis platform.Orchestrate - Hand off tedious tasks to Watson and never work the same way again.List of Watson Services.Google Cloud PlatformDownload and install Node.jsSelect or create a Google Cloud Platform Console projectEnable billing for your project (there's a $300 free trial)Install and initialize the Google Cloud SDKCreate an app.yaml file at the root of your hackathon-starter folder with the following contents:runtime: nodejsenv: flexmanual_scaling:  instances: 1Make sure you've set MONGODB_URI in .env.exampleRun the following command to deploy the hackathon-starter app:gcloud app deployMonitor your deployed app in the Cloud ConsoleView the logs for your app in the Cloud ConsoleProductionIf you are starting with this boilerplate to build an application for prod deployment, or if after your hackathon you would like to get your project hardened for production use, see prod-checklist.md.ChangelogYou can find the changelog for the project in: CHANGELOG.mdContributingIf something is unclear, confusing, or needs to be refactored, please let me know.Pull requests are always welcome, but due to the opinionated nature of this project, I cannot accept every pull request. Please open an issue before submitting a pull request. This project uses Airbnb JavaScript Style Guide with a few minor exceptions. If you are submitting a pull request that involves Pug templates, please make sure you are using spaces, not tabs.LicenseThe MIT License (MIT)Copyright (c) 2014-2023 Sahat YalkabovPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \""Software\""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED \""AS IS\"", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
28,microsoft/Windows-universal-samples,https://github.com/microsoft/Windows-universal-samples/blob/main/README.md,JavaScript,"Universal Windows Platform (UWP) app samplesThis repo contains the samples that demonstrate the API usage patterns for the Universal Windows Platform (UWP) in the Windows Software Development Kit (SDK) for Windows 10. These code samples were created with the Universal Windows Platform templates available in Visual Studio, and are designed to run on desktop, mobile, and future devices that support the Universal Windows Platform.Note: If you are unfamiliar with Git and GitHub, you can download the entire collection as aZIP file, but besure to unzip everything to access shared dependencies. For more info on working with the ZIP file,the samples collection, and GitHub, see Get the UWP samples from GitHub.For more samples, see the Samples portal on the Windows Dev Center.Universal Windows Platform developmentThese samples require Visual Studio and the Windows Software Development Kit (SDK) for Windows 10.Get a free copy of Visual Studio Community Edition with support for building Universal Windows Platform appsAdditionally, to stay on top of the latest updates to Windows and the development tools, become a Windows Insider by joining the Windows Insider Program.Become a Windows InsiderUsing the samplesThe easiest way to use these samples without using Git is to download the zip file containing the current version (using the following link or by clicking the \""Download ZIP\"" button on the repo page). You can then unzip the entire archive and use the samples in Visual Studio.Download the samples ZIPNotes:Before you unzip the archive, right-click it, select Properties, and then select Unblock.Be sure to unzip the entire archive, and not just individual samples. The samples all depend on the SharedContent folder in the archive.In Visual Studio, the platform target defaults to ARM, so be sure to change that to x64 or x86 if you want to test on a non-ARM device.The samples use Linked files in Visual Studio to reduce duplication of common files, including sample template files and image assets. These common files are stored in the SharedContent folder at the root of the repository, and are referred to in the project files using links.Reminder: If you unzip individual samples, they will not build due to references to other portions of the ZIP file that were not unzipped. You must unzip the entire archive if you intend to build the samples.For more info about the programming models, platforms, languages, and APIs demonstrated in these samples, please refer to the guidance, tutorials, and reference topics provided in the Windows 10 documentation available in the Windows Developer Center. These samples are provided as-is in order to indicate or demonstrate the functionality of the programming models and feature APIs for Windows.ContributionsThese samples are direct from the feature teams and we welcome your input on issues and suggestions for new samples. At this time we are not accepting new samples from the public, but check back here as we evolve our contribution model.This project has adopted the Microsoft Open Source Code of Conduct.For more information, see the Code of Conduct FAQor contact opencode@microsoft.com with any additional questions or comments.See alsoFor additional Windows samples, see Windows on GitHub.Samples by categoryApp settings   App package information  Application data  Store Audio, video, and camera   360-degree video playback  Adaptive streaming  Advanced capture    Advanced casting  Audio categories  Audio graphs    Background media playback  Basic camera app  Basic face detection    Basic face tracking  Basic media casting  Camera face detection    Camera frames  Camera preview frame  Camera profiles    Camera resolution  Camera stream coordinate mapper  Camera stream correlation    DASH streaming  Direct2D photo adjustment  Media editing    Media import  Media transport controls  MIDI    Playlists  PlayReady  Processing frames with OpenCV    Simple imaging  Spatial audio  System media transport controls    Transcoding media  Video playback  Video playback synchronization    Video stabilization  Windows audio session (WASAPI) Communications   Bluetooth RFCOMM chat  Real-time communication  SMS send and receive Contacts and calendar   Appointment calendar  Contact cards  Contact panel    Contact picker  UserDataAccountManager Controls, layout, and text   3D Printing  3D Printing from Unity  Bottom-up list (XAML)    Clipboard  Colored glyphs (DirectWrite)  Commanding    Context menu  Context menu (XAML)  Custom text edit control    Data virtualization  Display orientation  Downloadable fonts (DirectWrite)    Downloadable fonts (XAML)  Drag and drop  Focus visuals    Full screen mode  Gamepad-style navigation (XAML)  Line spacing (DirectWrite)    ListView and GridView  Lock screen apps  Message dialog    Multiple views  OCR  Printing    Scaling according to DPI  Secondary windows  Splash screen    State triggers  Tailored multiple views  Title bar    UI basics (XAML)  User interaction mode  WebView control (XAML)    Window resizing Custom user interactions   Basic input  Complex inking  Ink analysis    Low latency input  Pen haptics  Simple inking    Touch keyboard  Touch keyboard text input Data   Compression  Content indexer  Logging    PDF document  Serializing and deserializing data  x:Bind    x:DeferLoadStrategy  XML DOM  XmlLite Deep links and app-to-app communication   App services  Jump list customization  Remote systems    Sharing content source app  Sharing content target app  User activities Devices and sensors   Accelerometer  Activity detection sensor  AllJoyn consumer experiences    AllJoyn producer experiences  Altimeter  Background sensors    Barcode scanner  Barcode scanner provider  Barometer    Bluetooth advertisement  Bluetooth Low Energy  Cash drawer    Compass  Custom HID device  Custom sensors    Custom serial device  Custom USB device  Device enumeration and pairing    General Purpose Input/Output (GPIO)  Gyrometer  Presence sensor    Inclinometer  Inter-Integrated Circuit (I2C)  Lamp device    Light sensor  Line display  Magnetometer    Magnetic stripe reader  Near field communication (NFC)  NFC enterprise provisioner    Orientation sensor  Pedometer  POS printer    Proximity sensor  Radial controller  Relative inclinometer    Serial Arduino  Serial Peripheral Interface (SPI)  Simple orientation sensor Files, folders, and libraries   File access  File and folder thumbnail  File picker    File picker provider  File search  Folder enumeration    Library management  Semantic text query Gaming   Direct3D game  DirectX and XAML game Globalization and localization   Application resources and localization  Calendar  Date and time formatting    Globalization preferences  Japanese phonetic analysis  Language font mapping    Linguistic services  Number formatting and parsing  Text segmentation    Text suggestions  Unicode string processing Graphics and animation   Animated GIF playback (XAML)  Animation metrics  Composition visual without framework    Direct2D advanced color image rendering  Direct2D custom image effects  Direct2D gradient mesh    Direct2D SVG image rendering  Transform3D animations Holographic   Basic hologram  Holographic face tracking  Holographic mixed reality capture    Holographic spatial mapping  Holographic spatial stage  Holographic voice input    Spatial interaction source  Tag-along hologram    Mixed Reality Model Identity, security, and encryption   Credential locker  Client Device Information  Credential picker    Disabling screen capture  Enterprise data protection  KeyCredentialManager    Lock screen personalization  Microsoft Passport and Windows Hello  Smart cards    User information  UserCertificateStore  UserConsentVerifier    Web account management  WebAuthenticationBroker Launching and background tasks   Association launching  Background activation  Background task    Extended execution  Multi-instance apps  Suspend and resume Maps and location   Geolocation  Geotag  MapControl Navigation   Back Button  Master/detail  Pivot    Projection Networking and web services   Background transfer  DatagramSocket  HttpClient    JSON  Mobile broadband  Network connectivity    On-Demand Wi-Fi hotspot  Radios  Socket activity trigger stream socket    StreamSocket  Syndication  USSD protocol    WebSocket  Wi-Fi Direct  Wi-Fi Direct services    Wi-Fi hotspot authentication  Wi-Fi scanning Platform architecture   Capabilities  Custom capabilities  In-process component authoring    In-process component authoring  Out-of-process component authoring  Version adaptive code Speech and Cortana   Cortana voice command  Speech recognition and synthesis Tiles, toasts, and notifications   Notifications  Secondary tiles "
29,SheetJS/sheetjs,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
30,progedu/adding-up,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
31,hasura-imad/imad-2016-app,https://github.com/SheetJS/sheetjs/blob/github/README.md,JavaScript,"SheetJS🏠 New HomeThe new home for SheetJS CE is https://git.sheetjs.com/sheetjs/sheetjs, ahosted Gitea instance sponsored by SheetJS LLC.  SheetJS CE remains a trulyopen source project under the Apache 2.0 License.Issues should be raised at the new issue tracker.Users can register directly or sign in with a valid GitHub account.The documentationincludes instructions for using the new distribution points.Legacy distribution points (including the SheetJS/sheetjs Git repository onGitHub and the xlsx package on npmjs.com) will not be receiving updates.The SheetJS Community Edition offers battle-tested open-source solutions forextracting useful data from almost any complex spreadsheet and generating newspreadsheets that will work with legacy and modern software alike.SheetJS Pro offers solutions beyond data processing:Edit complex templates with ease; let out your inner Picasso with styling; makecustom sheets with images/graphs/PivotTables; evaluate formula expressions andport calculations to web apps; automate common spreadsheet tasks, and much more!💼 We're Hiring!SheetJS is looking for US-based software developers to expand this project andrelated software libraries and tools. https://sheetjs.com/careers more info.DocumentationAPI and Usage DocumentationDownloadable Scripts and ModulesRelated Projectshttps://oss.sheetjs.com/notes/: File Format Notesssf: Format data using ECMA-376 spreadsheet format codesxlsx-cli: NodeJS command-line tool for processing filestest_files: Sample spreadsheetscfb: Container (OLE/ZIP) format librarycodepage: Legacy text encodingsLicensePlease consult the attached LICENSE file for details.  All rights not explicitlygranted by the Apache 2.0 License are reserved by the Original Author."
32,cyclic-software/starter-rest-api,https://github.com/cyclic-software/starter-rest-api/blob/main/README.md,JavaScript,"Starter REST ApiThis is an example REST Api designed to be deployed on Cyclic.shExamplesCreate/Update - Insert/Upsertcurl -i https://localhost:3000/animals/rin%20tin%20tin \\    --data '{\""breed\"":\""German Shepard\"", \""gender\"": \""male\""}' \\    -XPOST -H 'Content-Type: application/json'Read All - Listcurl -i https://localhost:3000/animalsReadcurl -i https://localhost:3000/animals/lassyDeletecurl -i -XDELETE https://localhost:3000/animals/lassy"
33,wardviaene/docker-demo,https://github.com/cyclic-software/starter-rest-api/blob/main/README.md,JavaScript,"Starter REST ApiThis is an example REST Api designed to be deployed on Cyclic.shExamplesCreate/Update - Insert/Upsertcurl -i https://localhost:3000/animals/rin%20tin%20tin \\    --data '{\""breed\"":\""German Shepard\"", \""gender\"": \""male\""}' \\    -XPOST -H 'Content-Type: application/json'Read All - Listcurl -i https://localhost:3000/animalsReadcurl -i https://localhost:3000/animals/lassyDeletecurl -i -XDELETE https://localhost:3000/animals/lassy"
34,learn-co-students/js-beatles-loops-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-beatles-loops-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Beatles LoopsObjectivesBuild a for loopBuild a while loopBuild a do-while loopInstructionsMake sure you run the tests with learn.Create a function theBeatlesPlay, which accepts two parameters--an array ofmusicians and an array of instruments.Create a variable with an empty array.Use a for loop, which iterates over the array of musicians. Be carefulabout what value you set your counter variable to store. (Hint: Thinkabout what the first index of an array is).The first time through the loop, it should create a string using the firstindex of the musicians array and the first index of the instrumentsarray: \""John Lennon plays guitar\"".Add this string to the empty array you created. The loop should make thesame sentence for every member of the musicians array.The function should return the array of new strings containing whatinstruments each musician plays.Create a function johnLennonFacts.This function will accept one argument, an array of facts about JohnLennon (note that it might not be exactly the following facts):const facts = [  \""He was the last Beatle to learn to drive\"",  \""He was never a vegetarian\"",  \""He was a choir boy and boy scout\"",  \""He hated the sound of his own voice\""];Use a while loop to loop over the facts array and add \""!!!\"" to the end ofevery fact.Return an array of strings with exclamation points.Create a function iLoveTheBeatles which accepts a number as a parameter.The function should create a variable that stores an empty array.Implement a do-while loop inside the function that adds \""I love the Beatles!\"" to the empty array.The loop should then increment the number passed in as a parameter. Thecondition of the loop should check to see that the parameter number isless than 15. It should contain a number of strings that represents thedifference between the input number and 15.Return the array with the strings \""I love the Beatles!\""."
35,learn-co-students/js-deli-counter-bootcamp-prep-000,https://github.com/learn-co-students/js-deli-counter-bootcamp-prep-000/blob/master/README.md,JavaScript,"Deli Counter LabObjectivesAdd elements to an arrayReturn items from an arrayIterate through an arrayPass an array as a function parameterInstructionsA pretty important deli needs somebody to program the \""Take a Number\"" feature for their counter.At the beginning of the day, the deli is empty and is represented by an empty array, like var katzDeliLine = [];. However,  you don't need to code the array as a variable, since the test scripts will create it and pass it to the functions you are about to build.Build a function that a new customer will use when entering the deli. The function, takeANumber, should accept two parameters: the current line of people, along with the new person's name. The function should return a welcome message including the new person's position in line, such as \""Welcome, Ada. You are number 1 in line.\"". And don't go being too programmer-y and give them their index. These are normal people. If they are 7th in line, tell them that. Don't get their hopes up by telling them they are number 6 in line.Build a function nowServing. This function should accept the current line of people (katzDeliLine) and return the first person in line and then remove that individual from the line. If there is nobody in line, it should return \""There is nobody waiting to be served!\""Build a function currentLine that accepts the current line of people and returns the current line as a string; for example, if 'katzDeliLine' is currently [\""Ada\"", \""Grace\""], currentLine(katzDeliLine) would return \""The line is currently: 1. Ada, 2. Grace\"".  You don't have to use katzDeliLine as a variable or parameter name in your function though, it's just an example of a variable that might be passed to it. If there is nobody in line, it should return \""The line is currently empty.\""HintExample usage:var katzDeliLine = [];takeANumber(katzDeliLine, \""Ada\""); // \""Welcome, Ada. You are number 1 in line.\""takeANumber(katzDeliLine, \""Grace\""); // \""Welcome, Grace. You are number 2 in line.\""takeANumber(katzDeliLine, \""Kent\""); // \""Welcome, Kent. You are number 3 in line.\""currentLine(katzDeliLine); // \""The line is currently: 1. Ada, 2. Grace, 3. Kent\""nowServing(katzDeliLine); // \""Currently serving Ada.\""currentLine(katzDeliLine); // \""The line is currently: 1. Grace, 2. Kent\""takeANumber(katzDeliLine, \""Matz\""); // \""Welcome, Matz. You are number 1 in line.\""currentLine(katzDeliLine); // \""The line is currently: 1. Grace, 2. Kent, 3. Matz\""nowServing(katzDeliLine); // \""Currently serving Grace.\""currentLine(katzDeliLine); // \""The line is currently: 1. Kent, 2. Matz\""View Deli Counter Lab on Learn.co and start learning to code for free."
36,udacity/frontend-nanodegree-mobile-portfolio,https://github.com/udacity/frontend-nanodegree-mobile-portfolio/blob/master/README.md,JavaScript,"Website Performance Optimization portfolio projectYour challenge, if you wish to accept it (and we sure hope you will), is to optimize this online portfolio for speed! In particular, optimize the critical rendering path and make this page render as quickly as possible by applying the techniques you've picked up in the Critical Rendering Path course.To get started, check out the repository and inspect the code.Getting startedPart 1: Optimize PageSpeed Insights score for index.htmlSome useful tips to help you get started:Check out the repositoryTo inspect the site on your phone, you can run a local server$> cd /path/to/your-project-folder$> python -m SimpleHTTPServer 8080Open a browser and visit localhost:8080Download and install ngrok to the top-level of your project directory to make your local server accessible remotely.$> cd /path/to/your-project-folder$> ./ngrok http 8080Copy the public URL ngrok gives you and try running it through PageSpeed Insights! Optional: More on integrating ngrok, Grunt and PageSpeed.Profile, optimize, measure... and then lather, rinse, and repeat. Good luck!Part 2: Optimize Frames per Second in pizza.htmlTo optimize views/pizza.html, you will need to modify views/js/main.js until your frames per second rate is 60 fps or higher. You will find instructive comments in main.js.You might find the FPS Counter/HUD Display useful in Chrome developer tools described here: Chrome Dev Tools tips-and-tricks.Optimization Tips and TricksOptimizing PerformanceAnalyzing the Critical Rendering PathOptimizing the Critical Rendering PathAvoiding Rendering Blocking CSSOptimizing JavaScriptMeasuring with Navigation Timing. We didn't cover the Navigation Timing API in the first two lessons but it's an incredibly useful tool for automated page profiling. I highly recommend reading.The fewer the downloads, the betterReduce the size of textOptimize imagesHTTP cachingCustomization with BootstrapThe portfolio was built on Twitter's Bootstrap framework. All custom styles are in dist/css/portfolio.css in the portfolio repo.Bootstrap's CSS ClassesBootstrap's ComponentsArchival NoteThis repository is deprecated; therefore, we are going to archive it. However, learners will be able to fork it to their personal Github account but cannot submit PRs to this repository. If you have any issues or suggestions to make, feel free to:Utilize the https://knowledge.udacity.com/ forum to seek help on content-specific issues.Submit a support ticket along with the link to your forked repository if (learners are) blocked for other reasons. Here are the links for the retail consumers and enterprise learners."
37,dimsemenov/Magnific-Popup,https://github.com/dimsemenov/Magnific-Popup/blob/master/README.md,JavaScript,"🇺🇦 UKRAINE NEEDS YOUR HELP NOW!I'm the creator of this project and I'm Ukrainian.My country, Ukraine, is being invaded by the Russian Federation, right now. I've fled Kyiv and now I'm safe with my family in the western part of Ukraine. At least for now.Russia is hitting target all over my country by ballistic missiles.Please, save me and help to save my country!Ukrainian National Bank opened an account to Raise Funds for Ukraine’s Armed Forces:SWIFT Code NBU: NBUA UA UXJP MORGAN CHASE BANK, New YorkSWIFT Code: CHASUS33Account: 400807238383 Madison Avenue, New York, NY 10179, USAIBAN: UA843000010000000047330992708You can also donate to charity supporting Ukrainian army.THANK YOU!Magnific Popup RepositoryFast, light and responsive lightbox plugin, for jQuery and Zepto.js.Documentation and getting started guide.Examples and plugin home page.More examples in CodePen collection.Optionally, install via Bower bower install magnific-popup or npm: npm install magnific-popup.Ruby gem: gem install magnific-popup-rails.ExtensionsWordPress plugin - under development.Drupal module.Concrete5 add-on.Redaxo add-on.Contao extension.If you created an extension for some CMS, email me and I'll add it to this list.Location of stuffGenerated popup JS and CSS files are in folder dist/. (Online build tool is on documentation page).Source files are in folder src/. They include Sass CSS file and js parts (edit them if you wish to submit commit).Website (examples & documentation) is in folder website/.Documentation page itself is in website/documentation.md (contributions to it are very welcome).Using Magnific Popup?If you used Magnific Popup in some interesting way, or on site of popular brand, I'd be very grateful if you email me a link to it.BuildTo compile Magnific Popup by yourself, first of make sure that you have Node.js, Grunt.js, Ruby and Jekyll installed, then:Copy repositorygit clone https://github.com/dimsemenov/Magnific-Popup.gitGo inside Magnific Popup folder that you fetched and install Node dependenciescd Magnific-Popup && npm installNow simply run grunt to generate JS and CSS in folder dist and site in folder _site/.gruntOptionally:Run grunt watch to automatically rebuild script when you change files in src/ or in website/.If you don't have and don't want to install Jekyll, run grunt nosite to just build JS and CSS files related to popup in dist/.ChangelogLicenseScript is MIT licensed and free and will always be kept this way. But has a small restriction from me - please do not create public WordPress plugin based on it(or at least contact me before creating it), because I will make it and it'll be open source too (want to get notified?).Created by @dimsemenov & contributors.Bugs & contributingPlease report bugs via GitHub and ask general questions through Stack Overflow. Feel free to submit commit pull-request, even the tiniest contributions to the script or to the documentation are very welcome."
38,learn-co-students/javascript-logging-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-logging-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('mocha-jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll seedescribe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining to tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we got back to index.js and write something like,console.log(\""I would be a logger.\"") // get it?we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
39,progedu/fibonacci,https://github.com/learn-co-students/javascript-logging-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Logging LabObjectivesPractice using console.log()Practice using console.error()Practice using console.warn()IntroductionWelcome to your first JavaScript lab! You'll notice a few new things in this lesson that we haven't encountered before. Don't worry, we'll walk you through them.Tests...The first new thing you'll notice is tests.  When we want to run an experiment, we need to develop a hypothesis and we need to test it. So if we want to experiment with whether adding salt to ice water makes it hotter or colder, we need to design an experiment that controls for all of the other variables: we need to isolate our experiment from parts of its environment that aren't relevant to what we hope to test.In programming, tests place the scientific method into computer science. We run tests to verify that our programs behave the way we think they do. Tests help us identify bugs, and they give us a sense of the health of our applications.On Learn, we use tests as teaching tools. Just like in a normal coding environment, we use tests to describe the program's behavior. Unlike in a normal coding environment, you, not we, are in charge of getting the tests to pass — that is, making the app behave like we expect it to.StructureThe structure of this lab — where its files and folders are located — looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── index-test.jsAll labs will more or less have the same structure. (And READMEs, for that matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)index.js might be called something else (something more descriptive) in other labs, and so test/index-test.js would be renamed accordingly. But index.js is also descriptive in its own right, defining something of an entry point for finding one's way around the app. This is often the file where you will write your code. (Later on, we'll introduce index.html and index.css — you'll have to update or refer to these files sometimes, too!)Code-alongFor now, open up index.js in your text editor. If you're using the Learn IDE, click the \""Open\"" button on this lessonyour IDE should open up. You'll see a sidebar like this:If you open up that \""javascript-logging-lab...\"" folder, you'll see a list of files (along with a test/ directory). Click index.js, and it will open in the editor.In index.js, you should see, well, nothing. We'll fix that soon.Now open up test/index-test.js. Hey, there's something! What's all of this stuff doing?At the very top of the file, you'll seeconst expect = require('expect')const fs = require('fs')const jsdom = require('mocha-jsdom')const path = require('path')This might be a bit bewildering, but at this point, we don't need to be able to write any of this code, or even understand every line perfectly.  All we need is to understand enough so that we can get a sense of what the test is asking us to accomplish, so that we can make the test pass.  Let's go through it.In these first lines, all we're doing is referencing different libraries that help us run your tests. A library is code that someone else (usually multiple someone elses) wrote for our use. Note that require won't work out of the box in the browser. We're actually running our tests in a different environment. (Remember the sandbox analogy from earlier? It's just like that.)A little farther down the page, you'll seedescribe('index', () => {  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're using Mocha) — it's basically a container for our tests.Then we have a few chunks likeit('calls console.error()', () => {  // this is where the tests are!})Each of these chunks describes a behavior that we expect the main program to implement. As you can see, they describe that behavior pretty carefully — in this example, we know that our main file should call console.error() — pretty simple, right?Don't worry too much yet about what's happening inside these chunks. Sometimes we'll need to do some pretty fancy footwork to test some pretty basic things; other times, and as time goes on, you'll be able to read and understand basically what our tests are expecting.And that'll be great! These aren't like tests that we all took in school: they're testing behavior, not information. Tests are meant to be as transparent as possible about what they're doing, and as you grow as a programmer, it's important to understand more and more what the aims of tests are.In some of our tests, you'll see lines like the following:jsdom({  src: fs.readFileSync(path.resolve(__dirname, '..', 'index.js'), 'utf-8')})This line reads index.js (remember how we said we'd modify that?) and adds its code to the execution environment. The \""execution environment\"" is simply where our code runs.Running the TestsTo run the tests, simply type learn test in the terminal part of the Learn IDE. (The terminal is the part below where you've been coding.) You should see something likeFor the moment, all of the tests fail. Let's figure out how to get one of them passing! (The rest will be up to you.)Let's take the first one. The test description says, \""index calls console.error()\"". So it sounds like, pretty straight-forwardly, like we should call console.error() somewhere in index.js. \""Calling\"" a function means invoking it, causing it to act. We call functions with parentheses: console.error is a function, but console.error() is a call to the function.In index.js, add a call to console.error() — you can call it with anything you like (as long as the syntax is valid). We're going to go withconsole.error(\""HALP!\"")Because it seems sufficiently dire. Remember to save your file.Anyway, let's run the tests again. In the Learn IDE's terminal, runlearn testWe should now see:Nice! We got the first one to pass!A note about spiesYou might often see errors like the ones above: \""Uncaught error: spy was not called\"". Spies are little bits of code that keep track of whether or not theywere called. We use them to make sure that a function is called when we expectit to be called.We'll try to rewrite these error messages when possible to be more descriptiveabout what kinds of calls we expected; but know that sometimes, especially lateron, we leave the errors intentionally ambiguous for you to work out.Your turnNow it's your turn — can you follow a flow similar to the one we followedtogether above to get the remaining to tests to pass?Imagine that you're building the user interface for a fancy ATM machine.Because the developers are hip with the latest trends, they're usingJavaScript for the user-facing parts.We need a way to send messages to the user: some messages are just updates,some are warnings (the user should not continue doing what they just did),and some are errors (something broke, and we need to recover).Your job is to identify a way of sending each kind of message. Hint: inJavaScript, you'll probably find ways of telling users things with console.And again, remember to save your files before you re-run your tests.When all of your tests pass, be sure to run learn submit to move on to thenext lesson.Feeling stuck?In the above, when we ran our tests and saw the message \""index callsconsole.error()\"", we wrote,console.error(\""HALP!\"")Now when we run the tests again and see \""index calls console.log()\"", we shouldlook at what is the same and what is different between this message and theprevious one. It looks like they're basically the same except for one tellsus to call console.error() and the other tells us to call console.log().So if we got back to index.js and write something like,console.log(\""I would be a logger.\"") // get it?we're now calling console.log() with a different string. Similarly, when wesee the message \""index calls console.warn()\"", we know that we can go back to ourcode and write something with console.warn(). You've got this!ResourcesnpmView JavaScript Logging Lab on Learn.co and start learning to code for free."
40,hasura/imad-app,https://github.com/hasura/imad-app/blob/master/README.md,JavaScript,imad-appIMAD course application.
41,GoogleChrome/chrome-extensions-samples,https://github.com/GoogleChrome/chrome-extensions-samples/blob/main/README-template.md,JavaScript,"To create a README for your sampleCopy this file to your sample folder.Enter the requested information below.Delete all intructions.For API samples use the name of the API. For example, a sample about the chrome.declarativeNetRequest would simply be called \""chrome.declarativeNetRequest\"". (Do not use special formatting in headings.) For functional samples, the title should be what the sample demonstratesTitleDescribe what the sample demonstrates. If this is an API sample, link to the API.This sample demonstrates ...OverviewDescribe how the sample demonstrates the API or use case and briefly describe how to use it.Implementation NotesAdd any information that doesn't fit elsewhere in the README.Running this extensionClone this repository.Load this directory in Chrome as an unpacked extension.Add the rest of the instructions here"
42,learn-co-curriculum/phase-0-html-document-structure-lab,https://github.com/learn-co-curriculum/phase-0-html-document-structure-lab/blob/master/README.md,JavaScript,"Document Structure ContinuedLearning GoalsRecognize basic HTML document structureRecognize HTML commentsDescribe the head section and its contentsCreate an HTML documentIntroductionEvery HTML document has a specific set of required tags. Because these arerequired every time we create a web page, it is valuable to gain a morein-depth understanding of what these tags do, why they are useful, and how theywork in context to the modern web.We will be both reviewing setting up well-formed HTML documents and expanding abit on the DOCTYPE, html and head tags, as well as introducing how to addcomments within our HTML code.Getting StartedIf you haven't already, fork and clone this lesson into your localenvironment. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Recognize Basic HTML Document StructureLet's start by adding the bare essentials of an HTML document to the providedindex.html file:A DOCTYPE tag, which looks like this: <!DOCTYPE html>Opening and closing html tagsOpening and closing head tags nested inside the html tagsOpening and closing body tags nested inside the html tagsNote: Recall that best practice indicates that any HTML elements that arenested inside other HTML elements (i.e., between the opening and closing tagsof another element) should be indented. It is not necessary to useindenting, either for the HTML to render properly or to pass the tests, butit's a good habit to get into. Go ahead and indent the head and body tagsinside the html tags, if you haven't already.If written correctly, running npm test now will pass three of the seventests:has a DOCTYPE taghas opening and closing HTML tagshas <head> and <body> tags nested in the <html> tagHowever you will not be done yet! We have to make all the tests pass inorder to make the test code happy! Let's get to it!Let's take a closer look at these tags.<!DOCTYPE html>At the top of every HTML document, you're always going to start off with thesame element, DOCTYPE. In the early days of the internet, there were fewerstandards, and it was important to declare the specific way we wanted browsersto interpret the file at the top of each file. Netscape and Internet Explorerwould look for this declaration and handle the content differently depending onwhat it found. These days, every current browser is compatible with HTML5, andDOCTYPE is mainly used to tell the browser to render the page in standardscompliant mode.The DOCTYPE element, as with all HTML, starts with a < and ends with a >.Uniquely, the DOCTYPE tag starts with an exclamation point, !, followed byDOCTYPE, then specifies which version of HTML we want to use. In HTML5, wejust write html and the browser interprets the rest of the document as HTML5.<html>The next element is also always required: <html>. This tells the browser thateverything that falls between the opening and closing html tags is to beinterpreted as HTML code.One attribute that is important to include in the <html> tag is lang, whichdeclares what language the webpage is written in. In our case, writing inEnglish, we will use lang=\""en\"". This helps search engines to know whatlanguage a page is written in. Google, for instance, can use the langattribute to know when to prompt users about translating web content.<html lang=\""en\""></html>Go ahead and add the language attribute to the html element. Now, if you runthe tests again, there should be four passing.Recognize HTML CommentsSometimes we want to leave notes either for ourselves or for other developersinside of our HTML files. An example might be a brief explanation of what somepart of the code is doing, or an important message or reminder. We can writecomments by wrapping the text we want like so:<!-- This is a comment! -->Text included in a comment will not be visible on the webpage, but will bevisible in the browser console and .html file.Describe the head Section and its ContentsInside our html tags, we divide the page into two main sections, head, andbody, which both play unique roles. The remainder of our HTML lessons willcover everything within the body section, but before we get there, there aresome additional bits of information we need to understand regarding the head.The head section is not visible to a website visitor, but it contains a lot ofuseful info about our webpage.In the head section, we place a number of specific tags, most notably:<link><title>Let's look at each of them in turn:linkThe <link> tag is for importing files.CAREFUL: It's easy to get confused here because web pages are full of links,but also use a <link> tag. \""Links\"" that you click on are located within the<body> element. The <link> tags are located in the <head> element.Most commonly, we'll use <link> to import CSS files. Go ahead and add thefollowing inside your head element (don't forget to indent!):<link rel=\""stylesheet\"" type=\""text/css\"" href=\""style.css\"" />With a simple website, linking a single style sheet might work just fine. Often,however, on fully developed websites, multiple style sheets are linked in thehead. For example, when doing the final polishing of a web site you might seea series of <link> definitions like:<link  rel=\""stylesheet\""  href=\""https://stackpath.bootstrapcdn.com/bootstrap/4.1.1/css/bootstrap.min.css\""/><link rel=\""stylesheet\"" type=\""text/css\"" href=\""company.css\"" /><link rel=\""stylesheet\"" type=\""text/css\"" href=\""engineering-department.css\"" /><link rel=\""stylesheet\"" type=\""text/css\"" href=\""project-x-launch.css\"" /><link rel=\""stylesheet\"" type=\""text/css\"" href=\""typography.css\"" />In this example we're getting some CSS information from theBootstrap project, we're integrating a companystyle standard, an engineering style standard, a style motif for the launch of\""Project X\"" and then we're adding some specific rules about font display. Youcan bring in a lot of information with the <link> tag!This specific example aside, you'll be learning a lot more about linking filesto create stylistic effect in later lessons.Run the test again; you should now have five passing. Only two more to go!titleOne more common tag we find in the head is title. The title, as its nameimplies, is where the title of the webpage should be entered. Text added insidethe title tags will appear up on your browser tab. Add the following title forour index.html page:<title>My Site Title</title>Notice that unlike the previous tags we've discussed, title has an opening andclosing tag. In most modern browsers, tabs are fairly small, so it is often bestto keep the title brief, or it will not be fully visible.Adding the title should get the last two tests passing! Run the tests one lasttime to verify.As always, don't forget to push up your code and submit it using CodeGrade onceeverything is passing.ConclusionIn this lesson, we've reviewed the basics of document structure, as well as whatis typically contained within the head. Using the head section, we are ableto add relevant data about our webpage as a whole. As a bonus surprise, bylearning how to make our web pages search engine friendly, we've also dabbleda bit into the basics of Search Engine Optimization! We are now ready to take adeeper dive into the visual content of HTML pages."
43,learn-co-curriculum/phase-0-html-lists-lab,https://github.com/learn-co-curriculum/phase-0-html-lists-lab/blob/master/README.md,JavaScript,"HTML ListsLearning GoalsRecognize unordered and ordered HTML ListsCreate unordered listsIdentify the ordered list tagCreate ordered listsIntroductionMany HTML tags behave in unique ways. Some apply automatic styling, like ptags that create margins around text. Some, like the header tags, increase thefont size. Using these tags delineates our content. When reading HTML, using thecorrect tags informs us of what the content's purpose is. If we see an h1 tag,we know that we're looking at a big page header. In this lesson, we're goingto be looking at a few new tags that help us organize lists of relatedcontent.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize Unordered And Ordered HTML ListsLet's say, for instance, we were building a personal website and wanted to listout our favorite foods. We could write this like so:<body>  <p>Banh Mi</p>  <p>Grilled Cheese</p>  <p>Baba Ghanoush</p>  <p>Tomato soup</p>  <p>Cheese and crackers</p>  <p>Sushi</p></body>The above would create a new line on the page for each food, but doesn't reallyindicate that these things are related. Using the built in ul, ol and liHTML tags however, we can group related list content together. We call such agrouping a \""list.\""In HTML, we create lists using the <ul> tag, which stands for unorderedlist, along with the <li> tag for each list item.To make a list, we write out the opening and closing <ul> tags, and insidethem, we'll add <li> tags, each listing a single item. Going back to ourfavorite foods example, if we wanted to convert it to a list, it would look likethis:<ul>  <li>Banh Mi</li>  <li>Grilled Cheese</li>  <li>Baba Ghanoush</li>  <li>Tomato soup</li>  <li>Za’atar Bread</li>  <li>Sushi</li></ul>Now, instead of just having each item show up on a new line, the content willalso be slightly indented and a bullet will appear next to each of them.Lists are very flexible and we can even nest lists inside of lists. Say wewanted to break down our favorite foods by category. We may have multiplecategories and one or more items in each:<ul>  <li>    Sandwiches    <ul>      <li>Banh Mi</li>      <li>Grilled Cheese</li>    </ul>  </li>  <li>    Snacks    <ul>      <li>Baba Ghanoush</li>      <li>Za’atar Bread</li>    </ul>  </li>  <li>    Soups    <ul>      <li>Tomato soup</li>    </ul>  </li>  <li>    Sushi    <ul>      <li>Sashimi</li>      <li>Uramaki</li>    </ul>  </li></ul>In this example, the nested lists will now be further indented and instead ofa solid bullet, they will appear with hollow bullets, indicating a sub-list.Adding a nested list one level deeper will make square bullets appear,allowing us to easily display related and nested content in a readable format.Create Unordered ListsThe first part of this challenge is to make the first 2 tests pass by:Creating an unordered listNesting each grilled cheese ingredient as a list item wrapped in <li> tagsOpen index.html in your browser.Let's say we wanted to list out the ingredients required for making a grilledcheese sandwich. The ingredients are: 2 slices of bread, 4 slices of cheese,1 tbsp of butter.For the first part of this challenge, in index.html, create an unordered listthat displays these ingredients. Run npm test to see if you can pass the firsttest. If you've done things correctly, you'll now be passing the first test, butthere are more tests to pass! We now need to turn our attention to the nexttest.Okay, now, let's say we wanted to make our grilled cheese a little more excitingand add a couple of cheeses, cheddar, mozzarella, and pepper jack.To pass the second test, inside the li with 4 slices of cheese, add anested unordered list that lists out the three types of cheese.After editing your index.html file, go back to the browser and refresh thepage you opened earlier. You should see something like this if you've set upyour lists correctly:2 slices of bread4 slices of cheesecheddarmozzarellapepper jack1 tbsp of butterRun npm test again. If your first two tests are passing, great! It's time totalk about another type of list!Identify the Ordered List TagUnordered lists are great for organizing related content where it doesn't matterwhat goes first, like in our grilled cheese ingredients. In situations where wewant items to be displayed in a specific, numbered order, we will want to usethe ordered list tag, which is written as <ol> instead of <ul>. Both use<li> tags inside, but this time, <ol> will display a numbered list insteadof bullets. If say, we wanted to write a ranked list of favorite foods, itmight look like:<h3>Top 5 Favorite Foods</h3><ol>  <li>Grilled Cheese</li>  <li>Sushi</li>  <li>Banh Mi</li>  <li>Tomato soup</li>  <li>Baba Ghanoush</li></ol>Top Tip: Feel free to test this out by adding it to index.html, saving andrefreshing the tab where the file is open. Now, Grilled Cheese will bedisplayed as 1. Grilled Cheese as the #1 food (where it belongs).Once you've got a feel for how this ordered list looks in HTML and how it'sdisplayed in the browser, delete the example code from your index.html file soyou can create a new one from scratch for the next deliverable.Nested ordered lists work the same as unordered, but instead of hollow andsquare bullets, each nested list will still display numbers.Note: To create a nested list, you must provide the ol or ul wrapper.Otherwise, an li inside another li will just be displayed as two items atthe same level.Create Ordered ListsTo complete the challenge write the necessary HTML to pass the final test:Create an ordered list with each step for creating grilled cheese as a listitem wrapped in <li> tagsOkay, so we've got our grilled cheese ingredients, but what about the stepsrequired to make a grilled cheese? Steps to a recipe need to be in order,otherwise we may end up with burnt cheese covered in bread and topped with asquare of butter. The steps to making a basic grilled cheese would be:Spread butter on bread and frying pan, Place bread in frying pan and fry,Add cheese on top of bread, Cover with second slice of bread,Turn over and fry for 2 minutes.After editing your index.html file, go back to the browser and refresh thepage you opened earlier. Your newly added list should look like this:Spread butter on bread and frying panPlace bread in frying pan and fryAdd cheese on top of breadCover with second slice of breadTurn over and fry for 2 minutesOnce you've written an ordered list that displays these 5 steps correctly, runnpm test to see the tests pass.ConclusionLists in HTML are very useful for organizing related content, and are really theonly way to indicate that content is related with basic HTML. Using unorderedlists ends up being very useful for more than just listing favorite foods andingredients. It's possible, for instance, to use list elements to organizenavigation links. With styling, we make the content look however we want —remove the bullets, make them line up horizontally — but in our HTML they willstill be organized and easy to read."
44,learn-co-curriculum/phase-0-html-tables-lab,https://github.com/learn-co-curriculum/phase-0-html-tables-lab/blob/master/README.md,JavaScript,"HTML TablesLearning GoalsRecognize basic HTML table elementsCreate HTML tablesIntroductionIn HTML, we can create lists of related content using unordered and orderedlists, and they will display line by line in the order we put them in. Sometimesas web developers, though, we need to display more complex data. For instance,imagine you are working with a financial company and need to display acollection of transactions, each with a title, value, time, and category. Or,imagine that you've been hired by a marketing company and need to display a listof the most popular Instagram accounts, each with their username, theowner of the account, and the number of followers. For sets of data like this,with many separate components, the best way to display would be to put the datainto a table.HTML has a built in way to display tables! In this lesson, we will be reviewinghow tables work and how to make our own.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Recognize Basic HTML Table ElementsThe Table Tag: <table>The first thing we need in order to create a table is to write opening andclosing <table> tags.<table></table>This tells our browser to interpret anything inside as part of the table. Whatmakes up a table, exactly? A table has rows and columns, which together createindividual cells, as well as headers to label what each column is for.In HTML, we define these table components using individual elements that we nestinside our table tags.The Table Row Tag: <tr>It's important to note: order really matters when building a table in HTML!We're trying to display a two-dimensional table, but browsers interpret HTMLline by line. For this reason, HTML tables were designed so that there is notag for columns, only rows. If you were creating a table with 5 rows and 5columns, in designing the table, we would actually have to create 5 rows, eachwith 5 individual cells inside. When displayed, the cells in each row willline up to look like columns.Table rows always come first. To make a row inside our table, we use the tablerow tag, <tr>. So if we wanted to have four rows in our table, including arow of headers, setting up the rows it would look like this:<table>  <tr></tr>  <tr></tr>  <tr></tr>  <tr></tr></table>Any content we want in a row would go inside that particular <tr>.The Table Header Tag: <th>Tables generally start with a row of headers to label each column, so the firsttr tag we write will be dedicated to these headers.To create headers, we use <th>, the table header tag. Let's say we werecreating a list of guests to a party. The first column might have a headercalled 'Name' for the guest's name, the second, the guest's 'Phone Number', andthe third, what the guest is 'Bringing' to the party.These headers need to go in the first row, so that may look something like:<table>  <tr>    <th>Name</th>    <th>Phone Number</th>    <th>Bringing</th>  </tr>  <tr></tr>  <tr></tr>  <tr></tr></table>Even though we write the HTML from top down, we would see these headers in boldand lined up left to right. We can open up index.html right now to take alook to confirm.This first row is almost always the only place where we use the th tag.The Table Data Tag: <td>In the second row, we can start putting in our data. Here, we want to use thetable data tag, <td> instead of using the table header tag. The <td> tagrepresents one table cell. So, for our party table, we can add in some names,phone numbers and items for guests to bring. An example row would look like thefollowing:<tr>  <td>Daniel</td>  <td>718-555-1212</td>  <td>Guacamole</td></tr>As long as each bit of data in a <td> is in the same position as thecorresponding <th> in the first row, it will show up in that column.Repeating this structure, if we wanted to include 3 guests for our party, ourentire table would look like the following:<table>  <tr>    <th>Name</th>    <th>Phone Number</th>    <th>Bringing</th>  </tr>  <tr>    <td>Daniel</td>    <td>718-555-1212</td>    <td>Guacamole</td>  </tr>  <tr>    <td>Rachel</td>    <td>718-555-1212</td>    <td>Chips</td>  </tr>  <tr>    <td>Terrance</td>    <td>914-555-1212</td>    <td>Salsa</td>  </tr></table>Paste this into index.html and take a look at how it is displayed in browser.You'll see we've got a table with 4 rows and 3 columns! Each \""column\"" of contentexpands to fit the width of the content. It should look something like this:NamePhone NumberBringingDaniel718-555-1212GuacamoleRachel718-555-1212ChipsTerrance914-555-1212SalsaCreate HTML TablesOkay, now it's time to put what we've learned to the test. For this challenge,your task is to recreate a table using the following data:The above table shows total population of the 4 biggest cities in the US. We cansee there are 3 headers, \""City\"", \""State\"", and \""2017 estimate\"", and data for eachof the four cities.To complete this task, follow the order of table creation we discussed earlier:Create a table, and place rows inside,Dedicate the first row to just headersAdd in the data in the appropriate order so that each city name falls underthe \""City\"" column, each state is under \""State\"", etc...Run npm test to test your work and see your progress. The tests also includethe exact population numbers, so feel free to copy them from the errors!ConclusionWith table, tr, th and td, we are able to turn line by line HTML into atable with rows and columns! It may seem counterintuitive at first to list outrow content separately, but with this, you can represent all sorts of data!"
45,learn-co-curriculum/phase-0-html-tag-lab,https://github.com/learn-co-curriculum/phase-0-html-tag-lab/blob/master/README.md,JavaScript,"Your First HTML Tag LabLearning GoalsCode an h1 tagSet the inner text of the h1 to Hello, World!IntroductionSo far, we've seen how to markup content with HTML, how to structure an HTMLdocument and what HTML tags look like. Now let's focus on writing a single HTMLtag from scratch and examining each of its parts.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode. Run npm test as you go to see your test progress.Code an h1 TagOpen index.html in your text editor. Add the h1 opening and closing tags.Set the Inner TextInside of the opening and closing h1 tags, insert the text: Hello, World!.Check your progress by running npm test. Failing tests will provide helpfulerror messages that you can use to debug your code — read them closely forhints!Viewing Your Work in the BrowserWhile working through these assignments, your general workflow should center onwriting code in the text editor and periodically running the test suite in theterminal to check your work.Another great way to track your progress is to open up the HTML document in yourbrowser and watch how each change you make in the text editor affects the visuallayout in the browser.You can open index.html a few ways, depending on the environment you are in:For Mac users:Open from the Terminal by running open index.html in the root directory ofthis labUse Finder to navigate to this lab's local folder and click the index.htmlfileFor WSL users:Open from Ubuntu by running explorer.exe index.html in the root directory ofthis labOpen a new Explorer window. There is a bar that says \""Quick Access\"" along thetop of the window (similar to a URL bar in a browser). Click this and type\\\\wsl$ to access files and folders on Ubuntu. Navigate to/home/<your-user-name>/ to get to your home directory, then locate thislab's local folder and click the index.html file.Once you have the HTML document open in your browser, you can make changes to itin a text editor, save the file, refresh the page in the browser, and see thechanges.ConclusionCongratulations! You wrote your first HTML tag. Now you can use your knowledgeof this basic building block to learn more HTML tags and see how they work witheach other to create an entire HTML document structure. Remember to submit yourwork in CodeGrade before moving on.Resourcesh1-h6 TagsSolving the First HTML Lab (Ifyou're stuck, here's a video walk-through of the lab to help you out.)"
46,learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along,https://github.com/learn-co-curriculum/phase-0-intro-to-js-2-looping-code-along/blob/master/README.md,JavaScript,"Looping LabLearning GoalsBuild a for loop.Build a while loop.Explain the purpose of a loop.Understand when to use each type of loop.IntroductionIn an earlier lesson, we learned about repetition statements —statements that allow us to break out of the default sequence and repeat asection of code multiple times. We also learned about two of JavaScript'srepetition constructs: the while loop and the do...while loop. In this lessonwe will learn about a third: the for loop.Let's say we have a bunch of gifts to wrap. They all happen to be the same sizeand shape, so for every gift, we need to cut a similarly sized piece of wrappingpaper, fold it up over the edges of the gift, tape it together, and add a nicelittle card. Then we set the wrapped gift aside and move on to the next gift.In programming terms, we can think of our collection of gifts as anArray and the act of wrapping them as a function. For example:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGift(gift) {  console.log(`Wrapped ${gift} and added a bow!`);}We could then call wrapGift() on each gift individually:wrapGift(gifts[0]);wrapGift(gifts[1]);wrapGift(gifts[2]);However, this isn't very efficient or extensible. It's a lot of repetitive codeto write out, and if we had more gifts we'd have to write a whole new line foreach.This is where loops come in handy! With a loop, we can just write the repeatedaction once and perform the action on every item in the collection.This is a code-along, so follow along with the instructions in each section.There are tests to make sure you're coding your solutions correctly. If youhaven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.The for loopOf the loops in JavaScript, the for loop is the most common. The for loop ismade up of four statements in the following structure:for ([initialization]; [condition]; [iteration]) {  [loop body]}InitializationTypically used to initialize a counter variable.ConditionAn expression evaluated before each pass through the loop. If this expressionevaluates to true, the statements in the loop body are executed. If theexpression evaluates to false, the loop exits.IterationAn expression executed at the end of each iteration. Typically, this will involveincrementing or decrementing a counter, bringing the loop ever closer tocompletion.Loop bodyCode that runs on each pass through the loop.Usage: Use a for loop when you know how many times you want the loop torun (for example, when you're looping through elements in an array).ExamplesLet's take a look at an example and get some practice using the Node debugger.Enter the code below into the index.js file.Note: You can, of course, copy/paste the code rather than typing it inyourself, but we recommend typing it in for now. The act of typing codedevelops muscle memory and helps your brain understand and internalize thesyntax.for (let age = 30; age < 40; age++) {  console.log(`I'm ${age} years old. Happy birthday to me!`);  debugger;}In the above code, let age = 30 is the initialization: we're creating avariable, age, that we'll use in the next three phases of the loop. Noticethat we use let instead of const because we need to increment the value ofage.The condition for the above loop is age < 40, or, in other words, \""Run thecode in the loop body until age is NOT less than 40.\"" As long as thecondition evaluates to true, the code in the loop body is executed, the valueof age is incremented, and the condition is reevaluated. As soon as thecondition evaluates to false, the loop ends.The iteration is age++, which increments the value of age by 1 afterevery pass through the loop. We initialized age as 30, and it retains thatvalue during the first pass through the loop. At the end of the first pass, weincrement age to 31, check whether the condition still holds true, and,since it does, run the loop body again with age as 31. After that secondloop, we increment age to 32, and so on.The loop body is the set of statements that we want to run when thecondition evaluates to true.Let's take a look at what's happening in our loop using debugger. Runnode inspect index.js in the terminal to start the debugger. You should seethe following:Now run cont at the debug prompt to start executing the loop and advance tothe breakpoint. It should look like this:Note, in the first line, that the message has been logged and that age isequal to 30. To verify that, enter repl at the debug prompt to open theREPL, then enter age. You should see 30 output. Now type Ctrl-C to exitthe repl, and enter cont at the debug prompt to advance to the nextiteration of the loop. You should see the following:Note that the logged output now shows that age is 31. You can continue to stepthrough the iterations by running cont at the debug prompt. At any point youcan verify the value of age by entering the REPL and typing age at theprompt, then exit the REPL to continue stepping through. When you're done, enter.exit or Ctrl-C twice to exit the debugger.Now let's remove debugger; from our code and execute it by runningnode index.js. You should see the following:Using for with ArraysThe for loop is often used to iterate over every element in an array. Let'srewrite our gift-wrapping action above as a for loop. Enter the following codeinto index.js:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  for (let i = 0; i < gifts.length; i++) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    debugger;  }  return gifts;}wrapGifts(gifts);We started our counter, i, at 0 because arrays have zero-based indexes. Ourcondition states that we should run the code in the loop body while i is lessthan gifts.length (3 in the above example). Our iteration, i++, incrementsour counter by 1 at the end of each pass through the loop.Run node inspect index.js in the terminal to enter the debugger, and cont atthe debug prompt to advance to the breakpoint. You should seeWrapped teddy bear and added a bow! logged. In our loop body, we referencegifts[i]. Since i starts out as 0, during the first pass through the loopgifts[i] is gifts[0], which is 'teddy bear'. Continue stepping through theloop by entering cont at thedebug prompt and remember you can enter the REPLat any point to check the values of our variables, i and gifts[i].When you're done, remove the debugger and execute the code by runningnode index.js. You should see the following logged to the terminal:Wrapped teddy bear and added a bow!Wrapped drone and added a bow!Wrapped doll and added a bow!AssignmentIn the previous section, the wrapGifts() function allowed us to take any arrayof gifts and loop over them, logging our own message. Let's practice that with aslightly different idea. To complement our gift wrapping function, your task isto create a thank you card creator.Note: Recall the difference between logging and returning values from afunction. When we log information we are simply outputting text to a terminalor console. When we return data from a function we will be able to referenceand use that information elsewhere because the data is being passed out of thefunction.In index.js, build a function named writeCards() that accepts two arguments:an array of string names, and an event name. Create a for loop with a counterthat starts at 0 and increments at the end of each loop. The for loop shouldstop once it has iterated over the length of the array.As with our previous wrapGifts() function, you will create a custom messagefor each name inside the loop. Unlike that example, however, instead of simplylogging the messages to the console, you will collect them in a new array andreturn this array at the end of the function. (Refer back to the ArrayMethods lesson if you need a refresher on how we can add an element to anarray.) The overall process should be:create a new, empty array to hold the messages;iterate through the input array and, inside the loop, build out the 'thankyou' message for each name using string interpolation, then add that messageto the new array you created;after the loop finishes and all of the messages have been added to the newarray, return the new array.Here is an example of what a call to the writeCards() function might look like:writeCards([\""Charlie\"", \""Samip\"", \""Ali\""], \""birthday\"");If we were to call the function using this function call, it should produce thefollowing array as the return value:[  \""Thank you, Charlie, for the wonderful birthday gift!\"",  \""Thank you, Samip, for the wonderful birthday gift!\"",  \""Thank you, Ali, for the wonderful birthday gift!\"",];Top Tip: The debugger isn't just for debugging code — you can also use itto help you write your function! Try building the structure of the loop,putting the debugger inside the loop body. Even before you start writing thecode, you can enter the debugger's REPL and try out code until you figure outhow to create the message and add it to an array. Once it's working in theREPL, transfer the code to index.js, exit the debugger, and run the tests.The while loopRecall from the earlier lesson that the while loop is similar to a for loop,repeating an action in a loop based on a condition. Both will continue to loopuntil that condition evaluates to false. Unlike for, while only requirescondition and loop statements:while ([condition]) {  [loop body]}The initialization and iteration statements of the for loop have notdisappeared, though. In fact, we could rewrite our original for loop giftwrapping example using a while loop and achieve the exact same result:const gifts = [\""teddy bear\"", \""drone\"", \""doll\""];function wrapGifts(gifts) {  let i = 0; // the initialization moves OUTSIDE the body of the loop!  while (i < gifts.length) {    console.log(`Wrapped ${gifts[i]} and added a bow!`);    i++; // the iteration moves INSIDE the body of the loop!  }  return gifts;}wrapGifts(gifts);// LOG: Wrapped teddy bear and added a bow!// LOG: Wrapped drone and added a bow!// LOG: Wrapped doll and added a bow!// => [\""teddy bear\"", \""drone\"", \""doll\""]Notice that we've just moved the initialization and iteration statements —declaring the i variable outside the loop, and incrementing it inside theloop.CAUTION: When using while loops, it is easy to forget to involve iteration. Leaving iteration out can result in a condition that always evaluates to true, causing an infinite loop!Using a while loop enables us to check conditions that aren't based on acounter. Take a look at the following pseudocode for an example of howwe could use while in a program for planting a garden:function plantGarden() {  let keepWorking = true;  while (keepWorking) {    chooseSeedLocation();    plantSeed();    waterSeed();    keepWorking = checkForMoreSeeds();  }}We can imagine that while we have seeds, we take the same steps over and over:choose a location for a seed; plant it; water it. Then, check if there are moreseeds. If not, do not keep working.When to Use for and whileJavaScript, like many programming languages, provides a variety of loopingoptions. Loops like for and while are actually just slight variations of thesame process. By providing a variety, we as programmers have a larger vocabularyto work with.Often, you will see while loops simply being used as an alternative to forloops:let countup = 0;while (countup < 10) {  console.log(countup++);}This is perfectly fine as an alternative way to describe:for (let countup = 0; countup < 10; countup++) {  console.log(countup);}If you're feeling a bit lost about when to use a for vs. a while loop, takea deep breath. Most of the time, a regular for loop will suffice. It's by farthe most common looping construct in JavaScript. A general heuristic forchoosing which loop to use is to first try a for loop. If that doesn't serveyour purposes, then go ahead and try a while loop. Also, remember that you canalways refer to the documentation on these loops at anytime.Just don't forget: with while, make sure you are updating the conditionon each loop so that the loop eventually terminates!AssignmentTo get more acquainted with while, your task is to write a function,countDown, that takes in any positive integer and, starting from that number,counts down to zero using console.log(). Note that this means that runningcountDown(10); would actually log 11 times:109876543210Remember the workflow:Install the dependencies using npm install.Run the tests using npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 2 and 3 often until a test passes.Repeat as needed for the remaining tests.ConclusionAfter some time programming in JavaScript, writing a for loop will come asnaturally to you as wrapping one gift after another. Just as you slowly becomecomfortable using different words and vocabulary to better express yourself,you will become more acquainted with concepts like for and while until youare able to discern the nuanced differences in usage between them.ResourcesCodecademyfor loopwhile loopMDNfor loopwhile loopLoops and iteration"
47,angular/angular-seed,https://github.com/angular/angular-seed/blob/master/README.md,JavaScript,"angular-seed — the seed for AngularJS appsThis project is an application skeleton for a typical AngularJS web app. You can use itto quickly bootstrap your angular webapp projects and dev environment for these projects.The seed contains a sample AngularJS application and is preconfigured to install the AngularJSframework and a bunch of development and testing tools for instant web development gratification.The seed app doesn't do much, just shows how to wire two controllers and views together.Getting StartedTo get you started you can simply clone the angular-seed repository and install the dependencies:PrerequisitesYou need git to clone the angular-seed repository. You can get git from here.We also use a number of Node.js tools to initialize and test angular-seed. You must have Node.jsand its package manager (npm) installed. You can get them from here.Clone angular-seedClone the angular-seed repository using git:git clone https://github.com/angular/angular-seed.gitcd angular-seedIf you just want to start a new project without the angular-seed commit history then you can do:git clone --depth=1 https://github.com/angular/angular-seed.git <your-project-name>The depth=1 tells git to only pull down one commit worth of historical data.Install DependenciesWe have two kinds of dependencies in this project: tools and AngularJS framework code. The toolshelp us manage and test the application.We get the tools we depend upon and the AngularJS code via npm, the Node package manager.In order to run the end-to-end tests, you will also need to have theJava Development Kit (JDK) installed on your machine. Check out the section onend-to-end testing for more info.We have preconfigured npm to automatically copy the downloaded AngularJS files to app/lib so wecan simply do:npm installBehind the scenes this will also call npm run copy-libs, which copies the AngularJS files andother front end dependencies. After that, you should find out that you have two new directories inyour project.node_modules - contains the npm packages for the tools we needapp/lib - contains the AngularJS framework files and other front end dependenciesNote copying the AngularJS files from node_modules to app/lib makes it easier to serve thefiles by a web server.Run the ApplicationWe have preconfigured the project with a simple development web server. The simplest way to startthis server is:npm startNow browse to the app at localhost:8000/index.html.Directory Layoutapp/                  --> all of the source files for the application  app.css               --> default stylesheet  core/                 --> all app specific modules    version/              --> version related components      version.js                 --> version module declaration and basic \""version\"" value service      version_test.js            --> \""version\"" value service tests      version-directive.js       --> custom directive that returns the current app version      version-directive_test.js  --> version directive tests      interpolate-filter.js      --> custom interpolation filter      interpolate-filter_test.js --> interpolate filter tests  view1/                --> the view1 view template and logic    view1.html            --> the partial template    view1.js              --> the controller logic    view1_test.js         --> tests of the controller  view2/                --> the view2 view template and logic    view2.html            --> the partial template    view2.js              --> the controller logic    view2_test.js         --> tests of the controller  app.js                --> main application module  index.html            --> app layout file (the main html template file of the app)  index-async.html      --> just like index.html, but loads js files asynchronouslye2e-tests/            --> end-to-end tests  protractor-conf.js    --> Protractor config file  scenarios.js          --> end-to-end scenarios to be run by Protractorkarma.conf.js         --> config file for running unit tests with Karmapackage.json          --> Node.js specific metadata, including development tools dependenciespackage-lock.json     --> Npm specific metadata, including versions of installed development tools dependenciesTestingThere are two kinds of tests in the angular-seed application: Unit tests and end-to-end tests.Running Unit TestsThe angular-seed app comes preconfigured with unit tests. These are written in Jasmine,which we run with the Karma test runner. We provide a Karma configuration file to run them.The configuration is found at karma.conf.js.The unit tests are found next to the code they are testing and have a .spec.js suffix (e.g.view1.spec.js).The easiest way to run the unit tests is to use the supplied npm script:npm testThis script will start the Karma test runner to execute the unit tests. Moreover, Karma will startwatching the source and test files for changes and then re-run the tests whenever any of themchanges.This is the recommended strategy; if your unit tests are being run every time you save a file thenyou receive instant feedback on any changes that break the expected code functionality.You can also ask Karma to do a single run of the tests and then exit. This is useful if you want tocheck that a particular version of the code is operating as expected. The project contains apredefined script to do this:npm run test-single-runRunning End-to-End TestsThe angular-seed app comes with end-to-end tests, again written in Jasmine. These testsare run with the Protractor End-to-End test runner. It uses native events and hasspecial features for AngularJS applications.The configuration is found at e2e-tests/protractor-conf.js.The end-to-end tests are found in e2e-tests/scenarios.js.Protractor simulates interaction with our web app and verifies that the application respondscorrectly. Therefore, our web server needs to be serving up the application, so that Protractor caninteract with it.Before starting Protractor, open a separate terminal window and run:npm startIn addition, since Protractor is built upon WebDriver, we need to ensure that it is installed andup-to-date. The angular-seed project is configured to do this automatically before running theend-to-end tests, so you don't need to worry about it. If you want to manually update the WebDriver,you can run:npm run update-webdriverOnce you have ensured that the development web server hosting our application is up and running, youcan run the end-to-end tests using the supplied npm script:npm run protractorThis script will execute the end-to-end tests against the application being hosted on thedevelopment server.Note:Under the hood, Protractor uses the Selenium Standalone Server, which in turn requiresthe Java Development Kit (JDK) to be installed on your local machine. Check this by runningjava -version from the command line.If JDK is not already installed, you can download it here.Updating AngularJS and other dependenciesSince the AngularJS framework library code and tools are acquired through package managers (e.g.npm) you can use these tools to easily update the dependencies. Simply run the preconfigured script:npm run update-depsThis will call npm update and npm run copy-libs, which in turn will find and install the latestversions that match the version ranges specified in the package.json file.If you want to update a dependency to a version newer than what the specificed range would permit,you can change the version range in package.json and then run npm run update-deps as usual.Loading AngularJS AsynchronouslyThe angular-seed project supports loading the framework and application scripts asynchronously.The special index-async.html is designed to support this style of loading. For it to work you mustinject a piece of AngularJS JavaScript into the HTML page. The project has a predefined script to helpdo this:npm run update-index-asyncThis will copy the contents of the angular-loader.js library file into the index-async.htmlpage. You can run this every time you update the version of AngularJS that you are using.Serving the Application FilesWhile AngularJS is client-side-only technology and it is possible to create AngularJS web apps thatdo not require a backend server at all, we recommend serving the project files using a localweb server during development to avoid issues with security restrictions (sandbox) in browsers. Thesandbox implementation varies between browsers, but quite often prevents things like cookies, XHR,etc to function properly when an HTML page is opened via the file:// scheme instead of http://.Running the App during DevelopmentThe angular-seed project comes preconfigured with a local development web server. It is a Node.jstool called http-server. You can start this web server with npm start, but you maychoose to install the tool globally:sudo npm install -g http-serverThen you can start your own development web server to serve static files from any folder by running:http-server -a localhost -p 8000Alternatively, you can choose to configure your own web server, such as Apache or Nginx. Justconfigure your server to serve the files under the app/ directory.Running the App in ProductionThis really depends on how complex your app is and the overall infrastructure of your system, butthe general rule is that all you need in production are the files under the app/ directory.Everything else should be omitted.AngularJS apps are really just a bunch of static HTML, CSS and JavaScript files that need to behosted somewhere they can be accessed by browsers.If your AngularJS app is talking to the backend server via XHR or other means, you need to figureout what is the best way to host the static files to comply with the same origin policy ifapplicable. Usually this is done by hosting the files by the backend server or throughreverse-proxying the backend server(s) and web server(s).Continuous IntegrationTravis CITravis CI is a continuous integration service, which can monitor GitHub for new commits toyour repository and execute scripts such as building the app or running tests. The angular-seedproject contains a Travis configuration file, .travis.yml, which will cause Travis to run yourtests when you push to GitHub.You will need to enable the integration between Travis and GitHub. See theTravis website for instructions on how to do this.ContactFor more information on AngularJS please check out angularjs.org."
48,photonstorm/phaser,https://github.com/photonstorm/phaser/blob/master/README.md,JavaScript,"Phaser - HTML5 Game FrameworkPhaser is a fast, free, and fun open source HTML5 game framework that offers WebGL and Canvas rendering across desktop and mobile web browsers. Games can be compiled to iOS, Android and native apps by using 3rd party tools. You can use JavaScript or TypeScript for development.Along with the fantastic open source community, Phaser is actively developed and maintained by Photon Storm. As a result of rapid support, and a developer friendly API, Phaser is currently one of the most starred game frameworks on GitHub.Thousands of developers from indie and multi-national digital agencies, and universities worldwide use Phaser. Take a look at their incredible games in our showcase video:Visit: The Phaser website and follow on Phaser TwitterPlay: Some of the amazing games #madewithphaserLearn: API Docs, Support Forum and StackOverflowCode: 2000+ Examples (source available in this repo)Read: The Phaser World NewsletterDiscord: Join us on DiscordExtend: With Phaser PluginsBe awesome: Support the future of PhaserGrab the source and join the fun!12th April 2023After 24 Beta releases, over 2000 updated examples and a year of insanely hard work we're thrilled to finally announce the release of Phaser 3.60!Today is also the 10th birthday of Phaser, so it's a very special day for us. 10 years ago we released the v0.5 version on the unsuspecting public and it's no exaggeration to say that it changed both our lives and the face of HTML5 game development forever.Phaser 3.60 is our biggest release ever. Eclipsing any version before it. Some of the headline features include:Built-in Special FX - We now bundle 14 highly flexible special effects into the core, which are available to all Game Objects. These include Glow, Blur, Bloom, Bokeh, Barrel, Wipe, Pixelate, Vignette, Displacement and more.Nine-Slice Game Object - A new native Nine Slice Game Object. A Nine Slice Game Object allows you to display a texture-based object that can be stretched both horizontally and vertically, but that retains fixed-sized corners. The dimensions of the corners are set via the parameters to the class. When you resize a Nine Slice Game Object only the middle sections of the texture stretch. This is extremely useful for UI and button-like elements, where you need them to expand to accommodate the content without distorting the texture.Plane Game Object - A new native Plane Game Object. The Plane Game Object is a helper class that takes the Mesh Game Object and extends it, allowing for fast and easy creation of Planes. A Plane is a one-sided grid of cells, where you specify the number of cells in each dimension. The Plane can have a texture that is either repeated (tiled) across each cell, or applied to the full Plane.New Tween System - We've reworked the entire Tween system to make it both more efficient, more powerful and easier for you to extend. New in this version are perfectly sequential Tween Chains, the ability to tween Sprite textures, much better garbage-collection and auto-destruction of expired tweens and lots more.Compressed Texture Support - Phaser 3.60 contains support for Compressed Textures. It can parse both KTX and PVR containers and within those has support for the following formats: ETC, ETC1, ATC, ASTC, BPTC, RGTC, PVRTC, S3TC and S3TCSRB. Compressed Textures differ from normal textures in that their structure is optimized for fast GPU data reads and lower memory consumption. Popular tools that can create compressed textures include PVRTexTool, ASTC Encoder and Texture Packer.Matter Physics v0.19 - We have updated the version of Matter Physics to the latest v0.18 release. This is a big jump and brings with it quite a few internal changes to Matter, as well as a ~40% performance improvement.There are also hundreds of updates and bug fixes across the entire codebase.We have created a brand new Change Log just for v3.60. Previously, we used to put all of the changes in a single file, but this felt impractical. So we've split it all into sections now, so you can easily see what's new and updated.v3.60 is available now from the Releases page. You can also download it from npm:npm i phaserYou'll find up to date TypeScript defs that align with this release in the types folder of this repository.If you find any problems please report them in GitHub issues.As usual, I'd like to send my thanks to the Phaser community for their help in both reporting issues and submitting pull requests to fix them. So, please do spend some time digging through the Change Log. I assure you, it's worth while 🙂I'd like to send a massive thank-you to everyone who supports Phaser on Patreon, GitHub Sponsors and our corporate backers. Your continued funding allows me to keep working on Phaser full-time and this monster of a new release is the very real result of that. If you've ever considered becoming a backer, now is the perfect time!If you'd like to stay abreast of developments then I'm now publishing them to the Phaser Patreon. Here you can find the latest development reports including the concepts behind Phaser 4.You can also follow Phaser on Twitter and chat with fellow Phaser devs in our Discord.Phaser 3 wouldn't have been possible without the fantastic support of the community and Patreon. Thank you to everyone who supports our work, who shares our belief in the future of HTML5 gaming, and Phaser's role in that.Happy coding everyone!Cheers,Rich - @photonstormBecause Phaser is an open source project, we cannot charge for it in the same way as traditional retail software. What's more, we don't ever want to. After all, it's built on, and was born from, open web standards. It's part of our manifesto that the core framework will always be free, even if you use it commercially, as many of you do.You may not realize it, but because of this, we rely 100% on community backing to fund development.Those funds allow Phaser to improve, and when it improves, everyone involved benefits. Your support helps secure a constant cycle of updates, fixes, new features and planning for the future.We use Patreon to manage the backing and you can support Phaser from $1 per month. The amount you pledge is entirely up to you and can be changed as often as you like. Patreon renews monthly, just like Netflix. You can, of course, cancel at any point. Tears will be shed on this end, but that's not your concern.You can also support us by using crypto currencies. The Phaser wallet addresses are:Ethereum: 0x6a716A122Ad186ECE865C55D16c1D361f1B13724BSC / AVAX / Polygon: 0x94aC3F640b8749AbD1d44f29A62ffeB32CA34628Extra special thanks to the following companies whose support makes Phaser possible:HathoraCerebral FixMoPubFacebookGame DistributionGameCommerceMozillaTexture PackerTwilioQuestPokiCrazyGamesLaggedNakamaPhaser 3 is available via GitHub, npm and CDNs:Clone the git repository via https, ssh or with the GitHub Windows or Mac clients.Download as zipDownload the build files: phaser.js and phaser.min.jsNPMInstall via npm:npm install phaserCDNPhaser is on jsDelivr which is a \""super-fast CDN for developers\"". Include the following in your html:<script src=\""//cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.js\""></script>or the minified version:<script src=\""//cdn.jsdelivr.net/npm/phaser@3.60.0/dist/phaser.min.js\""></script>API DocumentationGo to https://newdocs.phaser.io/ to read the docs online using our brand new interface. Use the links to navigate the namespaces, classes and Game Objects lists and also use the new search box.The documentation for Phaser 3 is an on-going project. Please help us by contributing improved docs and examples.TypeScript DefinitionsThe TypeScript definitions can be found inside the types folder. They are also referenced in the types entry in package.json.Depending on your project, you may need to add the following to your tsconfig.json file:\""lib\"": [\""es6\"", \""dom\"", \""dom.iterable\"", \""scripthost\""],\""typeRoots\"": [\""./node_modules/phaser/types\""],\""types\"": [\""Phaser\""]We recently updated our Phaser 3 TypeScript Project Template, which you can use to get started with. This now uses TypeScript 5 and Phaser v3.60.The TS defs are automatically generated from the JSDoc comments found in the Phaser source code. If you wish to help refine them then you must edit the Phaser JSDoc blocks directly, not the defs file. You can find more details about the parser we built in the scripts/tsgen folder.WebpackWe use Webpack to build Phaser and we take advantage of its conditional build flag feature to handle renderer swapping. If you wish to use Webpack with Phaser then please use our Phaser 3 Project Template as it's already set-up to handle the build conditions Phaser needs. Recent changes to our build steps mean you should now be able to use any other packager, like Parcel, without any config changes.LicensePhaser is released under the MIT License.Tutorials and guides on Phaser 3 development are being published every week.Getting Started with Phaser 3 (useful if you are completely new to Phaser)Making your first Phaser 3 GameThe Complete Phaser 3 Game Development course contains over 15 hours of videos covering all kinds of important topics.Plus, there are over 700 Phaser tutorials listed on the official website.We've 3 tutorials related specifically to creating Facebook Instant Games with Phaser:Getting Started with Facebook Instant GamesFacebook Instant Games Leaderboards TutorialDisplaying Ads in your Instant GamesSource Code ExamplesDuring our development of Phaser 3, we created hundreds of examples with the full source code and assets ready available. These examples can be browsed on the Phaser 3 Labs, or clone the examples repo. We are constantly adding to and refining these examples.HathoraHathora Cloud is a scalable hosting platform for online multiplayer games. You upload your server project using the Hathora console or CLI, and then dynamically create server instances in 10+ regions around the world. You get charged only for the duration of active matches/sessions. It's perfect for nodejs servers handling WebSocket connections, and takes care of SSL termination (for wss) and DDoS protection.They have also published a brand-new tutorial on creating a scalable multiplayer Phaser game. If you think this could be useful for your hosting needs, join their Discord server to get in touch.Huge list of Phaser 3 PluginsSuper community member RexRainbow has been publishing Phaser 3 content for years, building up an impressive catalogue in that time. You'll find loads of plugins, from UI controls such as text input boxes, to Firebase support, Finite State Machines and lots more. As well as the plugins there is also a comprehensive set of 'Notes' about Phaser 3, going into great detail about how the various systems work. It's an invaluable resource and well worth checking out at https://rexrainbow.github.ioCreate Your First Phaser 3 ExampleCreate an index.html page locally and paste the following code into it:<!DOCTYPE html><html><head>    <script src=\""https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser-arcade-physics.min.js\""></script> </head><body>    <script></script></body></html>This is a standard empty webpage. You'll notice there's a script tag that is pulling in a build of Phaser 3, but otherwise this webpage doesn't do anything yet. Now let's set-up the game config. Paste the following between the <script></script> tags:const config = {    type: Phaser.AUTO,    width: 800,    height: 600,    physics: {        default: 'arcade',        arcade: {            gravity: { y: 200 }        }    },    scene: Example};const game = new Phaser.Game(config);config is a pretty standard Phaser 3 Game Configuration object. We tell config to use the WebGL renderer if it can, set the canvas to a size of 800 x 600 pixels, enable Arcade Physics, and finally we tell it to use the Example Scene. This hasn't been implemented yet, so if you run this JavaScript code now you will have an error. Add the following above the config:class Example extends Phaser.Scene{    constructor ()    {        super();    }    preload ()    {        this.load.setBaseURL('https://labs.phaser.io');        this.load.image('sky', 'assets/skies/space3.png');        this.load.image('logo', 'assets/sprites/phaser3-logo.png');        this.load.image('red', 'assets/particles/red.png');    }    create ()    {    }}Here we create a Scene called Example. We've given it 2 functions. The preload function is where you load assets into your game. In preload, we set the Base URL to be the Phaser server and load 3 PNG files.The create function is empty, so it's time to fill it in:create (){    this.add.image(400, 300, 'sky');    const particles = this.add.particles(0, 0, 'red', {        speed: 100,        scale: { start: 1, end: 0 },        blendMode: 'ADD'    });    const logo = this.physics.add.image(400, 100, 'logo');    logo.setVelocity(100, 200);    logo.setBounce(1, 1);    logo.setCollideWorldBounds(true);    particles.startFollow(logo);}Here we add a sky image into the game and create a Particle Emitter. The scale value means that the particles will initially be large and will shrink to nothing as their lifespan progresses.After creating the emitter, we add a logo image called logo. Since logo is a Physics Image, logo is given a physics body by default. We set some properties for logo: velocity, bounce (or restitution), and collision with the world bounds. These properties will make our logo bounce around the screen. Finally, we tell the particle emitter to follow the logo - so as the logo moves, the particles will flow from it.Run it in your browser and you'll see the following:(Got an error? Here's the full code)This is a tiny example, and there are hundreds more for you to explore, but hopefully it shows how expressive and quick Phaser is to use. With just a few easily readable lines of code, we've got something pretty impressive up on screen!Ourcade have published two great Phaser 3 books. They'll take you from getting set-up, through to finishing your first game using modern JavaScript or TypeScript and they're both completely free! They also publish a huge range of quality tutorials and videos, so be sure to check out their site every week.Learn the secrets of HTML5 game development with Phaser 3.50 while building a cross platform endless runner game. Designed both for beginners and skilled programmers, the course guides you from an empty folder introducing the bare bones of JavaScript to advanced Phaser 3 features. Find out more details about HTML5 Cross Platform Game Development with Phaser.There are both plain and minified compiled versions of Phaser in the dist folder of the repository. The plain version is for use during development, and the minified version is for production use. You can and should also create your own builds.Custom BuildsPhaser 3 is built using Webpack and we take advantage of the Webpack definePlugin feature to allow for conditional building of the Canvas and WebGL renderers and extra plugins. You can custom the build process to only include the features you require. Doing so can cut the main build file size down to just 70KB.Read our comprehensive guide on creating Custom Builds of Phaser 3 for full details.Building from SourceIf you wish to build Phaser 3 from source, ensure you have the required packages by cloning the repository and then running npm install on your source directory.You can then run webpack to create a development build in the build folder which includes source maps for local testing. You can also npm run dist to create a minified packaged build in the dist folder. For a list of all commands available use npm run help.Change LogDue to the increasing size of our Change Logs we have now split them up, one version per folder.v3.60.0 Change Logv3.0.0 to v3.55.2. Change LogsWe've organized the Change Logs into commonly themed sections to make it more digestible, but we appreciate there is a lot in there. Please don't feel overwhelmed! If you need clarification about something, join us on the Phaser Discord and ask.The Contributors Guide contains full details on how to help with Phaser development. The main points are:Found a bug? Report it on GitHub Issues and include a code sample. Please state which version of Phaser you are using! This is vitally important.Before submitting a Pull Request run your code through ES Lint using our config and respect our Editor Config.Before contributing read the code of conduct.Written something cool in Phaser? Please tell us about it in the forum, or email support@phaser.ioPhaser is a Photon Storm production.Created by Richard Davey. Powered by coffee, anime, pixels and love.The Phaser logo and characters are © 2011 - 2023 Photon Storm Limited.All rights reserved.\""Above all, video games are meant to be just one thing: fun. Fun for everyone.\"" - Satoru Iwata"
49,learn-co-curriculum/phase-0-css-kitten-lab,https://github.com/learn-co-curriculum/phase-0-css-kitten-lab/blob/master/README.md,JavaScript,"BONUS: CSS Kitten WheelbarrowLearning GoalsPosition elements absolutelyPractice using CSS selectorsIntroductionOh no! All of our kittens have escaped from the wheelbarrow and we need to getthem back in. Help collect all the kittens and put them into the wheelbarrowusing CSS selectors and absolute positioning.Getting StartedFork and clone this lesson into your local environment. Navigate into itsdirectory in the terminal, then run code . to open the files in Visual StudioCode.Position Elements AbsolutelyThere are a few different ways we can use CSS to position elements in our webpages. Absolute positioning means placing the element in its containingelement in a certain location that will stay the same no matter where otherelements are placed. We can use absolute positioning to specify exactly wherein the document layout we want an element to be placed:Here's an example of what absolute positioning looks like in CSS:.parent-element {  position: relative;}.child-element {  position: absolute;  top: 50px;  left: 50px;}Note When using position: absolute, the browser calculates the positionusing top/left from the closest parent element that has a position specified —that's why in the example, we're specifying position: relative for theparent element. Check out the resources on positioning for more info on thisif you're interested!For this lab, we've done the work of calculating the absolute positions andcreating CSS rules for a bunch of different kitten image elements. It's your jobto use CSS selectors to apply the correct positioning to each of these elements.To get started with this lab, open the index.html file in the browser. Use thecomments in css/place-kitty.css to write the correct selectors to move eachkitty into the wheelbarrow.ConclusionNice work getting practice with more CSS selectors, and learning about absolutepositioning along the way! Now that you've seen absolute positioning in action,you'll have a better sense of when you might need to use it to build morecomplex CSS layouts in the future.ResourcesMozilla Developer Network: CSS SelectorsW3 CSS Selector ReferenceMozilla Developer Network: Positioning"
50,learn-co-students/js-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript FunctionsObjectivesWrite a function that returns a valueWrite a function that takes in a parameterWrite a function that takes in multiple parametersIntroductionYou'll be writing your solution in index.js.In this lab, we're going to develop our communication skills in JavaScript.We're feeling festive, so we're going to be wrapping up common holiday greetingsas functions so that we don't have to repeat ourselves. The beauty of functionsis that we could reuse these functions for the text of greeting cards, forspoken greetings, for song lyrics, etc...Template LiteralsThere are two ways main ways to include variables inside a string. Say we had a variable named date that we assign to a value:var date = \""July 3rd\""In JavaScript, we can use operators to concatenate (join) two strings, or in this case, a string and a variable, like so:console.log(\""My birthday is \"" + date)With date defined, the above code will log My birthday is July 3rd. However,by using a slightly modified syntax, we can achieve the same thing by embeddinga variable into a string. These are called templateliteralsand rewriting the above console.log with one would look like this:console.log(`My birthday is ${date}`)This will also log My birthday is July 3rd.Now, there are two important changes to the syntax: Any variables we want toinclude must be wrapped in curly braces ({ }) and preceded by a dollar sign($). In addition, instead of single, ', or double quotes, \"", wemust use backticks, `. If backticks are not used, JavaScript willinterpret the dollar sign and curly braces as a normal part of the string,resulting in My birthday is ${date}! Any expression can be included intemplate literals, not just variables, so we could write something like:console.log(`I have ${1 + 1} pets`)And get I have 2 pets. Note that this will not log the same thing if you didthe following:console.log(\""I have \"" + 1 + 1 + \"" pets\"")This logs I have 11 pets! JavaScript converts both 1s into strings rather than adding them together first. You would need to write the following to get the same result as template literals:console.log(\""I have \"" + (1 + 1) + \"" pets\"")You can use either operators or template literals to construct larger stringswith dynamic values. Template literals are just a way to make your code a littleeasier to read and to help ensure JavaScript does not misinterpret whencombining different data types into strings, like we just saw.InstructionsWrite a function named happyHolidays. This function should not accept anyparameters and should return the string \""Happy holidays!\"".Write a function named happyHolidaysTo. This function should accept aparameter of the name of the person you want to wish happy holidays, andreturn the string `Happy holidays, ${name}!`Write a function named happyCustomHolidayTo. This function should accept twoparameters, the holiday you want to wish them well for, and the name of theperson you're wishing well. Order of parameters matters, so make sure to first pass in the holiday and then the name. This function should return the string`Happy ${holiday}, ${name}!`Write a function named holidayCountdown. This function should accept twoparameters, the holiday name and number of days until that holiday. Thefunction should return the string`It's ${days} days until ${holiday}!`. Note that although days isused first when constructing the returned string, holidayCountdown shouldtake in the holiday name first, then the days until that holiday."
51,learn-co-curriculum/phase-0-the-dom-modifying-elements-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-modifying-elements-lab/blob/master/README.md,JavaScript,"Creating and Inserting DOM Nodes LabLearning GoalsCreate DOM elements programmaticallyAdd elements to the DOMUpdate elements using innerHTMLChange properties on DOM nodesRemove elements from the DOMIntroductionNow that you have an understanding of the DOM and powerful tools for selectingthe right elements, it's time to learn how to:Create new nodesDelete nodesUpdate node propertiesIf you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Create DOM Elements Programmaticallydocument.createElement()Creating an element in JavaScript is an easy process. You simply calldocument.createElement('tagName'), where tagName is the name of any validHTML tag ('p', 'div', 'span', etc.).Open the index.html file in your browser and open up the browser's console. Inthe console, enter:const element = document.createElement(\""div\"");Then take a look at the Elements tab. The element doesn't show up on the page.Why not?Add Elements to the DOMTo get an element to appear in the DOM, we have to append() it to an existingDOM node. To go back to our tree metaphor, we have to glue our new leaf onto abranch that's already there. We can start as high up on the tree asdocument.body, or we can find a more specific element using any of the methodswe've learned for traversing the DOM.append()Let's append element to body to start:document.body.append(element);(Recall that element is a variable containing the div we created above.)Now if you look at the Elements tab, you'll see our new (empty) <div> nestedinside the body element.Next, let's create an unordered list:const ul = document.createElement(\""ul\"");To populate our unordered list, we'll use a for loop to create three li's,give them some content, and append them to the ul:for (let i = 0; i < 3; i++) {  const li = document.createElement(\""li\"");  li.textContent = (i + 1).toString();  ul.append(li);}In each iteration of our loop, we calculate the value i + 1 (an integer), turnit into a string using JavaScript's toString() method, and assign the resultas the value of the li's textContent attribute.Note: although the textContent attribute must be a string, the code wouldstill work even if we didn't use the toString() method — JavaScript willturn the value into a string for us. However, for clarity and completeness, itis best to set it to a string value explicitly.Finally, we'll append the ul to the div we created:element.append(ul);You should now see the unordered list rendered on the page, and see the newelements in the \""Elements\"" tab, like this:<div>  <ul>    <li>1</li>    <li>2</li>    <li>3</li>  </ul></div>Note that, each time we create a new element, we create a variable and save areference to it. That makes it quite easy to make additional updates and to addit to the DOM using append().Add Elements to the DOM via innerHTMLCreating elements and then appending them into the DOM is a multi-step process.It's also the safest and most reliable way to add content to the DOM. Mostrepeated code can be removed by using variables, functions and loops. It's TheRight Way.That said, however, there's another process that will also work, usingElement.innerHTML. Inside our loop above, we create an li element and setits textContent property to a simple number (expressed as a string) thatrepresents the current iteration through the loop. Once we append the li tothe ul and the ul to the document body, we see our unordered list in thebrowser window. This is a perfectly valid way to use textContent to addcontent to the DOM — essentially, textContent changes only what text shows upinside a DOM element:li.textContent = \""Hi there!\"";// => <li>Hi there!</li>console.log(li.textContent);// => \""Hi there!\""Imagine, however, that we want to add content that's more complicated.Assume our HTML includes a main element with an id of \""main.\"" We can grabthat element and set its innerHTML attribute to any HTML we like:const main = document.getElementById(\""main\"");main.innerHTML =  \""<h1>Poodles!</h1><h3>An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a post-Frankfurt School Appropriationist Perspective</h3><p><em>By: Byron Q. Poodle, Esq., BA.</em></p>\"";Here we are using one big, long string, complete with multiple HTML tags, tocreate the following HTML in the DOM:<main id=\""main\"">  <h1>Poodles!</h1>  <h3>    An Essay into the Pom-Pom as Aesthetic Reconfiguration of the Other from a    post-Frankfurt School Appropriationist Perspective  </h3>  <p><em>By: Byron Q. Poodle, Esq., BA.</em></p></main>This process works but it is not recommended for several reasons. First,it's more error-prone, and the errors can be difficult to find. Second, it cannegatively impact site performance. Finally, if you're inserting user-deriveddata (e.g., comments) into the DOM using innerHTML, you can expose your siteto the risk of users injecting malicious code.Programmatically creating and appending elements is safer and more efficient,and it results in code that's easier to read, easier to debug, and easier tomaintain.Change Properties on DOM NodesWe can change the appearance of a DOM node using its style attribute. Try thisout in the console:const element = document.getElementById(\""main\"");element.style.height = \""300px\"";element.style.backgroundColor = \""#27647B\"";You've changed what's on the screen!Feel free to set as many properties as you'd like — this is a good chance tolook around and explore different properties of DOM elements.Let's adjust the display. Add some text:element.textContent = \""You've changed what's on the screen!\"";Then change the style to see the effect:element.style.fontSize = \""24px\"";element.style.marginLeft = \""30px\"";element.style.lineHeight = 2;Perhaps the most common way to change how things appear in the DOM is bychanging an element's class attribute. As you know from CSS, we often changethe way a bit of rendered HTML appears by adding or removing a class.For example, we could create an alert class that turns the text red (using theCSS color attribute) and makes it big (using the CSS font-size attribute).We can then use JavaScript to first grab the element and then add the class byupdating the element's className property. This has the same effect as settingthe class property in the HTML. The className property expects a Stringwith one or more class names, separated by spaces:element.className = \""pet-listing dog\"";Check out the Elements tab to see the effect of this change:<main id=\""main\"" class=\""pet-listing dog\""></main>Another way to accomplish the same thing is by using the Element.classListproperty. This property has .add() and .remove() methods thatcan be used as follows:element.classList.remove(\""dog\"");element.classList.add(\""cat\"", \""sale\"");This approach allows you to easily add and remove classes programmatically,without having to create a long string of class names.<main id=\""main\"" class=\""pet-listing cat sale\""></main>Separation of ConcernsAn important thing to bear in mind is that we only want to use JavaScript tochange the appearance of an element when we need to make a change dynamically,i.e., in response to user actions. This goes back to a fundamental programmingconcept about separating concerns between technologies:HTML defines the structure of the website (not appearance or functionality)JavaScript defines functionality of the website (not structure or styling)CSS defines the visualization and style of the website (not structure orfunctionality)Defining the base CSS should still happen in the CSS files that are loaded intothe DOM when the page is opened.Remove Elements from the DOMWe know how to add elements and change their attributes. What if we want toremove an element from a page?removeChild()We use removeChild(), as you might guess, to remove a particular child of anelement:someElement.removeChild(someChildElement);Let's take a look at a more complex example:const ul = document.getElementsByTagName(\""ul\"")[0];const secondChild = ul.querySelector(\""li:nth-child(2)\"");ul.removeChild(secondChild);Here you can see the power of querySelector(): we can use it to find thesecond li element of ul. We then pass that element as the argument to ourremoveChild method, which removes the element from our ul.What if we want to remove the whole unordered list (ul)?element.remove()We can just call remove() on the element itself:ul.remove();And it's gone!InstructionsFrom this point forward, many of the labs will work a little differently fromones you've done before. Specifically, the tests will mock the process of 1)running JavaScript code in the browser and 2) seeing the results of that coderepresented in the DOM. Take a look at test/indexTest.js to see the tests'descriptions of the changes your code should be making to the DOM elements.Note that you do not need to create functions for this lab. Just create the lineor lines of JavaScript necessary to pass each test. As usual, you will writeyour code in the index.js file.One final note: the last test in the test/indexTest.js file is looking for thetext \""YOUR-NAME is the champion\"" (with your name — or whatever text you choose —in place of YOUR-NAME) inside your newly created DOM node. While there are anumber of ways you could accomplish this, you should use either thetextContent or innerHTML property to setthe text inside your DOM node. The innerText property would technically workas well; however, the tests won't pass if you use this approach, and generallyit's not a good practice to use innerText when setting the contents of anelement. This StackOverflow answer does a good job explaining somedifferences between these properties.Resourcesdocument.createElement()append()removeChild()element.remove()classList Property"
52,learn-co-curriculum/phase-1-control-flow-lab,https://github.com/learn-co-curriculum/phase-1-control-flow-lab/blob/master/README.md,JavaScript,"Review: Control Flow LabLearning GoalsPractice writing if...else if...else statements.Practice working with the ternary operator.Practice writing switch statements.IntroductionYou have been hired as a contractor for Scuber, a burgeoning startup that helpsbusy parents transport their children to and from all of their activities onscooters.Scuber's drivers charge their passengers a variable amount based on how farthey need to travel. Modify the index.js file to make sure that Scuber's driversare properly telling their passengers how much the ride will cost.Getting StartedIf you haven't already, fork and clone this lab into your local environment.Remember to fork a copy into your GitHub account first, then clone fromthat copy. Navigate into its directory in the terminal, then run code . toopen the files in Visual Studio Code.Next, run npm install to install the dependencies then run the test suite withthe npm test command.Read the TestsWe know that you do not have much experience with testing, so that is why it isvery important for you to read the instructions in this and every lab. Thatbeing said, reading the tests can often provide important clues on how tocomplete a lab. Let's take a look at the first test for this lab together:describe('index.js', function () {  describe('scuberGreetingForFeet()', function () {    it('gives customers a free sample if the ride is less than or equal to 400 feet', function () {      expect(scuberGreetingForFeet(199)).to.equal('This one is on me!');    });    // tests continue...  });});Okay, so all of the fancy describe words are just there to organize therequirements, and provide a description for what each function should do. Byreading the text inside of the describe words, we can see that there is somefunction that should give customers a free sample, where the first 400 feet arefree. Then in the next line we see a function called scuberGreetingForFeetbeing executed with 199 passed through as an argument to the function.Executing the scuberGreetingForFeet function with the argument should return\""This one is on me!\"".We will tackle the details of function writing in depth in an upcoming lab. Fornow, briefly, a function declaration is written like so:function addFive(someNumber) {  //Everything I want my function to do I put inside these curly braces  //In this example, let's say I want my function, addFive, to add 5 to  //any number I pass in (someNumber), but only IF the number is greater  //than zero:  let result  if (someNumber > 0) {    result = someNumber + 5;  }  //at the end, if I want my function to return something, I need to state it:  return result}//once our function is declared, we can call addFive, passing in values //as arguments:addFive(10);//=> 15addFive(20);//=> 25addFive(-5);//=> undefinedaddFive(addFive(5));//=> 15!! In this case, the return value of addFive(5), 10, is passed in //as the argument to the outer addFive, returning 15So, looking back at our test example, scuberGreetingForFeet(199) is callingthe function scuberGreetingForFeet, and passing in the value 199 as theargument.  When we write this function, we need to write the logic inside thecurly braces to pass our tests and return the result:function scuberGreetingForFeet(someValue) {  //this is where we can use conditionals given our argument, someValue  //don't forget to return whatever the result is!}The big clue from reading the example test above is that the tests in theindexTest.js file are calling the functions that we write inside theindex.js file. These tests pass arguments to our function. When this testpasses an argument of 199 to our function, the scuberGreetingForFeetfunction should return \""This one is on me!\"". That makes sense, consideringthe text in the describe and it functions say that the first 400 feetshould be free. That 199 must be indicating the distance in feet of therequested ride.So reading tests is essentially like reading the instructions. It's somethingwe may have avoided for much of our lives, but when it comes to programming,tests fill in the picture of the goal we are trying to accomplish. They runmini-experiments on our code and help us better understand our code and theproblem we are solving.InstructionsThere are three functions that have been declared for you. You will need to fill in the following code:scuberGreetingForFeet() — Use if and else if statements to return thecorrect greeting based on the distance the passenger desires to travel.ternaryCheckCity() — Use a ternary operator to return the correct responsebased on the desired destination of the passenger.switchOnCharmFromTip() — Use a switch statement to return a differentresponse based on the generosity of the passenger's tip.NOTE: Beware a gotcha! In JavaScript, you cannot express the concept of'between' in the following way:2 < 5 < 4// => trueIt seems like that expression should evaluate to false because 5 is not lessthan 4. However, we're forgetting about the order of operations — let'sthink about how the JavaScript engine evaluates that expression. First, theengine compares 2 < 5, which evaluates to true. At that point, it's asthough the value true has replaced 2 < 5 in the expression, resulting intrue < 4. The engine sees that we're trying to compare a non-number (true)against a number (4), and under the hood it converts true into a number:Number(true);// => 1That leaves us with 1 < 4, which the JavaScript engine correctly evaluates totrue. Can you figure out how to properly evaluate whether 5 is greater than2 AND 5 is less than 4 using logical operators? Ponder that as you workthrough the assignment.After you have all the tests passing, remember to commit and push your changesup to GitHub, then submit your work to Canvas using CodeGrade. If you need areminder, go back to the Completing and Submitting Assignments withCodeGrade lesson to review the process.Good luck!"
53,learn-co-students/js-if-else-files-lab-bootcamp-prep-000,https://github.com/learn-co-students/js-if-else-files-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"Using Conditionals and Multiple Files in JSIntroductionWe now know how to use conditionals. Now, let's use conditionals to test ourcode for correctness. This is your first step towards how professionaldevelopers write software. Professional developers test their code forcorrectness. Instead of constantly clicking around their applications, mostdevelopers write additional code, called tests that ensure their code isoutputting the right things. In fact, they may even write tests first beforethey actually do any work towards a project to help ensure the code they writedoes what they expect it to do!We will eventually explain how to use the professional testing tools but first,let's go over a simple example.InstructionsAfter you open this lesson in the IDE, in the js folder, double-click onindex.js. You'll see some basic code:// ./js/index.jsvar name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}First of all, don't worry about the module.exports stuff right now, we'll getto that later. You've seen the rest of this stuff before but let's review. Thisassigns \""Joe\"" to the name variable using the assignment operator (=). Italso assigns \""74\"" to height. Both \""Joe\"" and \""74\"" are Strings. We knowthat because they are wrapped in quotes. We have our code, but we don't have ourtests. Let's write a test right below the var height = \""74\"" line to check thatname is equal to \""Susan\"". That should look something like this:if (name === \""Susan\"") {    console.log(\""The name is correct\"")}Write that, and then run your index.js file with node js/index.js in theterminal. You'll see nothing printed out. That's because our name variabledoesn't equal \""Susan\"". Let's put in an else statement that prints \""Expected the name to be Susan\"". Give it a try on your own.OK, you gave it a try, now let's look at the solution:if (name === \""Susan\"") {    console.log(\""The name is correct\"")} else {    console.log(\""Expected the name to be Susan\"")}See what we did there? Great! Now run your code again by typingnode js/index.js in the terminal and you should getExpected the name to be Susan printed out. Let's fix our name variable toequal \""Susan\"". Modify the first line to say:var name = \""Susan\""Re-run your code and boom! you did it :)In later steps, we'll be doing our testing in other files. So, for now, let'srevert index.js to its original state. Make sure the index.js file is saved andthat it looks like this:var name = \""Joe\""var height = \""74\""// Don't worry about thismodule.exports = { name, height}Separating Tests from Application CodeAs you can probably imagine, a large application will have many tests. Averagesized applications will have thousands of tests. It gets a bit confusing to havethe application code mixed in with your test code. We want to separate them outso it's not a pain to sift through our files.Let's open up another JavaScript file and play around with separating thingsout. There is a blank JS file included in this lab called other_file.jslocated in the js folder. Double click on that and you'll see a blank file.Let's say we wanted to console.log the name variable from our index.jsfile. Seems fairly easy. Go ahead and type console.log(name). Now let's runthis new file by typing node js/other_file.js in our terminal. BOOM! You'll getan error that looks like this:/home/jmburges/code/labs/js-functions-lab/test.js:1(function (exports, require, module, __filename, __dirname) { console.log(name)                                                                          ^ReferenceError: name is not defined    at Object.<anonymous> (/home/jmburges/code/labs/js-functions-lab/test.js:1:75)    at Module._compile (module.js:570:32)    at Object.Module._extensions..js (module.js:579:10)    at Module.load (module.js:487:32)    at tryModuleLoad (module.js:446:12)    at Function.Module._load (module.js:438:3)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The important line here is the ReferenceError: name is not defined line. Thatsays that our name variable doesn't exist in the other_file.js file. Thatmakes sense. In other_file.js we never write the line of code to createname. We have the line var name = \""Joe\"" in index.js. We need to tellother_file.js about the existence of index.js! Let's do that by replacingthe contents of other_file.js with the following line of code:var index = require(\""./index.js\"")This tells javascript to load the index.js file and put its contents inside ofthe index variable within other_file.js. That's a bit confusing, but it'sfairly straight forward to use. Thanks to require(), we now have access to thevariables we exported from index.js, including name. To access name withinother_file.js, we can simply refer to the name property of the indexvariable, which, again, is where we used require() to store the contents ofindex.js. Let's add the following line to other_file.js:var index = require(\""./index.js\"")console.log(index.name)Give that a run by typing node js/other_file.js and you should see the namegetting printed out. Awesome!Your TurnYou now know how multiple files interact as well as how if statements work.Now, you have to write your code to match some specific tests. Open upjs/tests.js and you will see two if statements. Let's give this a run tostart things off by typing node js/tests.js. You should get two messages:Expected: Susan, Received: JoeExpected: 70, Received: 74Now, it's your job to modify index.js so that when you run node js/tests.jsthe messages you see logged to the console are:The name is correctThe height is correctNote: Capitalization matters. Also, whether or not you use a String orNumber matters. Numbers don't have any quotes around them, Strings do havequotes around them!When you've finished your solution, and the tests show the output above, runlearn submit from the console to submit your solution."
54,ironhack-labs/lab-javascript-vikings,https://github.com/ironhack-labs/lab-javascript-vikings/blob/master/README.md,JavaScript,"LAB | JS Vikings     Learning Goals  This exercise allows you to practice and apply the concepts and techniques taught in class.Upon completion of this exercise, you will be able to:Run predefined tests in Jasmine to verify that the program meets the technical requirements.Identify expected code behavior by reading and understanding test results and errors.Define a class and use it to create objects (instances).Create a subclass that extends a parent class using extends and super() to inherit properties and methods.Define class methods that use the this keyword to access object properties.Add or remove items from an array using the array methods (push, pop, shift, unshift, and splice).Iterate over arrays using the for and forEach loops.Pass values as arguments to functions.Use the return keyword to return a value from a function.     IntroductionWe have learned Object-oriented programming and how class and inheritance work in JavaScript. Now let's work with our Viking friends, applying the concepts we have just learned.RequirementsFork this repo.Clone this repo.SubmissionUpon completion, run the following commands:git add .git commit -m \""Solved lab\""git push origin masterCreate a Pull Request so that your TAs can check your work.Test Your CodeThis LAB is equipped with unit tests to provide automated feedback on your lab progress. In case you want to check the tests, they are in the tests/viking.spec.js file.To run the tests and your JavaScript code, open the SpecRunner.html file using the Live Server VSCode extension.To see the outputs of the console.log in your JavaScript code, open the Console in the Developer Tools.InstructionsYou will work on the src/viking.js file.Your task is to write the correct code in the src/viking.js file to make the tests pass. In this file, you will find the following starter code:// Soldierclass Soldier {}// Vikingclass Viking {}// Saxonclass Saxon {}// Warclass War {}Iteration 0: First testLet's have a look at the first test case together to get you started.The first test case says that \""Soldier class >> should receive 2 arguments (health & strength)\"", so we have to write the correct code to pass this test. Let's make the Soldier class receive two arguments:// Soldierclass Soldier {  constructor(health, strength) {}}// Vikingclass Viking {}// Saxonclass Saxon {}// Warclass War {}Iteration 1: SoldierModify the Soldier class and add 2 methods to it: attack(), and receiveDamage().classshould receive 2 arguments (health & strength)should receive the health property as its 1st argumentshould receive the strength property as its 2nd argumentattack() methodshould be a functionshould receive 0 argumentsshould return the strength property of the SoldierreceiveDamage() methodshould be a functionshould receive 1 argument (the damage)should remove the received damage from the health propertyshouldn't return anythingIteration 2: VikingA Viking is a Soldier with an additional property, their name. They also have a different receiveDamage() method and a new method, battleCry().Modify the Viking class, have it inherit from Soldier, re-implement the receiveDamage() method for Viking, and add a new battleCry() method.inheritanceViking should extend Soldierclassshould receive 3 arguments (name, health & strength)should receive the name property as its 1st argumentshould receive the health property as its 2nd argumentshould receive the strength property as its 3rd argumentattack() method(This method should be inherited from Soldier, no need to re-implement it.)should be a functionshould receive 0 argumentsshould return the strength property of the VikingreceiveDamage() methodThis method needs to be re-implemented for Viking because the Viking version needs to have different return values.should be a functionshould receive 1 argument (the damage)should remove the received damage from the health propertyif the Viking is still alive, it should return \""NAME has received DAMAGE points of damage\""if the Viking dies, it should return \""NAME has died in act of combat\""battleCry() methodLearn more about battle cries.should be a functionshould receive 0 argumentsshould return \""Odin Owns You All!\""Iteration 3: SaxonA Saxon is a weaker kind of Soldier. Unlike a Viking, a Saxon has no name. Their receiveDamage() method will also be different than the original Soldier version.Modify the Saxon, constructor function, have it inherit from Soldier and re-implement the receiveDamage() method for Saxon.inheritanceSaxon should extend SoldierclassYou don't have to include a constructor method since this class will inherit perfectly from the parents class, both the health and the strength (it extends Soldier class 😉 )attack() methodThis method should be inherited from Soldier, no need to re-implement it.should be a functionshould receive 0 argumentsshould return the strength property of the SaxonreceiveDamage() methodThis method needs to be re-implemented for Saxon because the Saxon version needs to have different return values.should be a functionshould receive 1 argument (the damage)should remove the received damage from the health propertyif the Saxon is still alive, it should return \""A Saxon has received DAMAGE points of damage\""if the Saxon dies, it should return \""A Saxon has died in combat\""BONUS - Iteration 4: WarNow we get to the good stuff: WAR! Our War class will allow us to have a Viking army and a Saxon army that battle each other.Modify the War class and add 5 methods to its class:addViking()addSaxon()vikingAttack()saxonAttack()showStatus()classWhen we first create a War, the armies should be empty. We will add soldiers to the armies later.should receive 0 argumentsshould assign an empty array to the vikingArmy propertyshould assign an empty array to the saxonArmy propertyaddViking() methodAdds 1 Viking to the vikingArmy. If you want a 10 Viking army, you need to call this 10 times.should be a functionshould receive 1 argument (a Viking object)should add the received Viking to the armyshouldn't return anythingaddSaxon() methodThe Saxon version of addViking().should be a functionshould receive 1 argument (a Saxon object)should add the received Saxon to the armyshouldn't return anythingvikingAttack() methodA Saxon (chosen at random) has their receiveDamage() method called with the damage equal to the strength of a Viking (also chosen at random). This should only perform a single attack and the Saxon doesn't get to attack back.should be a functionshould receive 0 argumentsshould make a Saxon receiveDamage() equal to the strength of a Vikingshould remove dead Saxons from the armyshould return result of calling receiveDamage() of a Saxon with the strength of a VikingsaxonAttack() methodThe Saxon version of vikingAttack(). A Viking receives damage equal to the strength of a Saxon.should be a functionshould receive 0 argumentsshould make a Viking receiveDamage() equal to the strength of a Saxonshould remove dead Vikings from the armyshould return result of calling receiveDamage() of a Viking with the strength of a SaxonBONUS - Iteration 5Since there is a lot of repetitive code in the previous two iterations, methods vikingAttack() and saxonAttack(), try to create one generic method and call it in the case of vikingAttack and in the case of saxonAttack instead of using almost the same code for both methods. (This iteration doesn't have the test, so ask your TAs and your instructor to give you feedback on the quality of your code after the refactor.)showStatus() methodReturns the current status of the War based on the size of the armies.should be a functionshould receive 0 argumentsif the Saxon array is empty, should return \""Vikings have won the war of the century!\""if the Viking array is empty, should return \""Saxons have fought for their lives and survived another day...\""if there are at least 1 Viking and 1 Saxon, should return \""Vikings and Saxons are still in the thick of battle.\""Happy Coding! ❤️FAQs  I am stuck in the exercise and don't know how to solve the problem or where to start.  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.Back to top  All of the Jasmine tests are failing and in red. Why did this happen?  One possible reason why all of the Jasmine tests are failing is that there is a syntax error in the code being tested. If the code contains a syntax error, it will not be loaded properly and none of the tests will be able to run. This will cause all of the tests to fail.To troubleshoot this issue, you will need to examine the code being tested for syntax errors. Look for missing brackets, semicolons, or other syntax issues that could be causing the problem. If you find a syntax error, correct it and try running the tests again.Another possibility is that there is an issue with the tests. It is possible that you may have modified the test file and caused an issue. If you have made changes to the test file, try copying and pasting the original test file and running the tests again to see if this resolves the issue.Back to top  How do I loop over an array using the forEach() method?  The forEach() method executes a provided function once for each array element. It does not return a new array but rather executes the function on each element in the array.The syntax of the forEach() method is as follows:array.forEach( function(element) {  // code to be executed for each element});Here is an example that uses the forEach() method to log each element and its index in an array to the console:const fruits = ['apple', 'banana', 'cherry'];fruits.forEach( function(element, index) {  console.log(`${index}: ${element}`);});You can also use an arrow function as the callback function for forEach():fruits.forEach((element, index) => {  console.log(`${index}: ${element}`);});Back to top  How do I remove an element from an array?  You should use the splice() method to remove an array element at a specified index. The splice() method modifies the original array and returns an array containing the removed elements.Syntax:array.splice(start, deleteCount, item1, item2, ... )start: The index of the first element to be removed.deleteCount: The number of elements to be removed.item1, item2, ...: (optional) The elements to add to the array, starting at the start index.  For example, to remove an array element at index 2 (which is \""c\""):let numbers = [\""a\"", \""b\"", \""c\"", \""d\"", \""e\""];// Remove 1 element starting at index 2 (removes \""c\"")let removed = numbers.splice(2, 1);console.log(numbers);  // Output: [\""a\"", \""b\"", \""d\"", \""e\""]console.log(removed);  // Output: [\""c\""]For more information, check: MDN: splice()Back to top  How can I extend a class and reuse methods through inheritance?  In JavaScript, you can use the extends keyword to create a subclass that extends a superclass (also called a base class).The subclass inherits methods and properties from the superclass and can also have its own methods and properties.Here is an example of extending a class and reusing its methods in JavaScript:class Dog {  constructor (name) {    this.name = name;  }    bark() {    console.log(`${this.name} is barking.`);  }}class Labradoodle extends Dog {  constructor (name, color) {    super(name);    this.color = color;  }}const dog1 = new Labradoodle(\""Daisy\"", \""white\"");dog1.bark();  // Output: \""Daisy is barking.\""In this example, the Labradoodle class extends the Dog class and inherits the name property and the bark() method. The Labradoodle class also defines its own property color.When the bark() method is called on the dog1 object, it uses the method bark() coming from the Dog class, because the Labradoodle class extends the Dog class and inherits its methods and properties.Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first and then clone your fork to your local machine to be able to push the changes.Note: You should make a copy of your local code to avoid losing it in the process.Back to top"
55,learn-co-curriculum/phase-0-the-dom-editing-lab,https://github.com/learn-co-curriculum/phase-0-the-dom-editing-lab/blob/master/README.md,JavaScript,"DOM Editing LabLearning GoalsIdentify that DOM nodes are written as HTMLIntroductionWe've started looking at the DOM and how it's created. Now it's time to see itsstructure.If you haven't already, fork and clone this lab into your local environment.Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code.Identify That DOM Nodes Are Written As HTMLIn the previous lesson, we learned that, when we load a web page in a browser,the content we see in the DOM is a representation of the underlying HTML, CSSand JavaScript. If we were to view the DOM in Chrome Dev Tools (we'll learn howto do that shortly), we would see HTML that is a clone of the HTML found in thesource HTML file. As we learned earlier in the course, that HTML consists ofelements that in turn consist of HTML tags and their content.When we're working in the DOM, the structure is the same. We can access objectsin the DOM (called nodes) that consist of tags, just like the HTML elementsthat make up the base HTML. Nodes and elements are not the same thing —all elements in the DOM are nodes but not all nodes are HTML elements. However,when we're working in the DOM, the nodes we access and modify are virtuallyalways HTML elements.The Structure of DOM ContentWe'll start by going over how content in the DOM is structured using nodes. Theinformation below should be familiar from what you've learned about HTMLelements.DOM nodes most often have a starting tag and an ending tag. Examples include aparagraph:<p>I am a paragraph.</p>or a main section:<main></main>Because they have both starting and ending tags, we can nest other nodes insidethem. The inner node is called a child node, and the outer node is called aparent node. To nest items, we simply add the child node and its content betweenits parent's starting and ending tags:<body>  <main>    <p>I am a nested paragraph, inside the main element, inside the body!</p>  </main></body>Some nodes only have a starting tag. Those are called self-closing elements orvoid elements. Void elements do not have any content nested inside of them andcannot be parent nodes.An example of a self-closing tag is an image:<img  src=\""https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\""  alt=\""A cartoon gif\""/>In self-closing tags, the trailing / is optional. This is valid too:<img  src=\""https://media.giphy.com/media/3o6MbkZSYy4mI3gLYc/giphy.gif\""  alt=\""A cartoon gif\"">Enough review, let's write some HTML!InstructionsStart by running the tests and taking a look through the errors. You'll see thatthe tests are looking for certain content to be present in the HTML file.Next, open the index.html file in the browser using the instructions in theprevious lesson for your development environment.Just to speed things up a bit, paste the following code into index.html:<!DOCTYPE html><html lang=\""en\"">  <head>    <meta charset=\""UTF-8\"" />    <meta name=\""viewport\"" content=\""width=device-width, initial-scale=1.0\"" />    <meta http-equiv=\""X-UA-Compatible\"" content=\""ie=edge\"" />    <title>Introduction to the DOM Lab</title>  </head>  <body>    <!--All our work for this lesson will go here-->  </body></html>Refresh the browser page to see the changes.Open the Google Developer Tools by clicking on the \""View\"" menu and selectingDeveloper -> Developer Tools. The Elements tab should be selected but, if itisn't, click on it. Here we have the DOM representation of the HTML sourceloaded by the browser. You should see the head and body elements nestedinside the html element. If the body element is collapsed, use thedisclosure triangle to expand it. You should see that the body element is,temporarily, child-less. Let's go ahead and start adding some content inindex.html.Note: thedisclosure triangle is thetriangle to the left of the <body> tag. When you first open the Elements tab,the nodes are generally collapsed, hiding their contents. You can click thetriangle to expand the node and see its contents. Disclosure triangles arestandard for hiding information throughout Chrome DevTools. If you want to seemore, feel free to click on the triangle! You're not going to break anything.First, let's add a title to our page:<h1>My HTML adventure</h1>Refresh the page to see the changes displayed in the browser. If you view theElements tab again, you should see that a new child node is nested inside thebody. Finally, run the tests again; the first test should now be passing.Next, we'll add a paragraph below the title. We'll also add some highlightedbits of text to the paragraph to make it stand out a little.<p>  We're writing HTML markup to display in our <strong>browser</strong>. We're  basically telling computers what to do. <em>Neat!</em></p>Save the file and check out the page in the 'Elements' tab. What's happeningabove is that we added some inline elements, <strong> and <em> to ourparagraph to style things a little. The <strong> tag makes any text withinlook important. It's usually bold in browsers by default. The <em> tagallows us to emphasize certain text. This text is typically rendered as italicin browsers.Run the tests again; you should now have all but two of the tests passing.In our paragraph, let's make \""HTML\"" a hyperlink and link to the MDN definition.We'll use the<a> tag for this. Add this to our existing <p>:We're writing<a href=\""https://developer.mozilla.org/en-US/docs/Web/HTML\"">HTML</a> markup todisplay in our <strong>browser</strong>.Notice that HTML attributes (in this case, the href attribute) are shownalongside their opening tag.Lastly, we'll add a table below the paragraph to recap some of the stuff inthis lesson:<table>  <thead>    <tr>      <th>Element name</th>      <th>Display value</th>    </tr>  </thead>  <tbody>    <tr>      <td>h1</td>      <td>block</td>    </tr>    <tr>      <td>p</td>      <td>block</td>    </tr>    <tr>      <td>strong</td>      <td>inline</td>    </tr>    <tr>      <td>em</td>      <td>inline</td>    </tr>  </tbody></table>Woah. That's a lot of markup! If you take a look at the result, though,you'll see that it's a fairly complex visual — it's a table! Our tableconsists of a header and a body. The header allows us to give the columns aname, and the table body contains the rows of content. Both <thead> and<tbody> tags contains rows, which are represented as <tr> (table row). Theserows then contain cells which form the table's columns. In the <thead> row,cells are represented as <th>, while cells in <tbody> have their content in<td> tags.That's a lot of nesting.Look again at the Elements tab. Expand out all the children of the table.This is the DOM tree!When you're done, go ahead and run the tests. They should now all be passing."
56,jaywcjlove/awesome-mac,https://github.com/jaywcjlove/awesome-mac/blob/master/README-zh.md,JavaScript,"Awesome Mac        现在我们变得非常大，与最初的想法不同，如今我们需要收集各种类别非常好用的 Mac 应用程序、软件以及工具。通过 Pull Request 或者 issues 给我推荐优秀好用的Mac应用，很显然我是一个资深 Mac 用户，我需要它们帮助我快乐、高效的工作，同时也分享给你。文档格式参照 awesome。说明English | 中文 表示 开源软件 ，点击进入 开源 仓库； 表示 免费 使用，或者个人 免费 ； 表示 App store 连接地址； 表示项目的相应 Awesome list 的超链接；目录Awesome Mac目录开发者工具编辑器开发者实用工具正则编辑器API开发和分析网络分析命令行工具版本控制GUI版本控制系统数据库设计和产品设计工具原型流程作图工具截图工具其它工具虚拟机通信Email文件共享数据恢复音频和视频云音乐播放器音频录制与编辑书签阅读写作OfficeRSSMarkdown笔记写作制作电子书软件打包工具下载工具网盘输入法浏览器翻译工具安全工具科学上网其它实用工具剪贴板工具菜单栏工具待办事项工具系统相关工具窗口管理密码管理Finder远程协助QuickLook插件第三方应用市场APP正版应用商店黑名单Mac软件下载网站正版/介绍盗版软件下载网站黑名单ContributorsBackersSponsorsLicense开发者工具编辑器一种用于编辑纯文本文件的程序，建议使用免费开源的编辑器Android Studio - Android 的官方 IDE，基于 Intellij IDEA。   Brackets - Adobe 推出的 Brackets 免费/开源编辑器。 BBEdit - 强大的文件编辑器，用于编辑文件，文本文件及程序源代码。Nova - 用于编写 Web 应用，长得漂亮的编辑器，Coda2 下一代编辑器。CotEditor - 轻量级的纯文本编辑器。  Deco IDE - React Native IDE 支持控件拖拽界面实时变更。 Espresso - Web 编程利器，具备了快速且强大的编辑功能、专业检查与分类、即时预览编辑成果、发布与同步功能等。Emacs - Emacs 是基于控制台的编辑器和高度可定制的。   Eclipse - 流行的开源 IDE，主要用于 Java，也为多种语言提供插件支持。 Sublime Text - 一个比较简洁大方带插件管理系统的流行编辑器，Sublime常用插件。 Haskell for Mac - Haskell 的现代开发环境。 HBuilder - HBuilder 是 DCloud（数字天堂）推出的一款支持 HTML5 的 Web 开发 IDE。JetBrains Toolbox App - 管理已安装的JetBrains工具，下载新工具并打开最近的项目。 CLion - 强大的 C 和 C++ IDE。(学生免费)DataGrip - 用于数据库和SQL的跨平台IDE。 (学生免费), 查看此处了解更多。Rider - 跨平台 C# IDE。 它是 Microsoft 的 Visual Studio 的替代方案.AppCode - 适用于 iOS / macOS 开发的智能 IDEPyCharm - 一款 Python 开发集成环境，有专业版和社区版。IntelliJ IDEA - 一款 Java 开发集成环境。(学生免费)GoLand - JetBrains出品的Go开发IDE，智能，灵活Webstorm - 是 JetBrains 公司旗下一款 JavaScript 开发工具。学生免费，点击这里 查看更多。NodeJS - 集成 Node.js，你肯定需要它，很多功能需要它。EditorConfig - 帮助开发者在不同的编辑器和 IDE 之间定义和维护一致的代码风格。Material Theme UI - Google 为 React 开发的主题。LightTable - 下一代代码编辑器。 micro - 一个现代直观的基于终端的文本编辑器。  NetBeans IDE - 免费、开源的 IDE，主要用于 Java 开发，可支持多种语言和框架。  ONI - 由 Neovim 提供的 IDE。 Qt - 跨平台 C++ 图形用户界面应用程序开发框架。TextMate - 文本编辑器软件，与 BBedit 一起并称苹果机上的 emacs 和 vim。 Tincta - 一个免费的文本编辑器。  Visual Studio Code - 微软推出的免费/开源编辑器，TypeScript 支持杠杠的，VSCode常用插件。  Vim - Vim 古老的终端中使用的编辑器，Vim常用插件。  Vimr - Vim 客户端，升级 Vim 体验。 Visual Studio Community for Mac - 免费，开源，功能齐全的 IDE。 Xamarin Studio - 免费的跨平台的 C# IDE。支持 IOS、Android 和 .net 开发。  Xcode - 开发 iOS 和 MacOS 基本 IDE。 开发者实用工具BetterRename - 一款强大的批量重命名工具，可以通过搜索功能改名。Beyond Compare - 对比两个文件夹或者文件，并将差异以颜色标示。CodeKit - 自动编译 Less、Sass、Stylus、CoffeeScript、Jade & Haml等文件。Cacher - 基于云的团队代码片段管理器，具有Gist同步，VSCode/Atom/Sublime软件包和Mac/Windows/Linux/Web客户端。CubicBezier - 一个适用于 macOS 的贝塞尔曲线生成器。   Dash - 强大到你无法想象的 API 离线文档软件。DiffMerge - 可视化的文件比较（也可进行目录比较）与合并工具。EnvPane - 图形终端查看环境变量的应用工具。 Fanvas - 把 swf 转为 HTML5 canvas 动画的系统。 FinderGo - Finder 中快速打开终端，定位到目录 Gas Mask - 编辑 hosts 文件的工具，更简单方便。 Go2Shell - 从 Finder 打开命令行。Gemini - 智能的重复文件查找器。Hosts.prefpane - 编辑 hosts 文件的工具。 Hex Fiend - 快速而聪明的开源十六进制编辑器。   iHosts - 唯一上架 Mac App Store 的 /etc/hosts 编辑神器。  Integrity - 轻松找到无效链接。Koala - 预处理器语言图形编译工具，支持 Less、Sass、CoffeeScript、Compass framework 的即时编译。 Kaleidoscope - 一款很强大的文本文件和图像比较工具，同时和 git、svn 等版本控制工具能够完美的结合。Localname - 提供对本地开发服务器的访问权限。 MJML - 简化设计回应电子邮件的方式。 PaintCode - 将设计转换成 Objective-C, Swift 或 C# 代码。PushMate - 可通过确保推送有效载荷正确来解决常见的推送通知问题。PPRows - 计算你写了多少行代码。 SwitchHosts - 一个管理、切换多个 hosts 方案的工具。 SCM Breeze - 用于增强与git交互的shell脚本集(用于bash和zsh)。 SnippetsLab - 管理和组织你的代码片段。StarUML - 强大的软件建模软件。SecureCRT - 一款支持 SSH、Telnet 等多种协议的终端仿真程序。Swiftify - Xcode ＆ Finder 扩展 Objective-C 转 Swift 代码转换器SYM - 一个图形化的崩溃日志解析工具。  TeXstudio - 集成创建 LaTeX 文档的写作环境。  uTools - 一款基于插件的程序员效率工具，包含非常多的实用插件，如图床、UUID、密码、翻译、JSON格式化等。Vagrant Manager - 管理你本地服务。 Vagrant - 用来构建虚拟开发环境的工具。   WeFlow - 一个基于 tmt-workflow 前端工作流的开发工具。 Woodpecker - 在Mac上查看、编辑iOS App的沙盒文件, UserDefaults, Keychain项 zeplin - 前端与设计协同工作专用工具。He3 - 免费智能的开发者万能工具箱. 正则编辑器Patterns - 正则表达式编辑器。Regex - 感觉是用过最漂亮的正则表达式测试工具。Reggy - 正则表达式编辑器。 RegExRX - 正则表达式的开发工具。API开发和分析Cocoa Rest Client - 比 Postman 看起来漂亮的客户端，测试 HTTP/REST endpoints。 Insomnia - 最直观的跨平台 REST API 客户端。  Postman - Postman 帮助我们快速测试 API。Katalon Studio - 简单开放性测试前端开放工具， 网页， 手机应用等客户端。 可以使用在不同的浏览器Apifox - Apifox 是 API 文档、API 调试、API Mock、API 自动化测试一体化协作平台，定位 Postman + Swagger + Mock + JMeter HTTPie - 经典的命令行 HTTP 客户端，现在提供 APP 版和网页版。HTTPie 简单、直观的 HTTP API 客户端。网络分析Charles - 一个代理工具，允许你查看所有的 HTTP 和 HTTPS 流量。James - 用于 https 和 http 进行查询映射请求。  mitmproxy - 一款支持 HTTP(S) 的中间人代理工具，可在终端下运行，可用于抓包  Paw - 先进的 HTTP 客户端。Proxie - HTTP 调试客户端。 Proxyman - 适用于 macOS 的现代直观 HTTP 调试代理. Wireshark - 世界上最广泛使用的网络协议分析软件。  命令行工具A curated list of shell commands and tools specific to OS X. autojump - 告别又臭又长的路径名，一键直达任何目录。  bash-it - 一个社区的 bash 的框架。 bat - 带有语法高亮和Git集成的 cat(1) 克隆。  color-retro-term - 一款复古风格的终端，非常酷炫。cool-retro-term - 怀旧的命令行终端。 Cakebrew - Homebrew 的客户端软件。摆脱命令方便安装、查看、卸载软件。 cmus - 命令行播放音乐应用。  Dnote - 命令行上的笔记本，支持多设备同步和网络界面。  Fig - 终端上的命令行自动补全，支持自定义。 Fish Shell - 智能且用户友好的命令行终端。 Glances - 在命令行中查看你系统运行状态的工具。 httpie - HTTPie 是一个让你微笑的命令行 HTTP 客户端。  hyper - 基于 Web 技术的终端，直接替代自带的 Terminal。 HyperTerm - 一款基于 Node 开发的终端软件，逼格很高。 iTerm2 - 免费的终端工具，直接替代自带的 Terminal，有非常多惊人的特性。 itunes-remote - 通过终端控制您的 iTunes。 job - 短命令并发、重复执行工具, 适用于压测.  LNav - 日志文件阅读器.  mycli - 为 MySQL 命令行客户端，提供语法高亮和提示功能的工具！  m-cli - 用于 macOS 的瑞士军刀。  Mac-CLI - 自动化您的 OS X 系统的使用。  mas - 一个简单的命令行界面的苹果应用商店。  ndm - 查看本地NPM安装的包客户端软件。摆脱命令方便安装、查看、卸载软件。 pgcli - 为Postgres提供一个支持自动补全和语法高亮的命令行工具。  silver searcher (ag) - 类似于ack的代码搜索工具，专注于速度。  Serial - 为工程师和系统管理员嵌入式硬件更容易。spaceship - 一个简约，功能强大且极易定制的Zsh提示。  Tabby (formerly Terminus) - 免费的终端工具，基于 Web 技术的终端，用 TypeScript 写成的跨平台终端工具。深受 hyper 启发。  Termius - 免费的终端工具，可以与 windows 平台的 xshell 媲美。 thefuck - 一个纠正错误命令的工具，输入错误命令后，输入fuck就可以修正成正确的命令行命令，支持自定义的bash_profile命令。tmux - 一个优秀的终端复用器类自由软件。tmuxinator - Tmux的配置管理工具。 ttygif - 将终端录制转换为 GIF 动画。  trash - 将文件和目录移动到废纸篓。 Upterm - Upterm (之前是 Black Screen) 来自 21 世纪的强大终端。 Zsh - 一个专为交互式使用而设计的命令行 shell。   版本控制Git - 版本控制工具，官网提供数十种 GUI 客户端 for Mac。 SVN - 版本控制工具。GUICornerstone - Mac 上最佳的 SVN 管理工具。Fork - 一个快速友好的 Git 客户端。GitFinder - 一个快速和轻量级的 Git 客户端的 Mac 与 Finder 集成。GitX - Pieter's的衍生版本，维护增强生产力和团队开发变化。  Gitbar - 开源，在你的菜单栏上显示 GitHub 贡献统计。 GitHub Desktop - 使用 GitHub 的 GUI 应用。GitUp - 一个简单功能强大的 Git 客户端。 GitKraken - 最流行的图形用户界面的 git 管理工具。Hub - 将 GitHub 接口和 Git 命令进行包装。 OhMyStar - 最好的组织 GitHub Star 的软件。 SourceTree - 强大的 Git 跨平台客户端。SmartGit - 非商业用途免费，全平台支持，集成 GitHub 服务。Sublime Merge -  Git客户端，来自Sublime Text的制造商。Tower2 - 最强大的 Git 客户端。Versions - Mac 上最好的 SVN 管理工具。版本控制系统Coding.net - 代码托管，项目管理，WebIDE，演示部署，开启云端开发模式，让开发更简单。GitLab - 一个用于仓库管理系统的开源项目。GitHub - GitHub 托管代码，项目管理，演示部署，瞧，您现在就在访问GitHub。Gogs - 一款极易搭建的自助 Git 服务 Golang 版本。 Gerrit - Gerrit 是一个免费、开放源代码的代码审查软件，使用网页界面。Gitblit Java 版本 Git 代码托管，项目管理。 Gitea - Gogs 的 fork 版本。phabricator - phabricator 支持 Git、SVN、HG 基于 PHP + Mysql 的开放源代码软件开发平台。数据库Another Redis Desktop Manager - 一款稳定全新的Redis管理工具。Bdash - SQL 客户端应用程序，支持 MySQL、 PostgreSQL (Redshift)、 BigQuery。  Base 2 - 一个用于管理 SQLite 数据库的软件。Chrome MySQL Admin - 一个 Chrome 插件，是 MySQL 开发的跨平台、可视化数据库工具。 Core Data Editor - 核心数据编辑器可让您轻松查看，编辑和分析应用程序的数据。  DB Browser for SQLite - 一个跨平台的用于管理 SQLite 数据库的软件。  DataGrip - JetBrains 公司旗下一款数据库管理工具。点击这里 学生免费。DBeaver - 跨平台 SQL 客户端，支持大部分主流数据库ElectroCRUD - MySQL 数据库 CRUD 应用程序。 Sequel Pro - 一个 MySQL 数据库管理软件。 JackDB - 直接的 SQL 访问你所有的数据，无论在哪里。 medis - 漂亮的 Redis 管理软件。 MongoDB - 一个基于分布式文件存储的数据库。   MongoBooster - MongoDB 图形化管理软件，内嵌 MongoShell，ES6 语法，流畅查询及智能感知。mongoDB.app - 在Mac 上最简单的使用 MongoDB。MDB Explorer - Mac 上查看编辑 Access 数据库的工具。MySQL Workbench - MySQL 数据库官方管理软件。Navicat Data Modeler - 一个数据库设计工具，它帮助创建高质素的概念、逻辑和物理数据模型。Postico - 现代 PostgreSQL 客户端，漂亮功能多。Postgres.app - Mac 上最简单的方法的使用 PostgreSQL 关系型数据库管理系统。 PSequel - PostgreSQL 数据库 GUI 软件。pgModeler - 是一个专为PostgreSQL设计的开源数据建模工具。  RedisClient - 漂亮跨平台的Redis管理软件。 RedisDesktopManager - Redis 跨平台的 GUI 管理工具。 SQLPro Studio - 支持 SQL Server, Postgres, Oracle 以及 MySQL 等主流的数据库可视化管理工具.SQLight - 一个 SQLite 数据库管理器工具，非常好用。 TablePlus - 支持 PostgreSQL，MySQL，RedShift，MariaDB... 各种数据库的高颜值客户端。  Tableau Public - 数据可视化工具。 Keylord - Redis，Bolt，LevelDB 和 Memcached 键值数据库的桌面GUI客户端。redis-pro - 轻量，易用的 Redis 客户端管理工具，使用SwiftUI编写，很好的支持 Dark mode。  设计和产品设计工具Acorn - 一个像 PS，全面的功能集的图像编辑器。Affinity Designer - 矢量图像设计工具，可以是 Adobe Illustrator 的替代。Affinity Photo - 光栅图像设计工具，可以替代 Adobe PS 图象处理软件。Alchemy - 开源的绘图工具软件，用于素描、会话以及一种新的绘图方式。Amadine - 一款矢量绘图应用程序，将图形设计师所需的一切包装在一个整洁直观的界面中。Art Text 3 - 生成各种特效字体。Blender - 全功能可扩展的跨平台 3D 内容套件。 Colorpicker - 一个完整的开源颜色处理工具！  Figma - 一款基于 Web 的实时协作的云设计软件。 FontForge - 字体编辑工具。  GIMP - 图像编辑软件，号称 Linux 下的 PhotoShop，同时有 Mac 版本。inklet - 将 Mac 上的触摸板变成绘图板。Inkscape - 一款开源矢量图形编辑软件，与 Illustrator、Freehand、CorelDraw、Xara X 等其他软件相似。Krita - 一个开源的位图形编辑软件，包含一个绘画程式和照片编辑器。  macSVG - 设计HTML5 SVG艺术和动画。  MagicaVoxel - 轻量级的8位像素编辑和交互路径追踪渲染器。MakeHuman - 功能强大且免费的3D人体建模器。 Monodraw -  macOS 平台上强大的 ASCII 设计流程编辑器。 Nik Collection - 专业照片后期制作工具，Google 收购后免费Paintbrush - 位图图像编辑器。 Pencil2D - 制作2D手绘动画的简单直观的工具。  Pixelmator - 强大的图像编辑器，可能PS图像处理软件的选择。Principle -  使用它很容易设计动画和交互式用户界面。ScreenToLayers - 轻松导出桌面分层文件 PSD 文件。  Sculptris - 所见所得的 3D 建模。Sketch - 混合矢量/位图布局应用，特别适用于用户界面，Web 和移动设计。Sketch Cache Cleaner - 清理 Sketch 历史文件，释放磁盘空间。  Measure Plugin - 设计稿标注、测量工具。  Sketch Toolbox Plugin Manager - 一个超级简单的 Sketch 插件管理器。 User Flows Plugin - 直接从画板生成流程图。 SketchBook - 出众的绘图软件。Sparkle - 可视化网页设计工具。System Color Picker - macOS颜色选择器是一款具有更多功能的应用程序。 []  Tayasui Sketches - 专业的绘图软件。Vectornator: Design Software - Galaxy中最直观、最精确的插图软件。 Vectr - 免费图形编辑器。这是一个简单而强大的 Web 和桌面跨平台工具，把你的设计变成现实。原型流程Axure RP 8 - 画原型图工具，团队协作，方便好用。ProtoPie - 高保真交互原型设计。Adobe XD (Experience Design) - 用于网站和移动应用的设计和原型设计。Balsamiq Mockups - 一个快速的网页设计原型工具，帮助你更快、更聪明的工作。Origami Studio - 一种设计现代界面的新工具，由 Facebook 设计师构建和使用。Flinto - 快速制作高保真的互交原型工具，支持 Sketch 导入。Kite - 一个强大的动画制作工具制作 Mac 和 iOS 原型中的应用。Justinmind - 功能更丰富团队协作方便。MockFlow - 用于网页设计和可用性测试的在线原型设计套件。pencil - 开源免费制作软件原型的工具  Mockplus - 更快更简单的原型设计工具。OmniGraffle - 可用来绘制图表、流程图、组织结构图、思维导图以及插图或原型。XMind - 一款实用的思维导图软件。Lighten - XMind 出品的一款实用的思维导图软件。Scapple - 一款实用的思维导图软件。Framer - 做交互原型的工具。Marvel - 简单设计，原型设计和协作。MindNode - 简洁的风格与人性化的操作，绘制思维脑图。WriteMapper - 专为写作者而设的脑图工具。SimpleMind - 超小体积的思维导图工具。macSVG - 设计 HTML5 SVG 和动画.  作图工具Draw.io - 上百种图形，支持多种格式导出。 OmniGraffle - Omni 成员，native 应用。ProcessOn - 流程图、思维导图、原型图... 中文友好，免费保存 5 个文件。截图工具GifCapture - 开源 macOS 截屏生成 Gif 工具。 Gifox - 专业的高颜值 GIF 录制应用。GIF Brewery - GIF Brewery gives everyone the power to create stunning GIFs from video files.  GIPHY Capture - 免费软件的捕捉和分享图片在桌面上。 Kap - 轻量 GIF 录屏小工具。 KeyCastr - 录屏好帮手，实时显示按键操作的小工具。 Licecap - 是一款屏幕录制工具输出 GIF，录制过程中可以随意改变录屏范围。 Monosnap - 制作截图，录制视频共享文件。  Skitch - 截图附带强大的标注功能。Shifty - 一个菜单栏应用程序，让您更多地控制夜班。 Snipaste - 一个简单但强大的截图工具。Snip - 高效的截图工具，支持滚动截屏，腾讯作品。Teampaper Snap - 为设计师量身定做的屏幕截图兼注释工具。  截图(Jietu) - 截图附带强大的标注功能，腾讯作品。Xnip - 免费好用的滚动截屏利器。 iShot - 完全免费、功能全面的截图工具，支持贴图、滚动截图、延时截图等。  Screen Studio - 分分钟录制精美屏幕，自带精美帧动画，无须编辑。其它工具APNGb - 编辑 png 图片格式的软件。  Assetizr - 图片编辑应用，轻松更改图片尺寸，压缩图片，重命名图片。 AppIconBuilder(图标构建) - App图标多平台一键导出。Couleurs - 简单的屏幕取色应用程序。 Eagle App - 强大的图片、视频、音频、設計素材及文件管理软件。Frank DeLoupe - 支持 Retina 的屏幕拾色器。Image2icon - 将你的图片转换成图标。ImageAlpha - 压缩 PNG 图片，去掉无效的透明。 ImageOptim - 压缩图片，删除 EXIF 信息。 iPic - 上传图片至七牛、阿里云等图床，支持 Markdown 链接。 IconKit - App图标自动生成器。Iconjar - 图标管理软件，带组织和搜索功能。JPEGmini - 将图像尺寸降低高达 80％，而不会影响质量。Preset Brewery - 将Lightroom预设转换为Adobe Camera Raw的工具。PicGo - 支持常用 cdn 的图床工具。Resize Master - 更快速和容易批量调整图像和加水印。  RightFont - 字体管理工具。svgus - SVG 图片管理器。Solarized - 干净清爽的颜色主题，支持 iTerm、Intellij IDEA、Vim 等。Sip - 收集，整理和分享你的颜色拾色器。TinyPNG4Mac - 图片压缩专用开源工具。 Tropy - 照片档案管理工具。 uPic - macOS 原生应用，功能强大且简洁的图床客户端。  马克鳗 - 高效的设计稿标注、测量工具。虚拟机Docker - 开源的应用容器引擎。   DockStation - 管理 Docker 项目的程序。  Multipass - 适用于任何工作站的 Ubuntu 虚拟机。 Parallels Desktop - 虽然好用但是收费机制，更新花钱、花钱、花钱。Portainer - 基于网页管理 Docker 容器和 swarm 集群。  UTM - 适用于 iOS 和 macOS 的全功能系统模拟器和虚拟机主机。Virtual Box - 免费、免费、免费，带 NTFS 读写，不用买 ParagonNTFS，省100块。VMware Fusion - 强大的虚拟机，商业软件。Veertu - Mac 上轻量级的虚拟机。通过一种高响应，沙箱且本地化的方式在你在 Mac 上运行虚拟机。OrbStack - 在 Mac 上无缝高效地运行 Docker 和 Linux。Docker Desktop 替代品，可帮助您更快地工作。通信推荐一些通信工具，沟通，团队协同。Adium - 呃，这个是老的集成多个平台的聊天客户端。BearyChat - 互联网团队协作，沟通工具。ChitChat - WhatsApp 非官方。 Electronic WeChat - 调用微信接口，使用 Electron 开发的第三方漂亮开源微信应用，现已停更。 Franz - 一个使用 Electron开发的，可以同时登录 23 个平台的即时通讯软件。Flume - 简约大气高逼格的Instagram，如果只是浏览点赞评论，免费版已经足够用。Gitter - 关于 GitHub 的项目交流，支持 Markdown，对开发者极为友好。Keybase - 一个安全的消息应用程序!  Maipo脉搏 - 微博第三方 Mac 应用。 Messenger - Facebook 第三方聊天工具。 QQ - QQ for Mac App。Rambox - 消息和电子邮件应用程序，将常见的Web应用程序组合成一个程序。  Skype - Skype 共享、跨平台的短信和电话。Slack - 团队协作，沟通工具。Telegram - 通讯新时代。Textual - 最受欢迎的世界与我们相关的 KPI 应用 for OS X。Teambition - 团队协作。提供管理任务、安排日程、查找文件、即时讨论等团队所需要的一切协作功能。WeChat - 微信 for Mac App。WeeChat - 一个命令行聊天客户端。Zoom - 视频会议 & 屏幕共享，提供录制功能。御飯 - 饭否第三方Mac应用。简聊 - 企业级即时沟通工具，已经下线了，可以自己搭建一套系统玩儿。 钉钉 - 企业级办公通讯免费平台。飞书 - 字节跳动旗下先进企业协作与管理平台。零信 - 随时随地工作，跨平台。今目标 - 一款面向中小企业的互联网工作平台。日事清 - 工作计划软件，日志软件，项目管理，团队协作软件，个人日程管理，团队协作工具。日程安排，计划分配，笔记总结等。RTX_腾讯通 - 企业内部可以使用的聊天软件，企业内部可以使用此通讯工具，这个软件有Mac版本也有win版本，Mac版本专为 Retina 显示优化过EmailAirmail - 快速的邮件客户端支持 Mac 和 iPhone。Foxmail - 快速的邮件客户端。网易邮箱大师 - 全平台的邮箱管理客户端，网易邮箱大师电脑版。 MailTags - 管理和组织邮件，日程和标签进行分类邮件。Nylas Mail - 免费邮件客户端。   N1 - 可以扩展的开源收费邮件客户端。Newton(原Cloudmagic) - 界面非常简洁的一个邮件客户端。Postbox - 这个貌似也非常强大哦，关键是简洁漂亮的收费邮件客户端。Polymail - 简单，功能强大，长得好看的新晋邮件客户端。Spark - 新推出的快速邮件客户端支持 Mac 和 iPhone。ThunderBird - Mozilla 公司出品的强大的 Email 客户端程序。Yomail - 新出的国内开发的比较好的邮件客户端。文件共享Cyberduck - 免费 FTP，SFTP，S3 和 WebDAV 客户端 & OpenStack Swift Client。Flow - 支持简单的 FTP + SFTP 客户端。Transmit - 一个 FTP 客户端，支持 FTP + SFTP + S3。Yummy FTP - 专业快速，可靠的 FTP 客户端。数据恢复DiskWarrior - 恢复文件系统损坏时，磁盘工具进行选择。Data Rescue - 多种情况下的全面和专业的数据恢复。R-Studio for Mac - 可恢复分区被格式化、损坏或被删除的文件。音频和视频Adapter - 视频，音频和图像转换工具。Aegisub - 免费、开源、跨平台的专业字幕编辑软件，可以快速打轴，制作特效字幕等，字幕组必备。  Audio Profile Manager - 允许您为连接设备的每个特定组合固定输入/输出设备。可能会禁止选择HDMI显示器。 Ardour - 录制，编辑和混合多轨音频。Audacity - 免费开源的编辑音频的软件。Audio Hijack - 一个记录任何应用程序的音频，包括网络电话 Skype，网络流从 Safari，以及更多。ArcTime - 跨平台字幕制作软件。BeMyEars - 听障人士免费, 系统语音本地识别实时生成字幕, 支持多种语言, 让你的每个音视频都拥有类似 YouTube 的字幕体验.BlackHole - Freemium，用于录制/路由内部音频的开源虚拟输出/输入音频驱动程序。  Carol - 为 macOS 提供最小化和美丽的歌词应用程序。 Cog - 一个免费的开源音频播放器。  DaVinci Resolve  - 免费、跨平台视频编辑、颜色分级、视频效果和音频编辑软件。Elmedia Player - 支持 FLV, MP4, AVI, MOV, DAT, MKV, MP3, FLAC, M4V 等格式播放.ffWorks - macOS的综合媒体工具。使每个人都可以使用高质量的视频编码。Gifski - 将视频转换为高质量GIF。   HandBrake - 高性能的视频编码和转换工具，具有很好的图形用户界面。Hydrogen - 专业鼓乐类工具，创建专业但简单而直观的鼓乐节目。iFFmpeg - MacOS 上功能强大、易用的视频压制软件。IINA - 基于MPV的，现代视频播放器，支持多点触摸控制。 Kodi - 一款一流的免费开源媒体中心软件，可用于播放视频、音乐，查看图片，玩游戏等。 LMMS - LMMS以前称为“Linux多媒体工作室”，是一个功能强大的数字音频工作站，设计类似FL Studio（以前称为Fruity Loops）。 LosslessCut - 跨平台工具，使用ffmpeg进行快速无损的视频和音频修剪。  LyricsX - 一款功能完备的歌词工具。  Metadatics - 音频元数据编辑器，支持大多数常见的音频文件。Mp3tag - 一个功能强大且易于使用的工具，用于编辑音频文件的元数据。Mixxx - 免费的DJ软件，给你一切你需要的表演组合，名副其实的替代 Traktor。 Movie Catcher - 电影美剧搜索及在线观看离线下载软件，借助百度云实现离线下载以及在线播放功能。 mpv - 一个免费、开源和跨平台的媒体播放器。 MuseScore - 免费的作曲与乐谱软件。 Natron - 开源的视频合成软件，功能与 Adobe After Effects 或者 Nuke 类似。Omniplayer - Mac上最好的媒体播放器，支持几乎所有格式。 Popcorn Time - 电影播放器，观看 torrent 电影。PotPlayer X - omi出品，音视频播放器，界面简洁，功能齐全  Perian - (不再处于活跃开发中) 让 QuickTime 播放所有常见格式的免费插件。. Playback - 实验性质的视频播放器。  Plug - 发现并聆听来自Hype Machine的音乐。   Popcorn Time - 立即观看 torrent 电影，这项爆米花时间服务将永远不会被取消。下载并享受。Radiant Player - Google Play音乐播放器。 Recordia - 直接从菜单栏或使用全局键盘快捷键录制音频。 ScreenFlow - 屏幕和视频编辑软件。Shotcut - 免费开源视频编辑器。  Soda Player - 一款能够直接播放种子、磁力链接、在线视频、自动获取字幕、链接和本地视频文件的播放器。 Sonora -  一个很小的音乐播放器。 SpotMenu - Spotify 和 iTunes 在状态菜单栏中显示。  Stremio - 电影、电视节目、连续剧、电视直播或 YouTube 和 Twitch 等网络频道。电视-你可以在 Stremio 上找到这一切。 Stringed 2 - 音频编辑处理工具。 Synfig Studio - 工业级、强大的 2D 矢量动画制作软件。 VLC - 开源的跨平台多媒体播放器及框架，可播放大多数多媒体文件。 VOX Player - 免费全能音乐播放器，撸码之余听听歌是一种享受。XLD - 解码/解码/转换/播放各种“无损”音频文件。 云音乐播放器ieaseMusic - 基于网易云音乐  QQ音乐 网易云音乐 酷我音乐 酷狗音乐 音频录制与编辑GarageBand - 来自Apple的免费数字音频工作站（DAW)，提供简介低门槛的操作界面和完整的音乐录制、剪辑制作功能  Logic Pro X - 来自Apple的专业数字音频工作站（DAW），提供完整专业的音乐制作功能、优秀的自带插件和音源，原生支持Apple Silicon实现高效运行 书签阅读写作Agenda - 以日期为重点的笔记记录应用程序，用于规划和记录您的项目。 Bear Writer - 漂亮，灵活的写作应用程序，用于制作笔记和散文。 Boostnote - 为程序员量身定做的笔记应用。 Chmox - 读 chm 文件的软件。CHM Reader - 读 chm 文件的软件。iChm - 读 chm 文件的软件。 Joplin - 支持 markdown 的开源记事本和具有同步功能的待办事项列表管理器。  Kindle App - 亚马逊 Kindle App 电子书阅读器。Klib - 全新的 Kindle、iBooks 标注管理工具。 MarginNote - 一款优秀的 PDF 有标注软件，批注、抽认卡、思维导图、汇总视图等功能。PDF Reader Pro - 可以查看，创建，签名，转换和压缩任何 PDF 文档。PDF Expert - PDF 阅读、批注，编辑文本，添加照片，填写表单。QOwnNotes - 是开源记事本，带有 markdown 支持和待办事项列表管理器。  Spillo - 功能强大，美观、快速网络书签网页阅读。Skim - PDF 阅读器和笔记本。  texifier - Mac 下非常棒的 LaTeX 编辑器。 支持自动编译预览，自动补全等。OfficeKOffice - 集成化办公套件，包含文字处理器、电子 表格、幻灯片制作、项目管理等多种工具。Keynote 讲演 - 构建炫目的演示文稿。  LibreOffice - 一款功能强大的免费开源办公软件，默认使用开放文档格式，并支持其他多种文档格式。 Microsoft Office - 微软Office办公套件 Numbers 表格 - 创建令人印象深刻的电子表格。  Pages 文稿 - 引人注目的文稿。  WPS - 是一套跨平台的办公室软件套件。 RSSLeaf - RSS 客户端程序。NetNewsWire - 免费的 RSS 阅读器。 ReadKit - 书签 RSS 管理客户端。Reeder 5 - RSS 服务订阅 Vienna - RSS/Atom 新闻阅读客户端。 irreader - 多功能的 RSS 阅读器，支持订阅播客和任何网站。Elytra - 一款简单又私密的 RSS 提要阅读器，支持原生渲染，适用于 macOS 和 iOS MarkdownA curated list of delightful Markdown stuff. Cmd Markdown - Cmd Markdown 编辑阅读器，支持实时同步预览，区分写作和阅读模式，支持在线存储，分享文稿网址。 Effie - 轻量级 Markdown 写作软件，支持大纲笔记和思维导图。EME - 最近刚出的一款 Markdown 编辑器，界面很像 Chrome 浏览器的界面，很简约。iA Writer - Markdown 文本预览编辑，注重语法检查，专门为作家提供的编辑器。LightPaper - 简单的 Markdown 文本编辑器。MacDown - 一款开源的 Markdown 编辑器，深受Mou的影响。 Marked 2 - Markdown 文本预览编辑，为所有作家提供一套优雅而强大的工具。MarkText - 简单而优雅的 Markdown 编辑器，专注于速度和可用性。  Marp -  Markdown 制作幻灯片编辑器。 Marxico马克飞象 - 一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。妙言 - 轻灵的 Markdown 笔记本伴你写出妙言。MWeb - 专业的 Markdown 写作、记笔记、静态博客生成软件。TextNut - Markdown 编辑器，富文本之间自由切换。Typora - 基于 Electron 的“读写一体” Markdown 编辑器。Ulysses - 适用于 Mac，iPad 和 iPhone 的写作应用程序，支持 Markdown。Yu Writer - 一款能找到写作乐趣的 Markdown 文本编辑器。 笔记Evernote - 笔记本应用程序。 Inkdrop - Markdown 爱好者的笔记本应用程序。leanote - 支持 Markdown 的一款开源笔记软件，支持直接成为个人博客。 Notes - 简洁的笔记应用。  NotePlan 3 - 您的任务、笔记和日历、纯文本 Markdown 文件。 Notebook 漂亮的笔记本应用程序。 Notion - 一个集大成的富文本笔记管理软件，支持丰富却又简单明了的的文字格式，甚至覆盖了TODO类软件的功能。数据在服务端存储，支持web访问，也提供了macOS/Windows/iOS/安卓等平台客户端。 OneNote - 微软备注应用。 Quiver - 程序猿的笔记本。有道云笔记 - 支持多目录，Markdown，iWork/Office 预览。为知笔记 - 支持 Markdown，搜集整理图片链接导入文档。阿里语雀 - 云笔记类知识管理、协作平台，基于Markdown写作，支持内嵌流程图、脑图、时序、代码渲染以及Sketch画板创作，个人知识分享等！相比有道云笔记、印象笔记同类产品，包含其全部的功能以外，支持知识分享以及更强大的创作、协作、编辑器，它来自阿里巴巴蚂蚁金服。写作WonderPen - 专注于写作的应用，支持 markdown，很多贴心细节，支持长文写作，可导出多种格式。THORN - 一款流畅，实用，美观，跨平台的基于 CRDT 技术构建的现代写作工具，支持本地优先、多设备同步、实时协作以及分享与导出。制作电子书Calibre - 丑陋的软件，但强大的软件电子书管理和转换。 Sigil - 多平台 EPUB 编辑器。  Scribus - 开源电子杂志制作软件。  软件打包工具AppJS - 使用 JS、HTML 和CSS 构建跨平台的桌面应用程序。 AlloyDesktop - 同上，腾讯出品，给个差评。 create-dmg - 快速创建一个压缩镜像文件。  Electron - 前身是 AtomShell，使用 JS、HTML 和 CSS 构建跨平台的桌面应用程序。 Electrino - 使用 JS、HTML 和 CSS 构建跨平台的桌面应用程序，构建出的应用体积比 Electron 小。 Finicky - Web 应用程序转化为苹果的应用程序。 HEX - 使用 JS、HTML 和 CSS 构建跨平台的桌面应用程序，有道出品。 ionic - 一个用来开发混合手机应用的，开源的，免费的代码库。  nw.js - 使用 HTML 和 JavaScript 来制作桌面应用。 MacGap - 桌面 WebKit 打包 HTML、CSS、JS 应用。 react-desktop - 为 macOS Sierra带来 React UI 组件。 ReactXP - 微软官方出品，支持平台 Web，iOS，Android 和 Windows UWP 仍然是一项正在进行的工作。 React Native macOS - 用 React Native 技术构建 OS X 下的桌面应用程序。 React Native Desktop for Ubuntu - 用 React Native 技术构建 Ubuntu 下的桌面应用程序。 下载工具aria2 - 一款支持多种协议的轻量级命令行下载工具。 Downie - 支持多达近 1200 个视频站点的视频下载工具。Free Download Manager - 功能强大的下载加速器。FOLX - 一个 Mac osx 系统风格界面的下载管理工具。 JDownloader - 下载工具，下载文件的一键式托管。Motrix - Motrix 是一款全能的下载工具，支持下载 HTTP、FTP、BT、磁力链、百度网盘等资源。  qBittorrent - 一个替代 μTorrent 的开源软件。  Transmission - 免费的 BitTorrent 客户端  You-Get - 网络富媒体命令行下载工具。 网盘推荐一些有Mac客户端的网盘。115 - 115 云客户端。Dropbox - 非常好用的免费网络文件同步工具，提供在线存储服务。NextCloud - 基于 ownCloud 完全开源免费开源，企业文件同步和共享。 Mega - 免费的云服务，提供 50GB 的免费存储空间。Resilio Sync - P2P私有云盘，BitTorrent血统，支持安卓/iOS/Windows/macOS/Linux/FreeBSD/NAS等系统平台。注意：截止2021.7.20，macOS平台客户端存在休眠崩溃现象，除此之外可以正常使用。Seafile - 是由国内团队开发的国际化的开源云存储软件项目。Syncthing - Resilio Sync的开源竞争者，架构上更加开放自由，良好的用户文档，基于Go语言支持大量系统平台，甚至包括OpenWrt！此项目的界面翻译工作也支持开源共建。 ownCloud - 私有云网盘。百度云 - 百度云客户端。腾讯微云 - 腾讯云客户端。坚果云 - 坚果云客户端。亿方云 - 硅谷团队打造，个人免费。阿里云盘 - 阿里云盘。阿里云盘小白羊版 - 阿里云盘小白羊版为阿里云盘第三方客户端，多平台支持，增加了 Aria2 下载，调用第三方播放器等功能输入法Kawa - 给每个输入法定义一个快捷键.  RIME - 中州韻輸入法引擎。 Rocket - 使用冒号快捷键可以更快捷地输入表情符号。Type2Phone - 把 Macbook 键盘变为 iPhone 的蓝牙键盘。 WBIM - 五笔输入法。QQ输入法 - 腾讯出品的输入法。搜狗输入法 - 搜狗输入法。百度输入法 - 支持拼音五笔输入。落格输入法 - 打破 Mac 双拼多年来的窘境。iAvro - 孟加拉语输入法。  清歌五笔输入法 - 为 iOS 和 Mac 专门打造的五笔输入法。颜文字 - 颜文字输入。哈利路亚英文输入法 - 智能英文输入法，具备自动补全，自动纠错功能。 业火五笔输入法 - 轻量干净，功能强大的五笔输入法，完全开源。 InputSourcePro - 通过简洁的提示方式，配合输入法自动切换功能，让每一次输入都信心十足。微信键盘-微信官方出品的中文输入法,弥补mac版本微信无法搜索表情发送的问题。浏览器这里放Mac的浏览器应用Brave - 用 Brave 浏览更快更安全。 Chrome - Chrome 浏览器谷歌出品。Microsoft Edge - Edge 浏览器微出品，相比于 chrome 青出于蓝胜于蓝 Firefox - 迎接 Firefox Quantum。快，只为更好。火狐浏览器。Safari - Mac 预装自带浏览器。 Opera - Opera 浏览器。QQ浏览器 - QQ 浏览器－腾讯出品。Vivaldi - Opera 开发商出品新的浏览器。Ōryōki - 小的 web 浏览器。这是一个试验性的项目，目前正在开发中傲游云浏览器 - 傲游云浏览器。360极速浏览器 - 更好用，不将就。Chromium - 由 Google 及社区开发的浏览器，开源免费，同时为 Chrome 提供源码  ungoogled-chromium - ungoogled-chromium 移除了 Google 专有组件加强了隐私控制使其更加透明 [(https://github.com/ungoogled-software/ungoogled-chromium/) ]Arc - 更好地使用互联网的方式 翻译工具有道翻译 - 有道词典桌面版。辞海词典 - 学单词、背单词、辞海词典。eudic - 欧路词典词典。Grammarly - 修正英语语法及用语iText - 截图识别文字、翻译  iTranslate - 支持全世界超过 80 种语言发音和输出。Ludwig - 语言搜索引擎，可帮助您用英语写得更好。Translate Tab - 菜单栏翻译插件，封装了谷歌翻译，支持自动识别语言。Bob - 简小好用的翻译工具，支持语言自动检测，截图翻译。OpenAI Translator - 基于 ChatGPT API 的划词翻译浏览器插件和跨平台桌面端应用。Translatium - 在 100 多种语言之间翻译单词、短语和图像，并提供字典、音译和语音输出支持。  DeepL - 拥有深度神经学习网络的翻译软件，自称世界上最准确的翻译软件，在学术论文和科技文章方面优于其他同类软件。安全工具Antivirus One - 值得信赖的Mac安全保护工具：保护您的 Mac 免受病毒、恶意软件和广告软件的侵害。阻止潜在的 Web威胁并保护您的Mac免受漏洞影响。 BlockBlock - 恶意软件会自行安装，以确保它在重新引导时自动重新执行。Dylib Hijack Scanner - Dylib 劫机扫描仪或 DHS，是一个简单的实用程序，将扫描您的计算机的应用程序是易受 dylib 劫持或被劫持。Encrypto - 免费加密工具，用于加密文件和文件夹GPG Suite - macOS平台的一站式GnuPG解决方案，提供命令行和GUI的加解密工具。开箱即用的gpg-agent密码缓存服务，还包括一个GUI的pinenry程序，支持与macOS原生钥匙串集成。 KextViewer - 查看所有在 OS 内核中加载的模块。KnockKnock - “谁在那？” 查看Mac上持久安装的内容。LinkLiar - 可以帮助你哄骗 Wi-Fi 和以太网接口的 MAC 地址。  LuLu - 免费的macOS防火墙，旨在阻止未经授权（传出）的网络流量。  Murus - 强大、灵活且易于理解使用的防火墙，官方提供多种不同的APP以提供不同功能的组合。最基础的免费版本Murus Lite是纯粹基于传入端口的防火墙，跟基于应用程序的macOS原生防火墙形成有效互补。OverSight - 监控 Mac 的麦克风和网络摄像头，当内部麦克风被激活，或者当进程访问摄像头时提醒用户。RansomWhere? - 通用 Ransomware 检测。TaskExplorer - 使用 TaskExplorer 探索在 Mac 上运行的所有任务（进程）。What's Your Sign? - 验证文件的加密签名可以推断其来源或可信度。科学上网假设你是个勤奋的同学，你总有一天会强烈需要它们，上帝保佑他们吧。Algo - 在云中设置个人 IPSEC VPN。 ClashX - 基于 clash 的一款支持规则过滤的科学上网工具。 Lantern - 科学上网。 ShadowsocksX - 一个快速的隧道代理，可以帮助你绕过防火墙。 ShadowsocksX-NG - 一款 ShadowsocksX 客户端软件。 Surge - 科学上网。Shimo - 连接大量 VPN 的应用Tunnelbear - 简单的私人 VPN。 Tunnelblick - OpenVPN 的免费软件。tinc - VPN 软件.  V2Ray - 原生支持 Socks、HTTP、Shadowsocks、VMess 等协议。Outline - 借助 Outline，创建 VPN 服务器变得轻而易举，从而让任何人都能访问自由、开放的互联网。  其它实用工具12306ForMac - Mac 版 12306 订票/检票助手。 1440 Minutes Left Today - 在菜单栏中，直接记录到一天结束还剩多少分钟。 AirServer - 将手机投影到电脑上。Alfred - 效率神器。 Raycast - 类似Alfred功能，重要的是免费。BitBar - 支持使用各种语言将信息展示到Mac OS的菜单栏。 BetterZip - 压缩解压缩工具支持格式 ZIP、TAR、TGZ、TBZ、TXZ (new)、7-ZIP、RAR。BetterTouchTool - 代替默认的系统操作方式（组合键、修饰键、手势等）。CheatSheet - CheatSheet 是一款 Mac 上的非常实用的快捷键快速提醒工具。 DaisyDisk - 磁盘空间使用扫描工具。DisplayBuddy - 直接控制外接显示器的亮度和输入DNS Heaven - 可以令基于 glibc 的 macOS 应用直接使用原生栈来解析 DNS，主要适用于 VPN。  eZip - 界面简洁，功能完善，支持主流的多种压缩格式。支持 Mojave 深色模式、QuickLook预览、拖拽解压。 f.lux - 自动调整您的电脑屏幕，以匹配亮度。Lunar - 外接显示器亮度/对比度调节工具，从此告别物理按键。 Hammerspoon - 功能强大的自动化工具，Lua 脚本驱动，支持窗口管理。 HTTrack - 可以下载整个网站和离线浏览。HapticKey - Touch Bar 触觉反馈。  HWSensors - 自带FakeSMC的黑苹果硬件状态监控插件。  Hungrymark - 非常有用的收藏夹应用，收藏文件，文件夹，网址，快速的通过状态栏菜单访问这些书签。  iStat pro - 免费的 Mac OS 电脑硬件信息检测软件。Itsycal - 一款简洁实用的开源日历工具。 Karabiner - 一个强大的和稳定的 OS X 的键盘定制。 Keyboard Maestro - 根据键盘，菜单，位置，添加的设备等触发器自动执行日常操作。Keytty - 让你通过键盘使用鼠标。Keka - 一个免费的 macOS 文件解压缩程序。  Lungo - 防止Mac进入睡眠状态。 Memo - 给你的便笺加个密。 Manta - 灵活的发票桌面应用程序，漂亮和可定制模板。 Mos - 让你的鼠标滚轮丝滑如触控板。 Mac Cache Cleaner - 缓存清理工具  Numi - 漂亮的计算器应用。NoSleep - 合上盖子不休眠，可根据是否连接电源单独设置。OmniDiskSweeper - 磁盘空间使用扫描工具。 OmniPlan - 项目管理软件。PDF Archiver - 一个用于标记和归档任务的好工具。 Qbserve - 观察你如何度过你的时间。RescueTime - 个人分析服务，向您展示如何花时间和提供工具来帮助您提高工作效率。Snap - 一款可以给 Dock 上的程序添加快捷键的小工具。  Streaker - GitHub贡献和统计跟踪菜单栏应用程序。  The Unarchiver - 解压许多不同种类的归档压缩文件。  Timing - Mac 的自动时间和生产力跟踪。Unarchive One - 快速解压单个多个不同种类的压缩文件/压缩文件到各类常见压缩格式。  Ukelele - Unicode 键盘布局编辑器。WWDC - Mac OS 的非官方的 WWDC APP。 xScope - 测量、检查和测试屏幕上的图形和布局的工具。搜索你的苹果和网络，快速打开应用程序。360压缩 - 简单易用，免费无广告的压缩工具。超级右键 - 一款finder右键菜单扩展，包括了大量便捷工具比如新建文件，直接打开终端等 []剪贴板工具ClipMenu - 一个剪贴板操作的管理器。 Clipy - 基于 ClipMenu 继续开发的强大的剪切板管理器。  CopyQ - 高级功能剪贴板管理工具。  Flycut - 面向开发者的干净简单的剪贴板管理器。  iPaste - 轻巧高效的剪贴板工具。  Maccy - 开源于GitHub但不免费的剪贴板管理工具，应用商店中下载需要付费。  Paste - 智能剪贴板历史片段管理。 PasteBot - 强大的剪贴板管理器。 Yippy - 具有用户友好界面的剪贴板管理器。  菜单栏工具BeardedSpice - 允许您使用 Mac 键盘上的媒体键控制基于Web的媒体播放器（SoundCloud，YouTube 等）和一些本机应用程序。  Bartender - 组织或隐藏Mac上的菜单栏图标。BitBar - 支持使用各种语言将信息展示到 Mac OS 的菜单栏。 Fishing Funds - 基金，大盘，股票状态栏实时显示。  iGlance - 状态栏的系统监视器。  Itsycal - 一款简洁实用的开源日历工具。 Vanilla - 隐藏系统菜单栏。 HiddenBar - 一个超轻MacOS实用工具，帮助隐藏菜单栏图标。。   MenubarX - 一款强大的 Mac 菜单栏浏览器，可以在菜单栏固定任何网页，就像原生 App 一样使用。  待办事项工具2Do - 比较好的 TODO 应用程序。Day-O 2 - 菜单日历更换内置日历。Fantastical - 日历应用程序，你将管理好生活。Focus - 一个漂亮的番茄工作法为基础的时间管理工具。 Microsoft To-Do - 任务管理工具微软出品。  Nozbe - 适用于个人和团队的强大GTD应用程序，支持每个Apple设备。OmniFocus - 由 OmniGroups 制作的 Nice GTD 应用程序。Super Productivity - 集成了Timeboxing和时间跟踪功能的跨平台任务管理应用。   Taskade - 实时协作编辑器，协作简历任务管理器，大纲和笔记。TaskPaper - 漂亮的纯文本任务列表。Things - 令人愉快且易于使用的任务管理器。Todoist - 跨平台的任务管理器与移动应用程序。Wunderlist - 奇妙清单跨平台的任务管理器与移动应用程序。滴答清单 - 轻便且强大的跨平台任务管理应用。 系统相关工具AlDente - 充电保护软件，延长 MacBook 电池寿命。 Amphetamine - 覆盖您的节能设置并让您的Mac保持唤醒状态。  AdBlock One - 适用于MacOS/iOS的免费广告拦截器 停止在Safari中看到烦人的广告。更快地打开网站。更安全地浏览网页。 AppCleaner - 一个小应用程序，让你彻底卸载不需要的应用程序。AppTrap - 删除APP的同时移除文件。  BetterMouse - 同时具有平滑滚动，光标加速控制，按键和手势映射等全功能的干净鼠标工具软件。blueutil - 命令行蓝牙控制工具，可以配合SleepWatcher实现MacBook合盖瞬间关闭蓝牙，开盖自动打开蓝牙。这在使用蓝牙耳机时尤其有用。 Cleaner One - 多合一磁盘清理管理器：清理您的 Mac 并优化其性能，立即运行快速扫描以验证什么占用了您的存储空间。 Cleaner for Xcode - Xcode 的清理工具，清理几十G应该不是问题。 coconutBattery - 显示Mac中有关电池的实时信息。DaisyDisk - 磁盘空间使用扫描工具。gfxCardStatus - 控制Mac独立显卡与集成显卡之间的切换。HandShaker -  Mac 电脑上也可以方便自如地管理您在 Android 手机中的内容。 iStat Menus - 菜单栏上的高级 Mac 系统监视器。iStats - iStats 是一个可以让你快速查看电脑 CPU 温度，磁盘转速和电池等信息的命令行工具。 Juice - 让电池显示更有趣  KeepingYouAwake - 替代咖啡因，更好地支持Mac中的暗模式。 Monity - 帮助用户实时监控系统的一款非常漂亮的软件。Mounty - NTFS 分区读写组件。NitroShare - 跨平台网络文件传输应用程序。  OnyX - 多功能实用工具来验证磁盘和文件，运行清洁和系统维护任务，配置隐藏选项等。OmniDiskSweeper - 磁盘空间使用扫描工具。 Pretty Clean - 好用的 macOS 磁盘清理工具 Paragon NTFS - 在 Mac OS X 中完全读写、修改、访问 Windows NTFS 硬盘、U 盘等外接设备的文件。SleepWatcher - 可以在MacBook合盖和开盖时执行自定义脚本，比如开关蓝牙等。可以通过homebrew安装。 smcFanControl - 短小精悍的风扇转速温控软件，可以预设两档风扇最低转速，方便在不同工作负载间人工强制切换。因为只是限制风扇最低速度，所以系统原生温控调速不会完全失效。 Core Tunnel - 管理你的 SSH。 TG Pro - 温度监控，风扇控制和硬件诊断，帮助您保持 Mac的 凉爽和健康。Tuxera NTFS - Mac 上的 NTFS 文件系统驱动。腾讯柠檬清理 - 一款免费的Mac系统清理软件，替代原来的Mac电脑管家，腾讯出品。窗口管理Amethyst - 窗口管理器（自动保持窗口大小的窗口）。 BetterSnapTool - 窗口管理工具，可通过快捷键或窗口拖动快速实现分屏。  Contexts- 提供比 Mac 原生 Dock 更强大功能尤其在你有多个屏幕的时候,它可以帮助你更快捷切换。Divvy - 凭借其惊人的 Divvy Grid 系统，窗口管理处于最佳状态。IntelliDock - 自动隐藏 Dock。Moom - 多任务多窗口的软件。Magnet - 一个窗口管理器，可以保持工作空间的组织。 rcmd - 使用 ⌘ Right Command 键根据名称切换应用程序。 Rectangle-app - Rectangle 是一个基于 Spectacle 的窗口管理应用程序，用 Swift 编写：使用键盘快捷键在 macOS 上移动和调整窗口大小。  ShiftIt - 窗口位置和大小管理软件。  Slate - 窗口管理器，可用 JavaScript 写配置。 SizeUp - 强大的，以键盘为中心的窗口管理。Spectacle - 简单的移动和调整大小的窗口，和可定制的键盘快捷键。  Total Spaces - 像 ubuntu 一样提供窗口管理，为工作区创建热键，使您可以轻松移动。密码管理1password - 跨平台帐号密码管理软件。Authy - 双因素身份验证令牌管理器，可在您的设备上进行备份和同步。 Bitwarden - 适用于Mac OS，iOS和浏览器的开源密码管理工具。  Buttercup - 跨平台密码管理器  Dashlane - 基于云的密码管理器，拥有屡获殊荣的设计。Enpass - 具有云集成的跨平台密码管理工具。 Keeweb - 与 KeePass 兼容的免费跨平台密码管理器。  LastPass - 密码管理器和安全的数字笔记。MacPass - 密码管理器。 Finderfman - 先进的双窗口文件管理器，拥有很多特性。ForkLift - 先进的双窗口文件管理器和文件传输客户端。Hazel - 设计精美的自动文件管理软件。MacAssistant - Google 助手  Path Finder - 强大的 Finder 替代者，拥有很多特性。Quicklook-Plugins - Finder 快速预览文件插件。QSpace - 一款简洁高效的多视图文件管理器。 TotalFinder - 强大的 Finder 替代者，界面风格像 Chrome。XtraFinder - 给 Finder 添加有用的新特性。游戏软件openEmu - 模拟器，可以玩魂斗罗之类，轻松回到小时候。 Porting Kit - 在Mac中安装Windows®游戏。 PPSSPP - 一个很棒的 PSP 模拟器，适用于您梦寐以求的任何操作系统！  RPCS3 - 开源 PlayStation 3 模拟器  Ryujinx - 开源 任天堂 Switch 模拟器  远程协助RustDesk - 又一个远程桌面软件。  AnyDesk 是一款远程控制跨多平台的程序。Microsoft Remote Desktop - 微软官方的远程桌面连接工具(国区App store没有上架,下载地址)。 RealVNC 是一款免费的远程控制跨多平台的程序。 TeamViewer - 远程协助及在线协作和会议功能的软件，商业软件个人使用免费。QuickLook插件List of useful Quick Look plugins for developers. 使用 Homebrew Cask 将通过命令安装即为简单。开发人员使用的Quick Look插件列表。如果手动安装，你可将下载的 .qlgenerator 文件移动到 ~/Library/QuickLook 运行 qlmanage -rQuicklookStephen - 可以让您查看没有文件扩展名的纯文本文件，如 README、INSTALL、Capfile、CHANGELOG...brew install --cask install qlstephen第三方应用市场APP这里讨论盗版问题或者提供黑名单？，拒绝盗版从我做起，欢迎大家监督。正版这里只提供正版软件购买下载的应用商店。Homebrew - 体验通过命令行安装 Mac 软件的工具(大部分是命令行工具)。 MacUpdate Desktop - 管理/更新/下载 App，跟踪优惠信息。MacPorts - 一个软件包管理工具，可用于简化 OS X 和 Darwin 操作系统内软件的安装。  Setapp - MacPaw 推出的订阅制付费 App 平台服务。应用商店黑名单第三方应用市场APP黑名单，存在盗版软件传播和下载，拒绝盗版从我做起，欢迎大家监督它们。迅雷Thunder Store - 迅雷 Thunder for Mac 带应用市场。Mac软件宝箱 - Macx 推出软件宝箱。MacHunter - Mac 应用市场。Mac软件下载网站这里主要是推荐一些软件下载的网站，还有一些Mac OSX软件分享网站正版/介绍App Shopper：http://appshopper.com/MacUpdate：https://www.macupdate.com/少数派：http://sspai.com/tag/MacMac玩儿法：http://www.waerfa.com 腾讯柠檬精选：https://lemon.qq.com/lab/数码荔枝：https://www.lizhi.io/盗版软件下载网站黑名单上面有大量的开源软件或者免费软件，拒绝盗版从我做起，下面被删除的网站提供大量破解软件下载，欢迎大家监督它们。MACPEDIA：https://macpedia.xyz/苹果软件盒子：https://www.macappbox.com/Cmacked：https://mac.cmacked.com/玩转苹果：http://www.ifunmac.comAppKed：http://www.macbed.comappaddict：https://www.appaddict.org/Mac精品软件：http://xclient.info/MacWk：https://macwk.com/MacPeers：https://www.macpeers.comMac毒：https://www.macdo.cnMacx：https://www.macx.cn/Mac软件下载站：http://www.pshezi.comMacPeers：http://www.macpeers.comMac志：http://www.isofts.orgMac软件分享：http://www.waitsun.comMacSky苹果软件园：http://www.macsky.net/Softasm：https://softasm.com/Mac破解软件：https://www.macappstore.net/卡卡源：http://www.kkroot.com/苹果软件园：http://www.maczapp.com马可菠萝：http://www.macbl.com/极致分享：https://alltoshare.com/未来软件园：http://www.orsoon.com/腾牛网：http://www.qqtn.com/mac/r_17_1.html未来软件园：http://www.orsoon.com/mac/威锋网：https://bbs.feng.com/forum.php?mod=forumdisplay&fid=19&page=MAC萌新网：https://www.macxin.com佛系软件：https://foxirj.com/appstorrent：https://appstorrent.ru/⬆ 返回顶部ContributorsThis project exists thanks to all the people who contribute.BackersThank you to all our backers! 🙏 Become a backerSponsorsSupport this project by becoming a sponsor. Your logo will show up here with a link to your website. Become a sponsorLicenseThis work is licensed under a Creative Commons Attribution 4.0 International License.Ax"
57,appium/appium,https://github.com/appium/appium/blob/master/README.md,JavaScript,"AppiumAppium is an open-source, cross-platform test automation tool for native,hybrid, mobile web and desktop apps. Initially created to automate iOS and Android mobileapplications Appium has grown to a full-featured platform that provides WebDriver-based automation possibilities for the whole set of different mobile and desktop platforms.See the full list ofofficially-supported andthird-party drivers for more details.‼️ The current Appium 2.0 documentation can be found here.‼️ Appium core team does not maintain Appium 1.x anymore since the 1st of January 2022. All recent versions of officially supported platform drivers are not compatible to Appium 1.x, and require Appium 2 to run. Please read the migration guide from 1.x to 2.0 to manage the Appium server.‼️ If you still use the deprecated Appium Desktop containing the built-in server then you won't be able to upgrade to Appium 2. Consider switching to Appium Inspector instead.RequirementsmacOS, Linux or Windows operating systemNode.js 16+. Any relevant LTS release should work just fine.NPM (Node Package Manager) 8+These are only server requirements. Each driver might have its own requirements. Consider checking the corresponding driver tutorial for more details.ServerTo install Appium 2 server using Node Package Manager (npm) run the following command:npm i --location=global appiumTo update Appium 2 server using Node Package Manager (npm) run the following command:npm install --location=global appium@latest‼️ Make sure Appium 1 is fully uninstalled before upgrading it to Appium 2 (npm uninstall --location=global appium). Unexpected errors might appear if this has not been done.DriversAppium supports app automation across a variety of platforms, like iOS,Android, and Windows. Each platform is supported by one or more \""drivers\"",which know how to automate that particular platform. Since version 2.0all drivers have been isolated from the Appium server app and canbe managed independently using the appium driver command line interface.In general, the drivers management in Appium 2 is as simple as:# To install a new driver from npmappium driver install --source=npm appium-xcuitest-driver[@<version>]# To install a driver from a local folder (useful for developers)appium driver install --source=local /Users/me/sources/appium-xcuitest-driver# To install a new driver from github (hm, maybe it's time to publish it to NPM?)appium driver install --source=github --package=appium-xcuitest-driver appium/appium-xcuitest-driver# To list already installed driversappium driver list --installed# To update a driver (it must be already installed)appium driver update xcuitest# To uninstall a driver (it won't last forever, wouldn't it?)appium driver uninstall xcuitestYou can find a full list ofofficially-supported andthird-party drivers atthe current Appium 2.0 documentation.PluginsThe concept of plugins is something new that has been added exclusively to Appium2. Plugins allow you to extend server functionality without changing the server code. Plugins could be managed similarly to drivers:# To install an officially supported pluginappium plugin install images# To install a plugin from a local folder (useful for developers)appium plugin install --source=local /Users/me/sources/images# To install a new plugin from npmappium plugin install --source=npm appium-device-farm# To list already installed pluginsappium plugin list --installed# To update a plugins (it must be already installed)appium plugin update appium-device-farm# To uninstall a pluginappium plugin uninstall appium-device-farmThe main difference between drivers and plugins is that the latter must be explicitly enabled on server startup after it was installed (drivers are enabled by default after installation):appium server --use-plugins=device-farm,imagesYou can find a full list ofofficially-supported andthird-party plugins atthe current Appium 2.0 documentation.Server Command Line InterfaceIn order to start sending commands to Appium over the wire it must be listeningon the URL where your client library expects it to listen.Use the following commands to run and configure Appium server:# Start the server on the default port and host (e.g. http://0.0.0.0:4723/)appium server# Start the server on the given port, host and use the base path prefix (the default prefix is /)appium server -p 9000 -a 127.0.0.1 -pa /wd/hub# Get the list of all supported command line parameters.# This list would also include descriptions of driver-specific# command line arguments for all installed drivers.# Each driver and plugin must have their command line arguments# exposed in a special JSON schema declared as a part of the corresponding# package.json file.appium server --helpAppium supports execution of parallel server processes as well as parallel driver sessions withinsingle server process. Refer the corresponding driver documentations regarding which mode is optimalfor the particular driver or whether it supports parallel sessions.Why Appium?You usually don't have to recompile your app or modify it in any way, dueto the use of standard automation APIs on all platforms.You can write tests with your favorite dev tools using anyWebDriver-compatiblelanguage such as Java,JavaScript, Python,Ruby, C#with the Selenium WebDriver API. There are also various third partyclient implementations for other languages.You can use any testing framework.Some drivers, like xcuitest and uiautomator2 ones have built-in mobile web andhybrid app support. Within the same script, you can switch seamlessly between nativeapp automation and webview automation, all using the WebDriver model that's alreadythe standard for web automation.You can run your automated tests locally and in a cloud. There are multiplecloud providers that support various Appium drivers (mostlytargeting iOS and Android mobile automation).Appium Inspector allowsvisual debugging of automated tests and could be extremely useful forbeginners.Investing in theWebDriver protocol meansyou are betting on a single, free, and open protocol for testing that has becomea web standard. Don't lock yourself into a proprietary stack.For example, if you use Apple's XCUITest library without Appium you can onlywrite tests using Obj-C/Swift, and you can only run tests through Xcode.Similarly, with Google's UiAutomator or Espresso, you can only write tests inJava/Kotlin. Appium opens up the possibility of true cross-platform native appautomation, for mobile and beyond. Finally!If you're new to Appium or want a more comprehensive description of what this is allabout, please read our Intro to Appium.QuickstartCheck out our Quickstart guideto get going with Appium.There is also a sample code that contains many examples of tests in a varietyof different languages!DocumentationFor prettily-rendered docs, please visit Appium Documentation.You can always find the full list of Appium doc pages at Appium's GitHubRepo as well.ContributingPlease take a look at our contribution documentationfor instructions on how to build, test, and run Appium from the source.Project History, Credits & InspirationHistoryUser ForumsAnnouncements and debates often take place on the Discussion Group,be sure to sign up!TroubleshootingPlease find the troubleshooting guide at the corresponding driver repository/documentation.License"
58,udacity/course-JS-and-the-DOM,https://github.com/appium/appium/blob/master/README.md,JavaScript,"AppiumAppium is an open-source, cross-platform test automation tool for native,hybrid, mobile web and desktop apps. Initially created to automate iOS and Android mobileapplications Appium has grown to a full-featured platform that provides WebDriver-based automation possibilities for the whole set of different mobile and desktop platforms.See the full list ofofficially-supported andthird-party drivers for more details.‼️ The current Appium 2.0 documentation can be found here.‼️ Appium core team does not maintain Appium 1.x anymore since the 1st of January 2022. All recent versions of officially supported platform drivers are not compatible to Appium 1.x, and require Appium 2 to run. Please read the migration guide from 1.x to 2.0 to manage the Appium server.‼️ If you still use the deprecated Appium Desktop containing the built-in server then you won't be able to upgrade to Appium 2. Consider switching to Appium Inspector instead.RequirementsmacOS, Linux or Windows operating systemNode.js 16+. Any relevant LTS release should work just fine.NPM (Node Package Manager) 8+These are only server requirements. Each driver might have its own requirements. Consider checking the corresponding driver tutorial for more details.ServerTo install Appium 2 server using Node Package Manager (npm) run the following command:npm i --location=global appiumTo update Appium 2 server using Node Package Manager (npm) run the following command:npm install --location=global appium@latest‼️ Make sure Appium 1 is fully uninstalled before upgrading it to Appium 2 (npm uninstall --location=global appium). Unexpected errors might appear if this has not been done.DriversAppium supports app automation across a variety of platforms, like iOS,Android, and Windows. Each platform is supported by one or more \""drivers\"",which know how to automate that particular platform. Since version 2.0all drivers have been isolated from the Appium server app and canbe managed independently using the appium driver command line interface.In general, the drivers management in Appium 2 is as simple as:# To install a new driver from npmappium driver install --source=npm appium-xcuitest-driver[@<version>]# To install a driver from a local folder (useful for developers)appium driver install --source=local /Users/me/sources/appium-xcuitest-driver# To install a new driver from github (hm, maybe it's time to publish it to NPM?)appium driver install --source=github --package=appium-xcuitest-driver appium/appium-xcuitest-driver# To list already installed driversappium driver list --installed# To update a driver (it must be already installed)appium driver update xcuitest# To uninstall a driver (it won't last forever, wouldn't it?)appium driver uninstall xcuitestYou can find a full list ofofficially-supported andthird-party drivers atthe current Appium 2.0 documentation.PluginsThe concept of plugins is something new that has been added exclusively to Appium2. Plugins allow you to extend server functionality without changing the server code. Plugins could be managed similarly to drivers:# To install an officially supported pluginappium plugin install images# To install a plugin from a local folder (useful for developers)appium plugin install --source=local /Users/me/sources/images# To install a new plugin from npmappium plugin install --source=npm appium-device-farm# To list already installed pluginsappium plugin list --installed# To update a plugins (it must be already installed)appium plugin update appium-device-farm# To uninstall a pluginappium plugin uninstall appium-device-farmThe main difference between drivers and plugins is that the latter must be explicitly enabled on server startup after it was installed (drivers are enabled by default after installation):appium server --use-plugins=device-farm,imagesYou can find a full list ofofficially-supported andthird-party plugins atthe current Appium 2.0 documentation.Server Command Line InterfaceIn order to start sending commands to Appium over the wire it must be listeningon the URL where your client library expects it to listen.Use the following commands to run and configure Appium server:# Start the server on the default port and host (e.g. http://0.0.0.0:4723/)appium server# Start the server on the given port, host and use the base path prefix (the default prefix is /)appium server -p 9000 -a 127.0.0.1 -pa /wd/hub# Get the list of all supported command line parameters.# This list would also include descriptions of driver-specific# command line arguments for all installed drivers.# Each driver and plugin must have their command line arguments# exposed in a special JSON schema declared as a part of the corresponding# package.json file.appium server --helpAppium supports execution of parallel server processes as well as parallel driver sessions withinsingle server process. Refer the corresponding driver documentations regarding which mode is optimalfor the particular driver or whether it supports parallel sessions.Why Appium?You usually don't have to recompile your app or modify it in any way, dueto the use of standard automation APIs on all platforms.You can write tests with your favorite dev tools using anyWebDriver-compatiblelanguage such as Java,JavaScript, Python,Ruby, C#with the Selenium WebDriver API. There are also various third partyclient implementations for other languages.You can use any testing framework.Some drivers, like xcuitest and uiautomator2 ones have built-in mobile web andhybrid app support. Within the same script, you can switch seamlessly between nativeapp automation and webview automation, all using the WebDriver model that's alreadythe standard for web automation.You can run your automated tests locally and in a cloud. There are multiplecloud providers that support various Appium drivers (mostlytargeting iOS and Android mobile automation).Appium Inspector allowsvisual debugging of automated tests and could be extremely useful forbeginners.Investing in theWebDriver protocol meansyou are betting on a single, free, and open protocol for testing that has becomea web standard. Don't lock yourself into a proprietary stack.For example, if you use Apple's XCUITest library without Appium you can onlywrite tests using Obj-C/Swift, and you can only run tests through Xcode.Similarly, with Google's UiAutomator or Espresso, you can only write tests inJava/Kotlin. Appium opens up the possibility of true cross-platform native appautomation, for mobile and beyond. Finally!If you're new to Appium or want a more comprehensive description of what this is allabout, please read our Intro to Appium.QuickstartCheck out our Quickstart guideto get going with Appium.There is also a sample code that contains many examples of tests in a varietyof different languages!DocumentationFor prettily-rendered docs, please visit Appium Documentation.You can always find the full list of Appium doc pages at Appium's GitHubRepo as well.ContributingPlease take a look at our contribution documentationfor instructions on how to build, test, and run Appium from the source.Project History, Credits & InspirationHistoryUser ForumsAnnouncements and debates often take place on the Discussion Group,be sure to sign up!TroubleshootingPlease find the troubleshooting guide at the corresponding driver repository/documentation.License"
59,angular-ui/bootstrap,https://github.com/angular-ui/bootstrap/blob/master/README.md,JavaScript,"Project Status (please read)Due to Angular's continued adoption, our creation of the Angular version of this library, and the the project maintainers' moving on to other things, this project is considered feature-complete and is no longer being maintained.We thank you for all your contributions over the years and hope you've enjoyed using this library as much as we've had developing and maintaining it.  It would not have been successful without them.UI Bootstrap - AngularJS directives specific to BootstrapQuick linksDemoAngular 2InstallationNPMBowerNuGetCustomManualWebpack / JSPMSupportFAQCode of ConductPREFIX MIGRATION GUIDESupported browsersNeed help?Found a bug?Contributing to the projectDevelopment, meeting minutes, roadmap and more.DemoDo you want to see directives in action? Visit https://angular-ui.github.io/bootstrap/!Angular 2Are you interested in Angular 2? We are on our way! Check out ng-bootstrap.InstallationInstallation is easy as UI Bootstrap has minimal dependencies - only the AngularJS and Twitter Bootstrap's CSS are required.Notes:Since version 0.13.0, UI Bootstrap depends on ngAnimate for transitions and animations, such as the accordion, carousel, etc. Include ngAnimate in the module dependencies for your app in order to enable animation.UI Bootstrap depends on ngTouch for swipe actions. Include ngTouch in the module dependencies for your app in order to enable swiping.Angular RequirementsUI Bootstrap 1.0 and higher requires Angular 1.4.x or higher and it has been tested with Angular 1.4.8.UI Bootstrap 0.14.3 is the last version that supports Angular 1.3.x.UI Bootstrap 0.12.0 is the last version that supports Angular 1.2.x.Bootstrap RequirementsUI Bootstrap requires Bootstrap CSS version 3.x or higher and it has been tested with Bootstrap CSS 3.3.6.UI Bootstrap 0.8 is the last version that supports Bootstrap CSS 2.3.x.Install with NPM$ npm install angular-ui-bootstrapThis will install AngularJS and Bootstrap NPM packages.Install with Bower$ bower install angular-bootstrapNote: do not install 'angular-ui-bootstrap'.  A separate repository - bootstrap-bower - hosts the compiled javascript file and bower.json.Install with NuGetTo install AngularJS UI Bootstrap, run the following command in the Package Manager ConsolePM> Install-Package Angular.UI.BootstrapCustom buildHead over to https://angular-ui.github.io/bootstrap/ and hit the Custom build button to create your own custom UI Bootstrap build, just the way you like it.Manual downloadAfter downloading dependencies (or better yet, referencing them from your favorite CDN) you need to download build version of this project. All the files and their purposes are described here:https://github.com/angular-ui/bootstrap/tree/gh-pages#build-filesDon't worry, if you are not sure which file to take, opt for ui-bootstrap-tpls-[version].min.js.Adding dependency to your projectWhen you are done downloading all the dependencies and project files the only remaining part is to add dependencies on the ui.bootstrap AngularJS module:angular.module('myModule', ['ui.bootstrap']);Webpack / JSPMTo use this project with webpack, follow the NPM instructions.Now, if you want to use only the accordion, you can do:import accordion from 'angular-ui-bootstrap/src/accordion';angular.module('myModule', [accordion]);You can import all the pieces you need in the same way:import accordion from 'angular-ui-bootstrap/src/accordion';import datepicker from 'angular-ui-bootstrap/src/datepicker';angular.module('myModule', [accordion, datepicker]);This will load all the dependencies (if any) and also the templates (if any).Be sure to have a loader able to process css files like css-loader.If you would prefer not to load your css through your JavaScript file loader/bundler, you can choose to import the index-nocss.js file instead, which is available for the modules:carouseldatepickerdatepickerPopupdropdownmodalpopoverpositiontimepickertooltiptypeaheadThe other modules, such as accordion in the example below, do not have CSS resources to load, so you should continue to import them as normal:import accordion from 'angular-ui-bootstrap/src/accordion';import typeahead from 'angular-ui-bootstrap/src/typeahead/index-nocss.js';angular.module('myModule', [accordion, typeahead]);VersioningPre-2.0.0 does not follow a particular versioning system. 2.0.0 and onwards follows semantic versioning. All release changes can be viewed on our changelog.SupportFAQhttps://github.com/angular-ui/bootstrap/wiki/FAQCode of ConductTake a moment to read our Code of ConductPREFIX MIGRATION GUIDEIf you're updating your application to use prefixes, please check the migration guide.Supported browsersDirectives from this repository are automatically tested with the following browsers:Chrome (stable and canary channel)FirefoxIE 9 and 10OperaSafariModern mobile browsers should work without problems.Need help?Need help using UI Bootstrap?Live help in the IRC (#angularjs channel at the freenode network). Use this webchat or your own IRC client.Ask a question in StackOverflow under the angular-ui-bootstrap tag.Please do not create new issues in this repository to ask questions about using UI BootstrapFound a bug?Please take a look at CONTRIBUTING.md and submit your issue here.Contributing to the projectWe are always looking for the quality contributions! Please check the CONTRIBUTING.md for the contribution guidelines.Development, meeting minutes, roadmap and more.Head over to the Wiki for notes on development for UI Bootstrap, meeting minutes from the UI Bootstrap team, roadmap plans, project philosophy and more."
60,learn-co-students/js-from-dom-to-node-bootcamp-prep-000,https://github.com/learn-co-students/js-from-dom-to-node-bootcamp-prep-000/blob/master/README.md,JavaScript,"Moving Away from the DOMCongratulations! You are now able to understand how Javascript interacts withwebsites through the DOM. That's a big deal. Take a few seconds, breathe in,breathe out and realize that you now know something you didn't before. Only a fewlessons ago, you didn't even know what the DOM was. Now you understand how tomanipulate it.If you ever want to show your friends something cool, open up the console on anyweb page and then find the selector for an element, then modify it usingJavascript in the console. Prepare to enjoy the shock and awe of your friends!From DOM Manipulation to Programming LogicFor the rest of this material, we will be moving from the basics of DOMmanipulation to the meat and potatoes of programming. This means we are going tocover the ideas of conditionals, looping, encapsulation and syntax. I know thosemay not be familiar to you, but over the next few lessons they will becomesecond nature! Remember when DOM was a scary word? Encapsulation will soon gothe way of the DOM. You're going to be encapsulating everything.Really the goal of the rest of this course is to introduce you to programmaticthinking. We will be doing that through explaining Javascript, but the goal isfor every student to begin using programmatic thinking as a general way to solveproblems. These problems may be creating the next Facebook, or it may be justsolving the best order to complete your errands. You'll notice programmatic,logical thinking starting to permeate throughout your decision process. It'sincredibly powerful and something that has aided millions of programmers tosolve some of the hardest problems in the world.That is the goal with this class. While we may touch on making pictures of catsspin, we want you to internalize the thought process required to solve thatsilly problem. Hopefully, you'll go off after this class and solve some slightlymore important problems :)Javascript Outside of the BrowserYou've spent some time in the browser with Javascript. That's great. Now let'sget to where Javascript has been rapidly increasing its programming marketshare: outside of the browser. You may have heard of it, but a new tool calledNodeJS was created a few years back to allow developers to write Javascript codeoutside of the browser. That is what we are going to use now to be able to godeep on programmatic thinking, without having to explain complicated browserinteractions. We want to simplify programming down to its most core elements.Hello WorldLet's write your first code using NodeJS and non-browser Javascript. To do this,we are going to remove your first set of training wheels. We are no longer goingto be using the CodePens that we've been using before. We are going to use areal developer environment through the Learn IDE.The Learn IDE is available as both an in-browser development environment as wellas a standalone application.To choose which environment you would like to work in, on any learn.co page,click your user image in the upper right corner of the page, then click'Manage Account.'In Account Management, click 'Learning Environment' and choose either 'IDE InBrowser' or 'IDE Download.' Or, if you are already comfortable using an IDE anda console and prefer your own set up, you may also choose 'Local.' Thislesson's instructions assume that you are using the Learn IDE in browser.If you choose 'IDE In Browser' you are set and can navigate back to this lesson.If you have chosen 'IDE Download,' you can download and set up the IDEhere.Now, click \""Open IDE\"" to open your environment. On the left side is your filetree. In the js-from-dom-to-node folder, click index.js to open the file up.IT'S CODING TIME.Running Code in Chrome's Browser ConsoleFirst thing is first, I want to show you that everything we will do in the IDE,you can do in the console. In your browser, right click and select Inspect.Select the Console tab, type console.log(\""Hello, World!\""), and press Enter.You should see \""Hello, World!\"" printed right below your line of code. Congrats!You just wrote your first line of browser-less code. All this does is print outwhatever is in between the parenthesis.Let's bring that code over to our index.js file on the IDE. Make sure youare editing the index.js file, which is inside a folder, js, inside thejs-from-dom-to-node folder. Once in there go ahead and paste the followingcode in there:console.log('Hello, World!');Now when you hit Enter, nothing super interesting will happen. All that occursis the cursor moves to a new line. That's because you are in the text editor.This is pretty much the same as using Word. To get this to actually returnsomething like we did in the Console in the browser we need to execute theindex.js file. It sounds super official, but all we are going to do is tellthe IDE \""I'm ready, run this code and show me the result\"".First, we have to save the file. Next, look at the pane at the bottom of theIDE. This is your terminal. Below your code you should see a flashing cursorlike this:Alright, let's let the magic happen! First, we need to make sure we are in theright folder. Our goal is to make it into the \""js-from-dom-to-node\"" folder. Ifyou look at the text next to the time, you should see js-from-dom-to-node orsomething very similar. If you see that, you are good and you can skip the nextsection. If it says something else, follow these instructions:If you see code, we need to go into our labs folder first. To do this typecd labs. Now if should see labs next to the clock. We have to go one morefolder in. I know this by looking at the folder structure on the left. See howlabs is in code and js-from-dom-to-node is in labs? Ok now we need to cdinto the js-from-dom-to-node lab. Take a look at your folder structure on theright to get the exact name and then type cd EXACT-FOLDER-YOU-WANT-TO-ENTER.In my case, I get js-from-dom-to-node. If you were successful, you'll seejs-from-dom-to-node next to the clock.Running Code With NodeTo run your code, in your terminal, you can type node index.js. nodeis the node code runner and index.js is the name of your file. You should see:Hello, World!Woot! It worked. You just wrote your first Javascript outside of the browser.Now let's submit it back to Learn. In your terminal type learn submit. Thiswill send your code up to Learn and you may move on to the next lesson.If you would like to try a few more examples, take a look at the two JavaScriptfiles inside more_js. From your current directory, run node more_js/example_one.js and node more_js/example_two.js to see them in action.Possible ErrorsAfter you type in node index.js you get something looks like:module.js:471    throw err;    ^Error: Cannot find module '/home/jmburges/code/labs/index.js'    at Function.Module._resolveFilename (module.js:469:15)    at Function.Module._load (module.js:417:25)    at Module.runMain (module.js:604:10)    at run (bootstrap_node.js:393:7)    at startup (bootstrap_node.js:150:9)    at bootstrap_node.js:508:3The key there is \""Error: Cannot find module\"". That just means you are in thewrong folder. Go back and read the earlier paragraph that starts \""If you seecode...\"". That should help you out. You need to be seeingjs-from-dom-to-node next to the clock."
61,freeCodeCamp/boilerplate-npm,https://github.com/freeCodeCamp/boilerplate-npm/blob/main/README.md,JavaScript,Backend Challenges boilerplate - package.json
62,modood/Administrative-divisions-of-China,https://github.com/modood/Administrative-divisions-of-China/blob/master/README.md,JavaScript,"Administrative-divisions-of-China中华人民共和国行政区划（五级）：省级、地级、县级、乡级和村级。数据来源民政部、国家统计局：中华人民共和国民政部-中华人民共和国行政区划代码中华人民共和国国家统计局-统计用区划和城乡划分代码中华人民共和国国家统计局-统计用区划代码和城乡划分代码编制规则本项目已更新至：2022年统计用区划代码和城乡划分代码（截止时间：2022-10-31，发布时间：2022-12-29）数据下载文件列表JSONCSV省级（省份、直辖市、自治区）provinces.jsonprovinces.csv地级（城市）cities.jsoncities.csv县级（区县）areas.jsonareas.csv乡级（乡镇、街道）streets.jsonstreets.csv村级（村委会、居委会）villages.jsonvillages.csv文件列表普通带编码“省份、城市” 二级联动数据pc.jsonpc-code.json“省份、城市、区县” 三级联动数据pca.jsonpca-code.json“省份、城市、区县、乡镇” 四级联动数据pcas.jsonpcas-code.json“省份、城市、区县、乡镇、村庄” 五级联动数据--提示：需要打包下载全部文件，请看 Releases。数据库支持目前本项目数据保存在 sqlite3，数据文件下载：data.sqlite。可以自己将数据迁移到其他数据库管理系统中（MySQL, Oracle, MSSQL 等）。省级数据预览codename13河北省14山西省15内蒙古自治区45广西壮族自治区地级数据预览codenameprovinceCode1301石家庄市131401太原市141525锡林郭勒盟154503桂林市45县级数据预览codenamecityCodeprovinceCode130111栾城区130113140121清徐县140114152527太仆寺旗152515450305七星区450345乡级数据预览codenameareaCodecityCodeprovinceCode130111200南高乡130111130113140121102东于镇140121140114152527201贡宝拉格苏木152527152515450305004漓东街道办事处450305450345村级数据预览codenamestreetCodeareaCodecityCodeprovinceCode130111200201南高村委会130111200130111130113140121102001东于社区居委会140121102140121140114152527201206敦达乌苏嘎查152527201152527152515450305004006横塘社区450305004450305450345"
63,learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000,https://github.com/learn-co-students/javascript-intro-to-functions-lab-bootcamp-prep-000/blob/master/README.md,JavaScript,"JavaScript Intro to Functions LabObjectivesPractice writing functionsExplain basics of working with stringsExplain the difference between return and loggingPractice using return and console.log()IntroductionWelcome to the JavaScript functions lab! You'll notice a few new things in thislesson that we haven't encountered before. Don't worry, we'll walk you throughthem.Even if you've walked through some of this material before, it's a good idea toreview as we code-along — we're writing functions now, after all.Code-AlongFor now, open up index.js in your text editor. You should see, well, nothing.We'll fix that soon.Now open up test/root.js. Hey, there's something! What's all of this stuffdoing?At the very top of the file, you'll seeglobal.expect = require('expect');const babel = require('babel-core');const jsdom = require('jsdom');const path = require('path');This might be a bit bewildering, but all we're doing is referencing differentlibraries that help us run your tests. A library is code that someone else(usually multiple someone elses) wrote for our use. Note that require won'twork out of the box in the browser. We're actually running our tests in adifferent environment.If you go to test/index-test.js, you'll seedescribe('shout(string)', function(){  // there's stuff in here, too})describe is a function provided by our test runner (in this case, we're usingMocha) — it's basically a container for our tests.Let's take a closer look at that describe():describe('shout(string)', function(){  it('receives one argument and returns it in all caps', function() {    // we'll get to this in a sec  })})These internal describe() calls are used for describing the functions thatyou're going to write. In this case, the test is saying, \""Okay, I think there'sgoing to be a function called shout, and it should take one argument (itdoesn't actually matter what the argument is called, but string, is nice andspecific, don't you think?). It should return that argument in all caps.Finally, we haveexpect(shout('hello')).toEqual('HELLO')which says that it expects a call to shout() with the string 'hello' willequal the string 'HELLO'. This is the actual test — otherwise called a spec,expectation, or assertion — for this function. We can have more than one testper function, but let's start with this one.Running the TestsTo run the tests, run learn test in the terminal in your Learn IDE. The firstoutput you'll see will look like> java-script-intro-to-functions-lab@0.1.0 test /Users/mbenton/Desktop/curriculum-team/junk/javascript-intro-to-functions-lab> mocha -R mocha-multi --reporter-options spec=-,json=.results.json --timeout 10000  shout(string)    1) receives one argument and returns it in all caps  whisper(string)    2) receives one argument and returns it in all lowercase  logShout(string)    3) calls console.log() its one argument in all caps  logWhisper(string)    4) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    5) returns \""I can't hear you!\"" if `string` is lowercase    6) returns \""YES INDEED!\"" if `string` is uppercase    7) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  0 passing (99ms)  7 failing  1) shout(string)       receives one argument and returns it in all caps:     ReferenceError: shout is not defined      at Context.<anonymous> (test/index-test.js:4:5)      at processImmediate (internal/timers.js:456:21)  2) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  3) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  4) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  7) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hm, seven failed tests. Let's see if we can get that first test topass. Open up index.js.When we write our code, we follow the guidance of the tests. Remember the line,describe('shout(string)', function() { ... }). Well, we know that we need afunction called shout that accepts an argument — let's add that first. Inindex.js:function shout(string) {}And what should that function do? Well, the it() description tells us that it\""receives one argument and returns it in all caps\"".Okay, so with that information, we know that our function should look like this:function shout(string) {  return string}But how do we make string all caps? JavaScript has a method for that! It'scalled toUpperCase(). We can call it on any string:'Hello!'.toUpperCase() // 'HELLO!'So let's try it with our shout() function:function shout(string) {  return string.toUpperCase()}And run our tests again:learn testshout(string)    ✓ receives one argument and returns it in all caps  whisper(string)    1) receives one argument and returns it in all lowercase  logShout(string)    2) calls console.log() its one argument in all caps  logWhisper(string)    3) calls console.log() its one argument in all lowercase  sayHiToGrandma(string)    4) returns \""I can't hear you!\"" if `string` is lowercase    5) returns \""YES INDEED!\"" if `string` is uppercase    6) returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`  1 passing (108ms)  6 failing  1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)  2) logShout(string)       calls console.log() its one argument in all caps:     ReferenceError: logShout is not defined      at Context.<anonymous> (test/index-test.js:18:5)      at processImmediate (internal/timers.js:456:21)  3) logWhisper(string)       calls console.log() its one argument in all lowercase:     ReferenceError: logWhisper is not defined      at Context.<anonymous> (test/index-test.js:30:5)      at processImmediate (internal/timers.js:456:21)  4) sayHiToGrandma(string)       returns \""I can't hear you!\"" if `string` is lowercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:40:5)      at processImmediate (internal/timers.js:456:21)  5) sayHiToGrandma(string)       returns \""YES INDEED!\"" if `string` is uppercase:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:44:5)      at processImmediate (internal/timers.js:456:21)  6) sayHiToGrandma(string)       returns \""I love you, too.\"" if `string` is \""I love you, Grandma.\""`:     ReferenceError: sayHiToGrandma is not defined      at Context.<anonymous> (test/index-test.js:48:5)      at processImmediate (internal/timers.js:456:21)npm ERR! Test failed.  See above for more details.Hey! We got one to pass! Six left.Your TurnNow it's your turn to get the rest of the tests to pass. Note that some of themrequire you to use console.log() instead of return — follow the guidance ofthe tests!In this lab, we're writing functions that \""speak\"" at different volumes — theywhisper or they shout. The next test is similar to the first:1) whisper(string)       receives one argument and returns it in all lowercase:     ReferenceError: whisper is not defined      at Context.<anonymous> (test/index-test.js:10:5)      at processImmediate (internal/timers.js:456:21)This test is telling us that whisper(string) receives one argument and returnsit in all lowercase. At the moment, the test is failing becasue whisper is notdefined.Note: Just like .toUpperCase() changes any string to all uppercase inJavaScript, .toLowerCase() (e.g., 'HELLO'.toLowerCase()) changes anystring to all lowercase.The next two tests are checking to see if a specific string is logged when afunction is called. You will still need to use the .toUpperCase() and.toLowerCase() methods for logShout(string) and logWhisper(string). Keep inmind though that these tests are not looking for return values, only logs.The final function you need to create is sayHiToGrandma(). Grandma is a bithard of hearing, so whispering can be a bit difficult, but she'll always hearyou if you say, \""I love you, Grandma.\"" This time, you will need to returndifferent strings depending on the string passed into the function.Note: Although there are 3 tests for sayHiToGrandma(), you only need towrite one function. This function should be able to handle all three testconditions:If the string that is passed into the function is all lowercase, thefunction should return \""I can't hear you!\""If the string that is passed into the function is all uppercase, thefunction should return \""YES INDEED!\""If the string that is passed into the function is equal to \""I love you,Grandma.\"", the function should return \""I love you, too.\""How do we check if a string is all lowercase or all uppercase?var uppercase = \""HELLO!\""uppercase.toUpperCase() === uppercase // truevar lowercase = 'hello!'lowercase.toLowerCase() === lowercase // truevar mixedCase = 'Hi there!'mixedCase.toLowerCase() === mixedCase // falsemixedCase.toUpperCase() === mixedCase // falseWe can simply check whether the string is the same when we convert it touppercase or lowercase! (The lines with the === comparisons are the ones thatcheck). If it's the same, then it was already in that case; if not, then it'seither in the other case or it's mixed case. Now that we know how to comparestrings, how can we use these comparisons to conditionally return differentstrings?Remember that punctuation is important! Humans might be able to understand that\""I love you Grandma\"" is close enough to \""I love you, Grandma.\"" and means thesame thing but JavaScript will not consider these equal!Good luck! When all tests are passing, be sure to run learn submit!View Intro to Functions Lab on Learn.co and start learning to code for free."
64,strapi/strapi,https://github.com/strapi/strapi/blob/main/README.md,JavaScript,"                API creation made simple, secure and fast.The most advanced open-source headless CMS to build powerful APIs with no effort.Cloud · Try live demo                                        Strapi is a free and open-source headless CMS delivering your content anywhere you need.Keep control over your data. With Strapi, you know where your data is stored, and you keep full control at all times.Self-hosted. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.Database agnostic. Strapi works with SQL databases. You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.Customizable. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.Getting StartedRead the Getting Started tutorial or follow the steps below:⏳ InstallationInstall Strapi with this Quickstart command to create a Strapi project instantly:(Use yarn to install the Strapi project (recommended). Install yarn with these docs.)yarn create strapi-app my-project --quickstartor(Use npm/npx to install the Strapi project.)npx create-strapi-app my-project --quickstartThis command generates a brand new project with the default features (authentication, permissions, content management, content type builder & file upload). The Quickstart command installs Strapi using a SQLite database which is used for prototyping in development.Enjoy 🎉🖐 RequirementsComplete installation requirements can be found in the documentation under Installation Requirements.Supported operating systems:Ubuntu LTS/Debian 9.xCentOS/RHEL 8macOS MojaveWindows 10Docker(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)Node:Strapi only supports maintenance and LTS versions of Node.js. Please refer to the Node.js release schedule for more information. NPM versions installed by default with Node.js are supported. Generally it's recommended to use yarn over npm where possible.Strapi VersionRecommendedMinimum4.11.0 and up18.x16.x4.3.9 to 4.10.x18.x14.x4.0.x to 4.3.816.x14.xDatabase:DatabaseRecommendedMinimumMySQL8.05.7.8MariaDB10.610.3PostgreSQL14.011.0SQLite33We recommend always using the latest version of Strapi stable to start your new projects.FeaturesModern Admin Panel: Elegant, entirely customizable and a fully extensible admin panel.Secure by default: Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.Plugins Oriented: Install the auth system, content management, custom plugins, and more, in seconds.Blazing Fast: Built on top of Node.js, Strapi delivers amazing performance.Front-end Agnostic: Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.Powerful CLI: Scaffold projects and APIs on the fly.SQL databases: Works with PostgreSQL, MySQL, MariaDB, and SQLite.See more on our website.ContributingPlease read our Contributing Guide before submitting a Pull Request to the project.Community supportFor general help using Strapi, please refer to the official Strapi documentation. For additional help, you can use one of these channels to ask a question:Discord (For live discussion with the Community and Strapi team)GitHub (Bug reports, Contributions)Community Forum (Questions and Discussions)Feedback section (Roadmap, Feature requests)Twitter (Get the news fast)FacebookYouTube Channel (Learn from Video Tutorials)MigrationFollow our migration guides on the documentation to keep your projects up-to-date.RoadmapCheck out our roadmap to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.DocumentationSee our dedicated repository for the Strapi documentation, or view our documentation live:Developer docsUser guideTry live demoSee for yourself what's under the hood by getting access to a hosted Strapi project with sample data.LicenseSee the LICENSE file for licensing information."
65,learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab,https://github.com/learn-co-curriculum/phase-0-pac-3-what-is-a-test-lab/blob/master/README.md,JavaScript,"Testing with JavaScript LabLearning GoalsRunning testsReading test resultsRunning TestsYou understand how to read tests; now it's time to run the tests.Recall that in the previous lesson, the tests were commented out. Be sure to forkand clone this lab into your local environment so you have the version of the testfile that is not commented out. (Return to the previous lesson if you need a reminderof how to do this.)Navigate into its directory in the terminal, then run code . to open the filesin Visual Studio Code. (If you are using a different text editor, the commandwill be different.) Finally, run npm install to install the lab'sdependencies.What exactly do we mean by installing dependencies? Open the package.json fileand scroll down to the bottom. You'll see a list of 'DevDependencies'. What'slisted here are JavaScript packages: files or sets of files full of existing,reusable code. They are designed to be shared, allowing many developers to usethe same code in their own projects. The packages you see listed inpackage.json make it possible to run the lab's tests. In order to use thepackages, we have to install them; npm install does that for us.If you take a look at index.js and indexTest.js, you should see the samecode as in the previous lesson. The only difference is that the test code inindexTest.js is no longer commented out.Important: You should never need to make changes to test files unless alab's instructions specifically tell you to do so.To run the tests, run npm test in the terminal. That's it!The next step is learning how to read the results that the tests give you.Reading Results of TestsThe first time you run npm test, you should see something that looks likethis:> js-functions-lab@0.1.0 test> mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json  what-is-a-test    Name      1) returns \""Susan\""    Height      2) is less than 40 and greater than 0    Message      ✓ gives the name and height  1 passing (552ms)  2 failing  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)npm ERR! Test failed.  See above for more details.Note: If you also get an error that ends with \""unexpected character (after) at line 1, column 1 [parse.c:769] (Oj::ParseError)\"", make sure you've cloneddown the files for this lab, and are not running the tests on the files fromthe previous lesson.Let's break this down a bit. If you look about a third of the way down in theoutput, you'll see a summary of how the tests went:  1 passing (552ms)  2 failingGreat! We've already got one test passing! Now let's see how we failed the othertwo tests.  1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:461:21)  2) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)While there is no hard and fast rule, and there will be exceptions, it is mostoften best to address your test errors in order. So let's take a look at ourfirst error:1) what-is-a-test       Name         returns \""Susan\"":      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +Susan      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toEqual (node_modules/expect/lib/Expectation.js:81:30)      at Context.<anonymous> (test/indexTest.js:6:26)      at processImmediate (internal/timers.js:456:21)Here is the specific error:      Error: Expected 'Joe' to equal 'Susan'      + expected - actual      -Joe      +SusanIt tells us what the test is expecting (Expected 'Joe' to equal 'Susan') andthen gives us details about the expected and actual values. This shows youexactly how the value your code is returning (the actual value) differs fromwhat the test is looking for. Make sure you understand what this is telling you— it will come in handy in later labs!This error makes sense because we have the name variable set equal to \""Joe\"" inour index.js file. Let's change that line of code to set name equal to\""Susan\"" instead. Run the tests again by typing npm test in the terminal'scommand line (don't forget to save the file first!), and you should see thatwe are now passing 2 of the 3 tests!  what-is-a-test    Name      ✓ returns \""Susan\""    Height      1) is less than 40 and greater than 0    Message      ✓ gives the name and height  2 passing (736ms)  1 failing  1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: Expected 74 to be less than 40      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:461:21)Woot! You passed another one. Now go ahead and try to pass the remaining test onyour own.Common ErrorsWhile you are solving the other tests you may come across a few errors. Let's goover some common ones:Variable Not DefinedReferenceError: name is not definedThat one says that the name variable is not defined. That makes no sense! Weinitialized the name variable in index.js! What that actually means is thatthe test couldn't find the variable name. You'll get this error if the name ofone of your variables is different than the test is expecting. Check to makesure you used the correct variable names and look carefully for typos.Unexpected Identifier/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/index.js:1cnst name = \""Susan\"";     ^^^^SyntaxError: Unexpected identifier    at wrapSafe (internal/modules/cjs/loader.js:979:16)    at Module._compile (internal/modules/cjs/loader.js:1027:27)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/test/indexTest.js:1:15)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Module.require (internal/modules/cjs/loader.js:952:19)    at require (internal/modules/cjs/helpers.js:88:18)    at /Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:311:36    at Array.forEach (<anonymous>)    at Mocha.loadFiles (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:308:14)    at Mocha.run (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/mocha.js:849:10)    at Object.exports.singleRun (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:108:16)    at exports.runMocha (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run-helpers.js:143:13)    at Object.exports.handler (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/run.js:305:3)    at Object.runCommand (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/lib/command.js:242:26)    at Object.parseArgs [as _parseArgs] (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:1104:24)    at Object.parse (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/yargs/yargs.js:566:25)    at Object.exports.main (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/lib/cli/cli.js:68:6)    at Object.<anonymous> (/Users/lizburton_fs/Development/code/phase-0-pac-3-what-is-a-test-lab/node_modules/mocha/bin/mocha:133:29)    at Module._compile (internal/modules/cjs/loader.js:1063:30)    at Object.Module._extensions..js (internal/modules/cjs/loader.js:1092:10)    at Module.load (internal/modules/cjs/loader.js:928:32)    at Function.Module._load (internal/modules/cjs/loader.js:769:14)    at Function.executeUserEntryPoint [as runMain] (internal/modules/run_main.js:72:12)    at internal/main/run_main_module.js:17:47npm ERR! Test failed.  See above for more details.Whoa! So many words that make no sense. Don't worry though. The most importantline is the SyntaxError: Unexpected identifier line. What that means is youhave some sort of typo or syntax mistake. It could be a HUGE variety of thingsbut usually, JS will try and give you a hint. This time it's pointing to thecnst name = \""Susan\"" line of code. Take a look and read very carefully:const is misspelled. Whoops! Once we fix that everything will work.One note on this type of error is that it is sort of a catch-all. Tons and tonsof problems end in that sort of error message. Whenever you see it, be sure toread over your code with a fine-toothed comb... and you'll find the problem!Type ErrorsOn the second test, there is a chance you might see the following error:1) what-is-a-test       Height         is less than 40 and greater than 0:     Error: The \""actual\"" argument in expect(actual).toBeLessThan() must be a number      at assert (node_modules/expect/lib/assert.js:29:9)      at Expectation.toBeLessThan (node_modules/expect/lib/Expectation.js:156:28)      at Context.<anonymous> (test/indexTest.js:13:28)      at processImmediate (internal/timers.js:456:21)This error is slightly different than the last two. In this case, the test isgiving us a unique message because it recognizes a problem. If we look at thistest in test/indexTest.js, we see this:describe(\""Height\"", () => {    it(\""is less than 40 and greater than 0\"", () => {      expect(height).toBeMoreThan(0)      expect(height).toBeLessThan(40);    });  });We can see that the word \""actual\"" in this case is referring to the heightvariable. The error message is telling us that height must be a number. Ifyou're seeing this, make sure that you have set the height variable to anumber that's less than 40 (e.g. 39), not a string (\""39\""). The testwill interpret the value as a string due to the quotation marks wrapping it.Optional Mocha ConfigurationIn this lab, we only had three tests to pass, but as you continue through thecurriculum you will encounter labs with many more tests. You can imagine thatthe test output could get very long, making it more difficult to focus in on howto fix a particular error.To help with this issue, there is some very simple setup you can put in place inMocha that will cause the tests to stop as soon as the first failing test isencountered.To implement this, open up the package.json file and find the test script. Itshould look something like this:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json\""Add the --bail flag to the end of the line, inside the quotes:\""test\"": \""mocha --timeout 5000 -R mocha-multi --reporter-options spec=-,json=.results.json --bail\""That's it!Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theComplete Your First Software Engineering Assignmentlesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.Note about the git push commandYou may recall from the Complete Your First Software EngineeringAssignment lesson that a different form of the git pushcommand was used:$ git push <remote> <branch>where remote is the \""alias\"" for the repo's url on GitHub, and branch is therepo's default branch (generally main for newer repos and master for olderones). For this lab, therefore, the full command would be:$ git push origin masterThis command tells git to push the code in the master branch of the local repoto the master branch of the remote repo identified by the origin alias.So why didn't you need to run that command?When you use the git clone command to clone down a repo from GitHub, gitautomatically assigns the \""origin\"" alias to the url you clone from, and usesthe default branch for that repo.As you work through the labs in this program, you should always:fork the lab's repo to your GitHub account, andclone that fork down to your local machine.As long as you always fork before you clone, it should be safe to run git push without specifying the remote and branch.If you want to verify that you're pushing to the right repo, you can use thegit remote command and include the -v flag:$ git remote -vorigin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (fetch)origin\tgit@github.com:your-github-username/phase-0-pac-3-what-is-a-test-lab.git (push)Here you can see that the origin alias points to your fork of the repo, soit's safe to run the shorter command, git push.ConclusionNow that you've gotten all your tests passing and submitted your work (andlearned a bit more about git push), you're ready to move on. Congratulations!You've solved your first JavaScript tests!"
66,NARKOZ/hacker-scripts,https://github.com/NARKOZ/hacker-scripts/blob/master/README.md,JavaScript,"English | 简体中文Hacker ScriptsBased on a truestory:xxx: OK, so, our build engineer has left for another company. The dude was literally living inside the terminal. You know, that type of a guy who loves Vim, creates diagrams in Dot and writes wiki-posts in Markdown... If something - anything - requires more than 90 seconds of his time, he writes a script to automate that.xxx: So we're sitting here, looking through his, uhm, \""legacy\""xxx: You're gonna love thisxxx: smack-my-bitch-up.sh - sends a text message \""late at work\"" to his wife (apparently). Automatically picks reasons from an array of strings, randomly. Runs inside a cron-job. The job fires if there are active SSH-sessions on the server after 9pm with his login.xxx: kumar-asshole.sh - scans the inbox for emails from \""Kumar\"" (a DBA at our clients). Looks for keywords like \""help\"", \""trouble\"", \""sorry\"" etc. If keywords are found - the script SSHes into the clients server and rolls back the staging database to the latest backup. Then sends a reply \""no worries mate, be careful next time\"".xxx: hangover.sh - another cron-job that is set to specific dates. Sends automated emails like \""not feeling well/gonna work from home\"" etc. Adds a random \""reason\"" from another predefined array of strings. Fires if there are no interactive sessions on the server at 8:45am.xxx: (and the oscar goes to) fucking-coffee.sh - this one waits exactly 17 seconds (!), then opens a telnet session to our coffee-machine (we had no frikin idea the coffee machine is on the network, runs linux and has a TCP socket up and running) and sends something like sys brew. Turns out this thing starts brewing a mid-sized half-caf latte and waits another 24 (!) seconds before pouring it into a cup. The timing is exactly how long it takes to walk to the machine from the dudes desk.xxx: holy sh*t I'm keeping thoseOriginal: http://bash.im/quote/436725 (in Russian)  (Archive.org link)Pull requests with other implementations (Python, Perl, Shell, etc) are welcome.UsageYou need these environment variables:# used in `smack-my-bitch-up` and `hangover` scriptsTWILIO_ACCOUNT_SID=ACxxxxxxxxxxxxxxxxxxxxxxxxxxxxxTWILIO_AUTH_TOKEN=yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy# used in `kumar_asshole` scriptGMAIL_USERNAME=admin@example.orgGMAIL_PASSWORD=passwordFor Ruby scripts you need to install gems:gem install dotenv twilio-ruby gmailCron jobs# Runs `smack-my-bitch-up.sh` monday to friday at 9:20 pm.20 21 * * 1-5 /path/to/scripts/smack-my-bitch-up.sh >> /path/to/smack-my-bitch-up.log 2>&1# Runs `hangover.sh` monday to friday at 8:45 am.45 8 * * 1-5 /path/to/scripts/hangover.sh >> /path/to/hangover.log 2>&1# Runs `kumar-asshole.sh` every 10 minutes.*/10 * * * * /path/to/scripts/kumar-asshole.sh# Runs `fucking-coffee.sh` hourly from 9am to 6pm on weekdays.0 9-18 * * 1-5 /path/to/scripts/fucking-coffee.shCode is released under WTFPL."
67,typicode/json-server,https://github.com/typicode/json-server/blob/master/README.md,JavaScript,"JSON Server Get a full fake REST API with zero coding in less than 30 seconds (seriously)Created with <3 for front-end developers who need a quick back-end for prototyping and mocking.Egghead.io free video tutorial - Creating demo APIs with json-serverJSONPlaceholder - Live running versionMy JSON Server - no installation required, use your own dataSee also:🐶 husky - Git hooks made easy🦉 lowdb - local JSON database✅ xv - a beautifully simple and capable test runner Gold sponsors 🥇                    Silver sponsors 🥈           Become a sponsor and have your company logo hereSponsorPlease help me build OSS 👉 GitHub Sponsors ❤️Table of contentsGetting startedRoutesPlural routesSingular routesFilterPaginateSortSliceOperatorsFull-text searchRelationshipsDatabaseHomepageExtrasStatic file serverAlternative portAccess from anywhereRemote schemaGenerate random dataHTTPSAdd custom routesAdd middlewaresCLI usageModuleSimple exampleCustom routes exampleAccess control exampleCustom output exampleRewriter exampleMounting JSON Server on another endpoint exampleAPIDeploymentLinksVideoArticlesThird-party toolsLicenseGetting startedInstall JSON Servernpm install -g json-serverCreate a db.json file with some data{  \""posts\"": [    { \""id\"": 1, \""title\"": \""json-server\"", \""author\"": \""typicode\"" }  ],  \""comments\"": [    { \""id\"": 1, \""body\"": \""some comment\"", \""postId\"": 1 }  ],  \""profile\"": { \""name\"": \""typicode\"" }}Start JSON Serverjson-server --watch db.jsonNow if you go to http://localhost:3000/posts/1, you'll get{ \""id\"": 1, \""title\"": \""json-server\"", \""author\"": \""typicode\"" }Also when doing requests, it's good to know that:If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to db.json using lowdb.Your request body JSON should be object enclosed, just like the GET output. (for example {\""name\"": \""Foobar\""})Id values are not mutable. Any id value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.A POST, PUT or PATCH request should include a Content-Type: application/json header to use the JSON in the request body. Otherwise it will return a 2XX status code, but without changes being made to the data.RoutesBased on the previous db.json file, here are all the default routes. You can also add other routes using --routes.Plural routesGET    /postsGET    /posts/1POST   /postsPUT    /posts/1PATCH  /posts/1DELETE /posts/1Singular routesGET    /profilePOST   /profilePUT    /profilePATCH  /profileFilterUse . to access deep propertiesGET /posts?title=json-server&author=typicodeGET /posts?id=1&id=2GET /comments?author.name=typicodePaginateUse _page and optionally _limit to paginate returned data.In the Link header you'll get first, prev, next and last links.GET /posts?_page=7GET /posts?_page=7&_limit=2010 items are returned by defaultSortAdd _sort and _order (ascending order by default)GET /posts?_sort=views&_order=ascGET /posts/1/comments?_sort=votes&_order=ascFor multiple fields, use the following format:GET /posts?_sort=user,views&_order=desc,ascSliceAdd _start and _end or _limit (an X-Total-Count header is included in the response)GET /posts?_start=20&_end=30GET /posts/1/comments?_start=20&_end=30GET /posts/1/comments?_start=20&_limit=10Works exactly as Array.slice (i.e. _start is inclusive and _end exclusive)OperatorsAdd _gte or _lte for getting a rangeGET /posts?views_gte=10&views_lte=20Add _ne to exclude a valueGET /posts?id_ne=1Add _like to filter (RegExp supported)GET /posts?title_like=serverFull-text searchAdd qGET /posts?q=internetRelationshipsTo include children resources, add _embedGET /posts?_embed=commentsGET /posts/1?_embed=commentsTo include parent resource, add _expandGET /comments?_expand=postGET /comments/1?_expand=postTo get or create nested resources (by default one level, add custom routes for more)GET  /posts/1/commentsPOST /posts/1/commentsDatabaseGET /dbHomepageReturns default index file or serves ./public directoryGET /ExtrasStatic file serverYou can use JSON Server to serve your HTML, JS and CSS, simply create a ./public directoryor use --static to set a different static files directory.mkdir publicecho 'hello world' > public/index.htmljson-server db.jsonjson-server db.json --static ./some-other-dirAlternative portYou can start JSON Server on other ports with the --port flag:$ json-server --watch db.json --port 3004Access from anywhereYou can access your fake API from anywhere using CORS and JSONP.Remote schemaYou can load remote schemas.$ json-server http://example.com/file.json$ json-server http://jsonplaceholder.typicode.com/dbGenerate random dataUsing JS instead of a JSON file, you can create data programmatically.// index.jsmodule.exports = () => {  const data = { users: [] }  // Create 1000 users  for (let i = 0; i < 1000; i++) {    data.users.push({ id: i, name: `user${i}` })  }  return data}$ json-server index.jsTip use modules like Faker, Casual, Chance or JSON Schema Faker.HTTPSThere are many ways to set up SSL in development. One simple way is to use hotel.Add custom routesCreate a routes.json file. Pay attention to start every route with /.{  \""/api/*\"": \""/$1\"",  \""/:resource/:id/show\"": \""/:resource/:id\"",  \""/posts/:category\"": \""/posts?category=:category\"",  \""/articles?id=:id\"": \""/posts/:id\""}Start JSON Server with --routes option.json-server db.json --routes routes.jsonNow you can access resources using additional routes./api/posts # → /posts/api/posts/1  # → /posts/1/posts/1/show # → /posts/1/posts/javascript # → /posts?category=javascript/articles?id=1 # → /posts/1Add middlewaresYou can add your middlewares from the CLI using --middlewares option:// hello.jsmodule.exports = (req, res, next) => {  res.header('X-Hello', 'World')  next()}json-server db.json --middlewares ./hello.jsjson-server db.json --middlewares ./first.js ./second.jsCLI usagejson-server [options] <source>Options:  --config, -c       Path to config file           [default: \""json-server.json\""]  --port, -p         Set port                                    [default: 3000]  --host, -H         Set host                             [default: \""localhost\""]  --watch, -w        Watch file(s)                                     [boolean]  --routes, -r       Path to routes file  --middlewares, -m  Paths to middleware files                           [array]  --static, -s       Set static files directory  --read-only, --ro  Allow only GET requests                           [boolean]  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]  --snapshots, -S    Set snapshots directory                      [default: \"".\""]  --delay, -d        Add delay to responses (ms)  --id, -i           Set database id property (e.g. _id)         [default: \""id\""]  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)                                                                 [default: \""Id\""]  --quiet, -q        Suppress log messages from output                 [boolean]  --help, -h         Show help                                         [boolean]  --version, -v      Show version number                               [boolean]Examples:  json-server db.json  json-server file.js  json-server http://example.com/db.jsonhttps://github.com/typicode/json-serverYou can also set options in a json-server.json configuration file.{  \""port\"": 3000}ModuleIf you need to add authentication, validation, or any behavior, you can use the project as a module in combination with other Express middlewares.Simple example$ npm install json-server --save-dev// server.jsconst jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()server.use(middlewares)server.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})$ node server.jsThe path you provide to the jsonServer.router function  is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:const path = require('path')const router = jsonServer.router(path.join(__dirname, 'db.json'))For an in-memory database, simply pass an object to jsonServer.router().To add custom options (eg. foreginKeySuffix) pass in an object as the second argument to jsonServer.router('db.json', { foreginKeySuffix: '_id' }).Please note also that jsonServer.router() can be used in existing Express projects.Custom routes exampleLet's say you want a route that echoes query parameters and another one that set a timestamp on every resource created.const jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()// Set default middlewares (logger, static, cors and no-cache)server.use(middlewares)// Add custom routes before JSON Server routerserver.get('/echo', (req, res) => {  res.jsonp(req.query)})// To handle POST, PUT and PATCH you need to use a body-parser// You can use the one used by JSON Serverserver.use(jsonServer.bodyParser)server.use((req, res, next) => {  if (req.method === 'POST') {    req.body.createdAt = Date.now()  }  // Continue to JSON Server router  next()})// Use default routerserver.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})Access control exampleconst jsonServer = require('json-server')const server = jsonServer.create()const router = jsonServer.router('db.json')const middlewares = jsonServer.defaults()server.use(middlewares)server.use((req, res, next) => { if (isAuthorized(req)) { // add your authorization logic here   next() // continue to JSON Server router } else {   res.sendStatus(401) }})server.use(router)server.listen(3000, () => {  console.log('JSON Server is running')})Custom output exampleTo modify responses, overwrite router.render method:// In this example, returned resources will be wrapped in a body propertyrouter.render = (req, res) => {  res.jsonp({    body: res.locals.data  })}You can set your own status code for the response:// In this example we simulate a server side error responserouter.render = (req, res) => {  res.status(500).jsonp({    error: \""error message here\""  })}Rewriter exampleTo add rewrite rules, use jsonServer.rewriter():// Add this before server.use(router)server.use(jsonServer.rewriter({  '/api/*': '/$1',  '/blog/:resource/:id/show': '/:resource/:id'}))Mounting JSON Server on another endpoint exampleAlternatively, you can also mount the router on /api.server.use('/api', router)APIjsonServer.create()Returns an Express server.jsonServer.defaults([options])Returns middlewares used by JSON Server.optionsstatic path to static fileslogger enable logger middleware (default: true)bodyParser enable body-parser middleware (default: true)noCors disable CORS (default: false)readOnly accept only GET requests (default: false)jsonServer.router([path|object], [options])Returns JSON Server router.options (see CLI usage)DeploymentYou can deploy JSON Server. For example, JSONPlaceholder is an online fake API powered by JSON Server and running on Heroku.LinksVideoCreating Demo APIs with json-server on egghead.ioArticlesNode Module Of The Week - json-serverng-admin: Add an AngularJS admin GUI to any RESTful APIFast prototyping using Restangular and Json-serverCreate a Mock REST API in Seconds for Prototyping your FrontendNo API? No Problem! Rapid Development via Mock APIsZero Code REST With json-serverThird-party toolsGrunt JSON ServerDocker JSON ServerJSON Server GUIJSON file generatorJSON Server extensionLicenseMITSupporters ✨"
68,dcloudio/mui,https://github.com/dcloudio/mui/blob/master/README.md,JavaScript,mui性能和体验的差距，一直是mobile app开发者放弃HTML5的首要原因。 浏览器天生的切页白屏、不忍直视的转页动画、浮动元素的抖动、无法流畅下拉刷新等问题，这些都让HTML5开发者倍感挫败，尤其拿到Android低端机运行，摔手机的心都有； 另一方面，浏览器默认控件样式又少又丑，制作一个漂亮的控件非常麻烦，也有一些制作简单的ui框架但性能低下。mui框架有效的解决了这些问题，这是一个可以方便开发出高性能App的框架，也是目前最接近原生App效果的框架。赞助我们一个手艺人需要3万个粉丝养活，希望你能成为其中之一，前往赞助参考文档mui官网文档使用Jekyll 构建，立即查看。快速体验在线下载或扫描如下二维码下载Hello MUI，可在手机上体验MUI的控件UI及能力展示；在线交流若你在使用过程中有任何经验、想法、疑惑，都可以在问答社区 发起文章，和其它mui用户一起交流；Licensemui遵循MIT License；开发工具mui组件已被封装成HBuilder代码块，只需要简单几个字符，就可以快速生成各个组件对应的HTML代码，因此和Hbuilder两个一起用，效果会更好；
69,cyclic-software/express-hello-world,https://github.com/cyclic-software/express-hello-world/blob/main/README.md,JavaScript,"Cyclic - Express Hello WorldThis is a basic starter Expressjs app with:Static file hostingLogging MiddlewareCatch-all handler that echoes request infoLocal Quick StartClone to your localInstall dependencies npm installRun locally npm serveMake requestsBrowser: http://localhost:3000/some/path?q=query+one&q=second+query&single=valueCommand line: curl -i -XGET \""http://localhost:3000/cmd/line-curl\""Deploy in under 10 secondsSets up instant continuous deployment on git pushRealtime backend logs and API request monitoringCyclic RuntimeCyclic hosts your app on serverless infrastructure. That means there is no guarantee of memory or file system persistence between requests.The runtime expects a nodejs entry point defined as:package.json \""main\"" field defines the entry point file (if missing uses index.js)Entry point starts a server on process.env.PORTSay HiAsk a question or give us a shout out:💌 hello@cyclic.sh🐣 https://twitter.com/cyclicsoftware"
70,souravkl11/raganork-md,https://github.com/souravkl11/raganork-md/blob/main/README.md,JavaScript,"Raganork-multi-deviceMulti device whatsapp bot created with @adiwajshing/baileysDeploy to Heroku ↓    Deploy to Koyeb ↓    Deploy to Railway ↓(No setvar command, must set vars manually from settings)    Deploy in VPS [linux] ↓1. Install nodejs, git, ffmpeg2. npm i -g yarn pm23. git clone https://github.com/souravkl11/raganork-md && cd raganork-md4. yarn install --ignore-engines --network-concurrency 15. vi config.env6. Enter your session there in format 'SESSION=your_session_here'7. Press ctrl+c, then type ':wq' and press enter8. npm startNow the bot will start workingKoyeb: How to deployBasic usage helperNoteI can't guarantee or can be held responsible if you get blocked or banned by using this software. WhatsApp does not allow bots using unofficial methods on their platform, so this shouldn't be considered totally safe.LegalThis code is in no way affiliated, authorized, maintained, sponsored or endorsed by WA (WhatsApp) or any of its affiliates or subsidiaries.The official WhatsApp website can be found at https://whatsapp.com. \""WhatsApp\"" as well as related names, marks, emblems and images are registered trademarks of their respective owners.This is an independent and unofficial software Use at your own risk."
71,sudheerj/javascript-interview-questions,https://github.com/sudheerj/javascript-interview-questions/blob/master/README.md,JavaScript,"JavaScript Interview Questions & AnswersClick ⭐if you like the project and follow @SudheerJonna for more updates. Coding questions available here. PDF and Epub versions available at actions tab.                  Take this JavaScript Projects course to go from a JS beginner to confidently building your own projects    Take this coding interview bootcamp if you’re serious about getting hired and don’t have a CS degree    Take this Advanced JavaScript Course to learn advanced JS concepts and become a top JS developer      Table of ContentsNo.Questions1What are the possible ways to create objects in JavaScript2What is prototype chain3What is the difference between Call, Apply and Bind4What is JSON and its common operations5What is the purpose of the array slice method6What is the purpose of the array splice method7What is the difference between slice and splice8How do you compare Object and Map9What is the difference between == and === operators10What are lambda or arrow functions11What is a first class function12What is a first order function13What is a higher order function14What is a unary function15What is the currying function16What is a pure function17What is the purpose of the let keyword18What is the difference between let and var19What is the reason to choose the name let as a keyword20How do you redeclare variables in switch block without an error21What is the Temporal Dead Zone22What is IIFE(Immediately Invoked Function Expression)23How do you decode or encode a URL in JavaScript?24What is memoization25What is Hoisting26What are classes in ES627What are closures28What are modules29Why do you need modules30What is scope in javascript31What is a service worker32How do you manipulate DOM using a service worker33How do you reuse information across service worker restarts34What is IndexedDB35What is web storage36What is a post message37What is a cookie38Why do you need a Cookie39What are the options in a cookie40How do you delete a cookie41What are the differences between cookie, local storage and session storage42What is the main difference between localStorage and sessionStorage43How do you access web storage44What are the methods available on session storage45What is a storage event and its event handler46Why do you need web storage47How do you check web storage browser support48How do you check web workers browser support49Give an example of a web worker50What are the restrictions of web workers on DOM51What is a promise52Why do you need a promise53What are the three states of promise54What is a callback function55Why do we need callbacks56What is a callback hell57What are server-sent events58How do you receive server-sent event notifications59How do you check browser support for server-sent events60What are the events available for server sent events61What are the main rules of promise62What is callback in callback63What is promise chaining64What is promise.all65What is the purpose of the race method in promise66What is a strict mode in javascript67Why do you need strict mode68How do you declare strict mode69What is the purpose of double exclamation70What is the purpose of the delete operator71What is typeof operator72What is undefined property73What is null value74What is the difference between null and undefined75What is eval76What is the difference between window and document77How do you access history in javascript78How do you detect caps lock key turned on or not79What is isNaN80What are the differences between undeclared and undefined variables81What are global variables82What are the problems with global variables83What is NaN property84What is the purpose of isFinite function85What is an event flow86What is event bubbling87What is event capturing88How do you submit a form using JavaScript89How do you find operating system details90What is the difference between document load and DOMContentLoaded events91What is the difference between native, host and user objects92What are the tools or techniques used for debugging JavaScript code93What are the pros and cons of promises over callbacks94What is the difference between an attribute and a property95What is same-origin policy96What is the purpose of void 097Is JavaScript a compiled or interpreted language98Is JavaScript a case-sensitive language99Is there any relation between Java and JavaScript100What are events101Who created javascript102What is the use of preventDefault method103What is the use of stopPropagation method104What are the steps involved in return false usage105What is BOM106What is the use of setTimeout107What is the use of setInterval108Why is JavaScript treated as Single threaded109What is an event delegation110What is ECMAScript111What is JSON112What are the syntax rules of JSON113What is the purpose JSON stringify114How do you parse JSON string115Why do you need JSON116What are PWAs117What is the purpose of clearTimeout method118What is the purpose of clearInterval method119How do you redirect new page in javascript120How do you check whether a string contains a substring121How do you validate an email in javascript122How do you get the current url with javascript123What are the various url properties of location object124How do get query string values in javascript125How do you check if a key exists in an object126How do you loop through or enumerate javascript object127How do you test for an empty object128What is an arguments object129How do you make first letter of the string in an uppercase130What are the pros and cons of for loop131How do you display the current date in javascript132How do you compare two date objects133How do you check if a string starts with another string134How do you trim a string in javascript135How do you add a key value pair in javascript136Is the '!--' notation represents a special operator137How do you assign default values to variables138How do you define multiline strings139What is an app shell model140Can we define properties for functions141What is the way to find the number of parameters expected by a function142What is a polyfill143What are break and continue statements144What are js labels145What are the benefits of keeping declarations at the top146What are the benefits of initializing variables147What are the recommendations to create new object148How do you define JSON arrays149How do you generate random integers150Can you write a random integers function to print integers with in a range151What is tree shaking152What is the need of tree shaking153Is it recommended to use eval154What is a Regular Expression155What are the string methods available in Regular expression156What are modifiers in regular expression157What are regular expression patterns158What is a RegExp object159How do you search a string for a pattern160What is the purpose of exec method161How do you change the style of a HTML element162What would be the result of 1+2+'3'163What is a debugger statement164What is the purpose of breakpoints in debugging165Can I use reserved words as identifiers166How do you detect a mobile browser167How do you detect a mobile browser without regexp168How do you get the image width and height using JS169How do you make synchronous HTTP request170How do you make asynchronous HTTP request171How do you convert date to another timezone in javascript172What are the properties used to get size of window173What is a conditional operator in javascript174Can you apply chaining on conditional operator175What are the ways to execute javascript after page load176What is the difference between proto and prototype177Give an example where do you really need semicolon178What is a freeze method179What is the purpose of freeze method180Why do I need to use freeze method181How do you detect a browser language preference182How to convert string to title case with javascript183How do you detect javascript disabled in the page184What are various operators supported by javascript185What is a rest parameter186What happens if you do not use rest parameter as a last argument187What are the bitwise operators available in javascript188What is a spread operator189How do you determine whether object is frozen or not190How do you determine two values same or not using object191What is the purpose of using object is method192How do you copy properties from one object to other193What are the applications of assign method194What is a proxy object195What is the purpose of seal method196What are the applications of seal method197What are the differences between freeze and seal methods198How do you determine if an object is sealed or not199How do you get enumerable key and value pairs200What is the main difference between Object.values and Object.entries method201How can you get the list of keys of any object202How do you create an object with prototype203What is a WeakSet204What are the differences between WeakSet and Set205List down the collection of methods available on WeakSet206What is a WeakMap207What are the differences between WeakMap and Map208List down the collection of methods available on WeakMap209What is the purpose of uneval210How do you encode an URL211How do you decode an URL212How do you print the contents of web page213What is the difference between uneval and eval214What is an anonymous function215What is the precedence order between local and global variables216What are javascript accessors217How do you define property on Object constructor218What is the difference between get and defineProperty219What are the advantages of Getters and Setters220Can I add getters and setters using defineProperty method221What is the purpose of switch-case222What are the conventions to be followed for the usage of switch case223What are primitive data types224What are the different ways to access object properties225What are the function parameter rules226What is an error object227When you get a syntax error228What are the different error names from error object229What are the various statements in error handling230What are the two types of loops in javascript231What is nodejs232What is an Intl object233How do you perform language specific date and time formatting234What is an Iterator235How does synchronous iteration works236What is an event loop237What is call stack238What is an event queue239What is a decorator240What are the properties of Intl object241What is an Unary operator242How do you sort elements in an array243What is the purpose of compareFunction while sorting arrays244How do you reversing an array245How do you find min and max value in an array246How do you find min and max values without Math functions247What is an empty statement and purpose of it248How do you get metadata of a module249What is a comma operator250What is the advantage of a comma operator251What is typescript252What are the differences between javascript and typescript253What are the advantages of typescript over javascript254What is an object initializer255What is a constructor method256What happens if you write constructor more than once in a class257How do you call the constructor of a parent class258How do you get the prototype of an object259What happens If I pass string type for getPrototype method260How do you set prototype of one object to another261How do you check whether an object can be extendable or not262How do you prevent an object to extend263What are the different ways to make an object non-extensible264How do you define multiple properties on an object265What is MEAN in javascript266What Is Obfuscation in javascript267Why do you need Obfuscation268What is Minification269What are the advantages of minification270What are the differences between Obfuscation and Encryption271What are the common tools used for minification272How do you perform form validation using javascript273How do you perform form validation without javascript274What are the DOM methods available for constraint validation275What are the available constraint validation DOM properties276What are the list of validity properties277Give an example usage of rangeOverflow property278Is enums feature available in javascript279What is an enum280How do you list all properties of an object281How do you get property descriptors of an object282What are the attributes provided by a property descriptor283How do you extend classes284How do I modify the url without reloading the page285How do you check whether an array includes a particular value or not286How do you compare scalar arrays287How to get the value from get parameters288How do you print numbers with commas as thousand separators289What is the difference between java and javascript290Does javascript supports namespace291How do you declare namespace292How do you invoke javascript code in an iframe from parent page293How do get the timezone offset from date294How do you load CSS and JS files dynamically295What are the different methods to find HTML elements in DOM296What is jQuery297What is V8 JavaScript engine298Why do we call javascript as dynamic language299What is a void operator300How to set the cursor to wait301How do you create an infinite loop302Why do you need to avoid with statement303What is the output of below for loops304List down some of the features of ES6305What is ES6306Can I redeclare let and const variables307Is const variable makes the value immutable308What are default parameters309What are template literals310How do you write multi-line strings in template literals311What are nesting templates312What are tagged templates313What are raw strings314What is destructuring assignment315What are default values in destructuring assignment316How do you swap variables in destructuring assignment317What are enhanced object literals318What are dynamic imports319What are the use cases for dynamic imports320What are typed arrays321What are the advantages of module loaders322What is collation323What is for...of statement324What is the output of below spread operator array325Is PostMessage secure326What are the problems with postmessage target origin as wildcard327How do you avoid receiving postMessages from attackers328Can I avoid using postMessages completely329Is postMessages synchronous330What paradigm is Javascript331What is the difference between internal and external javascript332Is JavaScript faster than server side script333How do you get the status of a checkbox334What is the purpose of double tilde operator335How do you convert character to ASCII code336What is ArrayBuffer337What is the output of below string expression338What is the purpose of Error object339What is the purpose of EvalError object340What are the list of cases error thrown from non-strict mode to strict mode341Do all objects have prototypes342What is the difference between a parameter and an argument343What is the purpose of some method in arrays344How do you combine two or more arrays345What is the difference between Shallow and Deep copy346How do you create specific number of copies of a string347How do you return all matching strings against a regular expression348How do you trim a string at the beginning or ending349What is the output of below console statement with unary operator350Does javascript uses mixins351What is a thunk function352What are asynchronous thunks353What is the output of below function calls354How to remove all line breaks from a string355What is the difference between reflow and repaint356What happens with negating an array357What happens if we add two arrays358What is the output of prepend additive operator on falsy values359How do you create self string using special characters360How do you remove falsy values from an array361How do you get unique values of an array362What is destructuring aliases363How do you map the array values without using map method364How do you empty an array365How do you rounding numbers to certain decimals366What is the easiest way to convert an array to an object367How do you create an array with some data368What are the placeholders from console object369Is it possible to add CSS to console messages370What is the purpose of dir method of console object371Is it possible to debug HTML elements in console372How do you display data in a tabular format using console object373How do you verify that an argument is a Number or not374How do you create copy to clipboard button375What is the shortcut to get timestamp376How do you flattening multi dimensional arrays377What is the easiest multi condition checking378How do you capture browser back button379How do you disable right click in the web page380What are wrapper objects381What is AJAX382What are the different ways to deal with Asynchronous Code383How to cancel a fetch request384What is web speech API385What is minimum timeout throttling386How do you implement zero timeout in modern browsers387What are tasks in event loop388What is microtask389What are different event loops390What is the purpose of queueMicrotask391How do you use javascript libraries in typescript file392What are the differences between promises and observables393What is heap394What is an event table395What is a microTask queue396What is the difference between shim and polyfill397How do you detect primitive or non primitive value type398What is babel399Is Node.js completely single threaded400What are the common use cases of observables401What is RxJS402What is the difference between Function constructor and function declaration403What is a Short circuit condition404What is the easiest way to resize an array405What is an observable406What is the difference between function and class declarations407What is an async function408How do you prevent promises swallowing errors409What is deno410How do you make an object iterable in javascript411What is a Proper Tail Call412How do you check an object is a promise or not413How to detect if a function is called as constructor414What are the differences between arguments object and rest parameter415What are the differences between spread operator and rest parameter416What are the different kinds of generators417What are the built-in iterables418What are the differences between for...of and for...in statements419How do you define instance and non-instance properties420What is the difference between isNaN and Number.isNaN?421How to invoke an IIFE without any extra brackets?422Is that possible to use expressions in switch cases?423What is the easiest way to ignore promise errors?424How do style the console output using CSS?425What is nullish coalescing operator (??)?426How do you group and nest console output?427What is the difference between dense and sparse arrays?428What are the different ways to create sparse arrays?429What is the difference between setTimeout, setImmediate and process.nextTick?430How do you reverse an array without modifying original array?431How do you create custom HTML element?432What is global execution context?433What is function execution context?434What is debouncing?435What is throttling?436What is optional chaining?437What is an environment record?438How to verify if a variable is an array?439What is pass by value and pass by reference?440What are the differences between primitives and non-primitives?441What are hidden classes?442What is inline caching?443How do you create your own bind method using either call or apply method?444What are the differences between pure and impure functions?445What is  referential transparency?446What are the possible side-effects in javascript?447What are compose and pipe functions?448What is module pattern?449What is Functon Composition?450How to use await outside of async function prior to ES2022?What are the possible ways to create objects in JavaScriptThere are many ways to create objects in javascript as belowObject constructor:The simplest way to create an empty object is using the Object constructor. Currently this approach is not recommended.var object = new Object();Object's create method:The create method of Object creates a new object by passing the prototype object as a parametervar object = Object.create(null);Object literal syntax:The object literal syntax (or object initializer), is a comma-separated set of name-value pairs wrapped in curly braces.var object = {     name: \""Sudheer\"",     age: 34};Object literal property values can be of any data type, including array, function, and nested object.Note: This is an easiest way to create an objectFunction constructor:Create any function and apply the new operator to create object instances,function Person(name) {  this.name = name;  this.age = 21;}var object = new Person(\""Sudheer\"");Function constructor with prototype:This is similar to function constructor but it uses prototype for their properties and methods,function Person() {}Person.prototype.name = \""Sudheer\"";var object = new Person();This is equivalent to an instance created with an object create method with a function prototype and then call that function with an instance and parameters as arguments.function func() {};new func(x, y, z);(OR)// Create a new instance using function prototype.var newInstance = Object.create(func.prototype)// Call the functionvar result = func.call(newInstance, x, y, z),// If the result is a non-null object then use it otherwise just use the new instance.console.log(result && typeof result === 'object' ? result : newInstance);ES6 Class syntax:ES6 introduces class feature to create the objectsclass Person {  constructor(name) {    this.name = name;  }}var object = new Person(\""Sudheer\"");Singleton pattern:A Singleton is an object which can only be instantiated one time. Repeated calls to its constructor return the same instance and this way one can ensure that they don't accidentally create multiple instances.var object = new (function () {  this.name = \""Sudheer\"";})();⬆ Back to TopWhat is a prototype chainPrototype chaining is used to build new types of objects based on existing ones. It is similar to inheritance in a class based language.The prototype on object instance is available through Object.getPrototypeOf(object) or __proto__ property whereas prototype on constructors function is available through Object.prototype.⬆ Back to TopWhat is the difference between Call, Apply and BindThe difference between Call, Apply and Bind can be explained with below examples,Call: The call() method invokes a function with a given this value and arguments provided one by onevar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.call(employee1, \""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?invite.call(employee2, \""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Apply: Invokes the function with a given this value and allows you to pass in arguments as an arrayvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}invite.apply(employee1, [\""Hello\"", \""How are you?\""]); // Hello John Rodson, How are you?invite.apply(employee2, [\""Hello\"", \""How are you?\""]); // Hello Jimmy Baily, How are you?bind: returns a new function, allowing you to pass any number of argumentsvar employee1 = { firstName: \""John\"", lastName: \""Rodson\"" };var employee2 = { firstName: \""Jimmy\"", lastName: \""Baily\"" };function invite(greeting1, greeting2) {  console.log(    greeting1 + \"" \"" + this.firstName + \"" \"" + this.lastName + \"", \"" + greeting2  );}var inviteEmployee1 = invite.bind(employee1);var inviteEmployee2 = invite.bind(employee2);inviteEmployee1(\""Hello\"", \""How are you?\""); // Hello John Rodson, How are you?inviteEmployee2(\""Hello\"", \""How are you?\""); // Hello Jimmy Baily, How are you?Call and apply are pretty interchangeable. Both execute the current function immediately. You need to decide whether it’s easier to send in an array or a comma separated list of arguments. You can remember by treating Call is for comma (separated list) and Apply is for Array.Whereas Bind creates a new function that will have this set to the first parameter passed to bind().⬆ Back to TopWhat is JSON and its common operationsJSON is a text-based data format following JavaScript object syntax, which was popularized by Douglas Crockford. It is useful when you want to transmit data across a network and it is basically just a text file with an extension of .json, and a MIME type of application/jsonParsing: Converting a string to a native objectJSON.parse(text);Stringification: converting a native object to a string so it can be transmitted across the networkJSON.stringify(object);⬆ Back to TopWhat is the purpose of the array slice methodThe slice() method returns the selected elements in an array as a new array object. It selects the elements starting at the given start argument, and ends at the given optional end argument without including the last element. If you omit the second argument then it selects till the end.Some of the examples of this method are,let arrayIntegers = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegers.slice(0, 2); // returns [1,2]let arrayIntegers2 = arrayIntegers.slice(2, 3); // returns [3]let arrayIntegers3 = arrayIntegers.slice(4); //returns [5]Note: Slice method won't mutate the original array but it returns the subset as a new array.⬆ Back to TopWhat is the purpose of the array splice methodThe splice() method is used either adds/removes items to/from an array, and then returns the removed item. The first argument specifies the array position for insertion or deletion whereas the optional second argument indicates the number of elements to be deleted. Each additional argument is added to the array.Some of the examples of this method are,let arrayIntegersOriginal1 = [1, 2, 3, 4, 5];let arrayIntegersOriginal2 = [1, 2, 3, 4, 5];let arrayIntegersOriginal3 = [1, 2, 3, 4, 5];let arrayIntegers1 = arrayIntegersOriginal1.splice(0, 2); // returns [1, 2]; original array: [3, 4, 5]let arrayIntegers2 = arrayIntegersOriginal2.splice(3); // returns [4, 5]; original array: [1, 2, 3]let arrayIntegers3 = arrayIntegersOriginal3.splice(3, 1, \""a\"", \""b\"", \""c\""); //returns [4]; original array: [1, 2, 3, \""a\"", \""b\"", \""c\"", 5]Note: Splice method modifies the original array and returns the deleted array.⬆ Back to TopWhat is the difference between slice and spliceSome of the major difference in a tabular formSliceSpliceDoesn't modify the original array(immutable)Modifies the original array(mutable)Returns the subset of original arrayReturns the deleted elements as arrayUsed to pick the elements from arrayUsed to insert or delete elements to/from array⬆ Back to TopHow do you compare Object and MapObjects are similar to Maps in that both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. Due to this reason, Objects have been used as Maps historically. But there are important differences that make using a Map preferable in certain cases.The keys of an Object are Strings and Symbols, whereas they can be any value for a Map, including functions, objects, and any primitive.The keys in Map are ordered while keys added to Object are not. Thus, when iterating over it, a Map object returns keys in order of insertion.You can get the size of a Map easily with the size property, while the number of properties in an Object must be determined manually.A Map is an iterable and can thus be directly iterated, whereas iterating over an Object requires obtaining its keys in some fashion and iterating over them.An Object has a prototype, so there are default keys in the map that could collide with your keys if you're not careful. As of ES5 this can be bypassed by using map = Object.create(null), but this is seldom done.A Map may perform better in scenarios involving frequent addition and removal of key pairs.⬆ Back to TopWhat is the difference between == and === operatorsJavaScript provides both strict(===, !==) and type-converting(==, !=) equality comparison. The strict operators take type of variable in consideration, while non-strict operators make type correction/conversion based upon values of variables. The strict operators follow the below conditions for different types,Two strings are strictly equal when they have the same sequence of characters, same length, and same characters in corresponding positions.Two numbers are strictly equal when they are numerically equal. i.e, Having the same number value.There are two special cases in this,NaN is not equal to anything, including NaN.Positive and negative zeros are equal to one another.Two Boolean operands are strictly equal if both are true or both are false.Two objects are strictly equal if they refer to the same Object.Null and Undefined types are not equal with ===, but equal with ==. i.e,null===undefined --> false but null==undefined --> trueSome of the example which covers the above cases,0 == false   // true0 === false  // false1 == \""1\""     // true1 === \""1\""    // falsenull == undefined // truenull === undefined // false'0' == false // true'0' === false // false[]==[] or []===[] //false, refer different objects in memory{}=={} or {}==={} //false, refer different objects in memory⬆ Back to TopWhat are lambda or arrow functionsAn arrow function is a shorter syntax for a function expression and does not have its own this, arguments, super, or new.target. These functions are best suited for non-method functions, and they cannot be used as constructors.⬆ Back to TopWhat is a first class functionIn Javascript, functions are first class objects. First-class functions means when functions in that language are treated like any other variable.For example, in such a language, a function can be passed as an argument to other functions, can be returned by another function and can be assigned as a value to a variable. For example, in the below example, handler functions assigned to a listenerconst handler = () => console.log(\""This is a click handler function\"");document.addEventListener(\""click\"", handler);⬆ Back to TopWhat is a first order functionFirst-order function is a function that doesn’t accept another function as an argument and doesn’t return a function as its return value.const firstOrder = () => console.log(\""I am a first order function!\"");⬆ Back to TopWhat is a higher order functionHigher-order function is a function that accepts another function as an argument or returns a function as a return value or both.const firstOrderFunc = () =>  console.log(\""Hello, I am a First order function\"");const higherOrder = (ReturnFirstOrderFunc) => ReturnFirstOrderFunc();higherOrder(firstOrderFunc);⬆ Back to TopWhat is a unary functionUnary function (i.e. monadic) is a function that accepts exactly one argument. It stands for a single argument accepted by a function.Let us take an example of unary function,const unaryFunction = (a) => console.log(a + 10); // Add 10 to the given argument and display the value⬆ Back to TopWhat is the currying functionCurrying is the process of taking a function with multiple arguments and turning it into a sequence of functions each with only a single argument. Currying is named after a mathematician Haskell Curry. By applying currying, a n-ary function turns it into a unary function.Let's take an example of n-ary function and how it turns into a currying function,const multiArgFunction = (a, b, c) => a + b + c;console.log(multiArgFunction(1, 2, 3)); // 6const curryUnaryFunction = (a) => (b) => (c) => a + b + c;curryUnaryFunction(1); // returns a function: b => c =>  1 + b + ccurryUnaryFunction(1)(2); // returns a function: c => 3 + ccurryUnaryFunction(1)(2)(3); // returns the number 6Curried functions are great to improve code reusability and functional composition.⬆ Back to TopWhat is a pure functionA Pure function is a function where the return value is only determined by its arguments without any side effects. i.e, If you call a function with the same arguments 'n' number of times and 'n' number of places in the application then it will always return the same value.Let's take an example to see the difference between pure and impure functions,//Impurelet numberArray = [];const impureAddNumber = (number) => numberArray.push(number);//Pureconst pureAddNumber = (number) => (argNumberArray) =>  argNumberArray.concat([number]);//Display the resultsconsole.log(impureAddNumber(6)); // returns 1console.log(numberArray); // returns [6]console.log(pureAddNumber(7)(numberArray)); // returns [6, 7]console.log(numberArray); // returns [6]As per the above code snippets, the Push function is impure itself by altering the array and returning a push number index independent of the parameter value. . Whereas Concat on the other hand takes the array and concatenates it with the other array producing a whole new array without side effects. Also, the return value is a concatenation of the previous array.Remember that Pure functions are important as they simplify unit testing without any side effects and no need for dependency injection. They also avoid tight coupling and make it harder to break your application by not having any side effects. These principles are coming together with Immutability concept of ES6 by giving preference to const over let usage.⬆ Back to TopWhat is the purpose of the let keywordThe let statement declares a block scope local variable. Hence the variables defined with let keyword are limited in scope to the block, statement, or expression on which it is used. Whereas variables declared with the var keyword used to define a variable globally, or locally to an entire function regardless of block scope.Let's take an example to demonstrate the usage,let counter = 30;if (counter === 30) {  let counter = 31;  console.log(counter); // 31}console.log(counter); // 30 (because the variable in if block won't exist here)⬆ Back to TopWhat is the difference between let and varYou can list out the differences in a tabular formatvarletIt is been available from the beginning of JavaScriptIntroduced as part of ES6It has function scopeIt has block scopeVariables will be hoistedHoisted but not initializedLet's take an example to see the difference,function userDetails(username) {  if (username) {    console.log(salary); // undefined due to hoisting    console.log(age); // ReferenceError: Cannot access 'age' before initialization    let age = 30;    var salary = 10000;  }  console.log(salary); //10000 (accessible due to function scope)  console.log(age); //error: age is not defined(due to block scope)}userDetails(\""John\"");⬆ Back to TopWhat is the reason to choose the name let as a keywordlet is a mathematical statement that was adopted by early programming languages like Scheme and Basic. It has been borrowed from dozens of other languages that use let already as a traditional keyword as close to var as possible.⬆ Back to TopHow do you redeclare variables in switch block without an errorIf you try to redeclare variables in a switch block then it will cause errors because there is only one block. For example, the below code block throws a syntax error as below,let counter = 1;switch (x) {  case 0:    let name;    break;  case 1:    let name; // SyntaxError for redeclaration.    break;}To avoid this error, you can create a nested block inside a case clause and create a new block scoped lexical environment.let counter = 1;switch (x) {  case 0: {    let name;    break;  }  case 1: {    let name; // No SyntaxError for redeclaration.    break;  }}⬆ Back to TopWhat is the Temporal Dead ZoneThe Temporal Dead Zone is a behavior in JavaScript that occurs when declaring a variable with the let and const keywords, but not with var. In ECMAScript 6, accessing a let or const variable before its declaration (within its scope) causes a ReferenceError. The time span when that happens, between the creation of a variable’s binding and its declaration, is called the temporal dead zone.Let's see this behavior with an example,function somemethod() {  console.log(counter1); // undefined  console.log(counter2); // ReferenceError  var counter1 = 1;  let counter2 = 2;}⬆ Back to TopWhat is IIFE(Immediately Invoked Function Expression)IIFE (Immediately Invoked Function Expression) is a JavaScript function that runs as soon as it is defined. The signature of it would be as below,(function () {  // logic here})();The primary reason to use an IIFE is to obtain data privacy because any variables declared within the IIFE cannot be accessed by the outside world. i.e, If you try to access variables with IIFE then it throws an error as below,(function () {  var message = \""IIFE\"";  console.log(message);})();console.log(message); //Error: message is not defined⬆ Back to TopHow do you decode or encode a URL in JavaScript?encodeURI() function is used to encode an URL. This function requires a URL string as a parameter and return that encoded string.decodeURI() function is used to decode an URL. This function requires an encoded URL string as parameter and return that decoded string.Note: If you want to encode characters such as / ? : @ & = + $ # then you need to use encodeURIComponent().let uri = \""employeeDetails?name=john&occupation=manager\"";let encoded_uri = encodeURI(uri);let decoded_uri = decodeURI(encoded_uri);⬆ Back to TopWhat is memoizationMemoization is a programming technique which attempts to increase a function’s performance by caching its previously computed results. Each time a memoized function is called, its parameters are used to index the cache. If the data is present, then it can be returned, without executing the entire function. Otherwise the function is executed and then the result is added to the cache.Let's take an example of adding function with memoization,const memoizAddition = () => {  let cache = {};  return (value) => {    if (value in cache) {      console.log(\""Fetching from cache\"");      return cache[value]; // Here, cache.value cannot be used as property name starts with the number which is not a valid JavaScript  identifier. Hence, can only be accessed using the square bracket notation.    } else {      console.log(\""Calculating result\"");      let result = value + 20;      cache[value] = result;      return result;    }  };};// returned function from memoizAdditionconst addition = memoizAddition();console.log(addition(20)); //output: 40 calculatedconsole.log(addition(20)); //output: 40 cached⬆ Back to TopWhat is HoistingHoisting is a JavaScript mechanism where variables, function declarations and classes are moved to the top of their scope before code execution. Remember that JavaScript only hoists declarations, not initialisation.Let's take a simple example of variable hoisting,console.log(message); //output : undefinedvar message = \""The variable Has been hoisted\"";The above code looks like as below to the interpreter,var message;console.log(message);message = \""The variable Has been hoisted\"";In the same fashion, function declarations are hoisted toomessage(\""Good morning\""); //Good morningfunction message(name) {  console.log(name);}This hoisting makes functions to be safely used in code before they are declared.⬆ Back to TopWhat are classes in ES6In ES6, Javascript classes are primarily syntactic sugar over JavaScript’s existing prototype-based inheritance.For example, the prototype based inheritance written in function expression as below,function Bike(model, color) {  this.model = model;  this.color = color;}Bike.prototype.getDetails = function () {  return this.model + \"" bike has\"" + this.color + \"" color\"";};Whereas ES6 classes can be defined as an alternativeclass Bike {  constructor(color, model) {    this.color = color;    this.model = model;  }  getDetails() {    return this.model + \"" bike has\"" + this.color + \"" color\"";  }}⬆ Back to TopWhat are closuresA closure is the combination of a function and the lexical environment within which that function was declared. i.e, It is an inner function that has access to the outer or enclosing function’s variables. The closure has three scope chainsOwn scope where variables defined between its curly bracketsOuter function’s variablesGlobal variablesLet's take an example of closure concept,function Welcome(name) {  var greetingInfo = function (message) {    console.log(message + \"" \"" + name);  };  return greetingInfo;}var myFunction = Welcome(\""John\"");myFunction(\""Welcome \""); //Output: Welcome JohnmyFunction(\""Hello Mr.\""); //output: Hello Mr.JohnAs per the above code, the inner function(i.e, greetingInfo) has access to the variables in the outer function scope(i.e, Welcome) even after the outer function has returned.⬆ Back to TopWhat are modulesModules refer to small units of independent, reusable code and also act as the foundation of many JavaScript design patterns. Most of the JavaScript modules export an object literal, a function, or a constructor⬆ Back to TopWhy do you need modulesBelow are the list of benefits using modules in javascript ecosystemMaintainabilityReusabilityNamespacing⬆ Back to TopWhat is scope in javascriptScope is the accessibility of variables, functions, and objects in some particular part of your code during runtime. In other words, scope determines the visibility of variables and other resources in areas of your code.⬆ Back to TopWhat is a service workerA Service worker is basically a script (JavaScript file) that runs in the background, separate from a web page and provides features that don't need a web page or user interaction. Some of the major features of service workers are Rich offline experiences(offline first web application development), periodic background syncs, push notifications, intercept and handle network requests and programmatically managing a cache of responses.⬆ Back to TopHow do you manipulate DOM using a service workerService worker can't access the DOM directly. But it can communicate with the pages it controls by responding to messages sent via the postMessage interface, and those pages can manipulate the DOM.⬆ Back to TopHow do you reuse information across service worker restartsThe problem with service worker is that it gets terminated when not in use, and restarted when it's next needed, so you cannot rely on global state within a service worker's onfetch and onmessage handlers. In this case, service workers will have access to IndexedDB API in order to persist and reuse across restarts.⬆ Back to TopWhat is IndexedDBIndexedDB is a low-level API for client-side storage of larger amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data.⬆ Back to TopWhat is web storageWeb storage is an API that provides a mechanism by which browsers can store key/value pairs locally within the user's browser, in a much more intuitive fashion than using cookies. The web storage provides two mechanisms for storing data on the client.Local storage: It stores data for current origin with no expiration date.Session storage: It stores data for one session and the data is lost when the browser tab is closed.⬆ Back to TopWhat is a post messagePost message is a method that enables cross-origin communication between Window objects.(i.e, between a page and a pop-up that it spawned, or between a page and an iframe embedded within it). Generally, scripts on different pages are allowed to access each other if and only if the pages follow same-origin policy(i.e, pages share the same protocol, port number, and host).⬆ Back to TopWhat is a CookieA cookie is a piece of data that is stored on your computer to be accessed by your browser. Cookies are saved as key/value pairs.For example, you can create a cookie named username as below,document.cookie = \""username=John\"";⬆ Back to TopWhy do you need a CookieCookies are used to remember information about the user profile(such as username). It basically involves two steps,When a user visits a web page, the user profile can be stored in a cookie.Next time the user visits the page, the cookie remembers the user profile.⬆ Back to TopWhat are the options in a cookieThere are few below options available for a cookie,By default, the cookie is deleted when the browser is closed but you can change this behavior by setting expiry date (in UTC time).document.cookie = \""username=John; expires=Sat, 8 Jun 2019 12:00:00 UTC\"";By default, the cookie belongs to a current page. But you can tell the browser what path the cookie belongs to using a path parameter.document.cookie = \""username=John; path=/services\"";⬆ Back to TopHow do you delete a cookieYou can delete a cookie by setting the expiry date as a passed date. You don't need to specify a cookie value in this case.For example, you can delete a username cookie in the current page as below.document.cookie =  \""username=; expires=Fri, 07 Jun 2019 00:00:00 UTC; path=/;\"";Note: You should define the cookie path option to ensure that you delete the right cookie. Some browsers doesn't allow to delete a cookie unless you specify a path parameter.⬆ Back to TopWhat are the differences between cookie, local storage and session storageBelow are some of the differences between cookie, local storage and session storage,FeatureCookieLocal storageSession storageAccessed on client or server sideBoth server-side & client-sideclient-side onlyclient-side onlyLifetimeAs configured using Expires optionuntil deleteduntil tab is closedSSL supportSupportedNot supportedNot supportedMaximum data size4KB5 MB5MB⬆ Back to TopWhat is the main difference between localStorage and sessionStorageLocalStorage is the same as SessionStorage but it persists the data even when the browser is closed and reopened(i.e it has no expiration time) whereas in sessionStorage data gets cleared when the page session ends.⬆ Back to TopHow do you access web storageThe Window object implements the WindowLocalStorage and WindowSessionStorage objects which has localStorage(window.localStorage) and sessionStorage(window.sessionStorage) properties respectively. These properties create an instance of the Storage object, through which data items can be set, retrieved and removed for a specific domain and storage type (session or local).For example, you can read and write on local storage objects as belowlocalStorage.setItem(\""logo\"", document.getElementById(\""logo\"").value);localStorage.getItem(\""logo\"");⬆ Back to TopWhat are the methods available on session storageThe session storage provided methods for reading, writing and clearing the session data// Save data to sessionStoragesessionStorage.setItem(\""key\"", \""value\"");// Get saved data from sessionStoragelet data = sessionStorage.getItem(\""key\"");// Remove saved data from sessionStoragesessionStorage.removeItem(\""key\"");// Remove all saved data from sessionStoragesessionStorage.clear();⬆ Back to TopWhat is a storage event and its event handlerThe StorageEvent is an event that fires when a storage area has been changed in the context of another document. Whereas onstorage property is an EventHandler for processing storage events.The syntax would be as belowwindow.onstorage = functionRef;Let's take the example usage of onstorage event handler which logs the storage key and it's valueswindow.onstorage = function (e) {  console.log(    \""The \"" +      e.key +      \"" key has been changed from \"" +      e.oldValue +      \"" to \"" +      e.newValue +      \"".\""  );};⬆ Back to TopWhy do you need web storageWeb storage is more secure, and large amounts of data can be stored locally, without affecting website performance. Also, the information is never transferred to the server. Hence this is a more recommended approach than Cookies.⬆ Back to TopHow do you check web storage browser supportYou need to check browser support for localStorage and sessionStorage before using web storage,if (typeof Storage !== \""undefined\"") {  // Code for localStorage/sessionStorage.} else {  // Sorry! No Web Storage support..}⬆ Back to TopHow do you check web workers browser supportYou need to check browser support for web workers before using itif (typeof Worker !== \""undefined\"") {  // code for Web worker support.} else {  // Sorry! No Web Worker support..}⬆ Back to TopGive an example of a web workerYou need to follow below steps to start using web workers for counting exampleCreate a Web Worker File: You need to write a script to increment the count value. Let's name it as counter.jslet i = 0;function timedCount() {  i = i + 1;  postMessage(i);  setTimeout(\""timedCount()\"", 500);}timedCount();Here postMessage() method is used to post a message back to the HTML pageCreate a Web Worker Object: You can create a web worker object by checking for browser support. Let's name this file as web_worker_example.jsif (typeof w == \""undefined\"") {  w = new Worker(\""counter.js\"");}and we can receive messages from web workerw.onmessage = function (event) {  document.getElementById(\""message\"").innerHTML = event.data;};Terminate a Web Worker:Web workers will continue to listen for messages (even after the external script is finished) until it is terminated. You can use the terminate() method to terminate listening to the messages.w.terminate();Reuse the Web Worker: If you set the worker variable to undefined you can reuse the codew = undefined;⬆ Back to TopWhat are the restrictions of web workers on DOMWebWorkers don't have access to below javascript objects since they are defined in an external filesWindow objectDocument objectParent object⬆ Back to TopWhat is a promiseA promise is an object that may produce a single value some time in the future with either a resolved value or a reason that it’s not resolved(for example, network error). It will be in one of the 3 possible states: fulfilled, rejected, or pending.The syntax of Promise creation looks like below,const promise = new Promise(function (resolve, reject) {  // promise description});The usage of a promise would be as below,const promise = new Promise(  (resolve) => {    setTimeout(() => {      resolve(\""I'm a Promise!\"");    }, 5000);  },  (reject) => {});promise.then((value) => console.log(value));The action flow of a promise will be as below,⬆ Back to TopWhy do you need a promisePromises are used to handle asynchronous operations. They provide an alternative approach for callbacks by reducing the callback hell and writing the cleaner code.⬆ Back to TopWhat are the three states of promisePromises have three states:Pending: This is an initial state of the Promise before an operation beginsFulfilled: This state indicates that the specified operation was completed.Rejected: This state indicates that the operation did not complete. In this case an error value will be thrown.⬆ Back to TopWhat is a callback functionA callback function is a function passed into another function as an argument. This function is invoked inside the outer function to complete an action.Let's take a simple example of how to use callback functionfunction callbackFunction(name) {  console.log(\""Hello \"" + name);}function outerFunction(callback) {  let name = prompt(\""Please enter your name.\"");  callback(name);}outerFunction(callbackFunction);⬆ Back to TopWhy do we need callbacksThe callbacks are needed because javascript is an event driven language. That means instead of waiting for a response javascript will keep executing while listening for other events.Let's take an example with the first function invoking an API call(simulated by setTimeout) and the next function which logs the message.function firstFunction() {  // Simulate a code delay  setTimeout(function () {    console.log(\""First function called\"");  }, 1000);}function secondFunction() {  console.log(\""Second function called\"");}firstFunction();secondFunction();Output;// Second function called// First function calledAs observed from the output, javascript didn't wait for the response of the first function and the remaining code block got executed. So callbacks are used in a way to make sure that certain code doesn’t execute until the other code finishes execution.⬆ Back to TopWhat is a callback hellCallback Hell is an anti-pattern with multiple nested callbacks which makes code hard to read and debug when dealing with asynchronous logic. The callback hell looks like below,async1(function(){    async2(function(){        async3(function(){            async4(function(){                ....            });        });    });});⬆ Back to TopWhat are server-sent eventsServer-sent events (SSE) is a server push technology enabling a browser to receive automatic updates from a server via HTTP connection without resorting to polling. These are a one way communications channel - events flow from server to client only. This has been used in Facebook/Twitter updates, stock price updates, news feeds etc.⬆ Back to TopHow do you receive server-sent event notificationsThe EventSource object is used to receive server-sent event notifications. For example, you can receive messages from server as below,if (typeof EventSource !== \""undefined\"") {  var source = new EventSource(\""sse_generator.js\"");  source.onmessage = function (event) {    document.getElementById(\""output\"").innerHTML += event.data + \""<br>\"";  };}⬆ Back to TopHow do you check browser support for server-sent eventsYou can perform browser support for server-sent events before using it as below,if (typeof EventSource !== \""undefined\"") {  // Server-sent events supported. Let's have some code here!} else {  // No server-sent events supported}⬆ Back to TopWhat are the events available for server sent eventsBelow are the list of events available for server sent eventsEventDescriptiononopenIt is used when a connection to the server is openedonmessageThis event is used when a message is receivedonerrorIt happens when an error occurs⬆ Back to TopWhat are the main rules of promiseA promise must follow a specific set of rules:A promise is an object that supplies a standard-compliant .then() methodA pending promise may transition into either fulfilled or rejected stateA fulfilled or rejected promise is settled and it must not transition into any other state.Once a promise is settled, the value must not change.⬆ Back to TopWhat is callback in callbackYou can nest one callback inside in another callback to execute the actions sequentially one by one. This is known as callbacks in callbacks.loadScript(\""/script1.js\"", function (script) {  console.log(\""first script is loaded\"");  loadScript(\""/script2.js\"", function (script) {    console.log(\""second script is loaded\"");    loadScript(\""/script3.js\"", function (script) {      console.log(\""third script is loaded\"");      // after all scripts are loaded    });  });});⬆ Back to TopWhat is promise chainingThe process of executing a sequence of asynchronous tasks one after another using promises is known as Promise chaining. Let's take an example of promise chaining for calculating the final result,new Promise(function (resolve, reject) {  setTimeout(() => resolve(1), 1000);})  .then(function (result) {    console.log(result); // 1    return result * 2;  })  .then(function (result) {    console.log(result); // 2    return result * 3;  })  .then(function (result) {    console.log(result); // 6    return result * 4;  });In the above handlers, the result is passed to the chain of .then() handlers with the below work flow,The initial promise resolves in 1 second,After that .then handler is called by logging the result(1) and then return a promise with the value of result * 2.After that the value passed to the next .then handler by logging the result(2) and return a promise with result * 3.Finally the value passed to the last .then handler by logging the result(6) and return a promise with result * 4.⬆ Back to TopWhat is promise.allPromise.all is a promise that takes an array of promises as an input (an iterable), and it gets resolved when all the promises get resolved or any one of them gets rejected. For example, the syntax of promise.all method is below,Promise.all([Promise1, Promise2, Promise3]) .then(result) => {   console.log(result) }) .catch(error => console.log(`Error in promises ${error}`))Note: Remember that the order of the promises(output the result) is maintained as per input order.⬆ Back to TopWhat is the purpose of the race method in promisePromise.race() method will return the promise instance which is firstly resolved or rejected. Let's take an example of race() method where promise2 is resolved firstvar promise1 = new Promise(function (resolve, reject) {  setTimeout(resolve, 500, \""one\"");});var promise2 = new Promise(function (resolve, reject) {  setTimeout(resolve, 100, \""two\"");});Promise.race([promise1, promise2]).then(function (value) {  console.log(value); // \""two\"" // Both promises will resolve, but promise2 is faster});⬆ Back to TopWhat is a strict mode in javascriptStrict Mode is a new feature in ECMAScript 5 that allows you to place a program, or a function, in a “strict” operating context. This way it prevents certain actions from being taken and throws more exceptions. The literal expression \""use strict\""; instructs the browser to use the javascript code in the Strict mode.⬆ Back to TopWhy do you need strict modeStrict mode is useful to write \""secure\"" JavaScript by notifying \""bad syntax\"" into real errors. For example, it eliminates accidentally creating a global variable by throwing an error and also throws an error for assignment to a non-writable property, a getter-only property, a non-existing property, a non-existing variable, or a non-existing object.⬆ Back to TopHow do you declare strict modeThe strict mode is declared by adding \""use strict\""; to the beginning of a script or a function.If declared at the beginning of a script, it has global scope.\""use strict\"";x = 3.14; // This will cause an error because x is not declaredand if you declare inside a function, it has local scopex = 3.14; // This will not cause an error.myFunction();function myFunction() {  \""use strict\"";  y = 3.14; // This will cause an error}⬆ Back to TopWhat is the purpose of double exclamationThe double exclamation or negation(!!) ensures the resulting type is a boolean. If it was falsey (e.g. 0, null, undefined, etc.), it will be false, otherwise, it will be true.For example, you can test IE version using this expression as below,let isIE8 = false;isIE8 = !!navigator.userAgent.match(/MSIE 8.0/);console.log(isIE8); // returns true or falseIf you don't use this expression then it returns the original value.console.log(navigator.userAgent.match(/MSIE 8.0/)); // returns either an Array or nullNote: The expression !! is not an operator, but it is just twice of ! operator.⬆ Back to TopWhat is the purpose of the delete operatorThe delete keyword is used to delete the property as well as its value.var user = { name: \""John\"", age: 20 };delete user.age;console.log(user); // {name: \""John\""}⬆ Back to TopWhat is typeof operatorYou can use the JavaScript typeof operator to find the type of a JavaScript variable. It returns the type of a variable or an expression.typeof \""John Abraham\""; // Returns \""string\""typeof (1 + 2); // Returns \""number\""typeof [1, 2, 3] // Returns \""object\"" because all arrays are also objects⬆ Back to TopWhat is undefined propertyThe undefined property indicates that a variable has not been assigned a value, or declared but not initialized at all. The type of undefined value is undefined too.var user; // Value is undefined, type is undefinedconsole.log(typeof user); //undefinedAny variable can be emptied by setting the value to undefined.user = undefined;⬆ Back to TopWhat is null valueThe value null represents the intentional absence of any object value. It is one of JavaScript's primitive values. The type of null value is object.You can empty the variable by setting the value to null.var user = null;console.log(typeof user); //object⬆ Back to TopWhat is the difference between null and undefinedBelow are the main differences between null and undefined,NullUndefinedIt is an assignment value which indicates that variable points to no object.It is not an assignment value where a variable has been declared but has not yet been assigned a value.Type of null is objectType of undefined is undefinedThe null value is a primitive value that represents the null, empty, or non-existent reference.The undefined value is a primitive value used when a variable has not been assigned a value.Indicates the absence of a value for a variableIndicates absence of variable itselfConverted to zero (0) while performing primitive operationsConverted to NaN while performing primitive operations⬆ Back to TopWhat is evalThe eval() function evaluates JavaScript code represented as a string. The string can be a JavaScript expression, variable, statement, or sequence of statements.console.log(eval(\""1 + 2\"")); //  3⬆ Back to TopWhat is the difference between window and documentBelow are the main differences between window and document,WindowDocumentIt is the root level element in any web pageIt is the direct child of the window object. This is also known as Document Object Model(DOM)By default window object is available implicitly in the pageYou can access it via window.document or document.It has methods like alert(), confirm() and properties like document, locationIt provides methods like getElementById, getElementsByTagName, createElement etc⬆ Back to TopHow do you access history in javascriptThe window.history object contains the browser's history. You can load previous and next URLs in the history using back() and next() methods.function goBack() {  window.history.back();}function goForward() {  window.history.forward();}Note: You can also access history without window prefix.⬆ Back to TopHow do you detect caps lock key turned on or notThe mouseEvent getModifierState() is used to return a boolean value that indicates whether the specified modifier key is activated or not. The modifiers such as CapsLock, ScrollLock and NumLock are activated when they are clicked, and deactivated when they are clicked again.Let's take an input element to detect the CapsLock on/off behavior with an example,<input type=\""password\"" onmousedown=\""enterInput(event)\"" /><p id=\""feedback\""></p><script>  function enterInput(e) {    var flag = e.getModifierState(\""CapsLock\"");    if (flag) {      document.getElementById(\""feedback\"").innerHTML = \""CapsLock activated\"";    } else {      document.getElementById(\""feedback\"").innerHTML =        \""CapsLock not activated\"";    }  }</script>⬆ Back to TopWhat is isNaNThe isNaN() function is used to determine whether a value is an illegal number (Not-a-Number) or not. i.e, This function returns true if the value equates to NaN. Otherwise it returns false.isNaN(\""Hello\""); //trueisNaN(\""100\""); //false⬆ Back to TopWhat are the differences between undeclared and undefined variablesBelow are the major differences between undeclared(not defined) and undefined variables,undeclaredundefinedThese variables do not exist in a program and are not declaredThese variables declared in the program but have not assigned any valueIf you try to read the value of an undeclared variable, then a runtime error is encounteredIf you try to read the value of an undefined variable, an undefined value is returned.⬆ Back to TopWhat are global variablesGlobal variables are those that are available throughout the length of the code without any scope. The var keyword is used to declare a local variable but if you omit it then it will become global variablemsg = \""Hello\""; // var is missing, it becomes global variable⬆ Back to TopWhat are the problems with global variablesThe problem with global variables is the conflict of variable names of local and global scope. It is also difficult to debug and test the code that relies on global variables.⬆ Back to TopWhat is NaN propertyThe NaN property is a global property that represents \""Not-a-Number\"" value. i.e, It indicates that a value is not a legal number. It is very rare to use NaN in a program but it can be used as return value for few casesMath.sqrt(-1);parseInt(\""Hello\"");⬆ Back to TopWhat is the purpose of isFinite functionThe isFinite() function is used to determine whether a number is a finite, legal number. It returns false if the value is +infinity, -infinity, or NaN (Not-a-Number), otherwise it returns true.isFinite(Infinity); // falseisFinite(NaN); // falseisFinite(-Infinity); // falseisFinite(100); // true⬆ Back to TopWhat is an event flowEvent flow is the order in which event is received on the web page. When you click an element that is nested in various other elements, before your click actually reaches its destination, or target element, it must trigger the click event for each of its parent elements first, starting at the top with the global window object.There are two ways of event flowTop to Bottom(Event Capturing)Bottom to Top (Event Bubbling)⬆ Back to TopWhat is event bubblingEvent bubbling is a type of event propagation where the event first triggers on the innermost target element, and then successively triggers on the ancestors (parents) of the target element in the same nesting hierarchy till it reaches the outermost DOM element.⬆ Back to TopWhat is event capturingEvent capturing is a type of event propagation where the event is first captured by the outermost element, and then successively triggers on the descendants (children) of the target element in the same nesting hierarchy till it reaches the innermost DOM element.⬆ Back to TopHow do you submit a form using JavaScriptYou can submit a form using document.forms[0].submit(). All the form input's information is submitted using onsubmit event handlerfunction submit() {  document.forms[0].submit();}⬆ Back to TopHow do you find operating system detailsThe window.navigator object contains information about the visitor's browser OS details. Some of the OS properties are available under platform property,console.log(navigator.platform);⬆ Back to TopWhat is the difference between document load and DOMContentLoaded eventsThe DOMContentLoaded event is fired when the initial HTML document has been completely loaded and parsed, without waiting for assets(stylesheets, images, and subframes) to finish loading. Whereas The load event is fired when the whole page has loaded, including all dependent resources(stylesheets, images).⬆ Back to TopWhat is the difference between native, host and user objectsNative objects are objects that are part of the JavaScript language defined by the ECMAScript specification. For example, String, Math, RegExp, Object, Function etc core objects defined in the ECMAScript spec.Host objects are objects provided by the browser or runtime environment (Node). For example, window, XmlHttpRequest, DOM nodes etc are considered as host objects.User objects are objects defined in the javascript code. For example, User objects created for profile information.⬆ Back to TopWhat are the tools or techniques used for debugging JavaScript codeYou can use below tools or techniques for debugging javascriptChrome Devtoolsdebugger statementGood old console.log statement⬆ Back to TopWhat are the pros and cons of promises over callbacksBelow are the list of pros and cons of promises over callbacks,Pros:It avoids callback hell which is unreadableEasy to write sequential asynchronous code with .then()Easy to write parallel asynchronous code with Promise.all()Solves some of the common problems of callbacks(call the callback too late, too early, many times and swallow errors/exceptions)Cons:It makes little complex codeYou need to load a polyfill if ES6 is not supported⬆ Back to TopWhat is the difference between an attribute and a propertyAttributes are defined on the HTML markup whereas properties are defined on the DOM. For example, the below HTML element has 2 attributes type and value,<input type=\""text\"" value=\""Name:\"">You can retrieve the attribute value as below,const input = document.querySelector(\""input\"");console.log(input.getAttribute(\""value\"")); // Good morningconsole.log(input.value); // Good morningAnd after you change the value of the text field to \""Good evening\"", it becomes likeconsole.log(input.getAttribute(\""value\"")); // Good eveningconsole.log(input.value); // Good evening⬆ Back to TopWhat is same-origin policyThe same-origin policy is a policy that prevents JavaScript from making requests across domain boundaries. An origin is defined as a combination of URI scheme, hostname, and port number. If you enable this policy then it prevents a malicious script on one page from obtaining access to sensitive data on another web page using Document Object Model(DOM).⬆ Back to TopWhat is the purpose of void 0Void(0) is used to prevent the page from refreshing. This will be helpful to eliminate the unwanted side-effect, because it will return the undefined primitive value. It is commonly used for HTML documents that use href=\""JavaScript:Void(0);\"" within an <a> element. i.e, when you click a link, the browser loads a new page or refreshes the same page. But this behavior will be prevented using this expression.For example, the below link notify the message without reloading the page<a href=\""JavaScript:void(0);\"" onclick=\""alert('Well done!')\"">  Click Me!</a>⬆ Back to TopIs JavaScript a compiled or interpreted languageJavaScript is an interpreted language, not a compiled language. An interpreter in the browser reads over the JavaScript code, interprets each line, and runs it. Nowadays modern browsers use a technology known as Just-In-Time (JIT) compilation, which compiles JavaScript to executable bytecode just as it is about to run.⬆ Back to TopIs JavaScript a case-sensitive languageYes, JavaScript is a case sensitive language. The language keywords, variables, function & object names, and any other identifiers must always be typed with a consistent capitalization of letters.⬆ Back to TopIs there any relation between Java and JavaScriptNo, they are entirely two different programming languages and have nothing to do with each other. But both of them are Object Oriented Programming languages and like many other languages, they follow similar syntax for basic features(if, else, for, switch, break, continue etc).⬆ Back to TopWhat are eventsEvents are \""things\"" that happen to HTML elements. When JavaScript is used in HTML pages, JavaScript can react on these events. Some of the examples of HTML events are,Web page has finished loadingInput field was changedButton was clickedLet's describe the behavior of click event for button element,<!doctype html><html> <head>   <script>     function greeting() {       alert('Hello! Good morning');     }   </script> </head> <body>   <button type=\""button\"" onclick=\""greeting()\"">Click me</button> </body></html>⬆ Back to TopWho created javascriptJavaScript was created by Brendan Eich in 1995 during his time at Netscape Communications. Initially it was developed under the name Mocha, but later the language was officially called LiveScript when it first shipped in beta releases of Netscape.⬆ Back to TopWhat is the use of preventDefault methodThe preventDefault() method cancels the event if it is cancelable, meaning that the default action or behaviour that belongs to the event will not occur. For example, prevent form submission when clicking on submit button and prevent opening the page URL when clicking on hyperlink are some common use cases.document  .getElementById(\""link\"")  .addEventListener(\""click\"", function (event) {    event.preventDefault();  });Note: Remember that not all events are cancelable.⬆ Back to TopWhat is the use of stopPropagation methodThe stopPropagation method is used to stop the event from bubbling up the event chain. For example, the below nested divs with stopPropagation method prevents default event propagation when clicking on nested div(Div1)<p>Click DIV1 Element</p><div onclick=\""secondFunc()\"">DIV 2  <div onclick=\""firstFunc(event)\"">DIV 1</div></div><script>function firstFunc(event) {  alert(\""DIV 1\"");  event.stopPropagation();}function secondFunc() {  alert(\""DIV 2\"");}</script>⬆ Back to TopWhat are the steps involved in return false usageThe return false statement in event handlers performs the below steps,First it stops the browser's default action or behaviour.It prevents the event from propagating the DOMStops callback execution and returns immediately when called.⬆ Back to TopWhat is BOMThe Browser Object Model (BOM) allows JavaScript to \""talk to\"" the browser. It consists of the objects navigator, history, screen, location and document which are children of the window. The Browser Object Model is not standardized and can change based on different browsers.⬆ Back to TopWhat is the use of setTimeoutThe setTimeout() method is used to call a function or evaluate an expression after a specified number of milliseconds. For example, let's log a message after 2 seconds using setTimeout method,setTimeout(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhat is the use of setIntervalThe setInterval() method is used to call a function or evaluate an expression at specified intervals (in milliseconds). For example, let's log a message after 2 seconds using setInterval method,setInterval(function () {  console.log(\""Good morning\"");}, 2000);⬆ Back to TopWhy is JavaScript treated as Single threadedJavaScript is a single-threaded language. Because the language specification does not allow the programmer to write code so that the interpreter can run parts of it in parallel in multiple threads or processes. Whereas languages like java, go, C++ can make multi-threaded and multi-process programs.⬆ Back to TopWhat is an event delegationEvent delegation is a technique for listening to events where you delegate a parent element as the listener for all of the events that happen inside it.For example, if you wanted to detect field changes in inside a specific form, you can use event delegation technique,var form = document.querySelector(\""#registration-form\"");// Listen for changes to fields inside the formform.addEventListener(  \""input\"",  function (event) {    // Log the field that was changed    console.log(event.target);  },  false);⬆ Back to TopWhat is ECMAScriptECMAScript is the scripting language that forms the basis of JavaScript. ECMAScript standardized by the ECMA International standards organization in the ECMA-262 and ECMA-402 specifications. The first edition of ECMAScript was released in 1997.⬆ Back to TopWhat is JSONJSON (JavaScript Object Notation) is a lightweight format that is used for data interchanging. It is based on a subset of JavaScript language in the way objects are built in JavaScript.⬆ Back to TopWhat are the syntax rules of JSONBelow are the list of syntax rules of JSONThe data is in name/value pairsThe data is separated by commasCurly braces hold objectsSquare brackets hold arrays⬆ Back to TopWhat is the purpose JSON stringifyWhen sending data to a web server, the data has to be in a string format. You can achieve this by converting JSON object into a string using stringify() method.var userJSON = { name: \""John\"", age: 31 };var userString = JSON.stringify(userJSON);console.log(userString); //\""{\""name\"":\""John\"",\""age\"":31}\""⬆ Back to TopHow do you parse JSON stringWhen receiving the data from a web server, the data is always in a string format. But you can convert this string value to a javascript object using parse() method.var userString = '{\""name\"":\""John\"",\""age\"":31}';var userJSON = JSON.parse(userString);console.log(userJSON); // {name: \""John\"", age: 31}⬆ Back to TopWhy do you need JSONWhen exchanging data between a browser and a server, the data can only be text. Since JSON is text only, it can easily be sent to and from a server, and used as a data format by any programming language.⬆ Back to TopWhat are PWAsProgressive web applications (PWAs) are a type of mobile app delivered through the web, built using common web technologies including HTML, CSS and JavaScript. These PWAs are deployed to servers, accessible through URLs, and indexed by search engines.⬆ Back to TopWhat is the purpose of clearTimeout methodThe clearTimeout() function is used in javascript to clear the timeout which has been set by setTimeout()function before that. i.e, The return value of setTimeout() function is stored in a variable and it’s passed into the clearTimeout() function to clear the timer.For example, the below setTimeout method is used to display the message after 3 seconds. This timeout can be cleared by the clearTimeout() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg =setTimeout(greeting, 3000);}function stop() {    clearTimeout(msg);}</script>⬆ Back to TopWhat is the purpose of clearInterval methodThe clearInterval() function is used in javascript to clear the interval which has been set by setInterval() function. i.e, The return value returned by setInterval() function is stored in a variable and it’s passed into the clearInterval() function to clear the interval.For example, the below setInterval method is used to display the message for every 3 seconds. This interval can be cleared by the clearInterval() method.<script>var msg;function greeting() {   alert('Good morning');}function start() {  msg = setInterval(greeting, 3000);}function stop() {    clearInterval(msg);}</script>⬆ Back to TopHow do you redirect new page in javascriptIn vanilla javascript, you can redirect to a new page using the location property of window object. The syntax would be as follows,function redirect() {  window.location.href = \""newPage.html\"";}⬆ Back to TopHow do you check whether a string contains a substringThere are 3 possible ways to check whether a string contains a substring or not,Using includes: ES6 provided String.prototype.includes method to test a string contains a substringvar mainString = \""hello\"",  subString = \""hell\"";mainString.includes(subString);Using indexOf: In an ES5 or older environment, you can use String.prototype.indexOf which returns the index of a substring. If the index value is not equal to -1 then it means the substring exists in the main string.var mainString = \""hello\"",  subString = \""hell\"";mainString.indexOf(subString) !== -1;Using RegEx: The advanced solution is using Regular expression's test method(RegExp.test), which allows for testing for against regular expressionsvar mainString = \""hello\"",  regex = /hell/;regex.test(mainString);⬆ Back to TopHow do you validate an email in javascriptYou can validate an email in javascript using regular expressions. It is recommended to do validations on the server side instead of the client side. Because the javascript can be disabled on the client side.function validateEmail(email) {  var re =    /^(([^<>()\\[\\]\\\\.,;:\\s@\""]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\""]+)*)|(\"".+\""))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;  return re.test(String(email).toLowerCase());}⬆ Back to TopThe above regular expression accepts unicode characters.How do you get the current url with javascriptYou can use window.location.href expression to get the current url path and you can use the same expression for updating the URL too. You can also use document.URL for read-only purposes but this solution has issues in FF.console.log(\""location.href\"", window.location.href); // Returns full URL⬆ Back to TopWhat are the various url properties of location objectThe below Location object properties can be used to access URL components of the page,href - The entire URLprotocol - The protocol of the URLhost - The hostname and port of the URLhostname - The hostname of the URLport - The port number in the URLpathname - The path name of the URLsearch - The query portion of the URLhash - The anchor portion of the URL⬆ Back to TopHow do get query string values in javascriptYou can use URLSearchParams to get query string values in javascript. Let's see an example to get the client code value from URL query string,const urlParams = new URLSearchParams(window.location.search);const clientCode = urlParams.get(\""clientCode\"");⬆ Back to TopHow do you check if a key exists in an objectYou can check whether a key exists in an object or not using three approaches,Using in operator: You can use the in operator whether a key exists in an object or not\""key\"" in obj;and If you want to check if a key doesn't exist, remember to use parenthesis,!(\""key\"" in obj);Using hasOwnProperty method: You can use hasOwnProperty to particularly test for properties of the object instance (and not inherited properties)obj.hasOwnProperty(\""key\""); // trueUsing undefined comparison: If you access a non-existing property from an object, the result is undefined. Let’s compare the properties against undefined to determine the existence of the property.const user = {  name: \""John\"",};console.log(user.name !== undefined); // trueconsole.log(user.nickName !== undefined); // false⬆ Back to TopHow do you loop through or enumerate javascript objectYou can use the for-in loop to loop through javascript object. You can also make sure that the key you get is an actual property of an object, and doesn't come from the prototype using hasOwnProperty method.var object = {  k1: \""value1\"",  k2: \""value2\"",  k3: \""value3\"",};for (var key in object) {  if (object.hasOwnProperty(key)) {    console.log(key + \"" -> \"" + object[key]); // k1 -> value1 ...  }}⬆ Back to TopHow do you test for an empty objectThere are different solutions based on ECMAScript versionsUsing Object entries(ECMA 7+): You can use object entries length along with constructor type.Object.entries(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing Object keys(ECMA 5+): You can use object keys length along with constructor type.Object.keys(obj).length === 0 && obj.constructor === Object; // Since date object length is 0, you need to check constructor check as wellUsing for-in with hasOwnProperty(Pre-ECMA 5): You can use a for-in loop along with hasOwnProperty.function isEmpty(obj) {  for (var prop in obj) {    if (obj.hasOwnProperty(prop)) {      return false;    }  }  return JSON.stringify(obj) === JSON.stringify({});}⬆ Back to TopWhat is an arguments objectThe arguments object is an Array-like object accessible inside functions that contains the values of the arguments passed to that function. For example, let's see how to use arguments object inside sum function,function sum() {  var total = 0;  for (var i = 0, len = arguments.length; i < len; ++i) {    total += arguments[i];  }  return total;}sum(1, 2, 3); // returns 6Note: You can't apply array methods on arguments object. But you can convert into a regular array as below.var argsArray = Array.prototype.slice.call(arguments);⬆ Back to TopHow do you make first letter of the string in an uppercaseYou can create a function which uses a chain of string methods such as charAt, toUpperCase and slice methods to generate a string with the first letter in uppercase.function capitalizeFirstLetter(string) {  return string.charAt(0).toUpperCase() + string.slice(1);}⬆ Back to TopWhat are the pros and cons of for loopThe for-loop is a commonly used iteration syntax in javascript. It has both pros and consProsWorks on every environmentYou can use break and continue flow control statementsConsToo verboseImperativeYou might face one-by-off errors⬆ Back to TopHow do you display the current date in javascriptYou can use new Date() to generate a new Date object containing the current date and time. For example, let's display the current date in mm/dd/yyyyvar today = new Date();var dd = String(today.getDate()).padStart(2, \""0\"");var mm = String(today.getMonth() + 1).padStart(2, \""0\""); //January is 0!var yyyy = today.getFullYear();today = mm + \""/\"" + dd + \""/\"" + yyyy;document.write(today);⬆ Back to TopHow do you compare two date objectsYou need to use date.getTime() method to compare date values instead of comparison operators (==, !=, ===, and !== operators)var d1 = new Date();var d2 = new Date(d1);console.log(d1.getTime() === d2.getTime()); //Trueconsole.log(d1 === d2); // False⬆ Back to TopHow do you check if a string starts with another stringYou can use ECMAScript 6's String.prototype.startsWith() method to check if a string starts with another string or not. But it is not yet supported in all browsers. Let's see an example to see this usage,\""Good morning\"".startsWith(\""Good\""); // true\""Good morning\"".startsWith(\""morning\""); // false⬆ Back to TopHow do you trim a string in javascriptJavaScript provided a trim method on string types to trim any whitespaces present at the beginning or ending of the string.\""  Hello World   \"".trim(); //Hello WorldIf your browser(<IE9) doesn't support this method then you can use below polyfill.if (!String.prototype.trim) {  (function () {    // Make sure we trim BOM and NBSP    var rtrim = /^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g;    String.prototype.trim = function () {      return this.replace(rtrim, \""\"");    };  })();}⬆ Back to TopHow do you add a key value pair in javascriptThere are two possible solutions to add new properties to an object. Let's take a simple object to explain these solutions.var object = {  key1: value1,  key2: value2,};Using dot notation: This solution is useful when you know the name of the propertyobject.key3 = \""value3\"";Using square bracket notation: This solution is useful when the name of the property is dynamically determined.obj[\""key3\""] = \""value3\"";⬆ Back to TopIs the !-- notation represents a special operatorNo,that's not a special operator. But it is a combination of 2 standard operators one after the other,A logical not (!)A prefix decrement (--)At first, the value decremented by one and then tested to see if it is equal to zero or not for determining the truthy/falsy value.⬆ Back to TopHow do you assign default values to variablesYou can use the logical or operator || in an assignment expression to provide a default value. The syntax looks like as below,var a = b || c;As per the above expression, variable 'a 'will get the value of 'c' only if 'b' is falsy (if is null, false, undefined, 0, empty string, or NaN), otherwise 'a' will get the value of 'b'.⬆ Back to TopHow do you define multiline stringsYou can define multiline string literals using the '\\' character followed by line terminator.var str =  \""This is a \\very lengthy \\sentence!\"";But if you have a space after the '\\' character, the code will look exactly the same, but it will raise a SyntaxError.⬆ Back to TopWhat is an app shell modelAn application shell (or app shell) architecture is one way to build a Progressive Web App that reliably and instantly loads on your users' screens, similar to what you see in native applications. It is useful for getting some initial HTML to the screen fast without a network.⬆ Back to TopCan we define properties for functionsYes, We can define properties for functions because functions are also objects.fn = function (x) {  //Function code goes here};fn.name = \""John\"";fn.profile = function (y) {  //Profile code goes here};⬆ Back to TopWhat is the way to find the number of parameters expected by a functionYou can use function.length syntax to find the number of parameters expected by a function. Let's take an example of sum function to calculate the sum of numbers,function sum(num1, num2, num3, num4) {  return num1 + num2 + num3 + num4;}sum.length; // 4 is the number of parameters expected.⬆ Back to TopWhat is a polyfillA polyfill is a piece of JS code used to provide modern functionality on older browsers that do not natively support it. For example, Silverlight plugin polyfill can be used to mimic the functionality of an HTML Canvas element on Microsoft Internet Explorer 7.⬆ Back to TopWhat are break and continue statementsThe break statement is used to \""jump out\"" of a loop. i.e, It breaks the loop and continues executing the code after the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    break;  }  text += \""Number: \"" + i + \""<br>\"";}The continue statement is used to \""jump over\"" one iteration in the loop. i.e, It breaks one iteration (in the loop), if a specified condition occurs, and continues with the next iteration in the loop.for (i = 0; i < 10; i++) {  if (i === 5) {    continue;  }  text += \""Number: \"" + i + \""<br>\"";}⬆ Back to TopWhat are js labelsThe label statement allows us to name loops and blocks in JavaScript. We can then use these labels to refer back to the code later. For example, the below code with labels avoids printing the numbers when they are same,var i, j;loop1: for (i = 0; i < 3; i++) {  loop2: for (j = 0; j < 3; j++) {    if (i === j) {      continue loop1;    }    console.log(\""i = \"" + i + \"", j = \"" + j);  }}// Output is://   \""i = 1, j = 0\""//   \""i = 2, j = 0\""//   \""i = 2, j = 1\""⬆ Back to TopWhat are the benefits of keeping declarations at the topIt is recommended to keep all declarations at the top of each script or function. The benefits of doing this are,Gives cleaner codeIt provides a single place to look for local variablesEasy to avoid unwanted global variablesIt reduces the possibility of unwanted re-declarations⬆ Back to TopWhat are the benefits of initializing variablesIt is recommended to initialize variables because of the below benefits,It gives cleaner codeIt provides a single place to initialize variablesAvoid undefined values in the code⬆ Back to TopWhat are the recommendations to create new objectIt is recommended to avoid creating new objects using new Object(). Instead you can initialize values based on it's type to create the objects.Assign {} instead of new Object()Assign \""\"" instead of new String()Assign 0 instead of new Number()Assign false instead of new Boolean()Assign [] instead of new Array()Assign /()/ instead of new RegExp()Assign function (){} instead of new Function()You can define them as an example,var v1 = {};var v2 = \""\"";var v3 = 0;var v4 = false;var v5 = [];var v6 = /()/;var v7 = function () {};⬆ Back to TopHow do you define JSON arraysJSON arrays are written inside square brackets and arrays contain javascript objects. For example, the JSON array of users would be as below,\""users\"":[  {\""firstName\"":\""John\"", \""lastName\"":\""Abrahm\""},  {\""firstName\"":\""Anna\"", \""lastName\"":\""Smith\""},  {\""firstName\"":\""Shane\"", \""lastName\"":\""Warn\""}]⬆ Back to TopHow do you generate random integersYou can use Math.random() with Math.floor() to return random integers. For example, if you want generate random integers between 1 to 10, the multiplication factor should be 10,Math.floor(Math.random() * 10) + 1; // returns a random integer from 1 to 10Math.floor(Math.random() * 100) + 1; // returns a random integer from 1 to 100Note: Math.random() returns a random number between 0 (inclusive), and 1 (exclusive)⬆ Back to TopCan you write a random integers function to print integers with in a rangeYes, you can create a proper random function to return a random number between min and max (both included)function randomInteger(min, max) {  return Math.floor(Math.random() * (max - min + 1)) + min;}randomInteger(1, 100); // returns a random integer from 1 to 100randomInteger(1, 1000); // returns a random integer from 1 to 1000⬆ Back to TopWhat is tree shakingTree shaking is a form of dead code elimination. It means that unused modules will not be included in the bundle during the build process and for that it relies on the static structure of ES2015 module syntax,( i.e. import and export). Initially this has been popularized by the ES2015 module bundler rollup.⬆ Back to TopWhat is the need of tree shakingTree Shaking can significantly reduce the code size in any application. i.e, The less code we send over the wire the more performant the application will be. For example, if we just want to create a “Hello World” Application using SPA frameworks then it will take around a few MBs, but by tree shaking it can bring down the size to just a few hundred KBs. Tree shaking is implemented in Rollup and Webpack bundlers.⬆ Back to TopIs it recommended to use evalNo, it allows arbitrary code to be run which causes a security problem. As we know that the eval() function is used to run text as code. In most of the cases, it should not be necessary to use it.⬆ Back to TopWhat is a Regular ExpressionA regular expression is a sequence of characters that forms a search pattern. You can use this search pattern for searching data in a text. These can be used to perform all types of text search and text replace operations. Let's see the syntax format now,/pattern/modifiers;For example, the regular expression or search pattern with case-insensitive username would be,/John/i;⬆ Back to TopWhat are the string methods available in Regular expressionRegular Expressions has two string methods: search() and replace().The search() method uses an expression to search for a match, and returns the position of the match.var msg = \""Hello John\"";var n = msg.search(/John/i); // 6The replace() method is used to return a modified string where the pattern is replaced.var msg = \""Hello John\"";var n = msg.replace(/John/i, \""Buttler\""); // Hello Buttler⬆ Back to TopWhat are modifiers in regular expressionModifiers can be used to perform case-insensitive and global searches. Let's list down some of the modifiers,ModifierDescriptioniPerform case-insensitive matchinggPerform a global match rather than stops at first matchmPerform multiline matchingLet's take an example of global modifier,var text = \""Learn JS one by one\"";var pattern = /one/g;var result = text.match(pattern); // one,one⬆ Back to TopWhat are regular expression patternsRegular Expressions provide a group of patterns in order to match characters. Basically they are categorized into 3 types,Brackets: These are used to find a range of characters.For example, below are some use cases,[abc]: Used to find any of the characters between the brackets(a,b,c)[0-9]: Used to find any of the digits between the brackets(a|b): Used to find any of the alternatives separated with |Metacharacters: These are characters with a special meaningFor example, below are some use cases,\\d: Used to find a digit\\s: Used to find a whitespace character\\b: Used to find a match at the beginning or ending of a wordQuantifiers: These are useful to define quantitiesFor example, below are some use cases,n+: Used to find matches for any string that contains at least one nn*: Used to find matches for any string that contains zero or more occurrences of nn?: Used to find matches for any string that contains zero or one occurrences of n⬆ Back to TopWhat is a RegExp objectRegExp object is a regular expression object with predefined properties and methods. Let's see the simple usage of RegExp object,var regexp = new RegExp(\""\\\\w+\"");console.log(regexp);// expected output: /\\w+/⬆ Back to TopHow do you search a string for a patternYou can use the test() method of regular expression in order to search a string for a pattern, and return true or false depending on the result.var pattern = /you/;console.log(pattern.test(\""How are you?\"")); //true⬆ Back to TopWhat is the purpose of exec methodThe purpose of exec method is similar to test method but it executes a search for a match in a specified string and returns a result array, or null instead of returning true/false.var pattern = /you/;console.log(pattern.exec(\""How are you?\"")); //[\""you\"", index: 8, input: \""How are you?\"", groups: undefined]⬆ Back to TopHow do you change the style of a HTML elementYou can change inline style or classname of a HTML element using javascriptUsing style property: You can modify inline style using style propertydocument.getElementById(\""title\"").style.fontSize = \""30px\"";Using ClassName property: It is easy to modify element class using className propertydocument.getElementById(\""title\"").className = \""custom-title\"";⬆ Back to TopWhat would be the result of 1+2+'3'The output is going to be 33. Since 1 and 2 are numeric values, the result of the first two digits is going to be a numeric value 3. The next digit is a string type value because of that the addition of numeric value 3 and string type value 3 is just going to be a concatenation value 33.⬆ Back to TopWhat is a debugger statementThe debugger statement invokes any available debugging functionality, such as setting a breakpoint. If no debugging functionality is available, this statement has no effect.For example, in the below function a debugger statement has been inserted. Soexecution is paused at the debugger statement just like a breakpoint in the script source.function getProfile() {  // code goes here  debugger;  // code goes here}⬆ Back to TopWhat is the purpose of breakpoints in debuggingYou can set breakpoints in the javascript code once the debugger statement is executed and the debugger window pops up. At each breakpoint, javascript will stop executing, and let you examine the JavaScript values. After examining values, you can resume the execution of code using the play button.⬆ Back to TopCan I use reserved words as identifiersNo, you cannot use the reserved words as variables, labels, object or function names. Let's see one simple example,var else = \""hello\""; // Uncaught SyntaxError: Unexpected token else⬆ Back to TopHow do you detect a mobile browserYou can use regex which returns a true or false value depending on whether or not the user is browsing with a mobile.window.mobilecheck = function () {  var mobileCheck = false;  (function (a) {    if (      /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(        a      ) ||      /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(        a.substr(0, 4)      )    )      mobileCheck = true;  })(navigator.userAgent || navigator.vendor || window.opera);  return mobileCheck;};⬆ Back to TopHow do you detect a mobile browser without regexpYou can detect mobile browsers by simply running through a list of devices and checking if the useragent matches anything. This is an alternative solution for RegExp usage,function detectmob() {  if (    navigator.userAgent.match(/Android/i) ||    navigator.userAgent.match(/webOS/i) ||    navigator.userAgent.match(/iPhone/i) ||    navigator.userAgent.match(/iPad/i) ||    navigator.userAgent.match(/iPod/i) ||    navigator.userAgent.match(/BlackBerry/i) ||    navigator.userAgent.match(/Windows Phone/i)  ) {    return true;  } else {    return false;  }}⬆ Back to TopHow do you get the image width and height using JSYou can programmatically get the image and check the dimensions(width and height) using Javascript.var img = new Image();img.onload = function () {  console.log(this.width + \""x\"" + this.height);};img.src = \""http://www.google.com/intl/en_ALL/images/logo.gif\"";⬆ Back to TopHow do you make synchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make synchronous HTTP requests from JavaScriptfunction httpGet(theUrl) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.open(\""GET\"", theUrl, false); // false for synchronous request  xmlHttpReq.send(null);  return xmlHttpReq.responseText;}⬆ Back to TopHow do you make asynchronous HTTP requestBrowsers provide an XMLHttpRequest object which can be used to make asynchronous HTTP requests from JavaScript by passing the 3rd parameter as true.function httpGetAsync(theUrl, callback) {  var xmlHttpReq = new XMLHttpRequest();  xmlHttpReq.onreadystatechange = function () {    if (xmlHttpReq.readyState == 4 && xmlHttpReq.status == 200)      callback(xmlHttpReq.responseText);  };  xmlHttp.open(\""GET\"", theUrl, true); // true for asynchronous  xmlHttp.send(null);}⬆ Back to TopHow do you convert date to another timezone in javascriptYou can use the toLocaleString() method to convert dates in one timezone to another. For example, let's convert current date to British English timezone as below,console.log(event.toLocaleString(\""en-GB\"", { timeZone: \""UTC\"" })); //29/06/2019, 09:56:00⬆ Back to TopWhat are the properties used to get size of windowYou can use innerWidth, innerHeight, clientWidth, clientHeight properties of windows, document element and document body objects to find the size of a window. Let's use them combination of these properties to calculate the size of a window or document,var width =  window.innerWidth ||  document.documentElement.clientWidth ||  document.body.clientWidth;var height =  window.innerHeight ||  document.documentElement.clientHeight ||  document.body.clientHeight;⬆ Back to TopWhat is a conditional operator in javascriptThe conditional (ternary) operator is the only JavaScript operator that takes three operands which acts as a shortcut for if statements.var isAuthenticated = false;console.log(  isAuthenticated ? \""Hello, welcome\"" : \""Sorry, you are not authenticated\""); //Sorry, you are not authenticated⬆ Back to TopCan you apply chaining on conditional operatorYes, you can apply chaining on conditional operators similar to if … else if … else if … else chain. The syntax is going to be as below,function traceValue(someParam) {  return condition1    ? value1    : condition2    ? value2    : condition3    ? value3    : value4;}// The above conditional operator is equivalent to:function traceValue(someParam) {  if (condition1) {    return value1;  } else if (condition2) {    return value2;  } else if (condition3) {    return value3;  } else {    return value4;  }}⬆ Back to TopWhat are the ways to execute javascript after page loadYou can execute javascript after page load in many different ways,window.onload:window.onload = function ...document.onload:document.onload = function ...body onload:<body onload=\""script();\"">⬆ Back to TopWhat is the difference between proto and prototypeThe __proto__ object is the actual object that is used in the lookup chain to resolve methods, etc. Whereas prototype is the object that is used to build __proto__ when you create an object with new.new Employee().__proto__ === Employee.prototype;new Employee().prototype === undefined;There are few more differences,featurePrototypeprotoAccessAll the function constructors have prototype properties.All the objects have __proto__ propertyPurposeUsed to reduce memory wastage with a single copy of functionUsed in lookup chain to resolve methods, constructors etc.ECMAScriptIntroduced in ES6Introduced in ES5UsageFrequently usedRarely used⬆ Back to TopGive an example where do you really need semicolonIt is recommended to use semicolons after every statement in JavaScript. For example, in the below case it throws an error \"".. is not a function\"" at runtime due to missing semicolon.// define a functionvar fn = (function () {  //...})(  // semicolon missing at this line  // then execute some code inside a closure  function () {    //...  })();and it will be interpreted asvar fn = (function () {  //...})(function () {  //...})();In this case, we are passing the second function as an argument to the first function and then trying to call the result of the first function call as a function. Hence, the second function will fail with a \""... is not a function\"" error at runtime.⬆ Back to TopWhat is a freeze methodThe freeze() method is used to freeze an object. Freezing an object does not allow adding new properties to an object,prevents from removing and prevents changing the enumerability, configurability, or writability of existing properties. i.e, It returns the passed object and does not create a frozen copy.const obj = {  prop: 100,};Object.freeze(obj);obj.prop = 200; // Throws an error in strict modeconsole.log(obj.prop); //100Remember freezing is only applied to the top-level properties in objects but not for nested objects.For example, let's try to freeze user object which has employment details as nested object and observe that details have been changed.const user = {  name: 'John',  employment: {    department: 'IT'  }};Object.freeze(user);user.employment.department = 'HR';Note: It causes a TypeError if the argument passed is not an object.⬆ Back to TopWhat is the purpose of freeze methodBelow are the main benefits of using freeze method,It is used for freezing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhy do I need to use freeze methodIn the Object-oriented paradigm, an existing API contains certain elements that are not intended to be extended, modified, or re-used outside of their current context. Hence it works as the final keyword which is used in various languages.⬆ Back to TopHow do you detect a browser language preferenceYou can use navigator object to detect a browser language preference as below,var language =  (navigator.languages && navigator.languages[0]) || // Chrome / Firefox  navigator.language || // All browsers  navigator.userLanguage; // IE <= 10console.log(language);⬆ Back to TopHow to convert string to title case with javascriptTitle case means that the first letter of each word is capitalized. You can convert a string to title case using the below function,function toTitleCase(str) {  return str.replace(/\\w\\S*/g, function (txt) {    return txt.charAt(0).toUpperCase() + txt.substring(1).toLowerCase();  });}toTitleCase(\""good morning john\""); // Good Morning John⬆ Back to TopHow do you detect javascript disabled in the pageYou can use the <noscript> tag to detect javascript disabled or not. The code block inside <noscript> gets executed when JavaScript is disabled, and is typically used to display alternative content when the page generated in JavaScript.<script type=\""javascript\"">    // JS related code goes here</script><noscript>    <a href=\""next_page.html?noJS=true\"">JavaScript is disabled in the page. Please click Next Page</a></noscript>⬆ Back to TopWhat are various operators supported by javascriptAn operator is capable of manipulating(mathematical and logical computations) a certain value or operand. There are various operators supported by JavaScript as below,Arithmetic Operators: Includes + (Addition),– (Subtraction), * (Multiplication), / (Division), % (Modulus), + + (Increment) and – – (Decrement)Comparison Operators: Includes = =(Equal),!= (Not Equal), ===(Equal with type), > (Greater than),> = (Greater than or Equal to),< (Less than),<= (Less than or Equal to)Logical Operators: Includes &&(Logical AND),||(Logical OR),!(Logical NOT)Assignment Operators: Includes = (Assignment Operator), += (Add and Assignment Operator), – = (Subtract and Assignment Operator), *= (Multiply and Assignment), /= (Divide and Assignment), %= (Modules and Assignment)Ternary Operators: It includes conditional(: ?) Operatortypeof Operator: It uses to find type of variable. The syntax looks like typeof variable⬆ Back to TopWhat is a rest parameterRest parameter is an improved way to handle function parameters which allows us to represent an indefinite number of arguments as an array. The syntax would be as below,function f(a, b, ...theArgs) {  // ...}For example, let's take a sum example to calculate on dynamic number of parameters,function total(…args){let sum = 0;for(let i of args){sum+=i;}return sum;}console.log(fun(1,2)); //3console.log(fun(1,2,3)); //6console.log(fun(1,2,3,4)); //13console.log(fun(1,2,3,4,5)); //15Note: Rest parameter is added in ES2015 or ES6⬆ Back to TopWhat happens if you do not use rest parameter as a last argumentThe rest parameter should be the last argument, as its job is to collect all the remaining arguments into an array. For example, if you define a function like below it doesn’t make any sense and will throw an error.function someFunc(a,…b,c){//You code goes herereturn;}⬆ Back to TopWhat are the bitwise operators available in javascriptBelow are the list of bitwise logical operators used in JavaScriptBitwise AND ( & )Bitwise OR ( | )Bitwise XOR ( ^ )Bitwise NOT ( ~ )Left Shift ( << )Sign Propagating Right Shift ( >> )Zero fill Right Shift ( >>> )⬆ Back to TopWhat is a spread operatorSpread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. Let's take an example to see this behavior,function calculateSum(x, y, z) {  return x + y + z;}const numbers = [1, 2, 3];console.log(calculateSum(...numbers)); // 6⬆ Back to TopHow do you determine whether object is frozen or notObject.isFrozen() method is used to determine if an object is frozen or not.An object is frozen if all of the below conditions hold true,If it is not extensible.If all of its properties are non-configurable.If all its data properties are non-writable.The usage is going to be as follows,const object = {  property: \""Welcome JS world\"",};Object.freeze(object);console.log(Object.isFrozen(object));⬆ Back to TopHow do you determine two values same or not using objectThe Object.is() method determines whether two values are the same value. For example, the usage with different types of values would be,Object.is(\""hello\"", \""hello\""); // trueObject.is(window, window); // trueObject.is([], []); // falseTwo values are the same if one of the following holds:both undefinedboth nullboth true or both falseboth strings of the same length with the same characters in the same orderboth the same object (means both object have same reference)both numbers andboth +0both -0both NaNboth non-zero and both not NaN and both have the same value.⬆ Back to TopWhat is the purpose of using object is methodSome of the applications of Object's is method are follows,It is used for comparison of two strings.It is used for comparison of two numbers.It is used for comparing the polarity of two numbers.It is used for comparison of two objects.⬆ Back to TopHow do you copy properties from one object to otherYou can use the Object.assign() method which is used to copy the values and properties from one or more source objects to a target object. It returns the target object which has properties and values copied from the source objects. The syntax would be as below,Object.assign(target, ...sources);Let's take example with one source and one target object,const target = { a: 1, b: 2 };const source = { b: 3, c: 4 };const returnedTarget = Object.assign(target, source);console.log(target); // { a: 1, b: 3, c: 4 }console.log(returnedTarget); // { a: 1, b: 3, c: 4 }As observed in the above code, there is a common property(b) from source to target so it's value has been overwritten.⬆ Back to TopWhat are the applications of assign methodBelow are the some of main applications of Object.assign() method,It is used for cloning an object.It is used to merge objects with the same properties.⬆ Back to TopWhat is a proxy objectThe Proxy object is used to define custom behavior for fundamental operations such as property lookup, assignment, enumeration, function invocation, etc. The syntax would be as follows,var p = new Proxy(target, handler);Let's take an example of proxy object,var handler = {  get: function (obj, prop) {    return prop in obj ? obj[prop] : 100;  },};var p = new Proxy({}, handler);p.a = 10;p.b = null;console.log(p.a, p.b); // 10, nullconsole.log(\""c\"" in p, p.c); // false, 100In the above code, it uses get handler which define the behavior of the proxy when an operation is performed on it⬆ Back to TopWhat is the purpose of seal methodThe Object.seal() method is used to seal an object, by preventing new properties from being added to it and marking all existing properties as non-configurable. But values of present properties can still be changed as long as they are writable. Let's see the below example to understand more about seal() methodconst object = {  property: \""Welcome JS world\"",};Object.seal(object);object.property = \""Welcome to object world\"";console.log(Object.isSealed(object)); // truedelete object.property; // You cannot delete when sealedconsole.log(object.property); //Welcome to object world⬆ Back to TopWhat are the applications of seal methodBelow are the main applications of Object.seal() method,It is used for sealing objects and arrays.It is used to make an object immutable.⬆ Back to TopWhat are the differences between freeze and seal methodsIf an object is frozen using the Object.freeze() method then its properties become immutable and no changes can be made in them whereas if an object is sealed using the Object.seal() method then the changes can be made in the existing properties of the object.⬆ Back to TopHow do you determine if an object is sealed or notThe Object.isSealed() method is used to determine if an object is sealed or not. An object is sealed if all of the below conditions hold trueIf it is not extensible.If all of its properties are non-configurable.If it is not removable (but not necessarily non-writable).Let's see it in the actionconst object = {  property: \""Hello, Good morning\"",};Object.seal(object); // Using seal() method to seal the objectconsole.log(Object.isSealed(object)); // checking whether the object is sealed or not⬆ Back to TopHow do you get enumerable key and value pairsThe Object.entries() method is used to return an array of a given object's own enumerable string-keyed property [key, value] pairs, in the same order as that provided by a for...in loop. Let's see the functionality of object.entries() method in an example,const object = {  a: \""Good morning\"",  b: 100,};for (let [key, value] of Object.entries(object)) {  console.log(`${key}: ${value}`); // a: 'Good morning'  // b: 100}Note: The order is not guaranteed as object defined.⬆ Back to TopWhat is the main difference between Object.values and Object.entries methodThe Object.values() method's behavior is similar to Object.entries() method but it returns an array of values instead [key,value] pairs.const object = {  a: \""Good morning\"",  b: 100,};for (let value of Object.values(object)) {  console.log(`${value}`); // 'Good morning'  100;}⬆ Back to TopHow can you get the list of keys of any objectYou can use the Object.keys() method which is used to return an array of a given object's own property names, in the same order as we get with a normal loop. For example, you can get the keys of a user object,const user = {  name: \""John\"",  gender: \""male\"",  age: 40,};console.log(Object.keys(user)); //['name', 'gender', 'age']⬆ Back to TopHow do you create an object with prototypeThe Object.create() method is used to create a new object with the specified prototype object and properties. i.e, It uses an existing object as the prototype of the newly created object. It returns a new object with the specified prototype object and properties.const user = {  name: \""John\"",  printInfo: function () {    console.log(`My name is ${this.name}.`);  },};const admin = Object.create(user);admin.name = \""Nick\""; // Remember that \""name\"" is a property set on \""admin\"" but not on \""user\"" objectadmin.printInfo(); // My name is Nick⬆ Back to TopWhat is a WeakSetWeakSet is used to store a collection of weakly(weak references) held objects. The syntax would be as follows,new WeakSet([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakSet();var user = {};ws.add(user);ws.has(user); // truews.delete(user); // removes user from the setws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakSet and SetThe main difference is that references to objects in Set are strong while references to objects in WeakSet are weak. i.e, An object in WeakSet can be garbage collected if there is no other reference to it.Other differences are,Sets can store any value Whereas WeakSets can store only collections of objectsWeakSet does not have size property unlike SetWeakSet does not have methods such as clear, keys, values, entries, forEach.WeakSet is not iterable.⬆ Back to TopList down the collection of methods available on WeakSetBelow are the list of methods available on WeakSet,add(value): A new object is appended with the given value to the weaksetdelete(value): Deletes the value from the WeakSet collection.has(value): It returns true if the value is present in the WeakSet Collection, otherwise it returns false.Let's see the functionality of all the above methods in an example,var weakSetObject = new WeakSet();var firstObject = {};var secondObject = {};// add(value)weakSetObject.add(firstObject);weakSetObject.add(secondObject);console.log(weakSetObject.has(firstObject)); //trueweakSetObject.delete(secondObject);⬆ Back to TopWhat is a WeakMapThe WeakMap object is a collection of key/value pairs in which the keys are weakly referenced. In this case, keys must be objects and the values can be arbitrary values. The syntax is looking like as below,new WeakMap([iterable]);Let's see the below example to explain it's behavior,var ws = new WeakMap();var user = {};ws.set(user);ws.has(user); // truews.delete(user); // removes user from the mapws.has(user); // false, user has been removed⬆ Back to TopWhat are the differences between WeakMap and MapThe main difference is that references to key objects in Map are strong while references to key objects in WeakMap are weak. i.e, A key object in WeakMap can be garbage collected if there is no other reference to it.Other differences are,Maps can store any key type Whereas WeakMaps can store only collections of key objectsWeakMap does not have size property unlike MapWeakMap does not have methods such as clear, keys, values, entries, forEach.WeakMap is not iterable.⬆ Back to TopList down the collection of methods available on WeakMapBelow are the list of methods available on WeakMap,set(key, value): Sets the value for the key in the WeakMap object. Returns the WeakMap object.delete(key): Removes any value associated to the key.has(key): Returns a Boolean asserting whether a value has been associated to the key in the WeakMap object or not.get(key): Returns the value associated to the key, or undefined if there is none.Let's see the functionality of all the above methods in an example,var weakMapObject = new WeakMap();var firstObject = {};var secondObject = {};// set(key, value)weakMapObject.set(firstObject, \""John\"");weakMapObject.set(secondObject, 100);console.log(weakMapObject.has(firstObject)); //trueconsole.log(weakMapObject.get(firstObject)); // JohnweakMapObject.delete(secondObject);⬆ Back to TopWhat is the purpose of unevalThe uneval() is an inbuilt function which is used to create a string representation of the source code of an Object. It is a top-level function and is not associated with any object. Let's see the below example to know more about it's functionality,var a = 1;uneval(a); // returns a String containing 1uneval(function user() {}); // returns \""(function user(){})\""⬆ Back to TopHow do you encode an URLThe encodeURI() function is used to encode complete URI which has special characters except (, / ? : @ & = + $ #) characters.var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B⬆ Back to TopHow do you decode an URLThe decodeURI() function is used to decode a Uniform Resource Identifier (URI) previously created by encodeURI().var uri = \""https://mozilla.org/?x=шеллы\"";var encoded = encodeURI(uri);console.log(encoded); // https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8Btry {  console.log(decodeURI(encoded)); // \""https://mozilla.org/?x=шеллы\""} catch (e) {  // catches a malformed URI  console.error(e);}⬆ Back to TopHow do you print the contents of web pageThe window object provided a print() method which is used to print the contents of the current window. It opens a Print dialog box which lets you choose between various printing options. Let's see the usage of print method in an example,<input type=\""button\"" value=\""Print\"" onclick=\""window.print()\"" />Note: In most browsers, it will block while the print dialog is open.⬆ Back to TopWhat is the difference between uneval and evalThe uneval function returns the source of a given object; whereas the eval function does the opposite, by evaluating that source code in a different memory area. Let's see an example to clarify the difference,var msg = uneval(function greeting() {  return \""Hello, Good morning\"";});var greeting = eval(msg);greeting(); // returns \""Hello, Good morning\""⬆ Back to TopWhat is an anonymous functionAn anonymous function is a function without a name! Anonymous functions are commonly assigned to a variable name or used as a callback function. The syntax would be as below,function (optionalParameters) {  //do something}const myFunction = function(){ //Anonymous function assigned to a variable  //do something};[1, 2, 3].map(function(element){ //Anonymous function used as a callback function  //do something});Let's see the above anonymous function in an example,var x = function (a, b) {  return a * b;};var z = x(5, 10);console.log(z); // 50⬆ Back to TopWhat is the precedence order between local and global variablesA local variable takes precedence over a global variable with the same name. Let's see this behavior in an example.var msg = \""Good morning\"";function greeting() {  msg = \""Good Evening\"";  console.log(msg); // Good Evening}greeting();⬆ Back to TopWhat are javascript accessorsECMAScript 5 introduced javascript object accessors or computed properties through getters and setters. Getters uses the get keyword whereas Setters uses the set keyword.var user = {  firstName: \""John\"",  lastName : \""Abraham\"",  language : \""en\"",  get lang() {    return this.language;  },  set lang(lang) {  this.language = lang;  }};console.log(user.lang); // getter access lang as enuser.lang = 'fr';console.log(user.lang); // setter used to set lang as fr⬆ Back to TopHow do you define property on Object constructorThe Object.defineProperty() static method is used to define a new property directly on an object, or modify an existing property on an object, and returns the object. Let's see an example to know how to define property,const newObject = {};Object.defineProperty(newObject, \""newProperty\"", {  value: 100,  writable: false,});console.log(newObject.newProperty); // 100newObject.newProperty = 200; // It throws an error in strict mode due to writable setting⬆ Back to TopWhat is the difference between get and definePropertyBoth have similar results until unless you use classes. If you use get the property will be defined on the prototype of the object whereas using Object.defineProperty() the property will be defined on the instance it is applied to.⬆ Back to TopWhat are the advantages of Getters and SettersBelow are the list of benefits of Getters and Setters,They provide simpler syntaxThey are used for defining computed properties, or accessors in JS.Useful to provide equivalence relation between properties and methodsThey can provide better data qualityUseful for doing things behind the scenes with the encapsulated logic.⬆ Back to TopCan I add getters and setters using defineProperty methodYes, You can use the Object.defineProperty() method to add Getters and Setters. For example, the below counter object uses increment, decrement, add and subtract properties,var obj = { counter: 0 };// Define gettersObject.defineProperty(obj, \""increment\"", {  get: function () {    this.counter++;  },});Object.defineProperty(obj, \""decrement\"", {  get: function () {    this.counter--;  },});// Define settersObject.defineProperty(obj, \""add\"", {  set: function (value) {    this.counter += value;  },});Object.defineProperty(obj, \""subtract\"", {  set: function (value) {    this.counter -= value;  },});obj.add = 10;obj.subtract = 5;console.log(obj.increment); //6console.log(obj.decrement); //5⬆ Back to TopWhat is the purpose of switch-caseThe switch case statement in JavaScript is used for decision making purposes. In a few cases, using the switch case statement is going to be more convenient than if-else statements. The syntax would be as below,switch (expression){    case value1:        statement1;        break;    case value2:        statement2;        break;    .    .    case valueN:        statementN;        break;    default:        statementDefault;}The above multi-way branch statement provides an easy way to dispatch execution to different parts of code based on the value of the expression.⬆ Back to TopWhat are the conventions to be followed for the usage of switch caseBelow are the list of conventions should be taken care,The expression can be of type either number or string.Duplicate values are not allowed for the expression.The default statement is optional. If the expression passed to switch does not match with any case value then the statement within default case will be executed.The break statement is used inside the switch to terminate a statement sequence.The break statement is optional. But if it is omitted, the execution will continue on into the next case.⬆ Back to TopWhat are primitive data typesA primitive data type is data that has a primitive value (which has no properties or methods). There are 7 types of primitive data types.stringnumberbooleannullundefinedbigintsymbol⬆ Back to TopWhat are the different ways to access object propertiesThere are 3 possible ways for accessing the property of an object.Dot notation: It uses dot for accessing the propertiesobjectName.property;Square brackets notation: It uses square brackets for property accessobjectName[\""property\""];Expression notation: It uses expression in the square bracketsobjectName[expression];⬆ Back to TopWhat are the function parameter rulesJavaScript functions follow below rules for parameters,The function definitions do not specify data types for parameters.Do not perform type checking on the passed arguments.Do not check the number of arguments received.i.e, The below function follows the above rules,function functionName(parameter1, parameter2, parameter3) {  console.log(parameter1); // 1}functionName(1);⬆ Back to TopWhat is an error objectAn error object is a built in error object that provides error information when an error occurs. It has two properties: name and message. For example, the below function logs error details,try {  greeting(\""Welcome\"");} catch (err) {  console.log(err.name + \""<br>\"" + err.message);}⬆ Back to TopWhen you get a syntax errorA SyntaxError is thrown if you try to evaluate code with a syntax error. For example, the below missing quote for the function parameter throws a syntax errortry {  eval(\""greeting('welcome)\""); // Missing ' will produce an error} catch (err) {  console.log(err.name);}⬆ Back to TopWhat are the different error names from error objectThere are 6 different types of error names returned from error object,Error NameDescriptionEvalErrorAn error has occurred in the eval() functionRangeErrorAn error has occurred with a number \""out of range\""ReferenceErrorAn error due to an illegal referenceSyntaxErrorAn error due to a syntax errorTypeErrorAn error due to a type errorURIErrorAn error due to encodeURI()⬆ Back to TopWhat are the various statements in error handlingBelow are the list of statements used in an error handling,try: This statement is used to test a block of code for errorscatch: This statement is used to handle the errorthrow: This statement is used to create custom errors.finally: This statement is used to execute code after try and catch regardless of the result.⬆ Back to TopWhat are the two types of loops in javascriptEntry Controlled loops: In this kind of loop type, the test condition is tested before entering the loop body. For example, For Loop and While Loop comes under this category.Exit Controlled Loops: In this kind of loop type, the test condition is tested or evaluated at the end of the loop body. i.e, the loop body will execute at least once irrespective of test condition true or false. For example, do-while loop comes under this category.⬆ Back to TopWhat is nodejsNode.js is a server-side platform built on Chrome's JavaScript runtime for easily building fast and scalable network applications. It is an event-based, non-blocking, asynchronous I/O runtime that uses Google's V8 JavaScript engine and libuv library.⬆ Back to TopWhat is an Intl objectThe Intl object is the namespace for the ECMAScript Internationalization API, which provides language sensitive string comparison, number formatting, and date and time formatting. It provides access to several constructors and language sensitive functions.⬆ Back to TopHow do you perform language specific date and time formattingYou can use the Intl.DateTimeFormat object which is a constructor for objects that enable language-sensitive date and time formatting. Let's see this behavior with an example,var date = new Date(Date.UTC(2019, 07, 07, 3, 0, 0));console.log(new Intl.DateTimeFormat(\""en-GB\"").format(date)); // 07/08/2019console.log(new Intl.DateTimeFormat(\""en-AU\"").format(date)); // 07/08/2019⬆ Back to TopWhat is an IteratorAn iterator is an object which defines a sequence and a return value upon its termination. It implements the Iterator protocol with a next() method which returns an object with two properties: value (the next value in the sequence) and done (which is true if the last value in the sequence has been consumed).⬆ Back to TopHow does synchronous iteration worksSynchronous iteration was introduced in ES6 and it works with below set of components,Iterable: It is an object which can be iterated over via a method whose key is Symbol.iterator.Iterator: It is an object returned by invoking [Symbol.iterator]() on an iterable. This iterator object wraps each iterated element in an object and returns it via next() method one by one.IteratorResult: It is an object returned by next() method. The object contains two properties; the value property contains an iterated element and the done property determines whether the element is the last element or not.Let's demonstrate synchronous iteration with an array as below,const iterable = [\""one\"", \""two\"", \""three\""];const iterator = iterable[Symbol.iterator]();console.log(iterator.next()); // { value: 'one', done: false }console.log(iterator.next()); // { value: 'two', done: false }console.log(iterator.next()); // { value: 'three', done: false }console.log(iterator.next()); // { value: 'undefined, done: true }⬆ Back to TopWhat is an event loopThe event loop is a process that continuously monitors both the call stack and the event queue and checks whether or not the call stack is empty. If the call stack is empty and there are pending events in the event queue, the event loop dequeues the event from the event queue and pushes it to the call stack. The call stack executes the event, and any additional events generated during the execution are added to the end of the event queue.Note: The event loop allows Node.js to perform non-blocking I/O operations, even though JavaScript is single-threaded, by offloading operations to the system kernel whenever possible. Since most modern kernels are multi-threaded, they can handle multiple operations executing in the background.⬆ Back to TopWhat is call stackCall Stack is a data structure for javascript interpreters to keep track of function calls(creates execution context) in the program. It has two major actions,Whenever you call a function for its execution, you are pushing it to the stack.Whenever the execution is completed, the function is popped out of the stack.Let's take an example and it's state representation in a diagram formatfunction hungry() {  eatFruits();}function eatFruits() {  return \""I'm eating fruits\"";}// Invoke the `hungry` functionhungry();The above code processed in a call stack as below,Add the hungry() function to the call stack list and execute the code.Add the eatFruits() function to the call stack list and execute the code.Delete the eatFruits() function from our call stack list.Delete the hungry() function from the call stack list since there are no items anymore.⬆ Back to TopWhat is an event queueThe event queue follows the queue data structure. It stores async callbacks to be added to the call stack. It is also known as the Callback Queue or Macrotask Queue.Whenever the call stack receives an async function, it is moved into the Web API. Based on the function, Web API executes it and awaits the result. Once it is finished, it moves the callback into the event queue (the callback of the promise is moved into the microtask queue).The event queue constantly checks whether or not the call stack is empty. Once the call stack is empty and there is a callback in the event queue, the event queue moves the callback into the call stack. If there is a callback in the microtask queue as well, it is moved first. The microtask queue has a higher priority than the event queue.⬆ Back to TopWhat is a decoratorA decorator is an expression that evaluates to a function and that takes the target, name, and decorator descriptor as arguments. Also, it optionally returns a decorator descriptor to install on the target object. Let's define admin decorator for user class at design time,function admin(isAdmin) {   return function(target) {       target.isAdmin = isAdmin;   }}@admin(true)class User() {}console.log(User.isAdmin); //true @admin(false) class User() { } console.log(User.isAdmin); //false⬆ Back to TopWhat are the properties of Intl objectBelow are the list of properties available on Intl object,Collator: These are the objects that enable language-sensitive string comparison.DateTimeFormat: These are the objects that enable language-sensitive date and time formatting.ListFormat: These are the objects that enable language-sensitive list formatting.NumberFormat: Objects that enable language-sensitive number formatting.PluralRules: Objects that enable plural-sensitive formatting and language-specific rules for plurals.RelativeTimeFormat: Objects that enable language-sensitive relative time formatting.⬆ Back to TopWhat is an Unary operatorThe unary(+) operator is used to convert a variable to a number.If the variable cannot be converted, it will still become a number but with the value NaN. Let's see this behavior in an action.var x = \""100\"";var y = +x;console.log(typeof x, typeof y); // string, numbervar a = \""Hello\"";var b = +a;console.log(typeof a, typeof b, b); // string, number, NaN⬆ Back to TopHow do you sort elements in an arrayThe sort() method is used to sort the elements of an array in place and returns the sorted array. The example usage would be as below,var months = [\""Aug\"", \""Sep\"", \""Jan\"", \""June\""];months.sort();console.log(months); //  [\""Aug\"", \""Jan\"", \""June\"", \""Sep\""]⬆ Back to TopWhat is the purpose of compareFunction while sorting arraysThe compareFunction is used to define the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. Let's take an example to see the usage of compareFunction,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);console.log(numbers); // [5, 4, 3, 2, 1]⬆ Back to TopHow do you reversing an arrayYou can use the reverse() method to reverse the elements in an array. This method is useful to sort an array in descending order. Let's see the usage of reverse() method in an example,let numbers = [1, 2, 5, 3, 4];numbers.sort((a, b) => b - a);numbers.reverse();console.log(numbers); // [1, 2, 3, 4 ,5]⬆ Back to TopHow do you find min and max value in an arrayYou can use Math.min and Math.max methods on array variables to find the minimum and maximum elements within an array. Let's create two functions to find the min and max value with in an array,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  return Math.min.apply(null, arr);}function findMax(arr) {  return Math.max.apply(null, arr);}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopHow do you find min and max values without Math functionsYou can write functions which loop through an array comparing each value with the lowest value or highest value to find the min and max values. Let's create those functions to find min and max values,var marks = [50, 20, 70, 60, 45, 30];function findMin(arr) {  var length = arr.length;  var min = Infinity;  while (length--) {    if (arr[length] < min) {      min = arr[length];    }  }  return min;}function findMax(arr) {  var length = arr.length;  var max = -Infinity;  while (length--) {    if (arr[length] > max) {      max = arr[length];    }  }  return max;}console.log(findMin(marks));console.log(findMax(marks));⬆ Back to TopWhat is an empty statement and purpose of itThe empty statement is a semicolon (;) indicating that no statement will be executed, even if JavaScript syntax requires one. Since there is no action with an empty statement you might think that it's usage is quite less, but the empty statement is occasionally useful when you want to create a loop that has an empty body. For example, you can initialize an array with zero values as below,// Initialize an array afor(let i=0; i < a.length; a[i++] = 0) ;⬆ Back to TopHow do you get metadata of a moduleYou can use the import.meta object which is a meta-property exposing context-specific meta data to a JavaScript module. It contains information about the current module, such as the module's URL. In browsers, you might get different meta data than NodeJS.<script type=\""module\"" src=\""welcome-module.js\""></script>;console.log(import.meta); // { url: \""file:///home/user/welcome-module.js\"" }⬆ Back to TopWhat is a comma operatorThe comma operator is used to evaluate each of its operands from left to right and returns the value of the last operand. This is totally different from comma usage within arrays, objects, and function arguments and parameters. For example, the usage for numeric expressions would be as below,var x = 1;x = (x++, x);console.log(x); // 2⬆ Back to TopWhat is the advantage of a comma operatorIt is normally used to include multiple expressions in a location that requires a single expression. One of the common usages of this comma operator is to supply multiple parameters in a for loop. For example, the below for loop uses multiple expressions in a single location using comma operator,for (var a = 0, b =10; a <= 10; a++, b--)You can also use the comma operator in a return statement where it processes before returning.function myFunction() {  var a = 1;  return (a += 10), a; // 11}⬆ Back to TopWhat is typescriptTypeScript is a typed superset of JavaScript created by Microsoft that adds optional types, classes, async/await, and many other features, and compiles to plain JavaScript. Angular built entirely in TypeScript and used as a primary language. You can install it globally asnpm install -g typescriptLet's see a simple example of TypeScript usage,function greeting(name: string): string {  return \""Hello, \"" + name;}let user = \""Sudheer\"";console.log(greeting(user));The greeting method allows only string type as argument.⬆ Back to TopWhat are the differences between javascript and typescriptBelow are the list of differences between javascript and typescript,featuretypescriptjavascriptLanguage paradigmObject oriented programming languageScripting languageTyping supportSupports static typingIt has dynamic typingModulesSupportedNot supportedInterfaceIt has interfaces conceptDoesn't support interfacesOptional parametersFunctions support optional parametersNo support of optional parameters for functions⬆ Back to TopWhat are the advantages of typescript over javascriptBelow are some of the advantages of typescript over javascript,TypeScript is able to find compile time errors at the development time only and it makes sures less runtime errors. Whereas javascript is an interpreted language.TypeScript is strongly-typed or supports static typing which allows for checking type correctness at compile time. This is not available in javascript.TypeScript compiler can compile the .ts files into ES3,ES4 and ES5 unlike ES6 features of javascript which may not be supported in some browsers.⬆ Back to TopWhat is an object initializerAn object initializer is an expression that describes the initialization of an Object. The syntax for this expression is represented as a comma-delimited list of zero or more pairs of property names and associated values of an object, enclosed in curly braces ({}). This is also known as literal notation. It is one of the ways to create an object.var initObject = { a: \""John\"", b: 50, c: {} };console.log(initObject.a); // John⬆ Back to TopWhat is a constructor methodThe constructor method is a special method for creating and initializing an object created within a class. If you do not specify a constructor method, a default constructor is used. The example usage of constructor would be as below,class Employee {  constructor() {    this.name = \""John\"";  }}var employeeObject = new Employee();console.log(employeeObject.name); // John⬆ Back to TopWhat happens if you write constructor more than once in a classThe \""constructor\"" in a class is a special method and it should be defined only once in a class. i.e, If you write a constructor method more than once in a class it will throw a SyntaxError error. class Employee {   constructor() {     this.name = \""John\"";   }   constructor() {   //  Uncaught SyntaxError: A class may only have one constructor     this.age = 30;   } } var employeeObject = new Employee(); console.log(employeeObject.name);⬆ Back to TopHow do you call the constructor of a parent classYou can use the super keyword to call the constructor of a parent class. Remember that super() must be called before using 'this' reference. Otherwise it will cause a reference error. Let's the usage of it,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do you get the prototype of an objectYou can use the Object.getPrototypeOf(obj) method to return the prototype of the specified object. i.e. The value of the internal prototype property. If there are no inherited properties then null value is returned.const newPrototype = {};const newObject = Object.create(newPrototype);console.log(Object.getPrototypeOf(newObject) === newPrototype); // true⬆ Back to TopWhat happens If I pass string type for getPrototype methodIn ES5, it will throw a TypeError exception if the obj parameter isn't an object. Whereas in ES2015, the parameter will be coerced to an Object.// ES5Object.getPrototypeOf(\""James\""); // TypeError: \""James\"" is not an object// ES2015Object.getPrototypeOf(\""James\""); // String.prototype⬆ Back to TopHow do you set prototype of one object to anotherYou can use the Object.setPrototypeOf() method that sets the prototype (i.e., the internal Prototype property) of a specified object to another object or null. For example, if you want to set prototype of a square object to rectangle object would be as follows,Object.setPrototypeOf(Square.prototype, Rectangle.prototype);Object.setPrototypeOf({}, null);⬆ Back to TopHow do you check whether an object can be extendable or notThe Object.isExtensible() method is used to determine if an object is extendable or not. i.e, Whether it can have new properties added to it or not.const newObject = {};console.log(Object.isExtensible(newObject)); //trueNote: By default, all the objects are extendable. i.e, The new properties can be added or modified.⬆ Back to TopHow do you prevent an object to extendThe Object.preventExtensions() method is used to prevent new properties from ever being added to an object. In other words, it prevents future extensions to the object. Let's see the usage of this property,const newObject = {};Object.preventExtensions(newObject); // NOT extendabletry {  Object.defineProperty(newObject, \""newProperty\"", {    // Adding new property    value: 100,  });} catch (e) {  console.log(e); // TypeError: Cannot define property newProperty, object is not extensible}⬆ Back to TopWhat are the different ways to make an object non-extensibleYou can mark an object non-extensible in 3 ways,Object.preventExtensionsObject.sealObject.freezevar newObject = {};Object.preventExtensions(newObject); // Prevent objects are non-extensibleObject.isExtensible(newObject); // falsevar sealedObject = Object.seal({}); // Sealed objects are non-extensibleObject.isExtensible(sealedObject); // falsevar frozenObject = Object.freeze({}); // Frozen objects are non-extensibleObject.isExtensible(frozenObject); // false⬆ Back to TopHow do you define multiple properties on an objectThe Object.defineProperties() method is used to define new or modify existing properties directly on an object and returning the object. Let's define multiple properties on an empty object,const newObject = {};Object.defineProperties(newObject, {  newProperty1: {    value: \""John\"",    writable: true,  },  newProperty2: {},});⬆ Back to TopWhat is MEAN in javascriptThe MEAN (MongoDB, Express, AngularJS, and Node.js) stack is the most popular open-source JavaScript software tech stack available for building dynamic web apps where you can write both the server-side and client-side halves of the web project entirely in JavaScript.⬆ Back to TopWhat Is Obfuscation in javascriptObfuscation is the deliberate act of creating obfuscated javascript code(i.e, source or machine code) that is difficult for humans to understand. It is something similar to encryption, but a machine can understand the code and execute it.Let's see the below function before Obfuscation,function greeting() {  console.log(\""Hello, welcome to JS world\"");}And after the code Obfuscation, it would be appeared as below,eval(  (function (p, a, c, k, e, d) {    e = function (c) {      return c;    };    if (!\""\"".replace(/^/, String)) {      while (c--) {        d[c] = k[c] || c;      }      k = [        function (e) {          return d[e];        },      ];      e = function () {        return \""\\\\w+\"";      };      c = 1;    }    while (c--) {      if (k[c]) {        p = p.replace(new RegExp(\""\\\\b\"" + e(c) + \""\\\\b\"", \""g\""), k[c]);      }    }    return p;  })(    \""2 1(){0.3('4, 7 6 5 8')}\"",    9,    9,    \""console|greeting|function|log|Hello|JS|to|welcome|world\"".split(\""|\""),    0,    {}  ));⬆ Back to TopWhy do you need ObfuscationBelow are the few reasons for Obfuscation,The Code size will be reduced. So data transfers between server and client will be fast.It hides the business logic from outside world and protects the code from othersReverse engineering is highly difficultThe download time will be reduced⬆ Back to TopWhat is MinificationMinification is the process of removing all unnecessary characters(empty spaces are removed) and variables will be renamed without changing it's functionality. It is also a type of obfuscation .⬆ Back to TopWhat are the advantages of minificationNormally it is recommended to use minification for heavy traffic and intensive requirements of resources. It reduces file sizes with below benefits,Decreases loading times of a web pageSaves bandwidth usages⬆ Back to TopWhat are the differences between Obfuscation and EncryptionBelow are the main differences between Obfuscation and Encryption,FeatureObfuscationEncryptionDefinitionChanging the form of any data in any other formChanging the form of information to an unreadable format by using a keyA key to decodeIt can be decoded without any keyIt is requiredTarget data formatIt will be converted to a complex formConverted into an unreadable format⬆ Back to TopWhat are the common tools used for minificationThere are many online/offline tools to minify the javascript files,Google's Closure CompilerUglifyJS2jsminjavascript-minifier.com/prettydiff.com⬆ Back to TopHow do you perform form validation using javascriptJavaScript can be used to perform HTML form validation. For example, if the form field is empty, the function needs to notify, and return false, to prevent the form being submitted.Lets' perform user login in an html form,<form name=\""myForm\"" onsubmit=\""return validateForm()\"" method=\""post\"">  User name: <input type=\""text\"" name=\""uname\"" />  <input type=\""submit\"" value=\""Submit\"" /></form>And the validation on user login is below,function validateForm() {  var x = document.forms[\""myForm\""][\""uname\""].value;  if (x == \""\"") {    alert(\""The username shouldn't be empty\"");    return false;  }}⬆ Back to TopHow do you perform form validation without javascriptYou can perform HTML form validation automatically without using javascript. The validation enabled by applying the required attribute to prevent form submission when the input is empty.<form method=\""post\"">  <input type=\""text\"" name=\""uname\"" required />  <input type=\""submit\"" value=\""Submit\"" /></form>Note: Automatic form validation does not work in Internet Explorer 9 or earlier.⬆ Back to TopWhat are the DOM methods available for constraint validationThe below DOM methods are available for constraint validation on an invalid input,checkValidity(): It returns true if an input element contains valid data.setCustomValidity(): It is used to set the validationMessage property of an input element.Let's take an user login form with DOM validationsfunction myFunction() {  var userName = document.getElementById(\""uname\"");  if (!userName.checkValidity()) {    document.getElementById(\""message\"").innerHTML =      userName.validationMessage;  } else {    document.getElementById(\""message\"").innerHTML =      \""Entered a valid username\"";  }}⬆ Back to TopWhat are the available constraint validation DOM propertiesBelow are the list of some of the constraint validation DOM properties available,validity: It provides a list of boolean properties related to the validity of an input element.validationMessage: It displays the message when the validity is false.willValidate: It indicates if an input element will be validated or not.⬆ Back to TopWhat are the list of validity propertiesThe validity property of an input element provides a set of properties related to the validity of data.customError: It returns true, if a custom validity message is set.patternMismatch: It returns true, if an element's value does not match its pattern attribute.rangeOverflow: It returns true, if an element's value is greater than its max attribute.rangeUnderflow: It returns true, if an element's value is less than its min attribute.stepMismatch: It returns true, if an element's value is invalid according to step attribute.tooLong: It returns true, if an element's value exceeds its maxLength attribute.typeMismatch: It returns true, if an element's value is invalid according to type attribute.valueMissing: It returns true, if an element with a required attribute has no value.valid: It returns true, if an element's value is valid.⬆ Back to TopGive an example usage of rangeOverflow propertyIf an element's value is greater than its max attribute then rangeOverflow property returns true. For example, the below form submission throws an error if the value is more than 100,<input id=\""age\"" type=\""number\"" max=\""100\"" /><button onclick=\""myOverflowFunction()\"">OK</button>function myOverflowFunction() {  if (document.getElementById(\""age\"").validity.rangeOverflow) {    alert(\""The mentioned age is not allowed\"");  }}⬆ Back to TopIs enums feature available in javascriptNo, javascript does not natively support enums. But there are different kinds of solutions to simulate them even though they may not provide exact equivalents. For example, you can use freeze or seal on object,var DaysEnum = Object.freeze({\""monday\"":1, \""tuesday\"":2, \""wednesday\"":3, ...})⬆ Back to TopWhat is an enumAn enum is a type restricting variables to one value from a predefined set of constants. JavaScript has no enums but typescript provides built-in enum support.enum Color { RED, GREEN, BLUE}⬆ Back to TopHow do you list all properties of an objectYou can use the Object.getOwnPropertyNames() method which returns an array of all properties found directly in a given object. Let's the usage of it in an example,const newObject = {  a: 1,  b: 2,  c: 3,};console.log(Object.getOwnPropertyNames(newObject));[\""a\"", \""b\"", \""c\""];⬆ Back to TopHow do you get property descriptors of an objectYou can use the Object.getOwnPropertyDescriptors() method which returns all own property descriptors of a given object. The example usage of this method is below,const newObject = {  a: 1,  b: 2,  c: 3,};const descriptorsObject = Object.getOwnPropertyDescriptors(newObject);console.log(descriptorsObject.a.writable); //trueconsole.log(descriptorsObject.a.configurable); //trueconsole.log(descriptorsObject.a.enumerable); //trueconsole.log(descriptorsObject.a.value); // 1⬆ Back to TopWhat are the attributes provided by a property descriptorA property descriptor is a record which has the following attributesvalue: The value associated with the propertywritable: Determines whether the value associated with the property can be changed or notconfigurable: Returns true if the type of this property descriptor can be changed and if the property can be deleted from the corresponding object.enumerable: Determines whether the property appears during enumeration of the properties on the corresponding object or not.set: A function which serves as a setter for the propertyget: A function which serves as a getter for the property⬆ Back to TopHow do you extend classesThe extends keyword is used in class declarations/expressions to create a class which is a child of another class. It can be used to subclass custom classes as well as built-in objects. The syntax would be as below,class ChildClass extends ParentClass { ... }Let's take an example of Square subclass from Polygon parent class,class Square extends Rectangle {  constructor(length) {    super(length, length);    this.name = \""Square\"";  }  get area() {    return this.width * this.height;  }  set area(value) {    this.area = value;  }}⬆ Back to TopHow do I modify the url without reloading the pageThe window.location.href property will be helpful to modify the url but it reloads the page. HTML5 introduced the history.pushState() and history.replaceState() methods, which allow you to add and modify history entries, respectively. For example, you can use pushState as below,window.history.pushState(\""page2\"", \""Title\"", \""/page2.html\"");⬆ Back to TopHow do you check whether an array includes a particular value or notThe Array#includes() method is used to determine whether an array includes a particular value among its entries by returning either true or false. Let's see an example to find an element(numeric and string) within an array.var numericArray = [1, 2, 3, 4];console.log(numericArray.includes(3)); // truevar stringArray = [\""green\"", \""yellow\"", \""blue\""];console.log(stringArray.includes(\""blue\"")); //true⬆ Back to TopHow do you compare scalar arraysYou can use length and every method of arrays to compare two scalar(compared directly using ===) arrays. The combination of these expressions can give the expected result,const arrayFirst = [1, 2, 3, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.every((value, index) => value === arraySecond[index])); // trueIf you would like to compare arrays irrespective of order then you should sort them before,const arrayFirst = [2, 3, 1, 4, 5];const arraySecond = [1, 2, 3, 4, 5];console.log(  arrayFirst.length === arraySecond.length &&    arrayFirst.sort().every((value, index) => value === arraySecond[index])); //true⬆ Back to TopHow to get the value from get parametersThe new URL() object accepts the url string and searchParams property of this object can be used to access the get parameters. Remember that you may need to use polyfill or window.location to access the URL in older browsers(including IE).let urlString = \""http://www.some-domain.com/about.html?x=1&y=2&z=3\""; //window.location.hreflet url = new URL(urlString);let parameterZ = url.searchParams.get(\""z\"");console.log(parameterZ); // 3⬆ Back to TopHow do you print numbers with commas as thousand separatorsYou can use the Number.prototype.toLocaleString() method which returns a string with a language-sensitive representation such as thousand separator,currency etc of this number.function convertToThousandFormat(x) {  return x.toLocaleString(); // 12,345.679}console.log(convertToThousandFormat(12345.6789));⬆ Back to TopWhat is the difference between java and javascriptBoth are totally unrelated programming languages and no relation between them. Java is statically typed, compiled, runs on its own VM. Whereas Javascript is dynamically typed, interpreted, and runs in a browser and nodejs environments. Let's see the major differences in a tabular format,FeatureJavaJavaScriptTypedIt's a strongly typed languageIt's a dynamic typed languageParadigmObject oriented programmingPrototype based programmingScopingBlock scopedFunction-scopedConcurrencyThread basedevent basedMemoryUses more memoryUses less memory. Hence it will be used for web pages⬆ Back to TopDoes JavaScript supports namespaceJavaScript doesn’t support namespace by default. So if you create any element(function, method, object, variable) then it becomes global and pollutes the global namespace. Let's take an example of defining two functions without any namespace,function func1() {  console.log(\""This is a first definition\"");}function func1() {  console.log(\""This is a second definition\"");}func1(); // This is a second definitionIt always calls the second function definition. In this case, namespace will solve the name collision problem.⬆ Back to TopHow do you declare namespaceEven though JavaScript lacks namespaces, we can use Objects , IIFE to create namespaces.Using Object Literal Notation: Let's wrap variables and functions inside an Object literal which acts as a namespace. After that you can access them using object notationvar namespaceOne = {   function func1() {       console.log(\""This is a first definition\"");   }}var namespaceTwo = {     function func1() {         console.log(\""This is a second definition\"");     } }namespaceOne.func1(); // This is a first definitionnamespaceTwo.func1(); // This is a second definitionUsing IIFE (Immediately invoked function expression): The outer pair of parentheses of IIFE creates a local scope for all the code inside of it and makes the anonymous function a function expression. Due to that, you can create the same function in two different function expressions to act as a namespace.(function () {  function fun1() {    console.log(\""This is a first definition\"");  }  fun1();})();(function () {  function fun1() {    console.log(\""This is a second definition\"");  }  fun1();})();Using a block and a let/const declaration: In ECMAScript 6, you can simply use a block and a let declaration to restrict the scope of a variable to a block.{  let myFunction = function fun1() {    console.log(\""This is a first definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.{  let myFunction = function fun1() {    console.log(\""This is a second definition\"");  };  myFunction();}//myFunction(): ReferenceError: myFunction is not defined.⬆ Back to TopHow do you invoke javascript code in an iframe from parent pageInitially iFrame needs to be accessed using either document.getElementBy or window.frames. After that contentWindow property of iFrame gives the access for targetFunctiondocument.getElementById(\""targetFrame\"").contentWindow.targetFunction();window.frames[0].frameElement.contentWindow.targetFunction(); // Accessing iframe this way may not work in latest versions chrome and firefox⬆ Back to TopHow do get the timezone offset from dateYou can use the getTimezoneOffset method of the date object. This method returns the time zone difference, in minutes, from current locale (host system settings) to UTCvar offset = new Date().getTimezoneOffset();console.log(offset); // -480⬆ Back to TopHow do you load CSS and JS files dynamicallyYou can create both link and script elements in the DOM and append them as child to head tag. Let's create a function to add script and style resources as below,function loadAssets(filename, filetype) {  if (filetype == \""css\"") {    // External CSS file    var fileReference = document.createElement(\""link\"");    fileReference.setAttribute(\""rel\"", \""stylesheet\"");    fileReference.setAttribute(\""type\"", \""text/css\"");    fileReference.setAttribute(\""href\"", filename);  } else if (filetype == \""js\"") {    // External JavaScript file    var fileReference = document.createElement(\""script\"");    fileReference.setAttribute(\""type\"", \""text/javascript\"");    fileReference.setAttribute(\""src\"", filename);  }  if (typeof fileReference != \""undefined\"")    document.getElementsByTagName(\""head\"")[0].appendChild(fileReference);}⬆ Back to TopWhat are the different methods to find HTML elements in DOMIf you want to access any element in an HTML page, you need to start with accessing the document object. Later you can use any of the below methods to find the HTML element,document.getElementById(id): It finds an element by Iddocument.getElementsByTagName(name): It finds an element by tag namedocument.getElementsByClassName(name): It finds an element by class name⬆ Back to TopWhat is jQueryjQuery is a popular cross-browser JavaScript library that provides Document Object Model (DOM) traversal, event handling, animations and AJAX interactions by minimizing the discrepancies across browsers. It is widely famous with its philosophy of “Write less, do more”. For example, you can display welcome message on the page load using jQuery as below,$(document).ready(function () {  // It selects the document and apply the function on page load  alert(\""Welcome to jQuery world\"");});Note: You can download it from jquery's official site or install it from CDNs, like google.⬆ Back to TopWhat is V8 JavaScript engineV8 is an open source high-performance JavaScript engine used by the Google Chrome browser, written in C++. It is also being used in the node.js project. It implements ECMAScript and WebAssembly, and runs on Windows 7 or later, macOS 10.12+, and Linux systems that use x64, IA-32, ARM, or MIPS processors.Note: It can run standalone, or can be embedded into any C++ application.⬆ Back to TopWhy do we call javascript as dynamic languageJavaScript is a loosely typed or a dynamic language because variables in JavaScript are not directly associated with any particular value type, and any variable can be assigned/reassigned with values of all types.let age = 50; // age is a number nowage = \""old\""; // age is a string nowage = true; // age is a boolean⬆ Back to TopWhat is a void operatorThe void operator evaluates the given expression and then returns undefined(i.e, without returning value). The syntax would be as below,void expression;void expression;Let's display a message without any redirection or reload<a href=\""javascript:void(alert('Welcome to JS world'))\"">  Click here to see a message</a>Note: This operator is often used to obtain the undefined primitive value, using \""void(0)\"".⬆ Back to TopHow to set the cursor to waitThe cursor can be set to wait in JavaScript by using the property \""cursor\"". Let's perform this behavior on page load using the below function.function myFunction() {  window.document.body.style.cursor = \""wait\"";}and this function invoked on page load<body onload=\""myFunction()\""></body>⬆ Back to TopHow do you create an infinite loopYou can create infinite loops using for and while loops without using any expressions. The for loop construct or syntax is better approach in terms of ESLint and code optimizer tools,for (;;) {}while (true) {}⬆ Back to TopWhy do you need to avoid with statementJavaScript's with statement was intended to provide a shorthand for writing recurring accesses to objects. So it can help reduce file size by reducing the need to repeat a lengthy object reference without performance penalty. Let's take an example where it is used to avoid redundancy when accessing an object several times.a.b.c.greeting = \""welcome\"";a.b.c.age = 32;Using with it turns this into:with (a.b.c) {  greeting = \""welcome\"";  age = 32;}But this with statement creates performance problems since one cannot predict whether an argument will refer to a real variable or to a property inside the with argument.⬆ Back to TopWhat is the output of below for loopsfor (var i = 0; i < 4; i++) {  // global scope  setTimeout(() => console.log(i));}for (let i = 0; i < 4; i++) {  // block scope  setTimeout(() => console.log(i));}The output of the above for loops is 4 4 4 4 and 0 1 2 3Explanation: Due to the event queue/loop of javascript, the setTimeout callback function is called after the loop has been executed. Since the variable i is declared with the var keyword it became a global variable and the value was equal to 4 using iteration when the time setTimeout function is invoked. Hence, the output of the first loop is 4 4 4 4.Whereas in the second loop, the variable i is declared as the let keyword it becomes a block scoped variable and it holds a new value(0, 1 ,2 3) for each iteration. Hence, the output of the first loop is 0 1 2 3.⬆ Back to TopList down some of the features of ES6Below are the list of some new features of ES6,Support for constants or immutable variablesBlock-scope support for variables, constants and functionsArrow functionsDefault parametersRest and Spread ParametersTemplate LiteralsMulti-line StringsDestructuring AssignmentEnhanced Object LiteralsPromisesClassesModules⬆ Back to TopWhat is ES6ES6 is the sixth edition of the javascript language and it was released in June 2015. It was initially known as ECMAScript 6 (ES6) and later renamed to ECMAScript 2015. Almost all the modern browsers support ES6 but for the old browsers there are many transpilers, like Babel.js etc.⬆ Back to TopCan I redeclare let and const variablesNo, you cannot redeclare let and const variables. If you do, it throws below errorUncaught SyntaxError: Identifier 'someVariable' has already been declaredExplanation: The variable declaration with var keyword refers to a function scope and the variable is treated as if it were declared at the top of the enclosing scope due to hoisting feature. So all the multiple declarations contributing to the same hoisted variable without any error. Let's take an example of re-declaring variables in the same scope for both var and let/const variables.var name = \""John\"";function myFunc() {  var name = \""Nick\"";  var name = \""Abraham\""; // Re-assigned in the same function block  alert(name); // Abraham}myFunc();alert(name); // JohnThe block-scoped multi-declaration throws syntax error,let name = \""John\"";function myFunc() {  let name = \""Nick\"";  let name = \""Abraham\""; // Uncaught SyntaxError: Identifier 'name' has already been declared  alert(name);}myFunc();alert(name);⬆ Back to TopIs const variable makes the value immutableNo, the const variable doesn't make the value immutable. But it disallows subsequent assignments(i.e, You can declare with assignment but can't assign another value later)const userList = [];userList.push(\""John\""); // Can mutate even though it can't re-assignconsole.log(userList); // ['John']⬆ Back to TopWhat are default parametersIn ES5, we need to depend on logical OR operators to handle default values of function parameters. Whereas in ES6, Default function parameters feature allows parameters to be initialized with default values if no value or undefined is passed. Let's compare the behavior with an examples,//ES5var calculateArea = function (height, width) {  height = height || 50;  width = width || 60;  return width * height;};console.log(calculateArea()); //300The default parameters makes the initialization more simpler,//ES6var calculateArea = function (height = 50, width = 60) {  return width * height;};console.log(calculateArea()); //300⬆ Back to TopWhat are template literalsTemplate literals or template strings are string literals allowing embedded expressions. These are enclosed by the back-tick (`) character instead of double or single quotes.In ES6, this feature enables using dynamic expressions as below,var greeting = `Welcome to JS World, Mr. ${firstName} ${lastName}.`;In ES5, you need break string like below,var greeting = 'Welcome to JS World, Mr. ' + firstName + ' ' + lastName.`Note: You can use multi-line strings and string interpolation features with template literals.⬆ Back to TopHow do you write multi-line strings in template literalsIn ES5, you would have to use newline escape characters('\') and concatenation symbols(+) in order to get multi-line strings.console.log(\""This is string sentence 1\\"" + \""This is string sentence 2\"");Whereas in ES6, You don't need to mention any newline sequence character,console.log(`This is string sentence'This is string sentence 2`);⬆ Back to TopWhat are nesting templatesThe nesting template is a feature supported within template literals syntax to allow inner backticks inside a placeholder ${ } within the template. For example, the below nesting template is used to display the icons based on user permissions whereas outer template checks for platform type,const iconStyles = `icon ${  isMobilePlatform()    ? \""\""    : `icon-${user.isAuthorized ? \""submit\"" : \""disabled\""}`}`;You can write the above use case without nesting template features as well. However, the nesting template feature is more compact and readable.//Without nesting templates const iconStyles = `icon ${ isMobilePlatform() ? '' :   user.isAuthorized ? 'icon-submit' : 'icon-disabled'}`;⬆ Back to TopWhat are tagged templatesTagged templates are the advanced form of templates in which tags allow you to parse template literals with a function. The tag function accepts the first parameter as an array of strings and remaining parameters as expressions. This function can also return manipulated strings based on parameters. Let's see the usage of this tagged template behavior of an IT professional skill set in an organization,var user1 = \""John\"";var skill1 = \""JavaScript\"";var experience1 = 15;var user2 = \""Kane\"";var skill2 = \""JavaScript\"";var experience2 = 5;function myInfoTag(strings, userExp, experienceExp, skillExp) {  var str0 = strings[0]; // \""Mr/Ms. \""  var str1 = strings[1]; // \"" is a/an \""  var str2 = strings[2]; // \""in\""  var expertiseStr;  if (experienceExp > 10) {    expertiseStr = \""expert developer\"";  } else if (skillExp > 5 && skillExp <= 10) {    expertiseStr = \""senior developer\"";  } else {    expertiseStr = \""junior developer\"";  }  return `${str0}${userExp}${str1}${expertiseStr}${str2}${skillExp}`;}var output1 = myInfoTag`Mr/Ms. ${user1} is a/an ${experience1} in ${skill1}`;var output2 = myInfoTag`Mr/Ms. ${user2} is a/an ${experience2} in ${skill2}`;console.log(output1); // Mr/Ms. John is a/an expert developer in JavaScriptconsole.log(output2); // Mr/Ms. Kane is a/an junior developer in JavaScript⬆ Back to TopWhat are raw stringsES6 provides a raw strings feature using the String.raw() method which is used to get the raw string form of template strings. This feature allows you to access the raw strings as they were entered, without processing escape sequences. For example, the usage would be as below,var calculationString = String.raw`The sum of numbers is \${  1 + 2 + 3 + 4}!`;console.log(calculationString); // The sum of numbers is 10If you don't use raw strings, the newline character sequence will be processed by displaying the output in multiple linesvar calculationString = `The sum of numbers is \${1 + 2 + 3 + 4}!`;console.log(calculationString);// The sum of numbers is// 10Also, the raw property is available on the first argument to the tag functionfunction tag(strings) {  console.log(strings.raw[0]);}⬆ Back to TopWhat is destructuring assignmentThe destructuring assignment is a JavaScript expression that makes it possible to unpack values from arrays or properties from objects into distinct variables.Let's get the month values from an array using destructuring assignmentvar [one, two, three] = [\""JAN\"", \""FEB\"", \""MARCH\""];console.log(one); // \""JAN\""console.log(two); // \""FEB\""console.log(three); // \""MARCH\""and you can get user properties of an object using destructuring assignment,var { name, age } = { name: \""John\"", age: 32 };console.log(name); // Johnconsole.log(age); // 32⬆ Back to TopWhat are default values in destructuring assignmentA variable can be assigned a default value when the value unpacked from the array or object is undefined during destructuring assignment. It helps to avoid setting default values separately for each assignment. Let's take an example for both arrays and object use cases,Arrays destructuring:var x, y, z;[x = 2, y = 4, z = 6] = [10];console.log(x); // 10console.log(y); // 4console.log(z); // 6Objects destructuring:var { x = 2, y = 4, z = 6 } = { x: 10 };console.log(x); // 10console.log(y); // 4console.log(z); // 6⬆ Back to TopHow do you swap variables in destructuring assignmentIf you don't use destructuring assignment, swapping two values requires a temporary variable. Whereas using a destructuring feature, two variable values can be swapped in one destructuring expression. Let's swap two number variables in array destructuring assignment,var x = 10,  y = 20;[x, y] = [y, x];console.log(x); // 20console.log(y); // 10⬆ Back to TopWhat are enhanced object literalsObject literals make it easy to quickly create objects with properties inside the curly braces. For example, it provides shorter syntax for common object property definition as below.//ES6var x = 10,  y = 20;obj = { x, y };console.log(obj); // {x: 10, y:20}//ES5var x = 10,  y = 20;obj = { x: x, y: y };console.log(obj); // {x: 10, y:20}⬆ Back to TopWhat are dynamic importsThe dynamic imports using import() function syntax allows us to load modules on demand by using promises or the async/await syntax. Currently this feature is in stage4 proposal. The main advantage of dynamic imports is reduction of our bundle's sizes, the size/payload response of our requests and overall improvements in the user experience.The syntax of dynamic imports would be as below,import(\""./Module\"").then((Module) => Module.method());⬆ Back to TopWhat are the use cases for dynamic importsBelow are some of the use cases of using dynamic imports over static imports,Import a module on-demand or conditionally. For example, if you want to load a polyfill on legacy browserif (isLegacyBrowser()) {    import(···)    .then(···);}Compute the module specifier at runtime. For example, you can use it for internationalization.import(`messages_${getLocale()}.js`).then(···);Import a module from within a regular script instead a module.⬆ Back to TopWhat are typed arraysTyped arrays are array-like objects from ECMAScript 6 API for handling binary data. JavaScript provides 8 Typed array types,Int8Array: An array of 8-bit signed integersInt16Array: An array of 16-bit signed integersInt32Array: An array of 32-bit signed integersUint8Array: An array of 8-bit unsigned integersUint16Array: An array of 16-bit unsigned integersUint32Array: An array of 32-bit unsigned integersFloat32Array: An array of 32-bit floating point numbersFloat64Array: An array of 64-bit floating point numbersFor example, you can create an array of 8-bit signed integers as belowconst a = new Int8Array();// You can pre-allocate n bytesconst bytes = 1024;const a = new Int8Array(bytes);⬆ Back to TopWhat are the advantages of module loadersThe module loaders provides the below features,Dynamic loadingState isolationGlobal namespace isolationCompilation hooksNested virtualization⬆ Back to TopWhat is collationCollation is used for sorting a set of strings and searching within a set of strings. It is parameterized by locale and aware of Unicode. Let's take comparison and sorting features,Comparison:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(l10nDE.compare(\""ä\"", \""z\"") === -1); // trueconsole.log(l10nSV.compare(\""ä\"", \""z\"") === +1); // trueSorting:var list = [\""ä\"", \""a\"", \""z\""]; // In German,  \""ä\"" sorts with \""a\"" Whereas in Swedish, \""ä\"" sorts after \""z\""var l10nDE = new Intl.Collator(\""de\"");var l10nSV = new Intl.Collator(\""sv\"");console.log(list.sort(l10nDE.compare)); // [ \""a\"", \""ä\"", \""z\"" ]console.log(list.sort(l10nSV.compare)); // [ \""a\"", \""z\"", \""ä\"" ]⬆ Back to TopWhat is for...of statementThe for...of statement creates a loop iterating over iterable objects or elements such as built-in String, Array, Array-like objects (like arguments or NodeList), TypedArray, Map, Set, and user-defined iterables. The basic usage of for...of statement on arrays would be as below,let arrayIterable = [10, 20, 30, 40, 50];for (let value of arrayIterable) {  value++;  console.log(value); // 11 21 31 41 51}⬆ Back to TopWhat is the output of below spread operator array[...\""John Resig\""];The output of the array is ['J', 'o', 'h', 'n', '', 'R', 'e', 's', 'i', 'g']Explanation: The string is an iterable type and the spread operator within an array maps every character of an iterable to one element. Hence, each character of a string becomes an element within an Array.⬆ Back to TopIs PostMessage secureYes, postMessages can be considered very secure as long as the programmer/developer is careful about checking the origin and source of an arriving message. But if you try to send/receive a message without verifying its source will create cross-site scripting attacks.⬆ Back to TopWhat are the problems with postmessage target origin as wildcardThe second argument of postMessage method specifies which origin is allowed to receive the message. If you use the wildcard “*” as an argument then any origin is allowed to receive the message. In this case, there is no way for the sender window to know if the target window is at the target origin when sending the message. If the target window has been navigated to another origin, the other origin would receive the data. Hence, this may lead to XSS vulnerabilities.targetWindow.postMessage(message, \""*\"");⬆ Back to TopHow do you avoid receiving postMessages from attackersSince the listener listens for any message, an attacker can trick the application by sending a message from the attacker’s origin, which gives an impression that the receiver received the message from the actual sender’s window. You can avoid this issue by validating the origin of the message on the receiver's end using the “message.origin” attribute. For examples, let's check the sender's origin http://www.some-sender.com on receiver side www.some-receiver.com,//Listener on http://www.some-receiver.com/window.addEventListener(\""message\"", function(message){    if(/^http://www\\.some-sender\\.com$/.test(message.origin)){         console.log('You received the data from valid sender', message.data);   }});⬆ Back to TopCan I avoid using postMessages completelyYou cannot avoid using postMessages completely(or 100%). Even though your application doesn’t use postMessage considering the risks, a lot of third party scripts use postMessage to communicate with the third party service. So your application might be using postMessage without your knowledge.⬆ Back to TopIs postMessages synchronousThe postMessages are synchronous in IE8 browser but they are asynchronous in IE9 and all other modern browsers (i.e, IE9+, Firefox, Chrome, Safari).Due to this asynchronous behaviour, we use a callback mechanism when the postMessage is returned.⬆ Back to TopWhat paradigm is JavascriptJavaScript is a multi-paradigm language, supporting imperative/procedural programming, Object-Oriented Programming and functional programming. JavaScript supports Object-Oriented Programming with prototypical inheritance.⬆ Back to TopWhat is the difference between internal and external javascriptInternal JavaScript: It is the source code within the script tag.External JavaScript: The source code is stored in an external file(stored with .js extension) and referred with in the tag.⬆ Back to TopIs JavaScript faster than server side scriptYes, JavaScript is faster than server side scripts. Because JavaScript is a client-side script it does not require any web server’s help for its computation or calculation. So JavaScript is always faster than any server-side script like ASP, PHP, etc.⬆ Back to TopHow do you get the status of a checkboxYou can apply the checked property on the selected checkbox in the DOM. If the value is true it means the checkbox is checked, otherwise it is unchecked. For example, the below HTML checkbox element can be access using javascript as below:<input type=\""checkbox\"" id=\""checkboxname\"" value=\""Agree\"" /> Agree theconditions<br />console.log(document.getElementById(‘checkboxname’).checked); // true or false⬆ Back to TopWhat is the purpose of double tilde operatorThe double tilde operator(~~) is known as double NOT bitwise operator. This operator is a slightly quicker substitute for Math.floor().⬆ Back to TopHow do you convert character to ASCII codeYou can use the String.prototype.charCodeAt() method to convert string characters to ASCII numbers. For example, let's find ASCII code for the first letter of 'ABC' string,\""ABC\"".charCodeAt(0); // returns 65Whereas String.fromCharCode() method converts numbers to equal ASCII characters.String.fromCharCode(65, 66, 67); // returns 'ABC'⬆ Back to TopWhat is ArrayBufferAn ArrayBuffer object is used to represent a generic, fixed-length raw binary data buffer. You can create it as below,let buffer = new ArrayBuffer(16); // create a buffer of length 16alert(buffer.byteLength); // 16To manipulate an ArrayBuffer, we need to use a “view” object.//Create a DataView referring to the bufferlet view = new DataView(buffer);⬆ Back to TopWhat is the output of below string expressionconsole.log(\""Welcome to JS world\""[0]);The output of the above expression is \""W\"".Explanation: The bracket notation with specific index on a string returns the character at a specific location. Hence, it returns the character \""W\"" of the string. Since this is not supported in IE7 and below versions, you may need to use the .charAt() method to get the desired result.⬆ Back to TopWhat is the purpose of Error objectThe Error constructor creates an error object and the instances of error objects are thrown when runtime errors occur. The Error object can also be used as a base object for user-defined exceptions. The syntax of error object would be as below,new Error([message[, fileName[, lineNumber]]])You can throw user defined exceptions or errors using Error object in try...catch block as below,try {  if (withdraw > balance)    throw new Error(\""Oops! You don't have enough balance\"");} catch (e) {  console.log(e.name + \"": \"" + e.message);}⬆ Back to TopWhat is the purpose of EvalError objectThe EvalError object indicates an error regarding the global eval() function. Even though this exception is not thrown by JavaScript anymore, the EvalError object remains for compatibility. The syntax of this expression would be as below,new EvalError([message[, fileName[, lineNumber]]])You can throw EvalError with in try...catch block as below,try {  throw new EvalError('Eval function error', 'someFile.js', 100);} catch (e) {  console.log(e.message, e.name, e.fileName);              // \""Eval function error\"", \""EvalError\"", \""someFile.js\""⬆ Back to TopWhat are the list of cases error thrown from non-strict mode to strict modeWhen you apply 'use strict'; syntax, some of the below cases will throw a SyntaxError before executing the scriptWhen you use Octal syntaxvar n = 022;Using with statementWhen you use delete operator on a variable nameUsing eval or arguments as variable or function argument nameWhen you use newly reserved keywordsWhen you declare a function in a blockif (someCondition) {  function f() {}}Hence, the errors from above cases are helpful to avoid errors in development/production environments.⬆ Back to TopDo all objects have prototypesNo. All objects have prototypes except for the base object which is created by the user, or an object that is created using the new keyword.⬆ Back to TopWhat is the difference between a parameter and an argumentParameter is the variable name of a function definition whereas an argument represents the value given to a function when it is invoked. Let's explain this with a simple functionfunction myFunction(parameter1, parameter2, parameter3) {  console.log(arguments[0]); // \""argument1\""  console.log(arguments[1]); // \""argument2\""  console.log(arguments[2]); // \""argument3\""}myFunction(\""argument1\"", \""argument2\"", \""argument3\"");⬆ Back to TopWhat is the purpose of some method in arraysThe some() method is used to test whether at least one element in the array passes the test implemented by the provided function. The method returns a boolean value. Let's take an example to test for any odd elements,var array = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];var odd = (element) => element % 2 !== 0;console.log(array.some(odd)); // true (the odd element exists)⬆ Back to TopHow do you combine two or more arraysThe concat() method is used to join two or more arrays by returning a new array containing all the elements. The syntax would be as below,array1.concat(array2, array3, ..., arrayX)Let's take an example of array's concatenation with veggies and fruits arrays,var veggies = [\""Tomato\"", \""Carrot\"", \""Cabbage\""];var fruits = [\""Apple\"", \""Orange\"", \""Pears\""];var veggiesAndFruits = veggies.concat(fruits);console.log(veggiesAndFruits); // Tomato, Carrot, Cabbage, Apple, Orange, Pears⬆ Back to TopWhat is the difference between Shallow and Deep copyThere are two ways to copy an object,Shallow Copy:Shallow copy is a bitwise copy of an object. A new object is created that has an exact copy of the values in the original object. If any of the fields of the object are references to other objects, just the reference addresses are copied i.e., only the memory address is copied.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};to create a duplicatevar empDetailsShallowCopy = empDetails; //Shallow copying!if we change some property value in the duplicate one like this:empDetailsShallowCopy.name = \""Johnson\"";The above statement will also change the name of empDetails, since we have a shallow copy. That means we're losing the original data as well.Deep copy:A deep copy copies all fields, and makes copies of dynamically allocated memory pointed to by the fields. A deep copy occurs when an object is copied along with the objects to which it refers.Examplevar empDetails = {  name: \""John\"",  age: 25,  expertise: \""Software Developer\"",};Create a deep copy by using the properties from the original object into new variablevar empDetailsDeepCopy = {  name: empDetails.name,  age: empDetails.age,  expertise: empDetails.expertise,};Now if you change empDetailsDeepCopy.name, it will only affect empDetailsDeepCopy & not empDetails⬆ Back to TopHow do you create specific number of copies of a stringThe repeat() method is used to construct and return a new string which contains the specified number of copies of the string on which it was called, concatenated together. Remember that this method has been added to the ECMAScript 2015 specification.Let's take an example of Hello string to repeat it 4 times,\""Hello\"".repeat(4); // 'HelloHelloHelloHello'How do you return all matching strings against a regular expressionThe matchAll() method can be used to return an iterator of all results matching a string against a regular expression. For example, the below example returns an array of matching string results against a regular expression,let regexp = /Hello(\\d?))/g;let greeting = \""Hello1Hello2Hello3\"";let greetingList = [...greeting.matchAll(regexp)];console.log(greetingList[0]); //Hello1console.log(greetingList[1]); //Hello2console.log(greetingList[2]); //Hello3⬆ Back to TopHow do you trim a string at the beginning or endingThe trim method of string prototype is used to trim on both sides of a string. But if you want to trim especially at the beginning or ending of the string then you can use trimStart/trimLeft and trimEnd/trimRight methods. Let's see an example of these methods on a greeting message,var greeting = \""   Hello, Goodmorning!   \"";console.log(greeting); // \""   Hello, Goodmorning!   \""console.log(greeting.trimStart()); // \""Hello, Goodmorning!   \""console.log(greeting.trimLeft()); // \""Hello, Goodmorning!   \""console.log(greeting.trimEnd()); // \""   Hello, Goodmorning!\""console.log(greeting.trimRight()); // \""   Hello, Goodmorning!\""⬆ Back to TopWhat is the output of below console statement with unary operatorLet's take console statement with unary operator as given below,console.log(+\""Hello\"");The output of the above console log statement returns NaN. Because the element is prefixed by the unary operator and the JavaScript interpreter will try to convert that element into a number type. Since the conversion fails, the value of the statement results in NaN value.⬆ Back to TopDoes javascript uses mixinsMixin is a generic object-oriented programming term - is a class containing methods that can be used by other classes without a need to inherit from it. In JavaScript we can only inherit from a single object. ie. There can be only one [[prototype]] for an object.But sometimes we require to extend more than one, to overcome this we can use Mixin which helps to copy methods to the prototype of another class.Say for instance, we've two classes User and CleanRoom. Suppose we need to add CleanRoom functionality to User, so that user can clean the room at demand. Here's where concept called mixins comes into picture.// mixinlet cleanRoomMixin = {  cleanRoom() {    alert(`Hello ${this.name}, your room is clean now`);  },  sayBye() {    alert(`Bye ${this.name}`);  },};// usage:class User {  constructor(name) {    this.name = name;  }}// copy the methodsObject.assign(User.prototype, cleanRoomMixin);// now User can clean the roomnew User(\""Dude\"").cleanRoom(); // Hello Dude, your room is clean now!⬆ Back to TopWhat is a thunk functionA thunk is just a function which delays the evaluation of the value. It doesn’t take any arguments but gives the value whenever you invoke the thunk. i.e, It is used not to execute now but it will be sometime in the future. Let's take a synchronous example,const add = (x, y) => x + y;const thunk = () => add(2, 3);thunk(); // 5⬆ Back to TopWhat are asynchronous thunksThe asynchronous thunks are useful to make network requests. Let's see an example of network requests,function fetchData(fn) {  fetch(\""https://jsonplaceholder.typicode.com/todos/1\"")    .then((response) => response.json())    .then((json) => fn(json));}const asyncThunk = function () {  return fetchData(function getData(data) {    console.log(data);  });};asyncThunk();The getData function won't be called immediately but it will be invoked only when the data is available from API endpoint. The setTimeout function is also used to make our code asynchronous. The best real time example is redux state management library which uses the asynchronous thunks to delay the actions to dispatch.⬆ Back to TopWhat is the output of below function callsCode snippet:const circle = {  radius: 20,  diameter() {    return this.radius * 2;  },  perimeter: () => 2 * Math.PI * this.radius,};console.log(circle.diameter());console.log(circle.perimeter());Output:The output is 40 and NaN. Remember that diameter is a regular function, whereas the value of perimeter is an arrow function. The this keyword of a regular function(i.e, diameter) refers to the surrounding scope which is a class(i.e, Shape object). Whereas this keyword of perimeter function refers to the surrounding scope which is a window object. Since there is no radius property on window objects it returns an undefined value and the multiple of number value returns NaN value.⬆ Back to TopHow to remove all line breaks from a stringThe easiest approach is using regular expressions to detect and replace newlines in the string. In this case, we use replace function along with string to replace with, which in our case is an empty string.function remove_linebreaks( var message ) {    return message.replace( /[\\r\]+/gm, \""\"" );}In the above expression, g and m are for global and multiline flags.⬆ Back to TopWhat is the difference between reflow and repaintA repaint occurs when changes are made which affect the visibility of an element, but not its layout. Examples of this include outline, visibility, or background color. A reflow involves changes that affect the layout of a portion of the page (or the whole page). Resizing the browser window, changing the font, content changing (such as user typing text), using JavaScript methods involving computed styles, adding or removing elements from the DOM, and changing an element's classes are a few of the things that can trigger reflow. Reflow of an element causes the subsequent reflow of all child and ancestor elements as well as any elements following it in the DOM.⬆ Back to TopWhat happens with negating an arrayNegating an array with ! character will coerce the array into a boolean. Since Arrays are considered to be truthy So negating it will return false.console.log(![]); // false⬆ Back to TopWhat happens if we add two arraysIf you add two arrays together, it will convert them both to strings and concatenate them. For example, the result of adding arrays would be as below,console.log([\""a\""] + [\""b\""]); // \""ab\""console.log([] + []); // \""\""console.log(![] + []); // \""false\"", because ![] returns false.⬆ Back to TopWhat is the output of prepend additive operator on falsy valuesIf you prepend the additive(+) operator on falsy values(null, undefined, NaN, false, \""\""), the falsy value converts to a number value zero. Let's display them on browser console as below,console.log(+null); // 0console.log(+undefined); // NaNconsole.log(+false); // 0console.log(+NaN); // NaNconsole.log(+\""\""); // 0⬆ Back to TopHow do you create self string using special charactersThe self string can be formed with the combination of []()!+ characters. You need to remember the below conventions to achieve this pattern.Since Arrays are truthful values, negating the arrays will produce false: ![] === falseAs per JavaScript coercion rules, the addition of arrays together will toString them: [] + [] === \""\""Prepend an array with + operator will convert an array to false, the negation will make it true and finally converting the result will produce value '1': +(!(+[])) === 1By applying the above rules, we can derive below conditions(![] + [] === \""false\"" + !+[]) === 1;Now the character pattern would be created as below,      s               e               l               f ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^ (![] + [])[3] + (![] + [])[4] + (![] + [])[2] + (![] + [])[0] ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^   ^^^^^^^^^^^^^(![] + [])[+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]+!+[]+!+[]] +(![] + [])[+!+[]+!+[]] +(![] + [])[+[]]^^^^^^^^^^^^^^^^^^^^^^^^^^^^^(![]+[])[+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]+!+[]+!+[]]+(![]+[])[+!+[]+!+[]]+(![]+[])[+[]]⬆ Back to TopHow do you remove falsy values from an arrayYou can apply the filter method on the array by passing Boolean as a parameter. This way it removes all falsy values(0, undefined, null, false and \""\"") from the array.const myArray = [false, null, 1, 5, undefined];myArray.filter(Boolean); // [1, 5] // is same as myArray.filter(x => x);⬆ Back to TopHow do you get unique values of an arrayYou can get unique values of an array with the combination of Set and rest expression/spread(...) syntax.console.log([...new Set([1, 2, 4, 4, 3])]); // [1, 2, 4, 3]⬆ Back to TopWhat is destructuring aliasesSometimes you would like to have a destructured variable with a different name than the property name. In that case, you'll use a : newName to specify a name for the variable. This process is called destructuring aliases.const obj = { x: 1 };// Grabs obj.x as as { otherName }const { x: otherName } = obj;⬆ Back to TopHow do you map the array values without using map methodYou can map the array values without using the map method by just using the from method of Array. Let's map city names from Countries array,const countries = [  { name: \""India\"", capital: \""Delhi\"" },  { name: \""US\"", capital: \""Washington\"" },  { name: \""Russia\"", capital: \""Moscow\"" },  { name: \""Singapore\"", capital: \""Singapore\"" },  { name: \""China\"", capital: \""Beijing\"" },  { name: \""France\"", capital: \""Paris\"" },];const cityNames = Array.from(countries, ({ capital }) => capital);console.log(cityNames); // ['Delhi, 'Washington', 'Moscow', 'Singapore', 'Beijing', 'Paris']⬆ Back to TopHow do you empty an arrayYou can empty an array quickly by setting the array length to zero.let cities = [\""Singapore\"", \""Delhi\"", \""London\""];cities.length = 0; // cities becomes []⬆ Back to TopHow do you rounding numbers to certain decimalsYou can round numbers to a certain number of decimals using toFixed method from native javascript.let pie = 3.141592653;pie = pie.toFixed(3); // 3.142⬆ Back to TopWhat is the easiest way to convert an array to an objectYou can convert an array to an object with the same data using spread(...) operator.var fruits = [\""banana\"", \""apple\"", \""orange\"", \""watermelon\""];var fruitsObject = { ...fruits };console.log(fruitsObject); // {0: \""banana\"", 1: \""apple\"", 2: \""orange\"", 3: \""watermelon\""}⬆ Back to TopHow do you create an array with some dataYou can create an array with some data or an array with the same values using fill method.var newArray = new Array(5).fill(\""0\"");console.log(newArray); // [\""0\"", \""0\"", \""0\"", \""0\"", \""0\""]⬆ Back to TopWhat are the placeholders from console objectBelow are the list of placeholders available from console object,%o — It takes an object,%s — It takes a string,%d — It is used for a decimal or integerThese placeholders can be represented in the console.log as belowconst user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.log(  \""Hello %s, your details %o are available in the object form\"",  \""John\"",  user); // Hello John, your details {name: \""John\"", id: 1, city: \""Delhi\""} are available in object⬆ Back to TopIs it possible to add CSS to console messagesYes, you can apply CSS styles to console messages similar to html text on the web page.console.log(  \""%c The text has blue color, with large font and red background\"",  \""color: blue; font-size: x-large; background: red\"");The text will be displayed as below,Note: All CSS styles can be applied to console messages.⬆ Back to TopWhat is the purpose of dir method of console objectThe console.dir() is used to display an interactive list of the properties of the specified JavaScript object as JSON.const user = { name: \""John\"", id: 1, city: \""Delhi\"" };console.dir(user);The user object displayed in JSON representation⬆ Back to TopIs it possible to debug HTML elements in consoleYes, it is possible to get and debug HTML elements in the console just like inspecting elements.const element = document.getElementsByTagName(\""body\"")[0];console.log(element);It prints the HTML element in the console,⬆ Back to TopHow do you display data in a tabular format using console objectThe console.table() is used to display data in the console in a tabular format to visualize complex arrays or objects.const users = [  { name: \""John\"", id: 1, city: \""Delhi\"" },  { name: \""Max\"", id: 2, city: \""London\"" },  { name: \""Rod\"", id: 3, city: \""Paris\"" },];console.table(users);The data visualized in a table format,Not: Remember that console.table() is not supported in IE.⬆ Back to TopHow do you verify that an argument is a Number or notThe combination of IsNaN and isFinite methods are used to confirm whether an argument is a number or not.function isNumber(n) {  return !isNaN(parseFloat(n)) && isFinite(n);}⬆ Back to TopHow do you create copy to clipboard buttonYou need to select the content(using .select() method) of the input element and execute the copy command with execCommand (i.e, execCommand('copy')). You can also execute other system commands like cut and paste.document.querySelector(\""#copy-button\"").onclick = function () {  // Select the content  document.querySelector(\""#copy-input\"").select();  // Copy to the clipboard  document.execCommand(\""copy\"");};⬆ Back to TopWhat is the shortcut to get timestampYou can use new Date().getTime() to get the current timestamp. There is an alternative shortcut to get the value.console.log(+new Date());console.log(Date.now());⬆ Back to TopHow do you flattening multi dimensional arraysFlattening bi-dimensional arrays is trivial with Spread operator.const biDimensionalArr = [11, [22, 33], [44, 55], [66, 77], 88, 99];const flattenArr = [].concat(...biDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]But you can make it work with multi-dimensional arrays by recursive calls,function flattenMultiArray(arr) {  const flattened = [].concat(...arr);  return flattened.some((item) => Array.isArray(item))    ? flattenMultiArray(flattened)    : flattened;}const multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const flatArr = flattenMultiArray(multiDimensionalArr); // [11, 22, 33, 44, 55, 66, 77, 88, 99]Also you can use the flat method of Array.const arr = [1, [2,3], 4, 5, [6,7]];const fllattenArr = arr.flat(); // [1, 2, 3, 4, 5, 6, 7]// And for multiDemensional arraysconst multiDimensionalArr = [11, [22, 33], [44, [55, 66, [77, [88]], 99]]];const oneStepFlat = multiDimensionalArr.flat(1); // [11, 22, 33, 44, [55, 66, [77, [88]], 99]]const towStep = multiDimensionalArr.flat(2); // [11, 22, 33, 44, 55, 66, [77, [88]], 99]const fullyFlatArray = multiDimensionalArr.flat(Infinity); // [11, 22, 33, 44, 55, 66, 77, 88, 99]⬆ Back to TopWhat is the easiest multi condition checkingYou can use indexOf to compare input with multiple values instead of checking each value as one condition.// Verbose approachif (  input === \""first\"" ||  input === 1 ||  input === \""second\"" ||  input === 2) {  someFunction();}// Shortcutif ([\""first\"", 1, \""second\"", 2].indexOf(input) !== -1) {  someFunction();}⬆ Back to TopHow do you capture browser back buttonThe window.onbeforeunload method is used to capture browser back button events. This is helpful to warn users about losing the current data.window.onbeforeunload = function () {  alert(\""You work will be lost\"");};⬆ Back to TopHow do you disable right click in the web pageThe right click on the page can be disabled by returning false from the oncontextmenu attribute on the body element.<body oncontextmenu=\""return false;\""></body>⬆ Back to TopWhat are wrapper objectsPrimitive Values like string,number and boolean don't have properties and methods but they are temporarily converted or coerced to an object(Wrapper object) when you try to perform actions on them. For example, if you apply toUpperCase() method on a primitive string value, it does not throw an error but returns uppercase of the string.let name = \""john\"";console.log(name.toUpperCase()); // Behind the scenes treated as console.log(new String(name).toUpperCase());i.e, Every primitive except null and undefined have Wrapper Objects and the list of wrapper objects are String,Number,Boolean,Symbol and BigInt.⬆ Back to TopWhat is AJAXAJAX stands for Asynchronous JavaScript and XML and it is a group of related technologies(HTML, CSS, JavaScript, XMLHttpRequest API etc) used to display data asynchronously. i.e. We can send data to the server and get data from the server without reloading the web page.⬆ Back to TopWhat are the different ways to deal with Asynchronous CodeBelow are the list of different ways to deal with Asynchronous code.CallbacksPromisesAsync/awaitThird-party libraries such as async.js,bluebird etc⬆ Back to TopHow to cancel a fetch requestUntil a few days back, One shortcoming of native promises is no direct way to cancel a fetch request. But the new AbortController from js specification allows you to use a signal to abort one or multiple fetch calls.The basic flow of cancelling a fetch request would be as below,Create an AbortController instanceGet the signal property of an instance and pass the signal as a fetch option for signalCall the AbortController's abort property to cancel all fetches that use that signalFor example, let's pass the same signal to multiple fetch calls will cancel all requests with that signal,const controller = new AbortController();const { signal } = controller;fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 1 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });fetch(\""http://localhost:8000\"", { signal })  .then((response) => {    console.log(`Request 2 is complete!`);  })  .catch((e) => {    if (e.name === \""AbortError\"") {      // We know it's been canceled!    }  });// Wait 2 seconds to abort both requestssetTimeout(() => controller.abort(), 2000);⬆ Back to TopWhat is web speech APIWeb speech API is used to enable modern browsers recognize and synthesize speech(i.e, voice data into web apps). This API has been introduced by W3C Community in the year 2012. It has two main parts,SpeechRecognition (Asynchronous Speech Recognition or Speech-to-Text): It provides the ability to recognize voice context from an audio input and respond accordingly. This is accessed by the SpeechRecognition interface.The below example shows on how to use this API to get text from speech,window.SpeechRecognition =  window.webkitSpeechRecognition || window.SpeechRecognition; // webkitSpeechRecognition for Chrome and SpeechRecognition for FFconst recognition = new window.SpeechRecognition();recognition.onresult = (event) => {  // SpeechRecognitionEvent type  const speechToText = event.results[0][0].transcript;  console.log(speechToText);};recognition.start();In this API, browser is going to ask you for permission to use your microphoneSpeechSynthesis (Text-to-Speech): It provides the ability to recognize voice context from an audio input and respond. This is accessed by the SpeechSynthesis interface.For example, the below code is used to get voice/speech from text,if (\""speechSynthesis\"" in window) {  var speech = new SpeechSynthesisUtterance(\""Hello World!\"");  speech.lang = \""en-US\"";  window.speechSynthesis.speak(speech);}The above examples can be tested on chrome(33+) browser's developer console.Note: This API is still a working draft and only available in Chrome and Firefox browsers(ofcourse Chrome only implemented the specification)⬆ Back to TopWhat is minimum timeout throttlingBoth browser and NodeJS javascript environments throttles with a minimum delay that is greater than 0ms. That means even though setting a delay of 0ms will not happen instantaneously.Browsers: They have a minimum delay of 4ms. This throttle occurs when successive calls are triggered due to callback nesting(certain depth) or after a certain number of successive intervals.Note: The older browsers have a minimum delay of 10ms.Nodejs: They have a minimum delay of 1ms. This throttle happens when the delay is larger than 2147483647 or less than 1.The best example to explain this timeout throttling behavior is the order of below code snippet.function runMeFirst() {  console.log(\""My script is initialized\"");}setTimeout(runMeFirst, 0);console.log(\""Script loaded\"");and the output would be inScript loadedMy script is initializedIf you don't use setTimeout, the order of logs will be sequential.function runMeFirst() {  console.log(\""My script is initialized\"");}runMeFirst();console.log(\""Script loaded\"");and the output is,My script is initializedScript loaded⬆ Back to TopHow do you implement zero timeout in modern browsersYou can't use setTimeout(fn, 0) to execute the code immediately due to minimum delay of greater than 0ms. But you can use window.postMessage() to achieve this behavior.⬆ Back to TopWhat are tasks in event loopA task is any javascript code/program which is scheduled to be run by the standard mechanisms such as initially starting to run a program, run an event callback, or an interval or timeout being fired. All these tasks are scheduled on a task queue.Below are the list of use cases to add tasks to the task queue,When a new javascript program is executed directly from console or running by the <script> element, the task will be added to the task queue.When an event fires, the event callback added to task queueWhen a setTimeout or setInterval is reached, the corresponding callback added to task queue⬆ Back to TopWhat is microtaskMicrotask is the javascript code which needs to be executed immediately after the currently executing task/microtask is completed. They are kind of blocking in nature. i.e, The main thread will be blocked until the microtask queue is empty.The main sources of microtasks are Promise.resolve, Promise.reject, MutationObservers, IntersectionObservers etcNote: All of these microtasks are processed in the same turn of the event loop.⬆ Back to TopWhat are different event loopsIn JavaScript, there are multiple event loops that can be used depending on the context of your application. The most common event loops are:1. The Browser Event Loop2. The Node.js Event Loop- Browser Event Loop: The Browser Event Loop is used in client-side JavaScript applications and is responsible for handling events that occur within the browser environment, such as user interactions (clicks, keypresses, etc.), HTTP requests, and other asynchronous actions.- The Node.js Event Loop is used in server-side JavaScript applications and is responsible for handling events that occur within the Node.js runtime environment, such as file I/O, network I/O, and other asynchronous actions. **[⬆ Back to Top](#table-of-contents)**What is the purpose of queueMicrotaskThe queueMicrotask function is used to schedule a microtask, which is a function that will be executed asynchronously in the microtask queue. The purpose of queueMicrotask is to ensure that a function is executed after the current task has finished, but before the browser performs any rendering or handles user events.Example:console.log('Start'); //1queueMicrotask(() => {  console.log('Inside microtask'); // 3});console.log('End'); //2By using queueMicrotask, you can ensure that certain tasks or callbacks are executed at the earliest opportunity during the JavaScript event loop, making it useful for performing work that needs to be done asynchronously but with higher priority than regular setTimeout or setInterval callbacks.⬆ Back to TopHow do you use javascript libraries in typescript fileIt is known that not all JavaScript libraries or frameworks have TypeScript declaration files. But if you still want to use libraries or frameworks in our TypeScript files without getting compilation errors, the only solution is declare keyword along with a variable declaration. For example, let's imagine you have a library called customLibrary that doesn’t have a TypeScript declaration and have a namespace called customLibrary in the global namespace. You can use this library in typescript code as below,declare var customLibrary;In the runtime, typescript will provide the type to the customLibrary variable as any type. The another alternative without using declare keyword is belowvar customLibrary: any;⬆ Back to TopWhat are the differences between promises and observablesSome of the major difference in a tabular formPromisesObservablesEmits only a single value at a timeEmits multiple values over a period of time(stream of values ranging from 0 to multiple)Eager in nature; they are going to be called immediatelyLazy in nature; they require subscription to be invokedPromise is always asynchronous even though it resolved immediatelyObservable can be either synchronous or asynchronousDoesn't provide any operatorsProvides operators such as map, forEach, filter, reduce, retry, and retryWhen etcCannot be canceledCanceled by using unsubscribe() method⬆ Back to TopWhat is heapHeap(Or memory heap) is the memory location where objects are stored when we define variables. i.e, This is the place where all the memory allocations and de-allocation take place. Both heap and call-stack are two containers of JS runtime.Whenever runtime comes across variables and function declarations in the code it stores them in the Heap.⬆ Back to TopWhat is an event tableEvent Table is a data structure that stores and keeps track of all the events which will be executed asynchronously like after some time interval or after the resolution of some API requests. i.e Whenever you call a setTimeout function or invoke async operation, it is added to the Event Table.It doesn't not execute functions on it’s own. The main purpose of the event table is to keep track of events and send them to the Event Queue as shown in the below diagram.⬆ Back to TopWhat is a microTask queueMicrotask Queue is the new queue where all the tasks initiated by promise objects get processed before the callback queue.The microtasks queue are processed before the next rendering and painting jobs. But if these microtasks are running for a long time then it leads to visual degradation.⬆ Back to TopWhat is the difference between shim and polyfillA shim is a library that brings a new API to an older environment, using only the means of that environment. It isn't necessarily restricted to a web application. For example, es5-shim.js is used to emulate ES5 features on older browsers (mainly pre IE9).Whereas polyfill is a piece of code (or plugin) that provides the technology that you, the developer, expect the browser to provide natively.In a simple sentence, A polyfill is a shim for a browser API.⬆ Back to TopHow do you detect primitive or non primitive value typeIn JavaScript, primitive types include boolean, string, number, BigInt, null, Symbol and undefined. Whereas non-primitive types include the Objects. But you can easily identify them with the below function,var myPrimitive = 30;var myNonPrimitive = {};function isPrimitive(val) {  return Object(val) !== val;}isPrimitive(myPrimitive);isPrimitive(myNonPrimitive);If the value is a primitive data type, the Object constructor creates a new wrapper object for the value. But If the value is a non-primitive data type (an object), the Object constructor will give the same object.⬆ Back to TopWhat is babelBabel is a JavaScript transpiler to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Some of the main features are listed below,Transform syntaxPolyfill features that are missing in your target environment (using @babel/polyfill)Source code transformations (or codemods)⬆ Back to TopIs Node.js completely single threadedNode is a single thread, but some of the functions included in the Node.js standard library(e.g, fs module functions) are not single threaded. i.e, Their logic runs outside of the Node.js single thread to improve the speed and performance of a program.⬆ Back to TopWhat are the common use cases of observablesSome of the most common use cases of observables are web sockets with push notifications, user input changes, repeating intervals, etc⬆ Back to TopWhat is RxJSRxJS (Reactive Extensions for JavaScript) is a library for implementing reactive programming using observables that makes it easier to compose asynchronous or callback-based code. It also provides utility functions for creating and working with observables.⬆ Back to TopWhat is the difference between Function constructor and function declarationThe functions which are created with Function constructor do not create closures to their creation contexts but they are always created in the global scope. i.e, the function can access its own local variables and global scope variables only. Whereas function declarations can access outer function variables(closures) too.Let's see this difference with an example,Function Constructor:var a = 100;function createFunction() {  var a = 200;  return new Function(\""return a;\"");}console.log(createFunction()()); // 100Function declaration:var a = 100;function createFunction() {  var a = 200;  return function func() {    return a;  };}console.log(createFunction()()); // 200⬆ Back to TopWhat is a Short circuit conditionShort circuit conditions are meant for condensed way of writing simple if statements. Let's demonstrate the scenario using an example. If you would like to login to a portal with an authentication condition, the expression would be as below,if (authenticate) {  loginToPorta();}Since the javascript logical operators evaluated from left to right, the above expression can be simplified using && logical operatorauthenticate && loginToPorta();⬆ Back to TopWhat is the easiest way to resize an arrayThe length property of an array is useful to resize or empty an array quickly. Let's apply length property on number array to resize the number of elements from 5 to 2,var array = [1, 2, 3, 4, 5];console.log(array.length); // 5array.length = 2;console.log(array.length); // 2console.log(array); // [1,2]and the array can be emptied toovar array = [1, 2, 3, 4, 5];array.length = 0;console.log(array.length); // 0console.log(array); // []⬆ Back to TopWhat is an observableAn Observable is basically a function that can return a stream of values either synchronously or asynchronously to an observer over time. The consumer can get the value by calling subscribe() method.Let's look at a simple example of an Observableimport { Observable } from \""rxjs\"";const observable = new Observable((observer) => {  setTimeout(() => {    observer.next(\""Message from a Observable!\"");  }, 3000);});observable.subscribe((value) => console.log(value));Note: Observables are not part of the JavaScript language yet but they are being proposed to be added to the language⬆ Back to TopWhat is the difference between function and class declarationsThe main difference between function declarations and class declarations is hoisting. The function declarations are hoisted but not class declarations.Classes:const user = new User(); // ReferenceErrorclass User {}Constructor Function:const user = new User(); // No errorfunction User() {}⬆ Back to TopWhat is an async functionAn async function is a function declared with the async keyword which enables asynchronous, promise-based behavior to be written in a cleaner style by avoiding promise chains. These functions can contain zero or more await expressions.Let's take a below async function example,async function logger() {  let data = await fetch(\""http://someapi.com/users\""); // pause until fetch returns  console.log(data);}logger();It is basically syntax sugar over ES2015 promises and generators.⬆ Back to TopHow do you prevent promises swallowing errorsWhile using asynchronous code, JavaScript’s ES6 promises can make your life a lot easier without having callback pyramids and error handling on every second line. But Promises have some pitfalls and the biggest one is swallowing errors by default.Let's say you expect to print an error to the console for all the below cases,Promise.resolve(\""promised value\"").then(function () {  throw new Error(\""error\"");});Promise.reject(\""error value\"").catch(function () {  throw new Error(\""error\"");});new Promise(function (resolve, reject) {  throw new Error(\""error\"");});But there are many modern JavaScript environments that won't print any errors. You can fix this problem in different ways,Add catch block at the end of each chain: You can add catch block to the end of each of your promise chainsPromise.resolve(\""promised value\"")  .then(function () {    throw new Error(\""error\"");  })  .catch(function (error) {    console.error(error.stack);  });But it is quite difficult to type for each promise chain and verbose too.Add done method: You can replace first solution's then and catch blocks with done methodPromise.resolve(\""promised value\"").done(function () {  throw new Error(\""error\"");});Let's say you want to fetch data using HTTP and later perform processing on the resulting data asynchronously. You can write done block as below,getDataFromHttp()  .then(function (result) {    return processDataAsync(result);  })  .done(function (processed) {    displayData(processed);  });In future, if the processing library API changed to synchronous then you can remove done block as below,getDataFromHttp().then(function (result) {  return displayData(processDataAsync(result));});and then you forgot to add done block to then block leads to silent errors.Extend ES6 Promises by Bluebird:Bluebird extends the ES6 Promises API to avoid the issue in the second solution. This library has a “default” onRejection handler which will print all errors from rejected Promises to stderr. After installation, you can process unhandled rejectionsPromise.onPossiblyUnhandledRejection(function (error) {  throw error;});and discard a rejection, just handle it with an empty catchPromise.reject(\""error value\"").catch(function () {});⬆ Back to TopWhat is denoDeno is a simple, modern and secure runtime for JavaScript and TypeScript that uses V8 JavaScript engine and the Rust programming language.⬆ Back to TopHow do you make an object iterable in javascriptBy default, plain objects are not iterable. But you can make the object iterable by defining a Symbol.iterator property on it.Let's demonstrate this with an example,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]() {    const values = Object.keys(this);    let i = 0;    return {      next: () => {        return {          value: this[values[i++]],          done: i > values.length,        };      },    };  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // → {value: 1, done: false}console.log(iterator.next()); // → {value: 2, done: false}console.log(iterator.next()); // → {value: 3, done: false}console.log(iterator.next()); // → {value: undefined, done: true}The above process can be simplified using a generator function,const collection = {  one: 1,  two: 2,  three: 3,  [Symbol.iterator]: function* () {    for (let key in this) {      yield this[key];    }  },};const iterator = collection[Symbol.iterator]();console.log(iterator.next()); // {value: 1, done: false}console.log(iterator.next()); // {value: 2, done: false}console.log(iterator.next()); // {value: 3, done: false}console.log(iterator.next()); // {value: undefined, done: true}⬆ Back to TopWhat is a Proper Tail CallFirst, we should know about tail call before talking about \""Proper Tail Call\"". A tail call is a subroutine or function call performed as the final action of a calling function. Whereas Proper tail call(PTC) is a technique where the program or code will not create additional stack frames for a recursion when the function call is a tail call.For example, the below classic or head recursion of factorial function relies on stack for each step. Each step need to be processed upto n * factorial(n - 1)function factorial(n) {  if (n === 0) {    return 1;  }  return n * factorial(n - 1);}console.log(factorial(5)); //120But if you use Tail recursion functions, they keep passing all the necessary data it needs down the recursion without relying on the stack.function factorial(n, acc = 1) {  if (n === 0) {    return acc;  }  return factorial(n - 1, n * acc);}console.log(factorial(5)); //120The above pattern returns the same output as the first one. But the accumulator keeps track of total as an argument without using stack memory on recursive calls.⬆ Back to TopHow do you check an object is a promise or notIf you don't know if a value is a promise or not, wrapping the value as Promise.resolve(value) which returns a promisefunction isPromise(object) {  if (Promise && Promise.resolve) {    return Promise.resolve(object) == object;  } else {    throw \""Promise not supported in your environment\"";  }}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // trueAnother way is to check for .then() handler typefunction isPromise(value) {  return Boolean(value && typeof value.then === \""function\"");}var i = 1;var promise = new Promise(function (resolve, reject) {  resolve();});console.log(isPromise(i)); // falseconsole.log(isPromise(promise)); // true⬆ Back to TopHow to detect if a function is called as constructorYou can use new.target pseudo-property to detect whether a function was called as a constructor(using the new operator) or as a regular function call.If a constructor or function invoked using the new operator, new.target returns a reference to the constructor or function.For function calls, new.target is undefined.function Myfunc() {   if (new.target) {      console.log('called with new');   } else {      console.log('not called with new');   }}new Myfunc(); // called with newMyfunc(); // not called with newMyfunc.call({}); // not called with new⬆ Back to TopWhat are the differences between arguments object and rest parameterThere are three main differences between arguments object and rest parametersThe arguments object is an array-like but not an array. Whereas the rest parameters are array instances.The arguments object does not support methods such as sort, map, forEach, or pop. Whereas these methods can be used in rest parameters.The rest parameters are only the ones that haven’t been given a separate name, while the arguments object contains all arguments passed to the function⬆ Back to TopWhat are the differences between spread operator and rest parameterRest parameter collects all remaining elements into an array. Whereas Spread operator allows iterables( arrays / objects / strings ) to be expanded into single arguments/elements. i.e, Rest parameter is opposite to the spread operator.⬆ Back to TopWhat are the different kinds of generatorsThere are five kinds of generators,Generator function declaration:function* myGenFunc() {  yield 1;  yield 2;  yield 3;}const genObj = myGenFunc();Generator function expressions:const myGenFunc = function* () {  yield 1;  yield 2;  yield 3;};const genObj = myGenFunc();Generator method definitions in object literals:const myObj = {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  },};const genObj = myObj.myGeneratorMethod();Generator method definitions in class:class MyClass {  *myGeneratorMethod() {    yield 1;    yield 2;    yield 3;  }}const myObject = new MyClass();const genObj = myObject.myGeneratorMethod();Generator as a computed property:const SomeObj = {  *[Symbol.iterator]() {    yield 1;    yield 2;    yield 3;  },};console.log(Array.from(SomeObj)); // [ 1, 2, 3 ]⬆ Back to TopWhat are the built-in iterablesBelow are the list of built-in iterables in javascript,Arrays and TypedArraysStrings: Iterate over each character or Unicode code-pointsMaps: iterate over its key-value pairsSets: iterates over their elementsarguments: An array-like special variable in functionsDOM collection such as NodeList⬆ Back to TopWhat are the differences between for...of and for...in statementsBoth for...in and for...of statements iterate over js data structures. The only difference is over what they iterate:for..in iterates over all enumerable property keys of an objectfor..of iterates over the values of an iterable object.Let's explain this difference with an example,let arr = [\""a\"", \""b\"", \""c\""];arr.newProp = \""newVlue\"";// key are the property keysfor (let key in arr) {  console.log(key); // 0, 1, 2 & newValue}// value are the property valuesfor (let value of arr) {  console.log(value); // a, b, c}Since for..in loop iterates over the keys of the object, the first loop logs 0, 1, 2 and newProp while iterating over the array object. The for..of loop iterates over the values of a arr data structure and logs a, b, c in the console.⬆ Back to TopHow do you define instance and non-instance propertiesThe Instance properties must be defined inside of class methods. For example, name and age properties defined inside constructor as below,class Person {  constructor(name, age) {    this.name = name;    this.age = age;  }}But Static(class) and prototype data properties must be defined outside of the ClassBody declaration. Let's assign the age value for Person class as below,Person.staticAge = 30;Person.prototype.prototypeAge = 40;⬆ Back to TopWhat is the difference between isNaN and Number.isNaN?isNaN: The global function isNaN converts the argument to a Number and returns true if the resulting value is NaN.Number.isNaN: This method does not convert the argument. But it returns true when the type is a Number and value is NaN.Let's see the difference with an example,isNaN(‘hello’);   // trueNumber.isNaN('hello'); // false⬆ Back to TopHow to invoke an IIFE without any extra brackets?Immediately Invoked Function Expressions(IIFE) requires a pair of parenthesis to wrap the function which contains set of statements.(function (dt) {  console.log(dt.toLocaleTimeString());})(new Date());Since both IIFE and void operator discard the result of an expression, you can avoid the extra brackets using void operator for IIFE as below,void function (dt) {  console.log(dt.toLocaleTimeString());}(new Date());⬆ Back to TopIs that possible to use expressions in switch cases?You might have seen expressions used in switch condition but it is also possible to use for switch cases by assigning true value for the switch condition. Let's see the weather condition based on temparature as an example,const weather = (function getWeather(temp) {  switch (true) {    case temp < 0:      return \""freezing\"";    case temp < 10:      return \""cold\"";    case temp < 24:      return \""cool\"";    default:      return \""unknown\"";  }})(10);⬆ Back to TopWhat is the easiest way to ignore promise errors?The easiest and safest way to ignore promise errors is void that error. This approach is ESLint friendly too.await promise.catch((e) => void e);⬆ Back to TopHow do style the console output using CSS?You can add CSS styling to the console output using the CSS format content specifier %c. The console string message can be appended after the specifier and CSS style in another argument. Let's print the red the color text using console.log and CSS specifier as below,console.log(\""%cThis is a red text\"", \""color:red\"");It is also possible to add more styles for the content. For example, the font-size can be modified for the above textconsole.log(  \""%cThis is a red text with bigger font\"",  \""color:red; font-size:20px\"");⬆ Back to TopWhat is nullish coalescing operator (??)?It is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. This can be contrasted with the logical OR (||) operator, which returns the right-hand side operand if the left operand is any falsy value, not only null or undefined.console.log(null ?? true); // trueconsole.log(false ?? true); // falseconsole.log(undefined ?? true); // true⬆ Back to TopHow do you group and nest console output?The console.group() can be used to group related log messages to be able to easily read the logs and use console.groupEnd()to close the group. Along with this, you can also nest groups which allows to output message in hierarchical manner.For example, if you’re logging a user’s details:console.group(\""User Details\"");console.log(\""name: Sudheer Jonna\"");console.log(\""job: Software Developer\"");// Nested Groupconsole.group(\""Address\"");console.log(\""Street: Commonwealth\"");console.log(\""City: Los Angeles\"");console.log(\""State: California\"");// Close nested groupconsole.groupEnd();// Close outer groupconsole.groupEnd()You can also use console.groupCollapsed() instead of console.group() if you want the groups to be collapsed by default.⬆ Back to TopWhat is the difference between dense and sparse arrays?An array contains items at each index starting from first(0) to last(array.length - 1) is called as Dense array. Whereas if at least one item is missing at any index, the array is called as sparse.Let's see the below two kind of arrays,const avengers = [\""Ironman\"", \""Hulk\"", \""CaptainAmerica\""];console.log(avengers[0]); // 'Ironman'console.log(avengers[1]); // 'Hulk'console.log(avengers[2]); // 'CaptainAmerica'console.log(avengers.length); // 3const justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague[0]); // 'Superman'console.log(justiceLeague[1]); // 'Aquaman'console.log(justiceLeague[2]); // undefinedconsole.log(justiceLeague[3]); // 'Batman'console.log(justiceLeague.length); // 4⬆ Back to TopWhat are the different ways to create sparse arrays?There are 4 different ways to create sparse arrays in JavaScriptArray literal: Omit a value when using the array literalconst justiceLeague = [\""Superman\"", \""Aquaman\"", , \""Batman\""];console.log(justiceLeague); // ['Superman', 'Aquaman', empty ,'Batman']Array() constructor: Invoking Array(length) or new Array(length)const array = Array(3);console.log(array); // [empty, empty ,empty]Delete operator: Using delete array[index] operator on the arrayconst justiceLeague = [\""Superman\"", \""Aquaman\"", \""Batman\""];delete justiceLeague[1];console.log(justiceLeague); // ['Superman', empty, ,'Batman']Increase length property: Increasing length property of an arrayconst justiceLeague = ['Superman', 'Aquaman', 'Batman'];justiceLeague.length = 5;console.log(justiceLeague); // ['Superman', 'Aquaman', 'Batman', empty, empty]⬆ Back to TopWhat is the difference between setTimeout, setImmediate and process.nextTick?Set Timeout: setTimeout() is to schedule execution of a one-time callback after delay milliseconds.Set Immediate: The setImmediate function is used to execute a function right after the current event loop finishes.Process NextTick: If process.nextTick() is called in a given phase, all the callbacks passed to process.nextTick() will be resolved before the event loop continues. This will block the event loop and create I/O Starvation if process.nextTick() is called recursively.⬆ Back to TopHow do you reverse an array without modifying original array?The reverse() method reverses the order of the elements in an array but it mutates the original array. Let's take a simple example to demonistrate this case,const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reverse();console.log(newArray); // [ 5, 4, 3, 2, 1]console.log(originalArray); // [ 5, 4, 3, 2, 1]There are few solutions that won't mutate the original array. Let's take a look.Using slice and reverse methods:In this case, just invoke the slice() method on the array to create a shallow copy followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.slice().reverse(); //Slice an array gives a new copyconsole.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using spread and reverse methods:In this case, let's use the spread syntax (...) to create a copy of the array followed by reverse() method call on the copy.const originalArray = [1, 2, 3, 4, 5];const newArray = [...originalArray].reverse();console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduce and spread methods:Here execute a reducer function on an array elements and append the accumulated array on right side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduce((accumulator, value) => {  return [value, ...accumulator];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and spread methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and append the accumulated array on left side using spread syntaxconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  return [...accumulator, value];}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]Using reduceRight and push methods:Here execute a right reducer function(i.e. opposite direction of reduce method) on an array elements and push the iterated value to the accumulatorconst originalArray = [1, 2, 3, 4, 5];const newArray = originalArray.reduceRight((accumulator, value) => {  accumulator.push(value);  return accumulator;}, []);console.log(originalArray); // [1, 2, 3, 4, 5]console.log(newArray); // [ 5, 4, 3, 2, 1]⬆ Back to TopHow do you create custom HTML element?The creation of custom HTML elements involves two main steps,Define your custom HTML element: First you need to define some custom class by extending HTMLElement class.After that define your component properties (styles,text etc) using connectedCallback method.Note: The browser exposes a function called customElements.define inorder to reuse the element.class CustomElement extends HTMLElement {  connectedCallback() {    this.innerHTML = \""This is a custom element\"";  }}customElements.define(\""custom-element\"", CustomElement);Use custome element just like other HTML element: Declare your custom element as a HTML tag.   <body>        <custom-element>   </body>⬆ Back to TopWhat is global execution context?The global execution context is the default or first execution context that is created by the JavaScript engine before any code is executed(i.e, when the file first loads in the browser). All the global code that is not inside a function or object will be executed inside this global execution context. Since JS engine is single threaded there will be only one global environment and there will be only one global execution context.For example, the below code other than code inside any function or object is executed inside the global execution context.var x = 10;function A() {  console.log(\""Start function A\"");  function B() {    console.log(\""In function B\"");  }  B();}A();console.log(\""GlobalContext\"");⬆ Back to TopWhat is function execution context?Whenever a function is invoked, the JavaScript engine creates a different type of Execution Context known as a Function Execution Context (FEC) within the Global Execution Context (GEC) to evaluate and execute the code within that function.⬆ Back to TopWhat is debouncing?Debouncing is a programming pattern that allows delaying execution of some piece of code until a specified time to avoid unnecessary CPU cycles, API calls and improve performance. The debounce function make sure that your code is only triggered once per user input. The common usecases are Search box suggestions, text-field auto-saves, and eliminating double-button clicks.Let's say you want to show suggestions for a search query, but only after a visitor has finished typing it. So here you write a debounce function where the user keeps writing the characters with in 500ms then previous timer cleared out using clearTimeout and reschedule API call/DB query for a new time—300 ms in the future.function debounce(func, timeout = 500) {  let timer;  return (...args) => {    clearTimeout(timer);    timer = setTimeout(() => {      func.apply(this, args);    }, timeout);  };}function fetchResults() {  console.log(\""Fetching input suggestions\"");}const processChange = debounce(() => fetchResults());The debounce() function can be used on input, button and window eventsInput:<input type=\""text\"" onkeyup=\""processChange()\"" />Button:<button onclick=\""processChange()\"">Click me</button>Windows event:window.addEventListener(\""scroll\"", processChange);⬆ Back to TopWhat is throttling?Throttling is a technique used to limit the execution of an event handler function, even when this event triggers continuously due to user actions. The common use cases are browser resizing, window scrolling etc.The below example creates a throttle function to reduce the number of events for each pixel change and trigger scroll event for each 100ms except for the first event.const throttle = (func, limit) => {  let inThrottle;  return (...args) => {    if (!inThrottle) {      func.apply(this, args);      inThrottle = true;      setTimeout(() => (inThrottle = false), limit);    }  };};window.addEventListener(\""scroll\"", () => {  throttle(handleScrollAnimation, 100);});⬆ Back to TopWhat is optional chaining?According to MDN official docs, the optional chaining operator (?.) permits reading the value of a property located deep within a chain of connected objects without having to expressly validate that each reference in the chain is valid.The ?. operator is like the . chaining operator, except that instead of causing an error if a reference is nullish (null or undefined), the expression short-circuits with a return value of undefined. When used with function calls, it returns undefined if the given function does not exist. const adventurer = {   name: 'Alice',   cat: {     name: 'Dinah'   } }; const dogName = adventurer.dog?.name; console.log(dogName); // expected output: undefined console.log(adventurer.someNonExistentMethod?.()); // expected output: undefined⬆ Back to TopWhat is an environment record?According to ECMAScript specification 262 (9.1):Environment Record is a specification type used to define the association of Identifiers to specific variables and functions, based upon the lexical nesting structure of ECMAScript code.Usually an Environment Record is associated with some specific syntactic structure of ECMAScript code such as a FunctionDeclaration, a BlockStatement, or a Catch clause of a TryStatement.Each time such code is evaluated, a new Environment Record is created to record the identifier bindings that are created by that code.⬆ Back to TopHow to verify if a variable is an array?It is possible to check if a variable is an array instance using 3 different ways,Array.isArray() method:The Array.isArray(value) utility function is used to determine whether value is an array or not. This function returns a true boolean value if the variable is an array and a false value if it is not.const numbers = [1, 2, 3];const user = { name: 'John' };Array.isArray(numbers);  // trueArray.isArray(user); //falseinstanceof operator:The instanceof operator is used to check the type of an array at run time. It returns true if the type of a variable is an Array other false for other type.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers instanceof Array);  // trueconsole.log(user instanceof Array);  // falseChecking constructor type:The constructor property of the variable is used to determine whether the variable Array type or not.const numbers = [1, 2, 3];const user = { name: 'John' };console.log(numbers.constructor === Array);  // trueconsole.log(user.constructor === Array);  // false⬆ Back to TopWhat is pass by value and pass by reference?Pass-by-value creates a new space in memory and makes a copy of a value. Primitives such as string, number, boolean etc will actually create a new copy. Hence, updating one value doesn't impact the other value. i.e, The values are independent of each other.let a = 5;let b = a;b++;console.log(a, b); //5, 6In the above code snippet, the value of a is assigned to b and the variable b has been incremented. Since there is a new space created for variable b, any update on this variable doesn't impact the variable a.Pass by reference doesn't create a new space in memory but the new variable adopts a memory address of an initial variable. Non-primitives such as objects, arrays and functions gets the reference of the initiable variable. i.e, updating one value will impact the other variable.let user1 = {   name: 'John',   age: 27};let user2 = user1;user2.age = 30;console.log(user1.age, user2.age); // 30, 30In the above code snippet, updating the age property of one object will impact the other property due to the same reference.⬆ Back to TopWhat are the differences between primitives and non-primitives?JavaScript language has both primitives and non-primitives but there are few differences between them as below,PrimitivesNon-primitivesThese types are predefinedCreated by developerThese are immutableMutableCompare by valueCompare by referenceStored in StackStored in heapContain certain valueCan contain NULL too⬆ Back to TopHow do you create your own bind method using either call or apply method?The custom bind function needs to be created on Function prototype inorder to use it as other builtin functions. This custom function should return a function similar to original bind method and the implementation of inner function needs to use apply method call.The function which is going to bind using custom myOwnBind method act as the attached function(boundTargetFunction) and argument as the object for apply method call. Function.prototype.myOwnBind = function(whoIsCallingMe) {   if (typeof this !== \""function\"") {     throw new Error(this + \""cannot be bound as it's not callable\"");   }   const boundTargetFunction = this;   return function() {     boundTargetFunction.apply(whoIsCallingMe, arguments);   } }⬆ Back to TopWhat are the differences between pure and impure functions?Some of the major differences between pure and impure function are as below,Pure functionImpure functionIt has no side effectsIt causes side effectsIt is always return the same resultIt returns different result on each callEasy to read and debugDifficult to read and debug because they are affected by extenal code⬆ Back to TopWhat is referential transparency?An expression in javascript that can be replaced by its value without affecting the behaviour of the program is called referential transparency. Pure functions are referentially transparent.const add = (x,y) => x + y;const multiplyBy2 = (x) => x * 2;//Now add (2, 3) can be replaced by 5.multiplyBy2(add(2, 3)); ⬆ Back to TopWhat are the possible side-effects in javascript?A side effect is the modification of state through the invocation of a function or expression. These side effects makes our function impure by default. Below are some side effects which makes function impure,Making an HTTP request. Asynchronous functions such as fetch and promise are impure.DOM manipulationsMutating the input dataPrinting to a screen or console: For example, console.log() and alert()Fetching the current timeMath.random() calls: Modifies the internal state of Math object⬆ Back to TopWhat are compose and pipe functions?The \""compose\"" and \""pipe\"" are two techniques commonly used in functional programming to simplify complex operations and make code more readable. They are not native to JavaScript and higher-order functions. the compose() applies right to left any number of functions to the output of the previous function.⬆ Back to TopWhat is module pattern?Module pattern is a designed pattern used to wrap a set of variables and functions together in a single scope returned as an object. JavaScript doesn't have access specifiers similar to other languages(Java, Python, etc) to provide private scope. It uses IIFE (Immediately invoked function expression) to allow for private scopes. i.e., a closure that protect variables and methods.The module pattern looks like below, (function() { // Private variables or functions goes here. return {     // Return public variables or functions here. } })();Let's see an example of a module pattern for an employee with private and public access,const createEmployee = (function () {   // Private   const name = \""John\"";   const department = \""Sales\"";   const getEmployeeName = () => name;   const getDepartmentName = () => department;   // Public   return {     name,     department,     getName: () => getEmployeeName(),     getDepartment: () => getDepartmentName(),   }; })(); console.log(createEmployee.name); console.log(createEmployee.department); console.log(createEmployee.getName()); console.log(createEmployee.getDepartment());Note: It mimic the concepts of classes with private variables and methods.⬆ Back to TopWhat is Function Composition?It is an approach where the result of one function is passed on to the next function, which is passed to another until the final function is executed for the final result. //example const double = x => x * 2 const square = x => x * x var output1 = double(2); var output2 = square(output1); console.log(output2); var output_final = square(double(2)); console.log(output_final);⬆ Back to TopHow to use await outside of async function prior to ES2022?Prior to ES2022, if you attempted to use an await outside of an async function resulted in a SyntaxError.await Promise.resolve(console.log('Hello await')); // SyntaxError: await is only valid in async functionBut you can fix this issue with an alternative IIFE (Immediately Invoked Function Expression) to get access to the feature. (async function() {   await Promise.resolve(console.log('Hello await')); // Hello await }());In ES2022, you can write top-level await without writing any hacks.await Promise.resolve(console.log('Hello await')); //Hello await⬆ Back to TopCoding Exercise1. What is the output of below codevar car = new Vehicle(\""Honda\"", \""white\"", \""2010\"", \""UK\"");console.log(car);function Vehicle(model, color, year, country) {  this.model = model;  this.color = color;  this.year = year;  this.country = country;}1: Undefined2: ReferenceError3: null4: {model: \""Honda\"", color: \""white\"", year: \""2010\"", country: \""UK\""}AnswerAnswer: 4The function declarations are hoisted similar to any variables. So the placement for Vehicle function declaration doesn't make any difference.⬆ Back to Top2. What is the output of below codefunction foo() {  let x = (y = 0);  x++;  y++;  return x;}console.log(foo(), typeof x, typeof y);1: 1, undefined and undefined2: ReferenceError: X is not defined3: 1, undefined and number4: 1, number and numberAnswerAnswer: 3Of course the return value of foo() is 1 due to the increment operator. But the statement let x = y = 0 declares a local variable x. Whereas y declared as a global variable accidentally. This statement is equivalent to,let x;window.y = 0;x = window.y;Since the block scoped variable x is undefined outside of the function, the type will be undefined too. Whereas the global variable y is available outside the function, the value is 0 and type is number.⬆ Back to Top3. What is the output of below codefunction main() {  console.log(\""A\"");  setTimeout(function print() {    console.log(\""B\"");  }, 0);  console.log(\""C\"");}main();1: A, B and C2: B, A and C3: A and C4: A, C and BAnswerAnswer: 4The statements order is based on the event loop mechanism. The order of statements follows the below order,At first, the main function is pushed to the stack.Then the browser pushes the first statement of the main function( i.e, A's console.log) to the stack, executing and popping out immediately.But setTimeout statement moved to Browser API to apply the delay for callback.In the meantime, C's console.log added to stack, executed and popped out.The callback of setTimeout moved from Browser API to message queue.The main function popped out from stack because there are no statements to executeThe callback moved from message queue to the stack since the stack is empty.The console.log for B is added to the stack and display on the console.⬆ Back to Top4. What is the output of below equality checkconsole.log(0.1 + 0.2 === 0.3);1: false2: trueAnswerAnswer: 1This is due to the float point math problem. Since the floating point numbers are encoded in binary format, the addition operations on them lead to rounding errors. Hence, the comparison of floating points doesn't give expected results.You can find more details about the explanation here 0.30000000000000004.com/⬆ Back to Top5. What is the output of below codevar y = 1;if (function f() {}) {  y += typeof f;}console.log(y);1: 1function2: 1object3: ReferenceError4: 1undefinedAnswerAnswer: 4The main points in the above code snippets are,You can see function expression instead function declaration inside if statement. So it always returns true.Since it is not declared(or assigned) anywhere, f is undefined and typeof f is undefined too.In other words, it is same asvar y = 1;if (\""foo\"") {  y += typeof f;}console.log(y);Note: It returns 1object for MS Edge browser⬆ Back to Top6. What is the output of below codefunction foo() {  return;  {    message: \""Hello World\"";  }}console.log(foo());1: Hello World2: Object {message: \""Hello World\""}3: Undefined4: SyntaxErrorAnswerAnswer: 3This is a semicolon issue. Normally semicolons are optional in JavaScript. So if there are any statements(in this case, return) missing semicolon, it is automatically inserted immediately. Hence, the function returned as undefined.Whereas if the opening curly brace is along with the return keyword then the function is going to be returned as expected.function foo() {  return {    message: \""Hello World\"",  };}console.log(foo()); // {message: \""Hello World\""}⬆ Back to Top7. What is the output of below codevar myChars = [\""a\"", \""b\"", \""c\"", \""d\""];delete myChars[0];console.log(myChars);console.log(myChars[0]);console.log(myChars.length);1: [empty, 'b', 'c', 'd'], empty, 32: [null, 'b', 'c', 'd'], empty, 33: [empty, 'b', 'c', 'd'], undefined, 44: [null, 'b', 'c', 'd'], undefined, 4AnswerAnswer: 3The delete operator will delete the object property but it will not reindex the array or change its length. So the number or elements or length of the array won't be changed.If you try to print myChars then you can observe that it doesn't set an undefined value, rather the property is removed from the array. The newer versions of Chrome use empty instead of undefined to make the difference a bit clearer.⬆ Back to Top8. What is the output of below code in latest Chromevar array1 = new Array(3);console.log(array1);var array2 = [];array2[2] = 100;console.log(array2);var array3 = [, , ,];console.log(array3);1: [undefined × 3], [undefined × 2, 100], [undefined × 3]2: [empty × 3], [empty × 2, 100], [empty × 3]3: [null × 3], [null × 2, 100], [null × 3]4: [], [100], []AnswerAnswer: 2The latest chrome versions display sparse array(they are filled with holes) using this empty x n notation. Whereas the older versions have undefined x n notation.Note: The latest version of FF displays n empty slots notation.⬆ Back to Top9. What is the output of below codeconst obj = {  prop1: function () {    return 0;  },  prop2() {    return 1;  },  [\""prop\"" + 3]() {    return 2;  },};console.log(obj.prop1());console.log(obj.prop2());console.log(obj.prop3());1: 0, 1, 22: 0, { return 1 }, 23: 0, { return 1 }, { return 2 }4: 0, 1, undefinedAnswerAnswer: 1ES6 provides method definitions and property shorthands for objects. So both prop2 and prop3 are treated as regular function values.⬆ Back to Top10. What is the output of below codeconsole.log(1 < 2 < 3);console.log(3 > 2 > 1);1: true, true2: true, false3: SyntaxError, SyntaxError,4: false, falseAnswerAnswer: 2The important point is that if the statement contains the same operators(e.g, < or >) then it can be evaluated from left to right.The first statement follows the below order,console.log(1 < 2 < 3);console.log(true < 3);console.log(1 < 3); // True converted as 1 during comparisonTrueWhereas the second statement follows the below order,console.log(3 > 2 > 1);console.log(true > 1);console.log(1 > 1); // False converted as 0 during comparisonFalse⬆ Back to Top11. What is the output of below code in non-strict modefunction printNumbers(first, second, first) {  console.log(first, second, first);}printNumbers(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 2In non-strict mode, the regular JavaScript functions allow duplicate named parameters. The above code snippet has duplicate parameters on 1st and 3rd parameters.The value of the first parameter is mapped to the third argument which is passed to the function. Hence, the 3rd argument overrides the first parameter.Note: In strict mode, duplicate parameters will throw a Syntax Error.⬆ Back to Top12. What is the output of below codeconst printNumbersArrow = (first, second, first) => {  console.log(first, second, first);};printNumbersArrow(1, 2, 3);1: 1, 2, 32: 3, 2, 33: SyntaxError: Duplicate parameter name not allowed in this context4: 1, 2, 1AnswerAnswer: 3Unlike regular functions, the arrow functions doesn't not allow duplicate parameters in either strict or non-strict mode. So you can see SyntaxError in the console.⬆ Back to Top13. What is the output of below codeconst arrowFunc = () => arguments.length;console.log(arrowFunc(1, 2, 3));1: ReferenceError: arguments is not defined2: 33: undefined4: nullAnswerAnswer: 1Arrow functions do not have an arguments, super, this, or new.target bindings. So any reference to arguments variable tries to resolve to a binding in a lexically enclosing environment. In this case, the arguments variable is not defined outside of the arrow function. Hence, you will receive a reference error.Where as the normal function provides the number of arguments passed to the functionconst func = function () {  return arguments.length;};console.log(func(1, 2, 3));But If you still want to use an arrow function then rest operator on arguments provides the expected argumentsconst arrowFunc = (...args) => args.length;console.log(arrowFunc(1, 2, 3));⬆ Back to Top14. What is the output of below codeconsole.log(String.prototype.trimLeft.name === \""trimLeft\"");console.log(String.prototype.trimLeft.name === \""trimStart\"");1: True, False2: False, TrueAnswerAnswer: 2In order to be consistent with functions like String.prototype.padStart, the standard method name for trimming the whitespaces is considered as trimStart. Due to web web compatibility reasons, the old method name 'trimLeft' still acts as an alias for 'trimStart'. Hence, the prototype for 'trimLeft' is always 'trimStart'⬆ Back to Top15. What is the output of below codeconsole.log(Math.max());1: undefined2: Infinity3: 04: -InfinityAnswerAnswer: 4-Infinity is the initial comparant because almost every other value is bigger. So when no arguments are provided, -Infinity is going to be returned.Note: Zero number of arguments is a valid case.⬆ Back to Top16. What is the output of below codeconsole.log(10 == [10]);console.log(10 == [[[[[[[10]]]]]]]);1: True, True2: True, False3: False, False4: False, TrueAnswerAnswer: 1As per the comparison algorithm in the ECMAScript specification(ECMA-262), the above expression converted into JS as below10 === Number([10].valueOf().toString()); // 10So it doesn't matter about number brackets([]) around the number, it is always converted to a number in the expression.⬆ Back to Top17. What is the output of below codeconsole.log(10 + \""10\"");console.log(10 - \""10\"");1: 20, 02: 1010, 03: 1010, 10-104: NaN, NaNAnswerAnswer: 2The concatenation operator(+) is applicable for both number and string types. So if any operand is string type then both operands concatenated as strings. Whereas subtract(-) operator tries to convert the operands as number type.⬆ Back to Top18. What is the output of below codeconsole.log([0] == false);if ([0]) {  console.log(\""I'm True\"");} else {  console.log(\""I'm False\"");}1: True, I'm True2: True, I'm False3: False, I'm True4: False, I'm FalseAnswerAnswer: 1In comparison operators, the expression [0] converted to Number([0].valueOf().toString()) which is resolved to false. Whereas [0] just becomes a truthy value without any conversion because there is no comparison operator.19. What is the output of below codeconsole.log([1, 2] + [3, 4]);1: [1,2,3,4]2: [1,2][3,4]3: SyntaxError4: 1,23,4AnswerAnswer: 4The + operator is not meant or defined for arrays. So it converts arrays into strings and concatenates them.⬆ Back to Top20. What is the output of below codeconst numbers = new Set([1, 1, 2, 3, 4]);console.log(numbers);const browser = new Set(\""Firefox\"");console.log(browser);1: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}2: {1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""}3: [1, 2, 3, 4], [\""F\"", \""i\"", \""r\"", \""e\"", \""o\"", \""x\""]4: {1, 1, 2, 3, 4}, {\""F\"", \""i\"", \""r\"", \""e\"", \""f\"", \""o\"", \""x\""}AnswerAnswer: 1Since Set object is a collection of unique values, it won't allow duplicate values in the collection. At the same time, it is case sensitive data structure.⬆ Back to Top21. What is the output of below codeconsole.log(NaN === NaN);1: True2: FalseAnswerAnswer: 2JavaScript follows IEEE 754 spec standards. As per this spec, NaNs are never equal for floating-point numbers.⬆ Back to Top22. What is the output of below codelet numbers = [1, 2, 3, 4, NaN];console.log(numbers.indexOf(NaN));1: 42: NaN3: SyntaxError4: -1AnswerAnswer: 4The indexOf uses strict equality operator(===) internally and NaN === NaN evaluates to false. Since indexOf won't be able to find NaN inside an array, it returns -1 always.But you can use Array.prototype.findIndex method to find out the index of NaN in an array or You can use Array.prototype.includes to check if NaN is present in an array or not.let numbers = [1, 2, 3, 4, NaN];console.log(numbers.findIndex(Number.isNaN)); // 4console.log(numbers.includes(NaN)); // true⬆ Back to Top23. What is the output of below codelet [a, ...b,] = [1, 2, 3, 4, 5];console.log(a, b);1: 1, [2, 3, 4, 5]2: 1, {2, 3, 4, 5}3: SyntaxError4: 1, [2, 3, 4]AnswerAnswer: 3When using rest parameters, trailing commas are not allowed and will throw a SyntaxError.If you remove the trailing comma then it displays 1st answerlet [a, ...b] = [1, 2, 3, 4, 5];console.log(a, b); // 1, [2, 3, 4, 5]⬆ Back to Top25. What is the output of below codeasync function func() {  return 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<rejected>: 10}AnswerAnswer: 1Async functions always return a promise. But even if the return value of an async function is not explicitly a promise, it will be implicitly wrapped in a promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10);}⬆ Back to Top26. What is the output of below codeasync function func() {  await 10;}console.log(func());1: Promise {<fulfilled>: 10}2: 103: SyntaxError4: Promise {<resolved>: undefined}AnswerAnswer: 4The await expression returns value 10 with promise resolution and the code after each await expression can be treated as existing in a .then callback. In this case, there is no return expression at the end of the function. Hence, the default return value of undefined is returned as the resolution of the promise. The above async function is equivalent to below expression,function func() {  return Promise.resolve(10).then(() => undefined);}⬆ Back to Top27. What is the output of below codefunction delay() {  return new Promise(resolve => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function processArray(array) {  array.forEach(item => {    await delayedLog(item);  })}processArray([1, 2, 3, 4]);1: SyntaxError2: 1, 2, 3, 43: 4, 4, 4, 44: 4, 3, 2, 1AnswerAnswer: 1Even though “processArray” is an async function, the anonymous function that we use for forEach is synchronous. If you use await inside a synchronous function then it throws a syntax error.⬆ Back to Top28. What is the output of below codefunction delay() {  return new Promise((resolve) => setTimeout(resolve, 2000));}async function delayedLog(item) {  await delay();  console.log(item);}async function process(array) {  array.forEach(async (item) => {    await delayedLog(item);  });  console.log(\""Process completed!\"");}process([1, 2, 3, 5]);1: 1 2 3 5 and Process completed!2: 5 5 5 5 and Process completed!3: Process completed! and 5 5 5 54: Process completed! and 1 2 3 5AnswerAnswer: 4The forEach method will not wait until all items are finished but it just runs the tasks and goes next. Hence, the last statement is displayed first followed by a sequence of promise resolutions.But you control the array sequence using for..of loop,async function processArray(array) {  for (const item of array) {    await delayedLog(item);  }  console.log(\""Process completed!\"");}⬆ Back to Top29. What is the output of below codevar set = new Set();set.add(\""+0\"").add(\""-0\"").add(NaN).add(undefined).add(NaN);console.log(set);1: Set(4) {\""+0\"", \""-0\"", NaN, undefined}2: Set(3) {\""+0\"", NaN, undefined}3: Set(5) {\""+0\"", \""-0\"", NaN, undefined, NaN}4: Set(4) {\""+0\"", NaN, undefined, NaN}AnswerAnswer: 1Set has few exceptions from equality check,All NaN values are equalBoth +0 and -0 considered as different values⬆ Back to Top30. What is the output of below codeconst sym1 = Symbol(\""one\"");const sym2 = Symbol(\""one\"");const sym3 = Symbol.for(\""two\"");const sym4 = Symbol.for(\""two\"");console.log(sym1 === sym2, sym3 === sym4);1: true, true2: true, false3: false, true4: false, falseAnswerAnswer: 3Symbol follows below conventions,Every symbol value returned from Symbol() is unique irrespective of the optional string.Symbol.for() function creates a symbol in a global symbol registry list. But it doesn't necessarily create a new symbol on every call, it checks first if a symbol with the given key is already present in the registry and returns the symbol if it is found. Otherwise a new symbol created in the registry.Note: The symbol description is just useful for debugging purposes.⬆ Back to Top31. What is the output of below codeconst sym1 = new Symbol(\""one\"");console.log(sym1);1: SyntaxError2: one3: Symbol('one')4: SymbolAnswerAnswer: 1Symbol is a just a standard function and not an object constructor(unlike other primitives new Boolean, new String and new Number). So if you try to call it with the new operator will result in a TypeError⬆ Back to Top32. What is the output of below codelet myNumber = 100;let myString = \""100\"";if (!typeof myNumber === \""string\"") {  console.log(\""It is not a string!\"");} else {  console.log(\""It is a string!\"");}if (!typeof myString === \""number\"") {  console.log(\""It is not a number!\"");} else {  console.log(\""It is a number!\"");}1: SyntaxError2: It is not a string!, It is not a number!3: It is not a string!, It is a number!4: It is a string!, It is a number!AnswerAnswer: 4The return value of typeof myNumber or typeof myString is always a truthy value (either \""number\"" or \""string\""). The ! operator operates on either typeof myNumber or typeof myString, converting them to boolean values. Since the value of both !typeof myNumber and !typeof myString is false, the if condition fails, and control goes to else block.To make the ! operator operate on the equality expression, one needs to add parentheses:if (!(typeof myNumber === \""string\""))Or simply use the inequality operator:if (typeof myNumber !== \""string\"")⬆ Back to Top33. What is the output of below codeconsole.log(  JSON.stringify({ myArray: [\""one\"", undefined, function () {}, Symbol(\""\"")] }));console.log(  JSON.stringify({ [Symbol.for(\""one\"")]: \""one\"" }, [Symbol.for(\""one\"")]));1: {\""myArray\"":['one', undefined, {}, Symbol]}, {}2: {\""myArray\"":['one', null,null,null]}, {}3: {\""myArray\"":['one', null,null,null]}, \""{ [Symbol.for('one')]: 'one' }, [Symbol.for('one')]\""4: {\""myArray\"":['one', undefined, function(){}, Symbol('')]}, {}AnswerAnswer: 2The symbols has below constraints,The undefined, Functions, and Symbols are not valid JSON values. So those values are either omitted (in an object) or changed to null (in an array). Hence, it returns null values for the value array.All Symbol-keyed properties will be completely ignored. Hence it returns an empty object({}).⬆ Back to Top34. What is the output of below codeclass A {  constructor() {    console.log(new.target.name);  }}class B extends A {  constructor() {    super();  }}new A();new B();1: A, A2: A, BAnswerAnswer: 2Using constructors, new.target refers to the constructor (points to the class definition of class which is initialized) that was directly invoked by new. This also applies to the case if the constructor is in a parent class and was delegated from a child constructor.⬆ Back to Top35. What is the output of below codeconst [x, ...y, z] = [1, 2, 3, 4];console.log(x, y, z);1: 1, [2, 3], 42: 1, [2, 3, 4], undefined3: 1, [2], 34: SyntaxErrorAnswerAnswer: 4It throws a syntax error because the rest element should not have a trailing comma. You should always consider using a rest operator as the last element.⬆ Back to Top36. What is the output of below codeconst { a: x = 10, b: y = 20 } = { a: 30 };console.log(x);console.log(y);1: 30, 202: 10, 203: 10, undefined4: 30, undefinedAnswerAnswer: 1The object property follows below rules,The object properties can be retrieved and assigned to a variable with a different nameThe property assigned a default value when the retrieved value is undefined⬆ Back to Top37. What is the output of below codefunction area({ length = 10, width = 20 }) {  console.log(length * width);}area();1: 2002: Error3: undefined4: 0AnswerAnswer: 2If you leave out the right-hand side assignment for the destructuring object, the function will look for at least one argument to be supplied when invoked. Otherwise you will receive an error Error: Cannot read property 'length' of undefined as mentioned above.You can avoid the error with either of the below changes,Pass at least an empty object:function area({ length = 10, width = 20 }) {  console.log(length * width);}area({});Assign default empty object:function area({ length = 10, width = 20 } = {}) {  console.log(length * width);}area();⬆ Back to Top38. What is the output of below codeconst props = [  { id: 1, name: \""John\"" },  { id: 2, name: \""Jack\"" },  { id: 3, name: \""Tom\"" },];const [, , { name }] = props;console.log(name);1: Tom2: Error3: undefined4: JohnAnswerAnswer: 1It is possible to combine Array and Object destructuring. In this case, the third element in the array props accessed first followed by name property in the object.⬆ Back to Top39. What is the output of below codefunction checkType(num = 1) {  console.log(typeof num);}checkType();checkType(undefined);checkType(\""\"");checkType(null);1: number, undefined, string, object2: undefined, undefined, string, object3: number, number, string, object4: number, number, number, numberAnswerAnswer: 3If the function argument is set implicitly(not passing argument) or explicitly to undefined, the value of the argument is the default parameter. Whereas for other falsy values('' or null), the value of the argument is passed as a parameter.Hence, the result of function calls categorized as below,The first two function calls logs number type since the type of default value is numberThe type of '' and null values are string and object type respectively.⬆ Back to Top40. What is the output of below codefunction add(item, items = []) {  items.push(item);  return items;}console.log(add(\""Orange\""));console.log(add(\""Apple\""));1: ['Orange'], ['Orange', 'Apple']2: ['Orange'], ['Apple']AnswerAnswer: 2Since the default argument is evaluated at call time, a new object is created each time the function is called. So in this case, the new array is created and an element pushed to the default empty array.⬆ Back to Top41. What is the output of below codefunction greet(greeting, name, message = greeting + \"" \"" + name) {  console.log([greeting, name, message]);}greet(\""Hello\"", \""John\"");greet(\""Hello\"", \""John\"", \""Good morning!\"");1: SyntaxError2: ['Hello', 'John', 'Hello John'], ['Hello', 'John', 'Good morning!']AnswerAnswer: 2Since parameters defined earlier are available to later default parameters, this code snippet doesn't throw any error.⬆ Back to Top42. What is the output of below codefunction outer(f = inner()) {  function inner() {    return \""Inner\"";  }}outer();1: ReferenceError2: InnerAnswerAnswer: 1The functions and variables declared in the function body cannot be referred from default value parameter initializers. If you still try to access, it throws a run-time ReferenceError(i.e, inner is not defined).⬆ Back to Top43. What is the output of below codefunction myFun(x, y, ...manyMoreArgs) {  console.log(manyMoreArgs);}myFun(1, 2, 3, 4, 5);myFun(1, 2);1: [3, 4, 5], undefined2: SyntaxError3: [3, 4, 5], []4: [3, 4, 5], [undefined]AnswerAnswer: 3The rest parameter is used to hold the remaining parameters of a function and it becomes an empty array if the argument is not provided.⬆ Back to Top44. What is the output of below codeconst obj = { key: \""value\"" };const array = [...obj];console.log(array);1: ['key', 'value']2: TypeError3: []4: ['key']AnswerAnswer: 2Spread syntax can be applied only to iterable objects. By default, Objects are not iterable, but they become iterable when used in an Array, or with iterating functions such as map(), reduce(), and assign(). If you still try to do it, it still throws TypeError: obj is not iterable.⬆ Back to Top45. What is the output of below codefunction* myGenFunc() {  yield 1;  yield 2;  yield 3;}var myGenObj = new myGenFunc();console.log(myGenObj.next().value);1: 12: undefined3: SyntaxError4: TypeErrorAnswerAnswer: 4Generators are not constructible type. But if you still proceed to do, there will be an error saying \""TypeError: myGenFunc is not a constructor\""⬆ Back to Top46. What is the output of below codefunction* yieldAndReturn() {  yield 1;  return 2;  yield 3;}var myGenObj = yieldAndReturn();console.log(myGenObj.next());console.log(myGenObj.next());console.log(myGenObj.next());1: { value: 1, done: false }, { value: 2, done: true }, { value: undefined, done: true }2: { value: 1, done: false }, { value: 2, done: false }, { value: undefined, done: true }3: { value: 1, done: false }, { value: 2, done: true }, { value: 3, done: true }4: { value: 1, done: false }, { value: 2, done: false }, { value: 3, done: true }AnswerAnswer: 1A return statement in a generator function will make the generator finish. If a value is returned, it will be set as the value property of the object and done property to true. When a generator is finished, subsequent next() calls return an object of this form: {value: undefined, done: true}.⬆ Back to Top47. What is the output of below codeconst myGenerator = (function* () {  yield 1;  yield 2;  yield 3;})();for (const value of myGenerator) {  console.log(value);  break;}for (const value of myGenerator) {  console.log(value);}1: 1,2,3 and 1,2,32: 1,2,3 and 4,5,63: 1 and 14: 1AnswerAnswer: 4The generator should not be re-used once the iterator is closed. i.e, Upon exiting a loop(on completion or using break & return), the generator is closed and trying to iterate over it again does not yield any more results. Hence, the second loop doesn't print any value.⬆ Back to Top48. What is the output of below codeconst num = 0o38;console.log(num);1: SyntaxError2: 38AnswerAnswer: 1If you use an invalid number(outside of 0-7 range) in the octal literal, JavaScript will throw a SyntaxError. In ES5, it treats the octal literal as a decimal number.⬆ Back to Top49. What is the output of below codeconst squareObj = new Square(10);console.log(squareObj.area);class Square {  constructor(length) {    this.length = length;  }  get area() {    return this.length * this.length;  }  set area(value) {    this.area = value;  }}1: 1002: ReferenceErrorAnswerAnswer: 2Unlike function declarations, class declarations are not hoisted. i.e, First You need to declare your class and then access it, otherwise it will throw a ReferenceError \""Uncaught ReferenceError: Square is not defined\"".Note: Class expressions also applies to the same hoisting restrictions of class declarations.⬆ Back to Top50. What is the output of below codefunction Person() {}Person.prototype.walk = function () {  return this;};Person.run = function () {  return this;};let user = new Person();let walk = user.walk;console.log(walk());let run = Person.run;console.log(run());1: undefined, undefined2: Person, Person3: SyntaxError4: Window, WindowAnswerAnswer: 4When a regular or prototype method is called without a value for this, the methods return an initial this value if the value is not undefined. Otherwise global window object will be returned. In our case, the initial this value is undefined so both methods return window objects.⬆ Back to Top51. What is the output of below codeclass Vehicle {  constructor(name) {    this.name = name;  }  start() {    console.log(`${this.name} vehicle started`);  }}class Car extends Vehicle {  start() {    console.log(`${this.name} car started`);    super.start();  }}const car = new Car(\""BMW\"");console.log(car.start());1: SyntaxError2: BMW vehicle started, BMW car started3: BMW car started, BMW vehicle started4: BMW car started, BMW car startedAnswerAnswer: 3The super keyword is used to call methods of a superclass. Unlike other languages the super invocation doesn't need to be a first statement. i.e, The statements will be executed in the same order of code.⬆ Back to Top52. What is the output of below codeconst USER = { age: 30 };USER.age = 25;console.log(USER.age);1: 302: 253: Uncaught TypeError4: SyntaxErrorAnswerAnswer: 2Even though we used constant variables, the content of it is an object and the object's contents (e.g properties) can be altered. Hence, the change is going to be valid in this case.⬆ Back to Top53. What is the output of below codeconsole.log(\""🙂\"" === \""🙂\"");1: false2: trueAnswerAnswer: 2Emojis are unicodes and the unicode for smile symbol is \""U+1F642\"". The unicode comparision of same emojies is equivalent to string comparison. Hence, the output is always true.⬆ Back to Top54. What is the output of below code?console.log(typeof typeof typeof true);1: string2: boolean3: NaN4: numberAnswerAnswer: 1The typeof operator on any primitive returns a string value. So even if you apply the chain of typeof operators on the return value, it is always string.⬆ Back to Top55. What is the output of below code?let zero = new Number(0);if (zero) {  console.log(\""If\"");} else {  console.log(\""Else\"");}1: If2: Else3: NaN4: SyntaxErrorAnswerAnswer: 1The type of operator on new Number always returns object. i.e, typeof new Number(0) --> object.Objects are always truthy in if blockHence the above code block always goes to if section.⬆ Back to Top55. What is the output of below code in non strict mode?let msg = \""Good morning!!\"";msg.name = \""John\"";console.log(msg.name);1: \""\""2: Error3: John4: UndefinedAnswerAnswer: 4It returns undefined for non-strict mode and returns Error for strict mode. In non-strict mode, the wrapper object is going to be created and get the mentioned property. But the object get disappeared after accessing the property in next line.⬆ Back to Top56. What is the output of below code?let count = 10;(function innerFunc() {  if (count === 10) {    let count = 11;    console.log(count);  }  console.log(count);})();1: 11, 102: 11, 113: 10, 114: 10, 10AnswerAnswer: 111 and 10 is logged to the console.The innerFunc is a closure which captures the count variable from the outerscope. i.e, 10. But the conditional has another local variable count which overwrites the ourter count variable. So the first console.log displays value 11.Whereas the second console.log logs 10 by capturing the count variable from outerscope.⬆ Back to Top57. What is the output of below code ?1: console.log(true && 'hi');2: console.log(true && 'hi' && 1);3: console.log(true && '' && 0);Answer1: hi2: 13: ''Reason : The operator returns the value of the first falsy operand encountered when evaluating from left to right, or the value of the last operand if they are all truthy.Note: Below these values are consider as falsy value1: 02: ''3: null4: undefined5: NAN⬆ Back to Top58. What is the output of below code ?let arr = [1, 2, 3];let str = \""1,2,3\"";console.log(arr == str);1: false2: Error3: trueAnswerAnswer: 3Arrays have their own implementation of toString method that returns a comma-separated list of elements. So the above code snippet returns true. In order to avoid conversion of array type, we should use === for comparison.⬆ Back to Top59. What is the output of below code?getMessage();var getMessage = () => {  console.log(\""Good morning\"");};1: Good morning2: getMessage is not a function3: getMessage is not defined4: UndefinedAnswerAnswer: 2Hoisting will move variables and functions to be the top of scope. Even though getMessage is an arrow function the above function will considered as a varible due to it's variable declaration or assignment. So the variables will have undefined value in memory phase and throws an error 'getMessage is not a function' at the code execution phase.⬆ Back to Top60. What is the output of below code?let quickPromise = Promise.resolve();quickPromise.then(() => console.log(\""promise finished\""));console.log(\""program finished\""); 1: program finished2: Cannot predict the order3: program finished, promise finished4: promise finished, program finishedAnswerAnswer: 3Even though a promise is resolved immediately, it won't be executed immediately because its .then/catch/finally handlers or callbacks(aka task) are pushed into the queue. Whenever the JavaScript engine becomes free from the current program, it pulls a task from the queue and executes it. This is the reason why last statement is printed first before the log of promise handler.Note: We call the above queue as \""MicroTask Queue\""⬆ Back to Top61. What is the output of below code?console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))console.log('Third line')1: First line, then print a, b, c in a new line, and finally print Third line as next line2: First line, then print a, b, c in a first line, and  print Third line as next line3:  Missing semi-colon error4:  Cannot read properties of undefinedAnswerAnswer: 4When JavaScript encounters a line break without a semicolon, the JavaScript parser will automatically add a semicolon based on a set of rules called Automatic Semicolon Insertion which determines whether line break as end of statement or not to insert semicolon. But it does not assume a semicolon before square brackets [...]. So the first two lines considered as a single statement as below.console.log('First line')['a', 'b', 'c'].forEach((element) => console.log(element))Hence, there will be cannot read properties of undefined error while applying the array square bracket on log function.⬆ Back to Top62. Write a function that returns a random HEX colorSolution 1 (Iterative generation)const HEX_ALPHABET = [\""0\"", \""1\"", \""2\"", \""3\"", \""4\"", \""5\"", \""6\"", \""7\"", \""8\"", \""9\"", \""a\"", \""b\"", \""c\"", \""d\"", \""e\"", \""f\""];const HEX_PREFIX = \""#\"";const HEX_LENGTH = 6;function generateRandomHex() {\tlet randomHex = \""\"";\tfor(let i = 0; i < HEX_LENGTH; i++) {\t\tconst randomIndex = Math.floor(Math.random() * HEX_ALPHABET.length);\t\trandomHex += HEX_ALPHABET[randomIndex];\t}\treturn HEX_PREFIX + randomHex;}Solution 2 (One-liner)const HEX_PREFIX = \""#\"";const HEX_RADIX = 16;const HEX_LENGTH = 6;function generateRandomHex() {\treturn HEX_PREFIX + Math.floor(Math.random() * 0xffffff).toString(HEX_RADIX).padStart(HEX_LENGTH, \""0\"");} ⬆ Back to Top63. What is the output of below code?var of = ['of'];for(var of of of) {  console.log(of);}1:  of2:  SyntaxError: Unexpected token of3:  SyntaxError: Identifier 'of' has already been declared4:  ReferenceError: of is not definedAnswerAnswer: 1In JavaScript, of is not considered as a reserved keyword. So the variable declaration with of is accepted and prints the array value of using for..of loop.But if you use reserved keyword such as in then there will be a syntax error saying SyntaxError: Unexpected token in,var in = ['in'];for(var in in in) {  console.log(in[in]);}⬆ Back to Top64. What is the output of below code?const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort();console.log(numbers);1:  [11, 18, 23, 25, 31, 33, 200]2:  [11, 18, 200, 23, 25, 31, 33]3:  [11, 25, 31, 23, 33, 18, 200]4:  Cannot sort numbersAnswerAnswer: 2By default, the sort method sorts elements alphabetically. This is because elemented converted to strings and strings compared in UTF-16 code units order. Hence, you will see the above numbers not sorted as expected. In order to sort numerically just supply a comparator function which handles numeric sorts.const numbers = [11, 25, 31, 23, 33, 18, 200];numbers.sort((a, b) => a - b);console.log(numbers);Note: Sort() method changes the original array.⬆ Back to Top65. What is the output order of below code?setTimeout(() => {console.log('1')}, 0);Promise.resolve('hello').then(() => console.log('2'));console.log('3');1:  1, 2, 32:  1, 3, 23:  3, 1, 24:  3, 2, 1AnswerAnswer: 4When the JavaScript engine parses the above code, the first two statements are asynchronous which will be executed later and third statement is synchronous statement which will be moved to callstack, executed and prints the number 3 in the console. Next, Promise is native in ES6 and it will be moved to Job queue which has high priority than callback queue in the execution order. At last, since setTimeout is part of WebAPI the callback function moved to callback queue and executed. Hence, you will see number 2 printed first followed by 1.⬆ Back to Top66. What is the output of below code?console.log(name);console.log(message());var name = 'John';(function message() {   console.log('Hello John: Welcome');});1:  John, Hello John: Welcome2:  undefined, Hello John, Welcome3:  Reference error: name is not defined, Reference error: message is not defined4:  undefined, Reference error: message is not definedAnswerAnswer: 4IIFE(Immediately Invoked Function Expression) is just like any other function expression which won't be hoisted. Hence, there will be a reference error for message call.The behavior would be the same with below function expression of message1,console.log(name);console.log(message());var name = 'John';var message = function () {   console.log('Hello John: Welcome');});⬆ Back to Top67. What is the output of below code?message()function message() {  console.log(\""Hello\"");}function message() {  console.log(\""Bye\"");}1:  Reference error: message is not defined2:  Hello3:  Bye4:  Compile time errorAnswerAnswer: 3As part of hoisting, initially JavaScript Engine or compiler will store first function in heap memory but later rewrite or replaces with redefined function content.⬆ Back to Top68. What is the output of below code?var currentCity = \""NewYork\"";var changeCurrentCity = function() {  console.log('Current City:', currentCity);  var currentCity = \""Singapore\"";  console.log('Current City:', currentCity);}changeCurrentCity();1:  NewYork, Singapore2:  NewYork, NewYork3:  undefined, Singapore4:  Singapore, SingaporeAnswerAnswer: 3Due to hositing feature, the variables declared with var will have undefined value in the creation phase so the outer variable currentCity will get same undefined value. But after few lines of code JavaScript engine found a new function call(changeCurrentCity()) to update the current city with var re-declaration. Since each function call will create a new execution context, the same variable will have undefined value before the declaration and new value(Singapore) after the declarion. Hence, the value undefined print first followed by new value Singapore in the execution phase.⬆ Back to Top69. What is the output of below code in an order?function second() {\tvar message;  console.log(message);}function first() {\tvar message=\""first\"";  second();  console.log(message);}var message = \""default\"";first();console.log(message);1:  undefined, first, default2:  default, default, default3:  first, first, default4:  undefined, undefined, undefinedAnswerAnswer: 1Each context(global or functional) has it's own variable environment and the callstack of variables in a LIFO order. So you can see the message variable value from second, first functions in an order followed by global context message variable value at the end.⬆ Back to Top70. What is the output of below code?var expressionOne = function functionOne() {  console.log(\""functionOne\"");}functionOne();1:  functionOne is not defined2:  functionOne3:  console.log(\""functionOne\"")4:  undefinedAnswerAnswer: 1The function call functionOne is not going to be part of scope chain and it has it's own execution context with the enclosed variable environment. i.e, It won't be accessed from global context. Hence, there will be an error while invoking the function as functionOne is not defined.⬆ Back to Top71. What is the output of below code?const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    eatFruit()  }}user.eat();1:  {name: \""John\"", eat: f}, {name: \""John\"", eat: f}2:  Window {...}, Window {...}3:  {name: \""John\"", eat: f}, undefined4:  {name: \""John\"", eat: f}, Window {...}AnswerAnswer: 4this keyword is dynamic scoped but not lexically scoped . In other words, it doesn't matter where this has been written but how it has been invoked really matter. In the above code snippet, the user object invokes eat function so this keyword refers to user object but eatFruit has been invoked by eat function and this will have default Window object.The above pit fall fixed by three ways,In ES6, the arrow function will make this keyword as lexically scoped. Since the surrounding object of this object is user object, the eatFruit function will contain user object for this object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = () => {      console.log(this);    }    eatFruit()  }}user.eat();The next two solutions have been used before ES6 introduced.It is possible create a reference of this into a separate variable and use that new variable inplace of this keyword inside eatFruit function. This is a common practice in jQuery and AngularJS before ES6 introduced.const user = {  name: 'John',  eat() {    console.log(this);    var self = this;    var eatFruit = () => {      console.log(self);    }    eatFruit()  }}user.eat();The eatFruit function can bind explicitly with this keyword where it refers Window object.const user = {  name: 'John',  eat() {    console.log(this);    var eatFruit = function() {      console.log(this);    }    return eatFruit.bind(this)  }}user.eat()();⬆ Back to Top72. What is the output of below code?let message = 'Hello World!';message[0] = 'J';console.log(message)let name = 'John';name = name + ' Smith';console.log(name);1:  Jello World!, John Smith2:  Jello World!, John3:  Hello World!, John Smith4:  Hello World!, JohnAnswerAnswer: 3In JavaScript, primitives are immutable i.e. there is no way to change a primitive value once it gets created. So when you try to update the string's first character, there is no change in the string value and prints the same initial value Hello World!. Whereas in the later example, the concatenated value is re-assigned to the same variable which will result into creation of new memory block with the reference pointing to John Smith value and the old memory block value(John) will be garbage collected.⬆ Back to Top73. What is the output of below code?let user1 = {       name : 'Jacob',      age : 28    };    let user2 = {          name : 'Jacob',      age : 28    };    console.log(user1 === user2);1:  True2:  False3:  Compile time errorAnswerAnswer: 2In JavaScript, the variables such as objects, arrays and functions comes under pass by reference. When you try to compare two objects with same content, it is going to compare memory address or reference of those variables. These variables always create separate memory blocks hence the comparison is always going to return false value.⬆ Back to Top74. What is the output of below code?function greeting() {  setTimeout(function() {    console.log(message);  }, 5000);  const message = \""Hello, Good morning\"";}greeting();1:  Undefined2:  Reference error:3:  Hello, Good morning4:  nullAnswerAnswer: 3The variable message is still treated as closure(since it has been used in inner function) eventhough it has been declared after setTimeout function. The function with in setTimeout function will be sent to WebAPI and the variable declaration executed with in 5 seconds with the assigned value. Hence, the text declared for the variable will be displayed.⬆ Back to Top75. What is the output of below code?const a = new Number(10);const b = 10;console.log(a === b);1:  False2:  TrueAnswerAnswer: 1Eventhough both variables a and b refer a number value, the first declaration is based on constructor function and the type of the variable is going to be object type. Whereas the second declaration is primitive assignment with a number and the type is number type. Hence, the equality operator === will output false value.⬆ Back to Top76. What is the type of below function?function add(a, b) {  console.log(\""The input arguments are: \"", a, b);  return a + b;}1:  Pure function2:  Impure functionAnswerAnswer: 2Eventhough the above function returns the same result for the same arguments(input) that are passed in the function, the console.log() statement causes a function to have side effects because it affects the state of an external code. i.e, the console object's state and depends on it to perform the job. Hence, the above function considered as impure function.⬆ Back to Top77. What is the output of below code?const promiseOne = new Promise((resolve, reject) => setTimeout(resolve, 4000));const promiseTwo = new Promise((resolve, reject) => setTimeout(reject, 4000));Promise.all([promiseOne, promiseTwo]).then(data => console.log(data));1:  [{status: \""fullfilled\"", value: undefined}, {status: \""rejected\"", reason: undefined}]2:  [{status: \""fullfilled\"", value: undefined}, Uncaught(in promise)]3:  Uncaught (in promise)4:  [Uncaught(in promise), Uncaught(in promise)]AnswerAnswer: 3The above promises settled at the same time but one of them resolved and other one rejected. When you use .all method on these promises, the result will be short circuted by throwing an error due to rejection in second promise. But If you use .allSettled method then result of both the promises will be returned irrespective of resolved or rejected promise status without throwing any error.Promise.allSettled([promiseOne, promiseTwo]).then(data => console.log(data)); ⬆ Back to Top78. What is the output of below code?try {  setTimeout(() => {    console.log('try block');    throw new Error(`An exception is thrown`)  }, 1000);} catch(err) {  console.log('Error: ', err);}1:  try block, Error: An exception is thrown2:  Error: An exception is thrown3:  try block, Uncaught Error: Exception is thrown4:  Uncaught Error: Exception is thrownAnswerAnswer: 3If you put setTimeout and setInterval methods inside the try clause and an exception is thrown, the catch clause will not catch any of them. This is because the try...catch statement works synchronously, and the function in the above code is executed asynchronously after a certain period of time. Hence, you will see runtime exception without catching the error. To resolve this issue, you have to put the try...catch block inside the function as below,setTimeout(() => {   try {      console.log('try block');      throw new Error(`An exception is thrown`)   } catch(err) {      console.log('Error: ', err);   }    }, 1000);You can use .catch() function in promises to avoid these issues with asynchronous code. ⬆ Back to Top79. What is the output of below code?let a = 10;if(true){  let a = 20;  console.log(a, \""inside\"");}console.log(a, \""outside\"");1:  20, \""inside\"" and 20, \""outside\""2:  20, \""inside\"" and 10, \""outside\""3:  10, \""inside\"" and 10, \""outside\""4:  10, \""inside\"" and 20, \""outside\""AnswerAnswer: 2The variable \""a\"" declared inside \""if\"" has block scope and does not affect the value of the outer \""a\"" variable. ⬆ Back to Top80. What is the output of below code?let arr = [1,2,3,4,5,-6,7];arr.length = 0;console.log(arr);1:  02:  Undefined3:  null4:  [ ]AnswerAnswer: 4The length of the array 'arr' has been set to 0, so the array becomes empty. ⬆ Back to TopDisclaimerThe questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don't know the answer to all of them ⁠— that is ok!Good luck with your interview 😊"
72,wangxinleo/wechat-public-account-push,https://github.com/wangxinleo/wechat-public-account-push/blob/master/README.md,JavaScript,"wechat-public-account-pushwechat-public-account-push是一个用于微信公众号/微信测试号给用户执行微信推送的脚本，改编自目前小红书/知乎突然火起来的【给女朋友的七夕浪漫，微信自动推送消息】，用Nodejs实现而成。如果这个项目很有意思，帮忙右上角点个 star✨ 支持我们 ❤❤如果有任何需要帮助可以联系wangxin.leo@outlook.com ❤❤>>> 点这里获取更新公告✨重要通知：微信团队于2023-05-04日晚12点下线【自定义颜色】、【emoji表情符号】、【自定义换行】、【尾部/备注字段】。【微信测试号】的推送服务已受到影响，原有的推送模板需要用户自行修改，详见 如何修复因2023-05-04微信推送服务规范整改，导致推送服务异常使用服务号推送不受影响详细功能如下：支持多个收件人设置成不同的测试号模板，专属定制更贴心推送每日天气各类文案集锦支持农历生日提醒每日/明日/每周/每年星座运势大学生课程表前N个值得纪念的日子推送回执自定义出参，模板定制更个性网页自动生成配置插件支持gitee go / github actions 不需要拥有服务器，白嫖actions执行，每天定时发送支持本地化部署每天定时发送支持多推送渠道[目录]1. 如何使用1.1. 第一步：选用一个合适的消息通道1.2. 第二步：完成配置文件，并运行wechat-public-account-push1.2.1 方式一：使用网页工具自动生成Github-Action配置(不准时，排队执行，胜在免费)1.2.2 方式二：使用Github-Action(不准时，排队执行，胜在免费)1.2.3 方式三：使用Gitee-go(定时任务收费，前200分钟免费，非常准时)1.2.4 方式四：下载程序包到本地或服务器运行(需要有自己的服务器，使用系统的定时任务非常准时)1.2.5 方式五：使用云函数运行（需要使用运营商提供的 付费 云函数功能，非常准时)2. 公众号模板参数说明3. config参数说明4. template-config推送模板参数说明5. 常用的推送模板样例6. GitHub/Gitee 如何更改自动执行时间6.1 github action如何更改自动执行时间6.2 gitee go如何更改自动执行时间7. 常见问题8. 版本发布及更新8.1 重新fork8.2 GitHub Fetch Upstream Branch8.3 actions 脚本自动9. 成为开源贡献成员9.1 贡献代码9.2 贡献文档10. 致谢贡献/参与者11. wechat-public-account-push答疑群12. 其他Github 仓库地址：wangxinleo/wechat-public-account-pushGithub镜像仓库地址（国内备用01）：wangxinleo/wechat-public-account-pushGithub镜像仓库地址（国内备用02）：wangxinleo/wechat-public-account-pushGitee国内仓库地址：wangxinleo/wechat-public-account-push注意：本仓库开源的初衷是看不下去营销号用这么一个简单的脚本刻意在网络上肆意要求加群/关注微信公众号才能获取源码的行为本应用仅用于学习和测试，作者本人并不对其负责，请于运行测试完成后自行删除，请勿滥用！所有代码都是开源且透明的，任何人均可查看，程序不会保存或滥用任何用户的个人信息请仔细阅读配置文档，自己对自己的配置负责运行图示：新手教学⭐点击开始学习1. 如何使用wechat-public-account-push 实现自消息推送的原理，是通过调用一系列开放的api实现的, 所以也非常适合初学者学习。要使用 wechat-public-account-push, 我们只需要选择合适的消息通道, 得到相关配置信息进行配置即可1.1. 第一步：选用一个合适的消息通道您可以在以下消息通道中选择一适合自己的消息通道推荐通道iOS 可以无后台推送，推荐使用2022年9月22日 Android 无法正常推送，MiPush 把 pushdeer 应用的推送权限暂停。原因是要求pushDeer审核推送内容。⭐PushDeer  >>> 点击使用其他通道免费版每个接收用户每天允许推送200条消息，付费版每个接收用户每天1000条1分钟内接收5次请求，超出的请求将不再推送。另外对于相同的内容，1小时内限制发送3条。消息推送时显示的是 设备通知，标题需要进入公众号查看消息放置在消息列表，方便随时查看不再是xxxx测试号，而是推送加服务号，更美观此通道可能会被腾讯弃用，请评估风险后再选择⭐pushplus推送加服务号 >>> 点击使用免费版每个接收用户每天允许推送5条消息，付费版每个接收用户每天1000条消息推送时显示的是 设备通知，标题需要进入公众号查看消息放置在消息列表，方便随时查看不再是xxxx测试号，而是方糖服务号，更美观此通道可能会被腾讯弃用，请评估风险后再选择⭐server酱服务号 >>> 点击使用测试号的标题不能修改为自定义的名称，不能修改测试号的头像推送的消息必须要点进订阅号才能收到每次要修改内容必须要自定义模版此通道可能会被腾讯弃用，请评估风险后再选择⭐微信测试号 >>> 点击使用2022年6月20日后创建的应用需要填写可信IP，且可信IP不可公用，因此新应用无法按此配置通道2022年9月23日后可信IP无法直接填写，需要验证企业域名才允许使用，意味着此方式将不再向个人提供服务⭐企业微信应用消息 >>>(已删除)1.2. 第二步：完成配置文件，并运行wechat-public-account-push1.2.1 方式一：（可能仅支持微信测试号）使用网页工具自动生成Github-Action配置(不准时，排队执行，胜在免费)以下为@shuangxunian ShuangxuNian大佬 提供的网页配置插件使用时请详细参考其提供的具体文档感谢 ShuangxuNian大佬 的贡献✨配置自动生成 传送门 >>>❓配置自动生成 教程 >>>❓配置完成后如何手动运行或者更改自动运行时间? 点开链接查看4. 5. >>>1.2.2 方式二：使用Github-Action(不准时，排队执行，胜在免费)世界上最大的同性交友平台(不是)，需要一定的英语基础，编辑的时候请不要使用网页的自动翻译❓Github-Action部署教程 >>>1.2.3 方式三：使用Gitee-go(定时任务收费，前200分钟免费，非常准时)国产代码仓库，和github逻辑基本一致。全中文，对萌新友好。❓Gitee-Go部署教程 >>>1.2.4 方式四：下载程序包到本地或服务器运行(需要有自己的服务器，使用系统的定时任务非常准时)如果是 Nodejs 开发者，直接 Clone 源码，然后 VS 打开后即可直接本地进行运行和调试。对于不是开发者的朋友，可以通过以下教程到本地或任意服务器运行❓本地或在线服务器部署教程 >>>1.2.5 方式五：使用云函数运行（需要使用运营商提供的 付费 云函数功能，非常准时)由 @ZzqiZQute zz 大佬提供代码迁移及教程编辑❓云函数部署教程 >>>2. 公众号模板参数说明以下参数可以被微信公众号的模板消息{{xxx.DATA}}捕获，用来自定义小伙伴们需要的信息。目前可被推送模板获取的字段如下：删除线 为已废除的参数基础类参数详细示例to_name.DATA收件人姓名老婆3date.DATAYYYY-MM-DD 星期d2022-08-26 星期五province.DATA省份广东city.DATA城市惠州天气类参数详细示例weather.DATA天气阵雨转多云min_temperature.DATA最低气温25℃max_temperature.DATA最高气温25℃wind_direction.DATA风向持续东南风wind_scale.DATA风级<3级shidu.DATA湿度50%pm25.DATAPM2.536pm10.DATAPM1.054sunrise.DATA日出时间06:20sunset.DATA日落时间06:20aqi.DATA空气质量指数40ganmao.DATA预防感冒提醒儿童、老年人及心脏、呼吸系统疾病患者人群应减少长时间或高强度户外锻炼notice.DATA天气温馨语雨虽小，注意保暖别感冒节假日参数详细示例holidaytts.DATA下一休息日综合提醒还有3天就周六了，好好工作吧！距离国庆还有18天，早着呢每日N句参数详细示例note_en.DATA金山每日一句-英文Nothing in this world that's worth having comes easy.note_ch.DATA金山每日一句-中文这世界上凡是值得拥有的东西，都不易获得。one_talk.DATA每日一言-内容愿你遍布祖国山河，觉得人生也值得talk_from.DATA每日一言-来源晓良earthy_love_words.DATA土味情话(彩虹屁)我今晚会很忙，忙着跟你过日子moment_copyrighting.DATA朋友圈文案错过太阳就不要再错过月亮了poison_chicken_soup.DATA毒鸡汤我从不以强凌弱，我欺负他之前，真不晓得他比我弱。poetry_content.DATA古诗古文-内容举头望明月，低头思故乡。poetry_title.DATA古诗古文-标题静夜思poetry_author.DATA古诗古文-作者李白poetry_dynasty.DATA古诗古文-朝代唐代星座运势参数详细示例comprehensive_horoscope.DATA综合运势太多了，不示例了，自己调用查看效果love_horoscope.DATA爱情运势太多了，不示例了，自己调用查看效果career_horoscope.DATA事业学业太多了，不示例了，自己调用查看效果wealth_horoscope.DATA财富运势太多了，不示例了，自己调用查看效果healthy_horoscope.DATA健康运势太多了，不示例了，自己调用查看效果计时类参数详细示例love_day.DATA已预置, 但是可以删掉, 在配置中自定义, 见下文2674marry_day.DATA已预置, 但是可以删掉, 在配置中自定义, 见下文965birthday_message.DATA (微信测试号无法使用)生日消息和节日消息距离 宝贝 的生日还有122天，距离 中秋节还有30天course_schedule.DATA (微信测试号无法使用)每日的课表08:00-09:35 高等数学 09:35-10:35 大学语文  10:35-11:35 大学英语{index}替换为要显示的第N-1个用法示例：距离第1近的生日消息和节日消息请填写wx_birthday_0.DATA -> 距离 宝贝 的生日还有122天第2节课请填写wx_course_schedule_1.DATA -> 08:00-09:35 高等数学(请确保在配置文件中设置了正确的天数）参数详细示例wx_birthday_{index}.DATA距离第{index-1}近的生日消息和节日消息距离 宝贝 的生日还有122天wx_course_schedule_{index}.DATA第{index-1}节课08:00-09:35 高等数学天行简单API以下配置需要在天行数据上申请对应的接口，并将APIKEY放置在配置文件的TIAN_API.key字段中参数详细示例tian_api_morning_greeting.DATA点击此处申请接口你可能在一个人面前一文不值，却在另一个人面前是无价之宝。谨记自己的价值所在，这就是人挪活的道理所在。早安！tian_api_evening_greeting.DATA点击此处申请接口所谓的成熟，就是你越长大越能学会一个人适应一切。晚安！tian_api_network_hot.DATA点击此处申请接口1、中国共产党第二十次全国代表大会新闻发言人定于2022年10月15日（星期六）下午在人民大会堂举行新闻发布会。 2、为了能安然过冬，越来越多的欧洲人向中国制造寻求“解决方案”。在浙江义乌国际商贸城，一外贸公司的采购员表示，现在店里上新速度赶不上欧洲客人问货的节奏。  ...天行天气API以下配置需要在天行数据上申请对应的接口，并将APIKEY放置在配置文件的TIAN_API.key字段中点击此处申请接口该接口每次调用独立按次计费，具体计费规则请查阅接口文档{offset}替换为距离今天的天数用法示例：今天的 天气信息请填写tian_api_weather_weather_0.DATA -> 晴转多云明天的 天气信息请填写tian_api_weather_weather_1.DATA -> 多云转晴(请确保在配置文件中设置了正确的天数）参数详细示例tian_api_weather_date_{offset}.DATA日期2020-03-23tian_api_weather_week_{offset}.DATA星期星期一tian_api_weather_weather_{offset}.DATA早晚天气变化晴转多云tian_api_weather_real_{offset}.DATA实时天气18℃tian_api_weather_lowest_{offset}.DATA最低温6℃tian_api_weather_highest_{offset}.DATA最高温22℃tian_api_weather_wind_{offset}.DATA风向东南风tian_api_weather_winddeg_{offset}.DATA风向360°角度121tian_api_weather_windspeed_{offset}.DATA风速，km/h7tian_api_weather_windsc_{offset}.DATA风力1-2级tian_api_weather_sunrise_{offset}.DATA日出时间06:10tian_api_weather_sunset_{offset}.DATA日落时间18:31tian_api_weather_moonrise_{offset}.DATA月升时间06:02tian_api_weather_moondown_{offset}.DATA月落时间17:22tian_api_weather_pcpn_{offset}.DATA降雨量0.0tian_api_weather_pop_{offset}.DATA降雨概率1tian_api_weather_uv_index_{offset}.DATA紫外线强度指数9tian_api_weather_vis_{offset}.DATA能见度，单位：公里9tian_api_weather_humidity_{offset}.DATA相对湿度23tian_api_weather_tips_{offset}.DATA生活指数提示天气暖和，适宜着单层棉麻面料的短套装、T恤衫、薄牛仔衫裤、休闲服、职业套装等春秋过渡装。年老体弱者请适当增减衣服。推送回执(特有, 仅在其他模板发送完成后才能获取)参数详细示例post_time_zone.DATA服务器时区Asia/Shanghaipost_time.DATA服务器执行脚本时间2022-08-31 19:41:57need_post_num.DATA共需推送N人4success_post_num.DATA成功推送N人1fail_post_num.DATA推送失败N人3success_post_ids.DATA推送成功的用户老婆0fail_post_ids.DATA推送失败的用户老婆1,老婆2,老婆3自定义计时及自定义文本插槽小伙伴在只要在CUSTOMIZED_DATE_LIST 和 SLOT_LIST 中按格式填写相应内容微信测试模板即可获取到你配置中设置好的内容了。例如，您可以在配置文件中设置一个 love_day, 然后在【微信模型消息】中就可以用{{love_day.DATA}} 获取到内容了。么么哒！今天是我们在一起的的第{{love_day.DATA}}天爱你！大概的实现原理类似于下图标注的这样：但是有以下情况需要注意，不要占用表中已有的关键字，会发生不可预料的状况噢！3. config参数说明配置文件的详细说明，使用旧配置的小伙伴可以对照此文档增加新的配置❓config参数说明 >>>4. template-config推送模板参数说明配置文件的详细说明，使用旧配置的小伙伴可以对照此文档增加新的配置❓template-config推送模板参数说明 >>>5. 常用的推送模板样例收录一些常用好看的模板消息❓常用的推送模板样例 >>>6. GitHub/Gitee 如何更改自动执行时间6.1 github action如何更改自动执行时间这里的脚本使用的是 github 的 workflow 定时任务, 具体脚本文件放置在:wechat-public-account-push/.github/workflows/weixin-push-on-time.yml这里简单说明一下如何更改自动执行时间目前脚本默认执行时间为 每天的 北京时间上午 07:30如果想要变更脚本定时任务执行时间,可以更改以下代码段on: workflow_dispatch: schedule:  # 每天国际时间2:10 运行, 即北京时间 10:10 运行  - cron: '30 23 * * *'推荐设置: 30 22 * * * 或 30 23 * * * 等冷门时间，拥堵率低定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。或使用https://crontab.guru帮助配置6.2 gitee go如何更改自动执行时间7. 常见问题关于获取accessToken:请求失败invalid appsecret rid xxxxx关于推送失败，报40001- 4000X关于目前仅支持测试号的问题关于定时任务好像没有自动执行（?）Issues（议题）板块可以用来提交Bug和建议；Discussions（讨论）板块可以用来提问和讨论。所以如果你有疑问，请先确认是否可以通过升级到最新版本解决然后搜索文档（特别是配置说明文档和常见问题文档）查看是否已有解决方案如果确认还未解决，可以自己提交 Issue，我会尽快确认并解决。8. 版本发布及更新关于新版本发布后，如何同步最新的内容到自己 Fork 的仓库8.1 重新fork删掉后重新Fork会导致之前配置过的GitHub Secrets和提交的代码更改全部丢掉，只能重新部署。8.2 GitHub Fetch Upstream Branch在自己的项目仓库中选择 \""Sync fork\""点击 \""Update branch\"" 完成可能会遇到 因为冲突需要你们删除你们已经更改的记录如果只是纯粹更改配置，放心大胆的点删除, 然后更新最新代码仓库就好了。如果你更改了源代码进行了部分定制, 请注意备份代码段。8.3 actions 脚本自动以后会考虑加入actions 脚本每周自动更新fork仓库，但是目前精力不足，只能采用上述保守方案建议每个人先看看更新的内容是否是自己需要的再进行更新。也建议把右上角的 Star 点一下，这样有重要更新时就会有邮件推送了。9 成为开源贡献成员9.1 贡献代码如果你有好的想法，欢迎向仓库贡献你的代码，贡献步骤：搜索查看 Issue，确定是否已有人提过同类问题或者有新的想法确认没有同类 Issue 后，自己可新建 Issue，描述问题或建议如果想自己解决，请 Fork 仓库后，在develop 分支进行编码开发，完成后提交 PR 到 develop 分支，并标注解决的 Issue 编号我会尽快进行代码审核，测试成功后会合并入 main 主分支，提前感谢您的贡献。9.2 贡献文档文档部分由于我个人精力有限（写文档比写代码累多了），所以有些地方写的很简略，甚至有遗漏和错别字，不能贡献代码的朋友也欢迎来一起维护文档，欢迎PR 来纠正我，一样都算是对开源做贡献了。10. 致谢贡献/参与者@LordonCN Lordon@ZzqiZQute zz@shuangxunian ShuangxuNian@只会前端的小废物感谢那些默默支持我, 鼓励我继续更新这个小玩具的朋友。感谢所有参与到开发/测试中的朋友们，是大家的帮助让 TA 越来越好！ (*´▽｀)ノノ11. wechat-public-account-push答疑群不管文档写得多详细，还是会有人不会呐！还是建个群答疑吧!群我隐藏在文档里了哼哼，不仔细看文档可找不到加群的地方哦！2022-09-10 算啦还是不隐藏了，你们来尽情问吧。12. 运行注意，在官方文档中有这么一段：To prevent unnecessary workflow runs, scheduled workflows may be disabled automatically. When a public repository is forked, scheduled workflows are disabled by default. In a public repository, scheduled workflows are automatically disabled when no repository activity has occurred in 60 days.也就是说，定时执行的任务需要每隔 60 天激活一次。使用 “import repository” 功能重新导入自己已经fork过的仓库，选为私有后，就不会出现这种情况了。13. 其他时区查询: https://www.zeitverschiebung.net/cn/all-time-zones.html城市数据: https://github.com/baichengzhou/weather.api/blob/master/src/main/resources/citycode-2019-08-23.json"
73,BlackAmda/QueenAmdi,https://github.com/BlackAmda/QueenAmdi/blob/master/README.md,JavaScript,"QUEEN AMDI💃🏻❤️ - A Javascript WhatsApp User BotA WhatsApp based third party application that provide many services with a real-time automated conversational experience.Queen Amdi is an user bot for WhatsApp that allowing you to get done so many tasks. This project mainly focusing on make user's work easy. This project coded with Javascript and Docker. And using Baileys as the WA Web API. Developer or Team members are not responsible for your usage mistakes and not using wisely. Also, you have no authorities do any modifications to this project. Enjoy!🎈Visit our official Queen Amdi 4.0v [Multi-Device] website for deploy instructions» Official WebsiteYou can join our Beta Testing WhatsApp Group by this invite link» Join beta test groupFor heroku deployers: » See heroku deploy instructions» See other deploy methods» Queen Amdi announcement group🐝 Queen Amdi Team - A.N.Tech [ Since 2016 ]Achintha BandaraFounder & Developer[Black Amda]Sasmitha AshinsanaCo-Admin/DeveloperLil LuziUser SupporterKapayaGroup ManagementMr.DinaGraphic DesignerJokaTamahBug TesterZeusGroup ManagementLicenseThis project is protected by the GNU General Public License v3.0.Do not edit copyright messages!DisclaimerWhatsApp name, its variations and logo are registered trademarks on Facebook. We have nothing to do with the registered trademark."
74,bloominstituteoftechnology/DOM-II,https://github.com/bloominstituteoftechnology/DOM-II/blob/main/README.md,JavaScript,"DOM IIProject DescriptionFun Bus wants you to make their site more interactive. They are relying on you to provide 10 unique events to enhance their site. Explore the many events available to you by using the MDN events reference.Git Setup Create a forked copy of this project. Clone your OWN version of the repository. Implement the project on the main branch, committing changes regularly. Push commits: git push origin main.Running the projectThis project uses Webpack and Babel. Inside src/index.html you will notice there is no script tag linking the JavaScript, nor a link tag linking the styles. When the project starts, Webpack transcompiles the LESS into CSS, and injects the JavaScript and the styles into the HTML.Do not move or rename any files in this project. The website's source files live inside the src folder. Do not make changes to any files outside of the src folder, unless it's new dependecies declared in the package.json due to installing NPM libraries (E.G. npm i lodash). Run npm install to download the project's dependencies. Run npm start to launch the website on http://localhost:3000.MVPCreate listeners of 10 types of events Using your index.js file, create event listeners of at least 10 different types. You must Use your creativity to make the Fun Bus site more interactive. For example you could change colors, animate objects, add DOM elements, remove them, etc. Here are some event types you could try to use: mouseover keydown wheel load focus resize scroll select dblclick drag / dropNote: Drag and drop is a bit more advanced than the others. It's not actually a single type of event but several types that need to work together.Use preventDefault Find a usecase for preventDefault. For example, you could prevent a link from navigating when clicked, or to navigate somewhere surprising.Submission Format Submit project using Codegrade, as per the instructions in the learning platform."
75,electron/electron-quick-start,https://github.com/electron/electron-quick-start/blob/main/README.md,JavaScript,"electron-quick-startClone and run for a quick way to see Electron in action.This is a minimal Electron application based on the Quick Start Guide within the Electron documentation.A basic Electron application needs just these files:package.json - Points to the app's main file and lists its details and dependencies.main.js - Starts the app and creates a browser window to render HTML. This is the app's main process.index.html - A web page to render. This is the app's renderer process.preload.js - A content script that runs before the renderer process loads.You can learn more about each of these components in depth within the Tutorial.To UseTo clone and run this repository you'll need Git and Node.js (which comes with npm) installed on your computer. From your command line:# Clone this repositorygit clone https://github.com/electron/electron-quick-start# Go into the repositorycd electron-quick-start# Install dependenciesnpm install# Run the appnpm startNote: If you're using Linux Bash for Windows, see this guide or use node from the command prompt.Resources for Learning Electronelectronjs.org/docs - all of Electron's documentationElectron Fiddle - Electron Fiddle, an app to test small Electron experimentsLicenseCC0 1.0 (Public Domain)"
76,learn-co-curriculum/phase-1-javascript-variables-lab,https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/blob/master/README.md,JavaScript,"Review: Variables LabLearning GoalsPractice using const and let to declare variables in JavaScriptInstructionsIn this lab we'll practice declaring and assigning values to variables. We'llalso go over how to read the test document. Understanding how to read the testscan be a valuable tool in figuring out exactly what you'll need to do tocomplete the lab.TestsWhen we want to run an experiment, we need to develop a hypothesis and we needto test it. In programming, we run tests to verify that programs behave the waywe think they do. Tests help us identify bugs and judge how healthy ourapplications are.We use tests to describe the program's behavior, just as you would in aprofessional coding environment, and we also use them as teaching tools. You arein charge of getting the tests to pass.StructureThe structure of this lab — where its files and folders are located— looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── indexTest.jsAll labs will more or less have the same structure. (And non-lab lessons, forthat matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)Code AlongThis lesson is set up as a code-along, so you'll first need to fork andclone it to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. Verify that your GitHub usernameis showing in the Owner dropdown, then click the Createfork button.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.3. Make sure you're in Development/code/phase-1 (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-1-javascript-variables-lab.git4. The previous command will create a folder in the phase-1 foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-1-javascript-variables-lab$ code .Open up index.js in your code editor; you should see, well, nothing. We'll fixthat soon.Now open up test/indexTest.js. Hey, there's something! What's all of thisstuff doing?Note: The test/indexTest.js has great info that we want to look at, but donot edit this file otherwise you may have extra difficulty passing this lab.A few lines down in the test/indexTest.js file you will see:describe('index.js', function () {  // there's stuff in here, too});describe is a function provided by our test library, Mocha, and it's used tohold our tests. After the word describe is information about our tests. Testsare used as a way to document the behavior of a function to developers. Forexample, the next word describe is followed by the word companyName. Herethe test is telling us that the tests that come afterwards will be aboutcompanyName. Then comes the word it, where you see the following:it('is set as Scuber', function () {  // tests are here});This is telling us that the companyName should be set to Scuber. Finally,filling in the missing part of the it code, we see:it('is set as Scuber', function () {  expect(companyName).to.equal('Scuber');});This example shows that the test expects companyName to equal Scuber. Thatexpect and to.equal are essentially doing the same thing as companyName == 'Scuber'. In other words, expect(companyName).to.equal('Scuber') is runningcode that will have this first test pass if companyName equals Scuber andfail if it does not.Don't worry too much yet if it's hard to understand what is happening inside ofthe test/indexTest.js file. But it's a good idea to open up the file, andgather the information that you can. We will also provide instructions in theREADME.md file that will allow you to complete the lab.Running the TestsStart by installing the test dependencies by running npm install in theterminal, then run npm test to run the tests. You should now see the currentstatus of the tests in the terminal. For the moment, all of the tests fail.Let's figure out how to get one of them passing! (The rest will be up to you.)To get our first test to pass, we can open up our index.js file, and write thefollowing:let companyName = 'Scuber';If you run npm test again, you'll see that our first test is now passing.However, the second test, which is also about companyName, is not yet passing.It's not passing because it expects companyName to be declared using adifferent keyword than the let keyword — it needs a keyword that is used forvariables that can't be changed...Continue to work through the problems below. Keep in mind the general workflowfor a lab:Run npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 1 and 2 often until a test passes.Repeat as needed until all the tests are passing.Working Through the ProblemsIf you open up test/indexTest.js, you will see the tasks in front of you:companyName — Inside the test/indexTest.js file, look at thedescribe function call for the companyName variable. The two it functioncalls inside this describe tell us the features of companyName we need tocreate. To review, in the first it function call, it says that it(companyName) is set as Scuber. In the next line, you can see that the testchecks to make sure this occurs by seeing if companyName equals Scuber. Sothis means that you need to go to your index.js file and declare a variablenamed companyName and set it equal to Scuber.In the second it function call for companyName, it says it is defined as a const. The next line of code tests this. So you need to make sure that youare using the correct type of variable declaration such that attempting toreassign the variable throws an error.mostProfitableNeighborhood and companyCeo — Here we are getting morepractice with declaring variables. Read the tests to see how you need to codethese two variables to get the remaining tests passing.Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theCompleting and Submitting Assignments with CodeGradelesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.ResourcesMDN: LetMDN: Const"
77,mermaid-js/mermaid,https://github.com/mermaid-js/mermaid/blob/develop/README.md,JavaScript,"MermaidGenerate diagrams from markdown-like text.  Live Editor! 📖 Documentation | 🚀 Getting Started | 🌐 CDN | 🙌 Join Us简体中文🏆 Mermaid was nominated and won the JS Open Source Awards (2019) in the category \""The most exciting use of technology\""!!!Thanks to all involved, people committing pull requests, people answering questions! 🙏AboutMermaid is a JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. The main purpose of Mermaid is to help documentation catch up with development.Doc-Rot is a Catch-22 that Mermaid helps to solve.Diagramming and documentation costs precious developer time and gets outdated quickly.But not having diagrams or docs ruins productivity and hurts organizational learning.Mermaid addresses this problem by enabling users to create easily modifiable diagrams. It can also be made part of production scripts (and other pieces of code).Mermaid allows even non-programmers to easily create detailed diagrams through the Mermaid Live Editor.Tutorials has video tutorials.Use Mermaid with your favorite applications, check out the list of Integrations and Usages of Mermaid.You can also use Mermaid within GitHub as well many of your other favorite applications—check out the list of Integrations and Usages of Mermaid.For a more detailed introduction to Mermaid and some of its more basic uses, look to the Beginner's Guide, Usage and Tutorials.In our release process we rely heavily on visual regression tests using applitools. Applitools is a great service which has been easy to use and integrate with our tests.ExamplesThe following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the text syntax.Flowchart [docs - live editor]flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]            flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]                  Sequence diagram [docs - live editor]sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!            sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!                  Gantt chart [docs - live editor]gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d            gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d                  Class diagram [docs - live editor]classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}            classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}                  State diagram [docs - live editor]stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]            stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]                  Pie chart [docs - live editor]pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15            pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15                  Git graph [experimental - live editor]Bar chart (using gantt chart) [docs - live editor]gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5            gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5                  User Journey diagram [docs - live editor]  journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me              journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me                  C4 diagram [docs]C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")            C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")                  ReleaseFor those who have the permission to do so:Update version number in package.json.npm publishThe above command generates files into the dist folder and publishes them to https://www.npmjs.com.Related projectsCommand Line InterfaceLive EditorHTTP ServerContributors   Mermaid is a growing community and is always accepting new contributors. There's a lot of different ways to help out and we're always looking for extra hands! Look at this issue if you want to know where to start helping out.Detailed information about how to contribute can be found in the contribution guideSecurity and safe diagramsFor public sites, it can be precarious to retrieve text from users on the internet, storing that content for presentation in a browser at a later stage. The reason is that the user content can contain embedded malicious scripts that will run when the data is presented. For Mermaid this is a risk, specially as mermaid diagrams contain many characters that are used in html which makes the standard sanitation unusable as it also breaks the diagrams. We still make an effort to sanitize the incoming code and keep refining the process but it is hard to guarantee that there are no loop holes.As an extra level of security for sites with external users we are happy to introduce a new security level in which the diagram is rendered in a sandboxed iframe preventing javascript in the code from being executed. This is a great step forward for better security.Unfortunately you can not have a cake and eat it at the same time which in this case means that some of the interactive functionality gets blocked along with the possible malicious code.Reporting vulnerabilitiesTo report a vulnerability, please e-mail security@mermaid.live with a description of the issue, the steps you took to create the issue, affected versions, and if known, mitigations for the issue.AppreciationA quick note from Knut Sveidqvist:Many thanks to the d3 and dagre-d3 projects for providing the graphical layout and drawing libraries!Thanks also to the js-sequence-diagram project for usage of the grammar for the sequence diagrams. Thanks to Jessica Peter for inspiration and starting point for gantt rendering.Thank you to Tyler Long who has been a collaborator since April 2017.Thank you to the ever-growing list of contributors that brought the project this far!Mermaid was created by Knut Sveidqvist for easier documentation."
78,Dogfalo/materialize,https://github.com/Dogfalo/materialize/blob/v1-dev/README.md,JavaScript,"        MaterializeCSS  Materialize, a CSS Framework based on material design.    -- Browse the docs --                                                      Table of ContentsQuickstartDocumentationSupported BrowsersChangelogTestingContributingCopyright and licenseQuickstart:Read the getting started guide for more information on how to use materialize.Download the latest release of materialize directly from GitHub. (Beta)Clone the repo: git clone https://github.com/Dogfalo/materialize.git (Beta: git clone -b v1-dev https://github.com/Dogfalo/materialize.git)Include the files via cdnjs. More here. (Beta)Install with npm: npm install materialize-css (Beta: npm install materialize-css@next)Install with Bower: bower install materialize (DEPRECATED)Install with Atmosphere: meteor add materialize:materialize (Beta: meteor add materialize:materialize@=1.0.0-beta)DocumentationThe documentation can be found at http://materializecss.com. To run the documentation locally on your machine, you need Node.js installed on your computer.Running documentation locallyRun these commands to set up the documentation:git clone https://github.com/Dogfalo/materializecd materializenpm installThen run grunt monitor to compile the documentation. When it finishes, open a new browser window and navigate to localhost:8000. We use BrowserSync to display the documentation.Documentation for previous releasesPrevious releases and their documentation are available for download.Supported Browsers:Materialize is compatible with:Chrome 35+Firefox 31+Safari 9+OperaEdgeIE 11+ChangelogFor changelogs, check out the Releases section of materialize or the CHANGELOG.md.TestingWe use Jasmine as our testing framework and we're trying to write a robust test suite for our components. If you want to help, here's a starting guide on how to write tests in Jasmine.ContributingCheck out the CONTRIBUTING document in the root of the repository to learn how you can contribute. You can also browse the help-wanted tag in our issue tracker to find things to do.Copyright and licenseCode Copyright 2018 Materialize. Code released under the MIT license."
79,wangxinleo/wechat-public-account-push,https://github.com/wangxinleo/wechat-public-account-push/blob/master/README.md,JavaScript,"wechat-public-account-pushwechat-public-account-push是一个用于微信公众号/微信测试号给用户执行微信推送的脚本，改编自目前小红书/知乎突然火起来的【给女朋友的七夕浪漫，微信自动推送消息】，用Nodejs实现而成。如果这个项目很有意思，帮忙右上角点个 star✨ 支持我们 ❤❤如果有任何需要帮助可以联系wangxin.leo@outlook.com ❤❤>>> 点这里获取更新公告✨重要通知：微信团队于2023-05-04日晚12点下线【自定义颜色】、【emoji表情符号】、【自定义换行】、【尾部/备注字段】。【微信测试号】的推送服务已受到影响，原有的推送模板需要用户自行修改，详见 如何修复因2023-05-04微信推送服务规范整改，导致推送服务异常使用服务号推送不受影响详细功能如下：支持多个收件人设置成不同的测试号模板，专属定制更贴心推送每日天气各类文案集锦支持农历生日提醒每日/明日/每周/每年星座运势大学生课程表前N个值得纪念的日子推送回执自定义出参，模板定制更个性网页自动生成配置插件支持gitee go / github actions 不需要拥有服务器，白嫖actions执行，每天定时发送支持本地化部署每天定时发送支持多推送渠道[目录]1. 如何使用1.1. 第一步：选用一个合适的消息通道1.2. 第二步：完成配置文件，并运行wechat-public-account-push1.2.1 方式一：使用网页工具自动生成Github-Action配置(不准时，排队执行，胜在免费)1.2.2 方式二：使用Github-Action(不准时，排队执行，胜在免费)1.2.3 方式三：使用Gitee-go(定时任务收费，前200分钟免费，非常准时)1.2.4 方式四：下载程序包到本地或服务器运行(需要有自己的服务器，使用系统的定时任务非常准时)1.2.5 方式五：使用云函数运行（需要使用运营商提供的 付费 云函数功能，非常准时)2. 公众号模板参数说明3. config参数说明4. template-config推送模板参数说明5. 常用的推送模板样例6. GitHub/Gitee 如何更改自动执行时间6.1 github action如何更改自动执行时间6.2 gitee go如何更改自动执行时间7. 常见问题8. 版本发布及更新8.1 重新fork8.2 GitHub Fetch Upstream Branch8.3 actions 脚本自动9. 成为开源贡献成员9.1 贡献代码9.2 贡献文档10. 致谢贡献/参与者11. wechat-public-account-push答疑群12. 其他Github 仓库地址：wangxinleo/wechat-public-account-pushGithub镜像仓库地址（国内备用01）：wangxinleo/wechat-public-account-pushGithub镜像仓库地址（国内备用02）：wangxinleo/wechat-public-account-pushGitee国内仓库地址：wangxinleo/wechat-public-account-push注意：本仓库开源的初衷是看不下去营销号用这么一个简单的脚本刻意在网络上肆意要求加群/关注微信公众号才能获取源码的行为本应用仅用于学习和测试，作者本人并不对其负责，请于运行测试完成后自行删除，请勿滥用！所有代码都是开源且透明的，任何人均可查看，程序不会保存或滥用任何用户的个人信息请仔细阅读配置文档，自己对自己的配置负责运行图示：新手教学⭐点击开始学习1. 如何使用wechat-public-account-push 实现自消息推送的原理，是通过调用一系列开放的api实现的, 所以也非常适合初学者学习。要使用 wechat-public-account-push, 我们只需要选择合适的消息通道, 得到相关配置信息进行配置即可1.1. 第一步：选用一个合适的消息通道您可以在以下消息通道中选择一适合自己的消息通道推荐通道iOS 可以无后台推送，推荐使用2022年9月22日 Android 无法正常推送，MiPush 把 pushdeer 应用的推送权限暂停。原因是要求pushDeer审核推送内容。⭐PushDeer  >>> 点击使用其他通道免费版每个接收用户每天允许推送200条消息，付费版每个接收用户每天1000条1分钟内接收5次请求，超出的请求将不再推送。另外对于相同的内容，1小时内限制发送3条。消息推送时显示的是 设备通知，标题需要进入公众号查看消息放置在消息列表，方便随时查看不再是xxxx测试号，而是推送加服务号，更美观此通道可能会被腾讯弃用，请评估风险后再选择⭐pushplus推送加服务号 >>> 点击使用免费版每个接收用户每天允许推送5条消息，付费版每个接收用户每天1000条消息推送时显示的是 设备通知，标题需要进入公众号查看消息放置在消息列表，方便随时查看不再是xxxx测试号，而是方糖服务号，更美观此通道可能会被腾讯弃用，请评估风险后再选择⭐server酱服务号 >>> 点击使用测试号的标题不能修改为自定义的名称，不能修改测试号的头像推送的消息必须要点进订阅号才能收到每次要修改内容必须要自定义模版此通道可能会被腾讯弃用，请评估风险后再选择⭐微信测试号 >>> 点击使用2022年6月20日后创建的应用需要填写可信IP，且可信IP不可公用，因此新应用无法按此配置通道2022年9月23日后可信IP无法直接填写，需要验证企业域名才允许使用，意味着此方式将不再向个人提供服务⭐企业微信应用消息 >>>(已删除)1.2. 第二步：完成配置文件，并运行wechat-public-account-push1.2.1 方式一：（可能仅支持微信测试号）使用网页工具自动生成Github-Action配置(不准时，排队执行，胜在免费)以下为@shuangxunian ShuangxuNian大佬 提供的网页配置插件使用时请详细参考其提供的具体文档感谢 ShuangxuNian大佬 的贡献✨配置自动生成 传送门 >>>❓配置自动生成 教程 >>>❓配置完成后如何手动运行或者更改自动运行时间? 点开链接查看4. 5. >>>1.2.2 方式二：使用Github-Action(不准时，排队执行，胜在免费)世界上最大的同性交友平台(不是)，需要一定的英语基础，编辑的时候请不要使用网页的自动翻译❓Github-Action部署教程 >>>1.2.3 方式三：使用Gitee-go(定时任务收费，前200分钟免费，非常准时)国产代码仓库，和github逻辑基本一致。全中文，对萌新友好。❓Gitee-Go部署教程 >>>1.2.4 方式四：下载程序包到本地或服务器运行(需要有自己的服务器，使用系统的定时任务非常准时)如果是 Nodejs 开发者，直接 Clone 源码，然后 VS 打开后即可直接本地进行运行和调试。对于不是开发者的朋友，可以通过以下教程到本地或任意服务器运行❓本地或在线服务器部署教程 >>>1.2.5 方式五：使用云函数运行（需要使用运营商提供的 付费 云函数功能，非常准时)由 @ZzqiZQute zz 大佬提供代码迁移及教程编辑❓云函数部署教程 >>>2. 公众号模板参数说明以下参数可以被微信公众号的模板消息{{xxx.DATA}}捕获，用来自定义小伙伴们需要的信息。目前可被推送模板获取的字段如下：删除线 为已废除的参数基础类参数详细示例to_name.DATA收件人姓名老婆3date.DATAYYYY-MM-DD 星期d2022-08-26 星期五province.DATA省份广东city.DATA城市惠州天气类参数详细示例weather.DATA天气阵雨转多云min_temperature.DATA最低气温25℃max_temperature.DATA最高气温25℃wind_direction.DATA风向持续东南风wind_scale.DATA风级<3级shidu.DATA湿度50%pm25.DATAPM2.536pm10.DATAPM1.054sunrise.DATA日出时间06:20sunset.DATA日落时间06:20aqi.DATA空气质量指数40ganmao.DATA预防感冒提醒儿童、老年人及心脏、呼吸系统疾病患者人群应减少长时间或高强度户外锻炼notice.DATA天气温馨语雨虽小，注意保暖别感冒节假日参数详细示例holidaytts.DATA下一休息日综合提醒还有3天就周六了，好好工作吧！距离国庆还有18天，早着呢每日N句参数详细示例note_en.DATA金山每日一句-英文Nothing in this world that's worth having comes easy.note_ch.DATA金山每日一句-中文这世界上凡是值得拥有的东西，都不易获得。one_talk.DATA每日一言-内容愿你遍布祖国山河，觉得人生也值得talk_from.DATA每日一言-来源晓良earthy_love_words.DATA土味情话(彩虹屁)我今晚会很忙，忙着跟你过日子moment_copyrighting.DATA朋友圈文案错过太阳就不要再错过月亮了poison_chicken_soup.DATA毒鸡汤我从不以强凌弱，我欺负他之前，真不晓得他比我弱。poetry_content.DATA古诗古文-内容举头望明月，低头思故乡。poetry_title.DATA古诗古文-标题静夜思poetry_author.DATA古诗古文-作者李白poetry_dynasty.DATA古诗古文-朝代唐代星座运势参数详细示例comprehensive_horoscope.DATA综合运势太多了，不示例了，自己调用查看效果love_horoscope.DATA爱情运势太多了，不示例了，自己调用查看效果career_horoscope.DATA事业学业太多了，不示例了，自己调用查看效果wealth_horoscope.DATA财富运势太多了，不示例了，自己调用查看效果healthy_horoscope.DATA健康运势太多了，不示例了，自己调用查看效果计时类参数详细示例love_day.DATA已预置, 但是可以删掉, 在配置中自定义, 见下文2674marry_day.DATA已预置, 但是可以删掉, 在配置中自定义, 见下文965birthday_message.DATA (微信测试号无法使用)生日消息和节日消息距离 宝贝 的生日还有122天，距离 中秋节还有30天course_schedule.DATA (微信测试号无法使用)每日的课表08:00-09:35 高等数学 09:35-10:35 大学语文  10:35-11:35 大学英语{index}替换为要显示的第N-1个用法示例：距离第1近的生日消息和节日消息请填写wx_birthday_0.DATA -> 距离 宝贝 的生日还有122天第2节课请填写wx_course_schedule_1.DATA -> 08:00-09:35 高等数学(请确保在配置文件中设置了正确的天数）参数详细示例wx_birthday_{index}.DATA距离第{index-1}近的生日消息和节日消息距离 宝贝 的生日还有122天wx_course_schedule_{index}.DATA第{index-1}节课08:00-09:35 高等数学天行简单API以下配置需要在天行数据上申请对应的接口，并将APIKEY放置在配置文件的TIAN_API.key字段中参数详细示例tian_api_morning_greeting.DATA点击此处申请接口你可能在一个人面前一文不值，却在另一个人面前是无价之宝。谨记自己的价值所在，这就是人挪活的道理所在。早安！tian_api_evening_greeting.DATA点击此处申请接口所谓的成熟，就是你越长大越能学会一个人适应一切。晚安！tian_api_network_hot.DATA点击此处申请接口1、中国共产党第二十次全国代表大会新闻发言人定于2022年10月15日（星期六）下午在人民大会堂举行新闻发布会。 2、为了能安然过冬，越来越多的欧洲人向中国制造寻求“解决方案”。在浙江义乌国际商贸城，一外贸公司的采购员表示，现在店里上新速度赶不上欧洲客人问货的节奏。  ...天行天气API以下配置需要在天行数据上申请对应的接口，并将APIKEY放置在配置文件的TIAN_API.key字段中点击此处申请接口该接口每次调用独立按次计费，具体计费规则请查阅接口文档{offset}替换为距离今天的天数用法示例：今天的 天气信息请填写tian_api_weather_weather_0.DATA -> 晴转多云明天的 天气信息请填写tian_api_weather_weather_1.DATA -> 多云转晴(请确保在配置文件中设置了正确的天数）参数详细示例tian_api_weather_date_{offset}.DATA日期2020-03-23tian_api_weather_week_{offset}.DATA星期星期一tian_api_weather_weather_{offset}.DATA早晚天气变化晴转多云tian_api_weather_real_{offset}.DATA实时天气18℃tian_api_weather_lowest_{offset}.DATA最低温6℃tian_api_weather_highest_{offset}.DATA最高温22℃tian_api_weather_wind_{offset}.DATA风向东南风tian_api_weather_winddeg_{offset}.DATA风向360°角度121tian_api_weather_windspeed_{offset}.DATA风速，km/h7tian_api_weather_windsc_{offset}.DATA风力1-2级tian_api_weather_sunrise_{offset}.DATA日出时间06:10tian_api_weather_sunset_{offset}.DATA日落时间18:31tian_api_weather_moonrise_{offset}.DATA月升时间06:02tian_api_weather_moondown_{offset}.DATA月落时间17:22tian_api_weather_pcpn_{offset}.DATA降雨量0.0tian_api_weather_pop_{offset}.DATA降雨概率1tian_api_weather_uv_index_{offset}.DATA紫外线强度指数9tian_api_weather_vis_{offset}.DATA能见度，单位：公里9tian_api_weather_humidity_{offset}.DATA相对湿度23tian_api_weather_tips_{offset}.DATA生活指数提示天气暖和，适宜着单层棉麻面料的短套装、T恤衫、薄牛仔衫裤、休闲服、职业套装等春秋过渡装。年老体弱者请适当增减衣服。推送回执(特有, 仅在其他模板发送完成后才能获取)参数详细示例post_time_zone.DATA服务器时区Asia/Shanghaipost_time.DATA服务器执行脚本时间2022-08-31 19:41:57need_post_num.DATA共需推送N人4success_post_num.DATA成功推送N人1fail_post_num.DATA推送失败N人3success_post_ids.DATA推送成功的用户老婆0fail_post_ids.DATA推送失败的用户老婆1,老婆2,老婆3自定义计时及自定义文本插槽小伙伴在只要在CUSTOMIZED_DATE_LIST 和 SLOT_LIST 中按格式填写相应内容微信测试模板即可获取到你配置中设置好的内容了。例如，您可以在配置文件中设置一个 love_day, 然后在【微信模型消息】中就可以用{{love_day.DATA}} 获取到内容了。么么哒！今天是我们在一起的的第{{love_day.DATA}}天爱你！大概的实现原理类似于下图标注的这样：但是有以下情况需要注意，不要占用表中已有的关键字，会发生不可预料的状况噢！3. config参数说明配置文件的详细说明，使用旧配置的小伙伴可以对照此文档增加新的配置❓config参数说明 >>>4. template-config推送模板参数说明配置文件的详细说明，使用旧配置的小伙伴可以对照此文档增加新的配置❓template-config推送模板参数说明 >>>5. 常用的推送模板样例收录一些常用好看的模板消息❓常用的推送模板样例 >>>6. GitHub/Gitee 如何更改自动执行时间6.1 github action如何更改自动执行时间这里的脚本使用的是 github 的 workflow 定时任务, 具体脚本文件放置在:wechat-public-account-push/.github/workflows/weixin-push-on-time.yml这里简单说明一下如何更改自动执行时间目前脚本默认执行时间为 每天的 北京时间上午 07:30如果想要变更脚本定时任务执行时间,可以更改以下代码段on: workflow_dispatch: schedule:  # 每天国际时间2:10 运行, 即北京时间 10:10 运行  - cron: '30 23 * * *'推荐设置: 30 22 * * * 或 30 23 * * * 等冷门时间，拥堵率低定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。定时任务注意尽量避免设置在 utc 0:00, XX:00 这类高拥堵时段。或使用https://crontab.guru帮助配置6.2 gitee go如何更改自动执行时间7. 常见问题关于获取accessToken:请求失败invalid appsecret rid xxxxx关于推送失败，报40001- 4000X关于目前仅支持测试号的问题关于定时任务好像没有自动执行（?）Issues（议题）板块可以用来提交Bug和建议；Discussions（讨论）板块可以用来提问和讨论。所以如果你有疑问，请先确认是否可以通过升级到最新版本解决然后搜索文档（特别是配置说明文档和常见问题文档）查看是否已有解决方案如果确认还未解决，可以自己提交 Issue，我会尽快确认并解决。8. 版本发布及更新关于新版本发布后，如何同步最新的内容到自己 Fork 的仓库8.1 重新fork删掉后重新Fork会导致之前配置过的GitHub Secrets和提交的代码更改全部丢掉，只能重新部署。8.2 GitHub Fetch Upstream Branch在自己的项目仓库中选择 \""Sync fork\""点击 \""Update branch\"" 完成可能会遇到 因为冲突需要你们删除你们已经更改的记录如果只是纯粹更改配置，放心大胆的点删除, 然后更新最新代码仓库就好了。如果你更改了源代码进行了部分定制, 请注意备份代码段。8.3 actions 脚本自动以后会考虑加入actions 脚本每周自动更新fork仓库，但是目前精力不足，只能采用上述保守方案建议每个人先看看更新的内容是否是自己需要的再进行更新。也建议把右上角的 Star 点一下，这样有重要更新时就会有邮件推送了。9 成为开源贡献成员9.1 贡献代码如果你有好的想法，欢迎向仓库贡献你的代码，贡献步骤：搜索查看 Issue，确定是否已有人提过同类问题或者有新的想法确认没有同类 Issue 后，自己可新建 Issue，描述问题或建议如果想自己解决，请 Fork 仓库后，在develop 分支进行编码开发，完成后提交 PR 到 develop 分支，并标注解决的 Issue 编号我会尽快进行代码审核，测试成功后会合并入 main 主分支，提前感谢您的贡献。9.2 贡献文档文档部分由于我个人精力有限（写文档比写代码累多了），所以有些地方写的很简略，甚至有遗漏和错别字，不能贡献代码的朋友也欢迎来一起维护文档，欢迎PR 来纠正我，一样都算是对开源做贡献了。10. 致谢贡献/参与者@LordonCN Lordon@ZzqiZQute zz@shuangxunian ShuangxuNian@只会前端的小废物感谢那些默默支持我, 鼓励我继续更新这个小玩具的朋友。感谢所有参与到开发/测试中的朋友们，是大家的帮助让 TA 越来越好！ (*´▽｀)ノノ11. wechat-public-account-push答疑群不管文档写得多详细，还是会有人不会呐！还是建个群答疑吧!群我隐藏在文档里了哼哼，不仔细看文档可找不到加群的地方哦！2022-09-10 算啦还是不隐藏了，你们来尽情问吧。12. 运行注意，在官方文档中有这么一段：To prevent unnecessary workflow runs, scheduled workflows may be disabled automatically. When a public repository is forked, scheduled workflows are disabled by default. In a public repository, scheduled workflows are automatically disabled when no repository activity has occurred in 60 days.也就是说，定时执行的任务需要每隔 60 天激活一次。使用 “import repository” 功能重新导入自己已经fork过的仓库，选为私有后，就不会出现这种情况了。13. 其他时区查询: https://www.zeitverschiebung.net/cn/all-time-zones.html城市数据: https://github.com/baichengzhou/weather.api/blob/master/src/main/resources/citycode-2019-08-23.json"
80,BlackAmda/QueenAmdi,https://github.com/BlackAmda/QueenAmdi/blob/master/README.md,JavaScript,"QUEEN AMDI💃🏻❤️ - A Javascript WhatsApp User BotA WhatsApp based third party application that provide many services with a real-time automated conversational experience.Queen Amdi is an user bot for WhatsApp that allowing you to get done so many tasks. This project mainly focusing on make user's work easy. This project coded with Javascript and Docker. And using Baileys as the WA Web API. Developer or Team members are not responsible for your usage mistakes and not using wisely. Also, you have no authorities do any modifications to this project. Enjoy!🎈Visit our official Queen Amdi 4.0v [Multi-Device] website for deploy instructions» Official WebsiteYou can join our Beta Testing WhatsApp Group by this invite link» Join beta test groupFor heroku deployers: » See heroku deploy instructions» See other deploy methods» Queen Amdi announcement group🐝 Queen Amdi Team - A.N.Tech [ Since 2016 ]Achintha BandaraFounder & Developer[Black Amda]Sasmitha AshinsanaCo-Admin/DeveloperLil LuziUser SupporterKapayaGroup ManagementMr.DinaGraphic DesignerJokaTamahBug TesterZeusGroup ManagementLicenseThis project is protected by the GNU General Public License v3.0.Do not edit copyright messages!DisclaimerWhatsApp name, its variations and logo are registered trademarks on Facebook. We have nothing to do with the registered trademark."
81,bloominstituteoftechnology/DOM-II,https://github.com/bloominstituteoftechnology/DOM-II/blob/main/README.md,JavaScript,"DOM IIProject DescriptionFun Bus wants you to make their site more interactive. They are relying on you to provide 10 unique events to enhance their site. Explore the many events available to you by using the MDN events reference.Git Setup Create a forked copy of this project. Clone your OWN version of the repository. Implement the project on the main branch, committing changes regularly. Push commits: git push origin main.Running the projectThis project uses Webpack and Babel. Inside src/index.html you will notice there is no script tag linking the JavaScript, nor a link tag linking the styles. When the project starts, Webpack transcompiles the LESS into CSS, and injects the JavaScript and the styles into the HTML.Do not move or rename any files in this project. The website's source files live inside the src folder. Do not make changes to any files outside of the src folder, unless it's new dependecies declared in the package.json due to installing NPM libraries (E.G. npm i lodash). Run npm install to download the project's dependencies. Run npm start to launch the website on http://localhost:3000.MVPCreate listeners of 10 types of events Using your index.js file, create event listeners of at least 10 different types. You must Use your creativity to make the Fun Bus site more interactive. For example you could change colors, animate objects, add DOM elements, remove them, etc. Here are some event types you could try to use: mouseover keydown wheel load focus resize scroll select dblclick drag / dropNote: Drag and drop is a bit more advanced than the others. It's not actually a single type of event but several types that need to work together.Use preventDefault Find a usecase for preventDefault. For example, you could prevent a link from navigating when clicked, or to navigate somewhere surprising.Submission Format Submit project using Codegrade, as per the instructions in the learning platform."
82,learn-co-curriculum/phase-1-javascript-variables-lab,https://github.com/learn-co-curriculum/phase-1-javascript-variables-lab/blob/master/README.md,JavaScript,"Review: Variables LabLearning GoalsPractice using const and let to declare variables in JavaScriptInstructionsIn this lab we'll practice declaring and assigning values to variables. We'llalso go over how to read the test document. Understanding how to read the testscan be a valuable tool in figuring out exactly what you'll need to do tocomplete the lab.TestsWhen we want to run an experiment, we need to develop a hypothesis and we needto test it. In programming, we run tests to verify that programs behave the waywe think they do. Tests help us identify bugs and judge how healthy ourapplications are.We use tests to describe the program's behavior, just as you would in aprofessional coding environment, and we also use them as teaching tools. You arein charge of getting the tests to pass.StructureThe structure of this lab — where its files and folders are located— looks roughly like the following:├── CONTRIBUTING.md├── LICENSE.md├── README.md├── index.js├── node_modules/├── package.json└── test    └── indexTest.jsAll labs will more or less have the same structure. (And non-lab lessons, forthat matter, will still have CONTRIBUTING.md, LICENSE.md, and README.md files.)Code AlongThis lesson is set up as a code-along, so you'll first need to fork andclone it to your local environment.Quick Review:1. Click the Octocat icon in the upper right of this page. This willbring you to GitHub. Click the Fork button. Verify that your GitHub usernameis showing in the Owner dropdown, then click the Createfork button.2. Once your fork is created, click the Code button in GitHub, make sureSSH is selected, and copy the provided git URL info.3. Make sure you're in Development/code/phase-1 (or wherever you'restoring your code for the course) and clone the repo to your local machine withgit clone followed by the git URL you copied.$ git clone git@github.com:your-github-username/phase-1-javascript-variables-lab.git4. The previous command will create a folder in the phase-1 foldercontaining your fork of this lab's repository. cd into the repository that youjust cloned down in the terminal, then run code . to open the files in VisualStudio Code.$ cd phase-1-javascript-variables-lab$ code .Open up index.js in your code editor; you should see, well, nothing. We'll fixthat soon.Now open up test/indexTest.js. Hey, there's something! What's all of thisstuff doing?Note: The test/indexTest.js has great info that we want to look at, but donot edit this file otherwise you may have extra difficulty passing this lab.A few lines down in the test/indexTest.js file you will see:describe('index.js', function () {  // there's stuff in here, too});describe is a function provided by our test library, Mocha, and it's used tohold our tests. After the word describe is information about our tests. Testsare used as a way to document the behavior of a function to developers. Forexample, the next word describe is followed by the word companyName. Herethe test is telling us that the tests that come afterwards will be aboutcompanyName. Then comes the word it, where you see the following:it('is set as Scuber', function () {  // tests are here});This is telling us that the companyName should be set to Scuber. Finally,filling in the missing part of the it code, we see:it('is set as Scuber', function () {  expect(companyName).to.equal('Scuber');});This example shows that the test expects companyName to equal Scuber. Thatexpect and to.equal are essentially doing the same thing as companyName == 'Scuber'. In other words, expect(companyName).to.equal('Scuber') is runningcode that will have this first test pass if companyName equals Scuber andfail if it does not.Don't worry too much yet if it's hard to understand what is happening inside ofthe test/indexTest.js file. But it's a good idea to open up the file, andgather the information that you can. We will also provide instructions in theREADME.md file that will allow you to complete the lab.Running the TestsStart by installing the test dependencies by running npm install in theterminal, then run npm test to run the tests. You should now see the currentstatus of the tests in the terminal. For the moment, all of the tests fail.Let's figure out how to get one of them passing! (The rest will be up to you.)To get our first test to pass, we can open up our index.js file, and write thefollowing:let companyName = 'Scuber';If you run npm test again, you'll see that our first test is now passing.However, the second test, which is also about companyName, is not yet passing.It's not passing because it expects companyName to be declared using adifferent keyword than the let keyword — it needs a keyword that is used forvariables that can't be changed...Continue to work through the problems below. Keep in mind the general workflowfor a lab:Run npm test.Read the errors; vocalize what they're asking you to do.Write code; repeat steps 1 and 2 often until a test passes.Repeat as needed until all the tests are passing.Working Through the ProblemsIf you open up test/indexTest.js, you will see the tasks in front of you:companyName — Inside the test/indexTest.js file, look at thedescribe function call for the companyName variable. The two it functioncalls inside this describe tell us the features of companyName we need tocreate. To review, in the first it function call, it says that it(companyName) is set as Scuber. In the next line, you can see that the testchecks to make sure this occurs by seeing if companyName equals Scuber. Sothis means that you need to go to your index.js file and declare a variablenamed companyName and set it equal to Scuber.In the second it function call for companyName, it says it is defined as a const. The next line of code tests this. So you need to make sure that youare using the correct type of variable declaration such that attempting toreassign the variable throws an error.mostProfitableNeighborhood and companyCeo — Here we are getting morepractice with declaring variables. Read the tests to see how you need to codethese two variables to get the remaining tests passing.Submitting Your Work to CanvasOnce you've got all the tests passing, it's time to push your completed code upto GitHub and submit it to Canvas using CodeGrade. We'll do a quick review ofhow to do that below, but you may want to review the full process in theCompleting and Submitting Assignments with CodeGradelesson. You'll be going through this process for every lab you do in thisprogram!Let's review the process. First, you need to \""stage\"" your changes using the git add command:$ git add index.jsor$ git add .Recall that the . shortcut will stage all files that have changes. In thiscase there's only one so either command will work.Next, you need to \""commit\"" your changes, which basically saves a record of thechanges you've made. Don't forget to use the -m flag and include a commitmessage! Use the message shown below or choose your own:$ git commit -m \""complete lab\""Finally, push your changes up to your GitHub account (your fork of this lab):$ git pushIf you go back to your repo in GitHub and refresh the page, you should now see anew commit with your commit message.The final step is to submit your work to Canvas:Scroll to the bottom of this lesson page in Canvas and click the buttonlabeled \""Load Review: Variables Lab in a new window\"".In the CodeGrade window that opens, click \""Create Submission\"". You should nowsee a list of your repositories.Find the repo for this lab and click Connect.When you get the message that your repo has been connected, click on theembedded link, then the \""AutoTest\"" tab to watch your progress. Once the testshave finished running, you should see the green checkmark in the \""Pass\""column, indicating that you've successfully completed the lab.ResourcesMDN: LetMDN: Const"
83,mermaid-js/mermaid,https://github.com/mermaid-js/mermaid/blob/develop/README.md,JavaScript,"MermaidGenerate diagrams from markdown-like text.  Live Editor! 📖 Documentation | 🚀 Getting Started | 🌐 CDN | 🙌 Join Us简体中文🏆 Mermaid was nominated and won the JS Open Source Awards (2019) in the category \""The most exciting use of technology\""!!!Thanks to all involved, people committing pull requests, people answering questions! 🙏AboutMermaid is a JavaScript-based diagramming and charting tool that uses Markdown-inspired text definitions and a renderer to create and modify complex diagrams. The main purpose of Mermaid is to help documentation catch up with development.Doc-Rot is a Catch-22 that Mermaid helps to solve.Diagramming and documentation costs precious developer time and gets outdated quickly.But not having diagrams or docs ruins productivity and hurts organizational learning.Mermaid addresses this problem by enabling users to create easily modifiable diagrams. It can also be made part of production scripts (and other pieces of code).Mermaid allows even non-programmers to easily create detailed diagrams through the Mermaid Live Editor.Tutorials has video tutorials.Use Mermaid with your favorite applications, check out the list of Integrations and Usages of Mermaid.You can also use Mermaid within GitHub as well many of your other favorite applications—check out the list of Integrations and Usages of Mermaid.For a more detailed introduction to Mermaid and some of its more basic uses, look to the Beginner's Guide, Usage and Tutorials.In our release process we rely heavily on visual regression tests using applitools. Applitools is a great service which has been easy to use and integrate with our tests.ExamplesThe following are some examples of the diagrams, charts and graphs that can be made using Mermaid. Click here to jump into the text syntax.Flowchart [docs - live editor]flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]            flowchart LRA[Hard] -->|Text| B(Round)B --> C{Decision}C -->|One| D[Result 1]C -->|Two| E[Result 2]                  Sequence diagram [docs - live editor]sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!            sequenceDiagramAlice->>John: Hello John, how are you?loop Healthcheck    John->>John: Fight against hypochondriaendNote right of John: Rational thoughts!John-->>Alice: Great!John->>Bob: How about you?Bob-->>John: Jolly good!                  Gantt chart [docs - live editor]gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d            gantt    section Section    Completed :done,    des1, 2014-01-06,2014-01-08    Active        :active,  des2, 2014-01-07, 3d    Parallel 1   :         des3, after des1, 1d    Parallel 2   :         des4, after des1, 1d    Parallel 3   :         des5, after des3, 1d    Parallel 4   :         des6, after des4, 1d                  Class diagram [docs - live editor]classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}            classDiagramClass01 <|-- AveryLongClass : Cool<<Interface>> Class01Class09 --> C2 : Where am I?Class09 --* C3Class09 --|> Class07Class07 : equals()Class07 : Object[] elementDataClass01 : size()Class01 : int chimpClass01 : int gorillaclass Class10 {  <<service>>  int id  size()}namespace Namespace01 {  class Class11  class Class12 {    int id    size()  }}                  State diagram [docs - live editor]stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]            stateDiagram-v2[*] --> StillStill --> [*]Still --> MovingMoving --> StillMoving --> CrashCrash --> [*]                  Pie chart [docs - live editor]pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15            pie\""Dogs\"" : 386\""Cats\"" : 85.9\""Rats\"" : 15                  Git graph [experimental - live editor]Bar chart (using gantt chart) [docs - live editor]gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5            gantt    title Git Issues - days since last update    dateFormat  X    axisFormat %s    section Issue19062    71   : 0, 71    section Issue19401    36   : 0, 36    section Issue193    34   : 0, 34    section Issue7441    9    : 0, 9    section Issue1300    5    : 0, 5                  User Journey diagram [docs - live editor]  journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me              journey    title My working day    section Go to work      Make tea: 5: Me      Go upstairs: 3: Me      Do work: 1: Me, Cat    section Go home      Go downstairs: 5: Me      Sit down: 3: Me                  C4 diagram [docs]C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")            C4Contexttitle System Context diagram for Internet Banking SystemPerson(customerA, \""Banking Customer A\"", \""A customer of the bank, with personal bank accounts.\"")Person(customerB, \""Banking Customer B\"")Person_Ext(customerC, \""Banking Customer C\"")System(SystemAA, \""Internet Banking System\"", \""Allows customers to view information about their bank accounts, and make payments.\"")Person(customerD, \""Banking Customer D\"", \""A customer of the bank, <br/> with personal bank accounts.\"")Enterprise_Boundary(b1, \""BankBoundary\"") {  SystemDb_Ext(SystemE, \""Mainframe Banking System\"", \""Stores all of the core banking information about customers, accounts, transactions, etc.\"")  System_Boundary(b2, \""BankBoundary2\"") {    System(SystemA, \""Banking System A\"")    System(SystemB, \""Banking System B\"", \""A system of the bank, with personal bank accounts.\"")  }  System_Ext(SystemC, \""E-mail system\"", \""The internal Microsoft Exchange e-mail system.\"")  SystemDb(SystemD, \""Banking System D Database\"", \""A system of the bank, with personal bank accounts.\"")  Boundary(b3, \""BankBoundary3\"", \""boundary\"") {    SystemQueue(SystemF, \""Banking System F Queue\"", \""A system of the bank, with personal bank accounts.\"")    SystemQueue_Ext(SystemG, \""Banking System G Queue\"", \""A system of the bank, with personal bank accounts.\"")  }}BiRel(customerA, SystemAA, \""Uses\"")BiRel(SystemAA, SystemE, \""Uses\"")Rel(SystemAA, SystemC, \""Sends e-mails\"", \""SMTP\"")Rel(SystemC, customerA, \""Sends e-mails to\"")                  ReleaseFor those who have the permission to do so:Update version number in package.json.npm publishThe above command generates files into the dist folder and publishes them to https://www.npmjs.com.Related projectsCommand Line InterfaceLive EditorHTTP ServerContributors   Mermaid is a growing community and is always accepting new contributors. There's a lot of different ways to help out and we're always looking for extra hands! Look at this issue if you want to know where to start helping out.Detailed information about how to contribute can be found in the contribution guideSecurity and safe diagramsFor public sites, it can be precarious to retrieve text from users on the internet, storing that content for presentation in a browser at a later stage. The reason is that the user content can contain embedded malicious scripts that will run when the data is presented. For Mermaid this is a risk, specially as mermaid diagrams contain many characters that are used in html which makes the standard sanitation unusable as it also breaks the diagrams. We still make an effort to sanitize the incoming code and keep refining the process but it is hard to guarantee that there are no loop holes.As an extra level of security for sites with external users we are happy to introduce a new security level in which the diagram is rendered in a sandboxed iframe preventing javascript in the code from being executed. This is a great step forward for better security.Unfortunately you can not have a cake and eat it at the same time which in this case means that some of the interactive functionality gets blocked along with the possible malicious code.Reporting vulnerabilitiesTo report a vulnerability, please e-mail security@mermaid.live with a description of the issue, the steps you took to create the issue, affected versions, and if known, mitigations for the issue.AppreciationA quick note from Knut Sveidqvist:Many thanks to the d3 and dagre-d3 projects for providing the graphical layout and drawing libraries!Thanks also to the js-sequence-diagram project for usage of the grammar for the sequence diagrams. Thanks to Jessica Peter for inspiration and starting point for gantt rendering.Thank you to Tyler Long who has been a collaborator since April 2017.Thank you to the ever-growing list of contributors that brought the project this far!Mermaid was created by Knut Sveidqvist for easier documentation."
84,ironhack-labs/lab-javascript-basic-algorithms,https://github.com/ironhack-labs/lab-javascript-basic-algorithms/blob/master/README.md,JavaScript,"LAB | JS Basic AlgorithmsWelcome to your first JavaScript lab at Ironhack!This exercise aims to familiarize you with the primitive data structures in JavaScript, which we have covered in class. Feel free to reference lesson materials, and don't limit yourself; be curious and use Google to explore multiple solutions.     Learning Goals  This exercise allows you to practice and apply the concepts and techniques taught in class.Upon completion of this exercise, you will be able to:Declare variables using const and let keywords and use them to store values.Assign values to variables using assignment operators (= , += , -= , etc.).Use conditional statements (if, else if, else) and logical operators (AND, OR, NOT) to control the flow of the program.Access and compare string characters, substrings and length.Manipulate strings using basic string methods and proper (toUpperCase(), toLowerCase(), etc.).Compare values using the comparison operators (< , > , <= , >= , ===).Use for or while loops to iterate over strings in normal and reverse order.     IntroductionFor this pair-programming activity, we will use a REPL. To make things as simple as possible, we are going to use an in-browser JavaScript REPL that is provided by the browser-based IDE, repl.it.Ready to start?RequirementsFork this repoClone this repoGo to repl.it and create an account (or log in if you have one)Create a new reply by clicking on + Create ReplType this in the Code Editor (left panel)console.log(\""I'm ready!\"");Press run ►If you can see the message in the right side panel, you are really ready!When you are done completely, or at any point after the first iteration, copy your code into the index.js file and follow the steps for submission.SubmissionUpon completion, run the following commands:git add .git commit -m \""done\""git push origin masterCreate a Pull Request so that the TAs can check your work.You should make a PR (Pull Request) when you make any significant change. You shouldn't have to wait until you're completely done with this or any other exercise to make the PR. After you do the first PR, any other time you push the changes (following the previous three steps), your change will appear automatically on the PR and your TAs will be able to check it.InstructionsIteration 1: Names and Input1.1 Create a variable hacker1 with the driver's name. 1.2 Print \""The driver's name is XXXX\"".1.3 Create a variable hacker2 with the navigator's name.1.4 Print \""The navigator's name is YYYY\"".Iteration 2: Conditionals2.1. Depending on which name is longer, print:- The driver has the longest name, it has XX characters. or - It seems that the navigator has the longest name, it has XX characters. or - Wow, you both have equally long names, XX characters!.Iteration 3: Loops3.1 Print the characters of the driver's name, separated by space, and in capital letters, i.e., \""J O H N\"".3.2 Print all the characters of the navigator's name in reverse order, i.e., \""nhoJ\"".3.3 Depending on the lexicographic order of the strings, print: The driver's name goes first. Yo, the navigator goes first, definitely. What?! You both have the same name?Bonus Time!Bonus 1:Go to the lorem ipsum generator website and:Generate 3 paragraphs. Store the text in a new string variable named longText.Make your program count the number of words in the string.Make your program count the number of times the Latin word et appears.Bonus 2:Create a new variable, phraseToCheck, containing some string value. Write a code to check if the value assigned to this variable is a Palindrome. Here are some examples of palindromes:\""A man, a plan, a canal, Panama!\""\""Amor, Roma\""\""race car\""\""stack cats\""\""step on no pets\""\""taco cat\""\""put it up\""\""Was it a car or a cat I saw?\"" and \""No 'x' in Nixon\"".IMPORTANT: If you use Google to help you to find a solution to this iteration, you might run into some advanced solutions that use string or array methods (such as join(), reverse(), etc.). However, we want you to apply your current knowledge and try to come up with a solution by just using the for loop and if-else statements with some break and continue.Happy coding! ❤️Extra ResourcesString - MDNif - MDNwhile - MDNfor - MDNFAQs  I am stuck in the exercise and don't know how to solve the problem or where to start.  If you are stuck in your code and don't know how to solve the problem or where to start, you should take a step back and try to form a clear question about the specific issue you are facing. This will help you narrow down the problem and come up with potential solutions.For example, is it a concept that you don't understand, or are you receiving an error message that you don't know how to fix? It is usually helpful to try to state the problem as clearly as possible, including any error messages you are receiving. This can help you communicate the issue to others and potentially get help from classmates or online resources.Once you have a clear understanding of the problem, you will be able to start working toward the solution.Back to top  How do you find a length of a string in JavaScript?  To find the length of a string, you can use the length property. Here is an example:const str = \""Hello, world!\""\"";console.log(str.length); // 13The length property returns the number of characters in the string, including spaces and special characters.Back to top  How do I loop over a string?  Here is an example of using a for loop to loop over a string:let str = \""ironhack\"";for (let i = 0; i < str.length; i++) {  console.log(str[i]);}This code will iterate over each character in the str string. The loop will run for as many iterations as there are characters in the string.On each iteration, the loop will log the current character to the console.Back to top  How do I check if a substring exists in a given string?  You can use the includes() method to check if a substring exists in a given string.This method returns a boolean value  (true or false) indicating whether the string it is called on includes the substring specified as an argument.Example:let str = \""hello world\"";console.log(str.includes(\""hello\""));  // trueconsole.log(str.includes(\""world\""));  // trueconsole.log(str.includes(\""bye\""));    // false  You can also use the indexOf() method, which returns the index of the first occurrence of the substring within the string, or -1 if the substring is not found.Example:let str = \""hello world\"";console.log(str.indexOf(\""h\""));      // 0console.log(str.indexOf(\""world\""));  // 6console.log(str.indexOf(\""bye\""));    // -1Back to top  How do I convert a string to capital or lowercase letters?  UppercaseTo convert a string to uppercase letters, use the toUpperCase() method. The method toUpperCase() returns a new string with all the characters in uppercase.Example:let str = \""ironhack\"";console.log(str.toUpperCase());  // \""IRONHACK\""  LowercaseTo convert a string to all lowercase letters, you can use the toLowerCase() method. This method returns a new string with all the characters in lowercase.Example:let str = \""IRONHACK\"";console.log(str.toLowerCase());  // \""ironhack\""It's important to note that methods toUpperCase() and toLowerCase() do not modify the original string. They return a new string that has been converted to the desired case.Back to top  How do I reverse a string?  You can use a for loop to iterate over the characters of the string and add them to a new string in reverse order.Example:let str = \""drawer\"";let reversed = \""\"";for (let i = str.length - 1; i >= 0; i--) {  reversed += str[i];}console.log(reversed);  // \""reward\""The above example uses a for loop to iterate over the characters of the str string in reverse order, starting at the last character and ending at the first character. On each iteration, it adds the current character to the reversed string.Back to top  How do I create a multi-line string in JavaScript?  To create a multi-line string in JavaScript, you must use template literals. Template literals are string literals denoted with backticks (`). They allow you to embed expressions inside string values and create strings that span multiple lines.Example:let str = `This is anexample of amulti-line string.`;console.log(str);Back to top  I am unable to push changes to the repository. What should I do?  There are a couple of possible reasons why you may be unable to push changes to a Git repository:You have not committed your changes: Before you can push your changes to the repository, you need to commit them using the git commit command. Make sure you have committed your changes and try pushing again. To do this, run the following terminal commands from the project folder:git add .git commit -m \""Your commit message\""git pushYou do not have permission to push to the repository: If you have cloned the repository directly from the main Ironhack repository without making a Fork first, you do not have write access to the repository.To check which remote repository you have cloned, run the following terminal command from the project folder:git remote -vIf the link shown is the same as the main Ironhack repository, you will need to fork the repository to your GitHub account first and then clone your fork to your local machine to be able to push the changes.Note: You should make a copy of your local code to avoid losing it in the process.Back to top"
85,codeschool-projects/HelloCodeSchoolProject,https://github.com/codeschool-projects/HelloCodeSchoolProject/blob/master/README.md,JavaScript,"Hello Code SchoolThis is a sample project to test out how projects work at Code School. For this project, you'll be creating a basic website using HTML. If you want to deploy it to a real website, we'll even walkthrough how to do that!Getting StartedTo get started with this project, head over to the Hello Code School project on Code School, and begin! It'll walk you through all of the steps below. They're included here in the readme in case you work better locally, or want to try working on this project offline.PrerequisitesIn order to complete this project, you'll need to know the basics of HTML! Aside from that, you'll need a local computer where you can install git, and edit some files. We'll walk you through that part, so if you haven't used Git before -- don't worry. We recommend that you should have already completed Code Schools Front-End Foundations course, or have basic familiarity with HTML. When we say basic familiarity here's what we mean:Know what an HTML tag looks likeKnow some of the most common tags -- title, h1, ul, li.If you know these, you should be all set to jump in and give this project a shot!SetupIn order to get this working, you'll need to have Git installed, and have a GitHub account. If this is your first time setting up Git, I'd recommend checking out Code School's video on How to Setup Git for Code School Projects in 5 Minutes to learn what you need to know.To get started, fork this repository to your account and clone it down locally. If you want, you can also try doing this completely from GitHub!BuildOnce you've forked this repository, go ahead and make the following changes to the index.html file.Add a Page TitleCreate a title element with your Code School account name.Add a Header ElementAdd an h1 saying \""Hello, Code School!\"".Create an Unordered ListCreate a ul element with at least 2 li elements.What Do You Want to Learn?In these li elements, list out what you want to learn.Checking Your WorkOnce you've completed all of the tasks, go ahead and commit those to your fork of this repository and push it up to GitHub. Follow the directions on Hello Code School to submit your project and get feedback from Code School.Running Tests LocallyYou don't need to run and of the tests locally -- they'll all run when you submit your project. If you're an overachiever and want to try running the tests locally, here's what you'll need to do.First off, install node.js locally. Next you'll need to run a few commands from this folder.$ npm install$ npm testIf everything is working, you should see something like this:HelloCodeSchoolProject (answer) $ npm test> hello-codeschool-project@1.0.0 test /Users/adam/code/projects/HelloCodeSchoolProject> mocha test/  Your HTML Page    ✓ should have a different title    ✓ should have a different h1    ✓ should have a ul    ✓ should have at least 2 li elements  4 passing (306ms)Making it PublicOnce all tests are passing, try pushing your master branch up to the gh-pages branch -- this will make your webpage available on the web! Here's a command to do that:$ git push origin master:gh-pagesThis will make your index.html file available at the URL:http://<username>.github.io/HelloCodeSchoolProject/Another AnswerIf you want to checkout one other possible solution to this problem and compare your work, you can checkout the solution branch."
86,rolling-scopes-school/tasks,https://github.com/rolling-scopes-school/tasks/blob/master/README.md,JavaScript,"Курс JS/Frontend-разработкаЭто бесплатный курс по JavaScript / Front-end, проводимый сообществом с 2013 года. В RS School может учиться каждый, независимо от возраста, профессии, места жительства. Новый набор студентов стартует каждые полгода и насчитывает около 6000-7000 человек. Для продуктивного обучения студентам помогают 250+ менторов.Цель курса — получение студентами знаний и опыта, достаточного для трудоустройства на позицию Junior Software Engineer в области JavaScript / Front-end.За период с 1 октября 2020 по 1 июня 2021 только в компанию EPAM Systems трудоустроилось 208 выпускников нашего курса.Больше информации о RS School находится тут: https://docs.rs.school/#/.Продолжительность обучения5-7 месяцев. Для успешного прохождения программы вам потребуется 20-40 часов в неделю.Программа обученияПрограмма обучения находится тут.РегистрацияМы предлагаем два варианта регистрации в зависимости от уровня вашей подготовки.Регистрация на подготовительный курсПодготовительный курс предназначен для тех, кто мало знаком или незнаком с программированием, но хотел бы в дальнейшем учиться на основном курсе JavaScript / Front-end.Программу обучения подготовительного курса можно посмотреть тут.Регистрацию на ближайший запуск можно найти тут: https://rs.school/js-stage0/.Регистрация на основной курс JavaScript / Front-endВнимание! Основной курс требует наличия у студентов базовых знаний:понимание основ HTML и CSS, наличие практических навыков вёрстки;знание основ JavaScript (типы данных, операторы, циклы, условные конструкции, функции);знание структуры данных и их организации (массив, список, стек, очередь, дерево и т.д.);умение реализовать достаточно простой алгоритм на языке программирования JavaScript. Например, сортировку или поиск элементов массива;умение решать задачи уровня 8-7 kyu на сайте https://www.codewars.com/;(желательно) английский язык уровня Pre-intermediate.Программу обучения можно посмотреть тут.Регистрацию на ближайший запуск можно найти тут: https://rs.school/js/.Помощь по проектуЛюбой человек может принять участие в развитии проекта, для этого нужно:сделать копию проекта ( форк );создать:2.1 Issue - если вы просто хотите сообщить о проблеме/предложить улучшение но у вас нет времени/опыта для решения;2.2 Pull request - если вы у вас уже есть готовый вариант улучшения/решения проблемы;подробно описать ( Проблему/Решение ) по шаблону:краткое описание;способ воспроизведения;возможное решение;значимая информация;добавить себя в Assignees;добавить в Assignees:@valerydluski;@natein;получить плюсик в карму;FAQГде можно задать вопрос?Вопросы можно задать в Discord чате: https://discord.gg/8Dv4bAw6Hx.Имеет ли значения город проживания? Можно ли пройти курс полностью онлайн?Город проживания значения не имеет. Все этапы обучения можно пройти онлайн.Что делать до старта обучения?Выполнить задания и тесты подготовительного курса.Пойти на курсы английского языка до получения уровня Pre-Intermediate (Минимум A2)."
87,Dogfalo/materialize,https://github.com/Dogfalo/materialize/blob/v1-dev/README.md,JavaScript,"        MaterializeCSS  Materialize, a CSS Framework based on material design.    -- Browse the docs --                                                      Table of ContentsQuickstartDocumentationSupported BrowsersChangelogTestingContributingCopyright and licenseQuickstart:Read the getting started guide for more information on how to use materialize.Download the latest release of materialize directly from GitHub. (Beta)Clone the repo: git clone https://github.com/Dogfalo/materialize.git (Beta: git clone -b v1-dev https://github.com/Dogfalo/materialize.git)Include the files via cdnjs. More here. (Beta)Install with npm: npm install materialize-css (Beta: npm install materialize-css@next)Install with Bower: bower install materialize (DEPRECATED)Install with Atmosphere: meteor add materialize:materialize (Beta: meteor add materialize:materialize@=1.0.0-beta)DocumentationThe documentation can be found at http://materializecss.com. To run the documentation locally on your machine, you need Node.js installed on your computer.Running documentation locallyRun these commands to set up the documentation:git clone https://github.com/Dogfalo/materializecd materializenpm installThen run grunt monitor to compile the documentation. When it finishes, open a new browser window and navigate to localhost:8000. We use BrowserSync to display the documentation.Documentation for previous releasesPrevious releases and their documentation are available for download.Supported Browsers:Materialize is compatible with:Chrome 35+Firefox 31+Safari 9+OperaEdgeIE 11+ChangelogFor changelogs, check out the Releases section of materialize or the CHANGELOG.md.TestingWe use Jasmine as our testing framework and we're trying to write a robust test suite for our components. If you want to help, here's a starting guide on how to write tests in Jasmine.ContributingCheck out the CONTRIBUTING document in the root of the repository to learn how you can contribute. You can also browse the help-wanted tag in our issue tracker to find things to do.Copyright and licenseCode Copyright 2018 Materialize. Code released under the MIT license."
88,vuejs/vuepress,https://github.com/vuejs/vuepress/blob/master/README.md,JavaScript,"                StatusVuePress is now in maintenance mode. For a next-gen Vue-based SSG built on top of Vue 3 + Vite, check out VitePress.DocumentationCheck out our docs at https://vuepress.vuejs.org/.ShowcaseAwesome VuePressvuepress.tools (By Ahmad Mostafa)ContributionWant to contribute? Check our Contributing Guide and issues for beginners!yarn install # install all dependenciesyarn dev  # serves VuePress' own docs with itselfyarn test # make sure your code change pass the testIf you don't have a local checkout, you can also open VuePress in Gitpod, a free online IDE for GitHub.If you intend to make \""substantial\"" changes to VuePress or its documentation, please checkout VuePress RFCs.If you have a VuePress-related project/component/tool, add it with a pull request to this curated list!ContributorsCreator / Lead  Evan You💻  ULIVZ💻 📖Active Core Team      Billyyyyy3320💻    meteorlxy💻    Ramona💻 📖    Franck Abgrall💻 💬  Core Team EmeritiHere we honor some no-longer-active core team members who have made valuable contributions in the past.      Ben Hong💻 📖 💬    Giraud Florent💻    Sarah Dayan💻 📖    Vinayak Kulkarni🔌 💻 📝    Victoria Bergquist💻 🎨    Nikita Sobolev💻 📖    Fatih Acet💻    Vladimir Pouzanov💻  Code ContributorsThis project exists thanks to all the people who contribute. [Contribute].LicenseMIT"
